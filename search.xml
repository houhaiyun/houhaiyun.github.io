<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>置顶  Docker文章目录</title>
      <link href="/2018/09/21/Docker-Catalog/"/>
      <url>/2018/09/21/Docker-Catalog/</url>
      <content type="html"><![CDATA[<h3 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h3><p><strong>关于实战篇</strong>：主来来自于个人学习以及工作中所用到的知识。</p><a id="more"></a><h4 id="一、IaaS-PaaS-SaaS的区别"><a href="#一、IaaS-PaaS-SaaS的区别" class="headerlink" title="一、IaaS, PaaS, SaaS的区别"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/IaaS-PaaS-SaaS/"><strong>一、IaaS, PaaS, SaaS的区别</strong></a></center></h4><h4 id="二、Docker简介"><a href="#二、Docker简介" class="headerlink" title="二、Docker简介"></a><center><a href="https://www.ihaiyun.cc/2017/12/23/Docker-Jianjie/"><strong>二、Docker简介</strong></a></center></h4><h4 id="三、为什么要用Docker？"><a href="#三、为什么要用Docker？" class="headerlink" title="三、为什么要用Docker？"></a><center><a href="https://www.ihaiyun.cc/2017/12/23/Docker-Why-Use/"><strong>三、为什么要用Docker？</strong></a></center></h4><h4 id="四、Docker安装"><a href="#四、Docker安装" class="headerlink" title="四、Docker安装"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-Install/"><strong>四、Docker安装</strong></a></center></h4><h4 id="五、Docker镜像管理及容器管理"><a href="#五、Docker镜像管理及容器管理" class="headerlink" title="五、Docker镜像管理及容器管理"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-manage-1/"><strong>五、Docker镜像管理及容器管理</strong></a></center></h4><h4 id="六、通过commit方式制作Docker镜像"><a href="#六、通过commit方式制作Docker镜像" class="headerlink" title="六、通过commit方式制作Docker镜像"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-commit-image/"><strong>六、通过commit方式制作Docker镜像</strong></a></center></h4><h4 id="七、Docker数据卷"><a href="#七、Docker数据卷" class="headerlink" title="七、Docker数据卷"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-volume/"><strong>七、Docker数据卷</strong></a></center></h4><h4 id="八、Docker网络管理"><a href="#八、Docker网络管理" class="headerlink" title="八、Docker网络管理**"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-network/">八、Docker网络管理**</a></center></h4><h4 id="九、Dockerfile编写"><a href="#九、Dockerfile编写" class="headerlink" title="九、Dockerfile编写"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-dockerfile/"><strong>九、Dockerfile编写</strong></a></center></h4><h4 id="十、Docker构建私有仓库"><a href="#十、Docker构建私有仓库" class="headerlink" title="十、Docker构建私有仓库"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-repertory/"><strong>十、Docker构建私有仓库</strong></a></center></h4><h4 id="十一、使用vmware-harbor构建镜像仓库"><a href="#十一、使用vmware-harbor构建镜像仓库" class="headerlink" title="十一、使用vmware harbor构建镜像仓库"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-harbor/"><strong>十一、使用vmware harbor构建镜像仓库</strong></a></center></h4><h3 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h3><p><strong>关于原理篇</strong>：大多数文章都摘抄于《Docker 容器与云》(第二版)。非常感谢浙江大学SEL实验室写出如此优秀的书籍。</p><h4 id="十二、namespace资源隔离"><a href="#十二、namespace资源隔离" class="headerlink" title="十二、namespace资源隔离"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-namespace/"><strong>十二、namespace资源隔离</strong></a></center></h4><h4 id="十三、cgroups资源限制"><a href="#十三、cgroups资源限制" class="headerlink" title="十三、cgroups资源限制"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-cgroups/"><strong>十三、cgroups资源限制</strong></a></center></h4><h4 id="十四、Docker架构概览"><a href="#十四、Docker架构概览" class="headerlink" title="十四、Docker架构概览"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-arch/"><strong>十四、Docker架构概览</strong></a></center></h4><h4 id="十五、client-和-daemon"><a href="#十五、client-和-daemon" class="headerlink" title="十五、client 和 daemon"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-client-daemon/"><strong>十五、client 和 daemon</strong></a></center></h4><h4 id="十六、libcontainer"><a href="#十六、libcontainer" class="headerlink" title="十六、libcontainer"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-libcontainer/"><strong>十六、libcontainer</strong></a></center></h4><h4 id="十七、Docker镜像管理"><a href="#十七、Docker镜像管理" class="headerlink" title="十七、Docker镜像管理"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-manage-image/"><strong>十七、Docker镜像管理</strong></a></center></h4><h4 id="十七、Docker存储管理"><a href="#十七、Docker存储管理" class="headerlink" title="十七、Docker存储管理"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-storage-manage/"><strong>十七、Docker存储管理</strong></a></center></h4><h4 id="十八、Docker数据卷"><a href="#十八、Docker数据卷" class="headerlink" title="十八、Docker数据卷"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-volume-2/"><strong>十八、Docker数据卷</strong></a></center></h4><h4 id="十九、Docker网络管理"><a href="#十九、Docker网络管理" class="headerlink" title="十九、Docker网络管理"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-network-2/"><strong>十九、Docker网络管理</strong></a></center></h4><h4 id="二十、Dcoekr与容器安全"><a href="#二十、Dcoekr与容器安全" class="headerlink" title="二十、Dcoekr与容器安全"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-security/"><strong>二十、Dcoekr与容器安全</strong></a></center></h4><h4 id="二十一、Docker高级网络实践"><a href="#二十一、Docker高级网络实践" class="headerlink" title="二十一、Docker高级网络实践"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-network-3/"><strong>二十一、Docker高级网络实践</strong></a></center></h4><h4 id="二十二、Dockerfile的使用"><a href="#二十二、Dockerfile的使用" class="headerlink" title="二十二、Dockerfile的使用"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-dockerfile-use/"><strong>二十二、Dockerfile的使用</strong></a></center></h4><h4 id="二十三、Dockerfile-实践心得"><a href="#二十三、Dockerfile-实践心得" class="headerlink" title="二十三、Dockerfile 实践心得"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-dockerfile-1/"><strong>二十三、Dockerfile 实践心得</strong></a></center></h4><h4 id="二十四、Docker容器的监控手段"><a href="#二十四、Docker容器的监控手段" class="headerlink" title="二十四、Docker容器的监控手段"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-monitor/"><strong>二十四、Docker容器的监控手段</strong></a></center></h4><h4 id="二十五、容器化思维"><a href="#二十五、容器化思维" class="headerlink" title="二十五、容器化思维"></a><center><a href="https://www.ihaiyun.cc/2018/07/21/Docker-container/"><strong>二十五、容器化思维</strong></a></center></h4>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker 文章目录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CDN技术原理</title>
      <link href="/2018/07/23/CDN/"/>
      <url>/2018/07/23/CDN/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Internet的告诉发展，给人们的工作和生活带来了极大的便利，对Internet的服务品质和访问速度要求越来越高，虽然带宽不断增加，用户数量也在不断增加，受Web服务器的负载和传输距离等因素的影响，响应速度慢还是经常抱怨和困扰。解决方案就是在网络传输上利用缓存技术使得Web服务数据流能就近访问，是优化网络数据传输非常有效的技术，从而获得高速的体验和品质保证。</p><a id="more"></a><p>网络缓存技术，其目的就是减少网络中冗余数据的重复传输，使之最小化，将广域传输转为本地或就近访问。互联网上传递的内容，大部分为重复的Web/FTP数据，Cache服务器即应用Caching技术的网络设备，可大大优化数据链路性能，消除数据峰值访问造成的节点设备阻塞。Cache服务器具有缓存功能，所以大部分网页对象（Web page object），如html、htm、php等页面文件，git、tif、png、bmp等图片文件，以及其他格式的文件，在有效期（TTL）内，对于重复的访问，不必从原始网站重新传送文件实体，只需要通过简单的认证（Freshness Validation）传送几十字节的Header，即可将本地的副本直接传送给访问者。由于缓存服务器通常部署在靠近用户端，所有能够获得近似局域网的相应速度，并有效减少广域带宽的消耗。据统计，Internet上超过80%的用户重复访问20%的信息资源，给缓存技术的应用提供了先觉的条件。缓存服务器的体系结构与Web服务器不同，缓存服务器能比Web服务器获得更高的性能，缓存服务器不仅能够提高相应速度，节约带宽，对于加速Web服务器，有效减轻源服务器的负荷是非常有效的。</p><p>高速缓存服务器（Cache Server）是软硬件高度集成的专业功能服务器，主要做高速缓存加速服务，一般部署在网络边缘。根据加速对象不同，分为客户端加速和服务器加速，客户端加速Cache部署在网路出口处，把常访问的内容缓存在本地，提高相应速度和节约带宽；服务器加速，Cache部署在服务器前端，作为Web服务器的前置机，提高Web服务器的性能，加速访问速度。如果堕胎Cache加速服务器且分布在不同地域，需要通过有效地机制管理Cache网络，引导用户就近访问，全局负载均衡流量，这就是CDN内容传输网络的基本思想。</p><h3 id="什么是CDN？"><a href="#什么是CDN？" class="headerlink" title="什么是CDN？"></a>什么是CDN？</h3><p>CDN的全称是Content Delivery Network，即内容分发发网络。其目的是通过在现有的Internet中增加一层新的网路架构，将网站的内容发布到最接近用户的网络“边缘”，使用户可以就近取得所需的内容，解决Internet网络拥塞状况，提高用户访问网站的相应速度。从技术上全面解决由于网络带宽小、用户访问量大、网点分布不均等原因，解决用户访问网站的相应速度慢的根本原因。</p><p>狭义地将，内容分发网络（CDN）是一种新型的网络构建方式，它是为能在传统的IP网发布宽带丰富媒体而特别优化的网络覆盖层；而从广义的角度，CDN代表了一种基于质量与秩序的网络服务模式。简单地说，内容发布网（CDN）是一个经策略性部署的整体系统，包括分布式存储、负载均衡、网络请求的重定向和内容管理4个要件，而内容管理和全局的网络流量管理（Traffic Management）是CDN的核心所在。通过用户就近性和服务器负载的判断，CDN确保内容以一种极为高效的方式为用户的请求提供服务。总的来说，内容服务基于缓存服务器，也称作代理缓存（Surrogate），它位于网络的边缘，距用户仅有“一跳”（Single Hop）之遥。同时，代理缓存是内容提供商源服务器（通常位于CDN服务提供商的数据中心）的一个透明镜像。这样的架构使得CDN服务提供商能够代表他们的客户，即内容供应商，想最终用户提供尽可能好的体验而这些用户是不能容忍请求响应时间有任何延迟的。据统计，采用CDN技术，能处理真个网站页面的70% ~ 95%的内容访问量，减轻服务器的压力，提升了网站的性能和可扩展性。</p><p>与目前现有的内容发布模式相比较，CDN强调了网络在内容罚不中的重要性。通过引入主动的内容管理层和全局负载均衡，CDN从根本上区别于传统的内容发布模式。在传统的内容发布模式中，内容的发布由ICP的应用服务器完成，而网络只表现为一个透明的数据传输通道，这种透明的表现在网络的质量保证仅仅停留在数据包的层面，而不能根据内容对象的不同区分服务质量。此外，由于IP网的“尽力而为”的特性使得其质量保证是依靠在用户和应用服务器之间端到端地提供充分的、远大于实际所需的带宽通量来实现的。在这样的内容发布模式下，不仅大量宝贵的骨干带宽被占用，同时ICP的应用服务器的负载也变得非常重，而且不可预计。当发生一些热点事件和出现浪涌流量时，会产生局部热点效应，从而使应用服务器过载退出服务。这种基于中心的应用服务器的内容发布模式的另外一个缺陷在于个性化服务的缺失和对带宽服务价值链的扭曲，内容提供商承担了他们不该干也干不好的内容发布服务。</p><p>纵观整个带宽服务的价值链，聂荣提供商和用户位于整个加制链的两端，中间依靠网络服务提供商将其串接起来。随着互联网工业的成熟和商业模式的变革，在这条价值链上的角涉越来越多也越来越细分。比如内容/应用的运营商、托管服务提供商、骨干网络服务提供商、接入服务提供商等等。在这一条价值链上的每一个角色都要分工核作、各司其职才能为客户提供良好的服务，从而带来多赢的局面。从内容与网络的结合模式上看，内容的发布已经走过了ICP的内容（应用）服务器和IDC这两个阶段。IDC的热潮也催生了托管服务提供商这一角色。但是，IDC并不能解决内容的有效发布问题。内容位于网络的中心并不能解决骨干带宽的占用和建立IP网络上的流量秩序。因此将内容推到网络的边缘，为用户提供就近性的边缘服务，从而保证服务的质量和整个网络上的访问秩序就成了一种显而易见的选择。而这就是内容发布网（CDN）服务模式。CDN的建立解决了困扰内容运营商的内容“集中与分散”的两难选择。无疑对于构建良好的互联网加制链是有价值的也是不可或缺的。</p><h3 id="CDN新应用和客户"><a href="#CDN新应用和客户" class="headerlink" title="CDN新应用和客户"></a>CDN新应用和客户</h3><p>目前的CDN服务主要应用于证券、金融保险、ISP、ICP、网上交易、门户网站、大中型公司、网络教学等领域。另外在行业专网、互联网中都可以用到，甚至可以对局域网进行网络优化。利用CDN，这些网站无需投资昂贵的各类服务器、建立分站点，特别是流媒体信息的广泛应用、远程教学课件等消耗带宽资源多的媒体信息，应用CDN网络，把内容复制到网络的最边缘，使内容请求点和交付点之间的距离缩至最小，从而促进Web站点性能的提高，具有重要的意义。CDN网络的建设主要有企业建设的CDN网络，为企业服务；IDC的CDN网络，主要服务于IDC和增值服务；网络运营商主建的CDn网络，主要提供内容推送服务；CDN网络服务商，专门建设的CDN用于做服务，用户通过与CDN机构进行合作，CDN负责信息传递工作，保证信息正常传输，维护传送网络，而网站只需要内容维护，不再需要考虑流量问题。</p><p>CDN能够为网络的快速、安全、稳定、可扩展等方面提供保障。</p><p>IDC建立CDN网络，IDC运营商一般需要有分部各地的多个IDC中心，服务对象是托管在IDC中心的客户，利用现有的网络资源，投资较少，容易建设。例如某IDC全国有10个机房，加入IDC的CDN网络，托管在一个节点的Web服务器，相当于有了10个镜像服务器，就近供客户访问。带宽城域网，域内网络速度很快，出城带宽一般会瓶颈，为了体现局域网的高速体验，解决方案就是将Internet网上内容高速缓存到本地，将Cache部署在城域网各POP点上，这样形成高效有序的网络，用户仅一跳就能访问大部分的内容，这也是一种加速所有网站CDN的应用。</p><h3 id="CDN的工作原理"><a href="#CDN的工作原理" class="headerlink" title="CDN的工作原理"></a>CDN的工作原理</h3><p>在描述CDN的实现原理，让我们先看传统的未加缓存服务的访问过程，以便了解CDN缓存访问方式与未加缓存访问方式的差别：</p><center><img src="https://houhaiyun.github.io/img/images/CDN-1.jpg" title="传统的未加缓存服务的访问过程"></center><p>由上图可见，用户访问未使用CDN缓存网站的过程为：</p><ol><li>用户向浏览器提供要访问的域名；</li><li>浏览器调用域名解析函数库对域名进行解析，以得到此域名对应的IP地址；</li><li>浏览器使用所得到得IP地址，域名得服务主机发出数据访问请求；</li><li>浏览器根据域名主机返回的数据显示网页的内容。</li></ol><p>通过以上四个步骤，浏览器完成从用户处接收用户要访问的域名到从域名服务主机获取数据的整个过程。CDN网络是在用户和服务器之间增加Cache层，如何将用户的请求引导到Cache上获得源服务器的数据，主要是通过接管DNS实现，下面让我们看看访问使用CDN缓存后的网站的过程：</p><center><img src="https://houhaiyun.github.io/img/images/CDN-2.jpg" title="使用CDN后缓存服务的访问过程"></center><p>通过上图，我们可以了解到，使用了CDN缓存后的网站的访问过程变为：</p><ol><li>用户向浏览器提供要访问的域名；</li><li>浏览器调用域名解析库对其域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录，为了得到实际的IP地址，浏览器需要再次对获得的CNAME域名进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析，如根据地理位置信息解析对应的IP地址，使得用户能就近访问；</li><li>此次解析得到的CDN缓存服务器的IP地址，浏览器在得到实际的IP地址以后，向缓存服务器发出访问请求；</li><li>缓存服务器根据提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求；</li><li>缓存服务器从实际IP地址得到内容以后，一方面在本地进行保存，以备以后使用；二方面把获取的数据返回给客户端，完成数据服务过程；</li><li><p>通过以上的分析我们可以得到，为了实现既要对普通用户透明（即加入缓存以后用户客户端无需进行任何设置，直接使用被加速网站原有的域名访问即可），又要在为指定的网站提供加速服务的同时降低对ICP的影响，只要修改整个访问过程中的域名解析部分以实现透明的加速服务，下面是CDN网络实现的具体操作过程。</p></li><li><p>作为ICP，只要把域名解释权交给CDN运营商，其他方面不需要进行任何的修改；操作时，ICP修改自己的域名解析记录，一般用cname方式指向CDN网络Cache服务器的地址。</p></li><li>作为CDN运营商，首先需要为ICP的域名提供公开的解析，为了实现sorlit，一般是把ICP的域名解释结果指向同一个CNAME记录；</li><li>当需要进行sorlist时，CDN运营商可以利用DNS对CNAME指向的域名解析过程进行特殊处理，是DNS服务器在接收到客户端请求时可以根据客户端的IP地址，返回相同域名的不同IP地址；</li><li>由于从cname获得的IP地址，并且带有hostname信息，请求到达Cache之后，Cache必须知道源服务器的IP地址，所以在CDN运营商内部维护一个内部的DNS服务器，用于解释用户所访问的域名的真实IP地址；</li><li>在维护内部DNS服务器时，还需要维护一台授权服务器，控制哪些域名可以进行缓存，而哪些又不进行缓存，以免发生开发代理的情况。</li></ol><h3 id="CDN的技术手段"><a href="#CDN的技术手段" class="headerlink" title="CDN的技术手段"></a>CDN的技术手段</h3><p>实现CDN的主要技术手段时高速缓存、镜像服务器。可工作于DNS解析或HTTP重定向两种方式，通过Cache服务器，或异地的镜像站点完成内容的传送与同步更新。DNS方式用户位置判断准确率大于85%，HTTP方式准确率为99%以上；一般情况，各Cache服务器集群的用户访问流入流量与CAche服务器到原始网站取内容的数据量之比在2：1到3：1之间，即分担50%到70%的到原始网站重复访问的数据量（主要是图片，流媒体文件等内容）；对于镜像，除数据同步的流量，其余均在本地完成，不访问原始服务器。</p><p>镜像站点（Mirror Site）服务器是我们经常看到的，它让内容直截了当地进行分布，适用于静态和准动态的数据同步。但是购买和维护新服务器的费用较高，另外还必须在各个地区设置镜像服务器，配备专业技术人员进行管理与维护。大型网站在随时更新各地服务器的同时，对带宽的需求也会显著增加，因此一般的互联网公司不会建立太多的镜像服务器。</p><p>高速缓存手段的成本低，适用于静态内容。Internet的统计声明，超过80%的用户经常访问的是20%的网站的内容，在这个规律下，缓存服务器可以处理大部分客户的静态请求，而原始的WWW服务器只需处理20%左右的非缓存请求的和动态请求，于是大大加快了客户请求的响应时间，并降低了原始WWW服务器的负载。根据美国IDC公司的调查，作为CDN的一项重要指标-缓存的市场正在以每年近100%的速度增长，全球的营业额在2004年将达到45亿美元。网络流媒体的发展还将刺激这个市场。</p><h3 id="CDN的网络架构"><a href="#CDN的网络架构" class="headerlink" title="CDN的网络架构"></a>CDN的网络架构</h3><p>CDN的网络架构主要由两大部分，分为中心和边缘两部分，中心指CDN网关中心和DNS重定向解析中心，负责全局负载均衡，设备系统安装在管理中心机房，边缘主要指异地节点，CDN分发的载体，主要由Cache和负载均衡器等组成。</p><p>当用户访问加入CDN服务的网站时，域名解析请求将最终交给全局负载均衡DNS进行处理。全局负载均衡DNS通过一组预先定义好的策略，将当时最接近用户的节点地址提供给用户，使用户能够得到快速的服务。同时，他还与分布在世界各地的所有CDN节点保持通信，搜集各节点的通信状态，确保不讲用户的请求分配到不可用的CDN节点上，实际上是通过DNS做全局负载。</p><p>对于普通的Internet用户来讲，每个CDN节点就相当于一个放置在它周围的WEB。通过全局负载均衡DNS的控制，用户的请求被透明地指向离他最近的节点，节点中的CDN服务器会像网站的原始服务器一样，响应用户的请求。由于它离用户更近，因而响应时间必然更快。</p><p>每个CDN节点由两部分组成：负载均衡设备和高速缓存服务器</p><p>负载均衡设备负责每个节点中各个Cache的负载均衡，保证节点的工作效率；同时，负载均衡设备还负责手机节点与周围环境的信息，保持与全局负载DNS的通信，实现整个系统的负载均衡。</p><p>高速缓存服务器（Cache）负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。</p><p>CDN的管理系统是整个系统能够正常运转的保证。它不仅能够对系统中的各个子系统和设备进行实时监控，对各种故障产生响应的警告，还可以实时检测到系统中总的流量和各节点的流量，并保存在系统的数据库中，是网管人员能够方便地进行进一步分析。通过完善的网管系统，用户可以对系统配置进行修改。</p><p>理论上，最简单的CDN网络有一个负责全局负载均衡的DNS和各节点一台Cache，即可运行。DNS支持根据用户源IP地址解析不同的IP，实现就近访问。为了保证高可用性等需要监视各节点的流量、健康状况的。一个节点的单台Cache承载数量不够时，才需要多台Cache，多条Cache同时工作，才需要负载均衡器，使Cache群协同工作。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><strong>本博客转自：</strong><a href="https://kb.cnblogs.com/page/121664/" target="_blank" rel="noopener">博客园：CDN技术原理</a></p>]]></content>
      
      <categories>
          
          <category> CDN </category>
          
          <category> CDN技术原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>容器化思维</title>
      <link href="/2018/07/21/Docker-container/"/>
      <url>/2018/07/21/Docker-container/</url>
      <content type="html"><![CDATA[<h3 id="容器化思维"><a href="#容器化思维" class="headerlink" title="容器化思维"></a>容器化思维</h3><a id="more"></a><p>一些人将Docker视为轻量级虚拟机技术，如果你是混迹IT圈、经验十足的老手，也许会提出如下问题：如果需要进入容器调试，该怎么办？sshd要怎么配置？容器里是否应该默认存在一个公钥文件？应该如何备份容器ii？看来如果真把Docker当成虚拟机用，仍然很难。</p><p>要正确使用Docker，就要建立起容器化思维。从技术家督理解容器化思维，就是要意识到容器的本质是一个进程以及运行该进程所需要的各种依赖。当有了容器化思维，再来看前面这些问题，就能明白从哪里入手了。比如，当理解了容器实际上是一个进程，那么我们就不需要去备份一个容器了，而是应该把需要备份的数据放在容器外挂的volume里或者数据库里。本节将会通过“SHH服务器的替代方案”和“Docker内应用日志管理方案”这两个问题，来举例说明如何用容器化思维解决一些日常运维中的问题。</p><h3 id="SSH服务器的替代方案"><a href="#SSH服务器的替代方案" class="headerlink" title="SSH服务器的替代方案"></a>SSH服务器的替代方案</h3><p>略。。。</p><h3 id="Docker内应用日志管理方案"><a href="#Docker内应用日志管理方案" class="headerlink" title="Docker内应用日志管理方案"></a>Docker内应用日志管理方案</h3><p>当前Docker对运行在它内部应用的日志管理较薄弱，每个运行在容器内应用的日志输出统一保存在宿主机的/var/log目录下，文件夹以容器ID命令。当前Docker仅将应用的stout和stderr两个日志输出通过通道重定向到/var/log下。Docker以JSON消息记录每一行日志，这将导致文件增长过快，从而超过主机磁盘限额。此外，日志没有自动切分功能，docker logs命令返回的日志记录也过于冗长。</p><p>目前处理Docker日志的主流方案，按照日志处理工具安装的位置主要分为3种。</p><ul><li>在容器内收集。处理正在运行的应用程序外，每个容器设置一个日志收集进程。这种方案需要定制Docker镜像，典型代表为baseimages-docker项目，它使用runit（ <a href="http://smarden.org/runit/）连同syslog提供了这方面的日志收集方案示例" target="_blank" rel="noopener">http://smarden.org/runit/）连同syslog提供了这方面的日志收集方案示例</a></li><li>在容器外收集。在宿主机上运行一个单独收集日志的代理，收集所有容器的日志。容器有一个从宿主机挂载的volume卷，它们把日志记录在 挂在卷中，由代理进程接收。当然，也可以使用代理直接处理存储在/var/log目录下的容器日志，该方案的典型代表为Fluentd项目（<a href="https://github.com/fluent/fluentd）" target="_blank" rel="noopener">https://github.com/fluent/fluentd）</a></li><li>在专用容器中收集。这是直接在宿主机上运行代理收集日志的变种方案。该收集代理同样运行在一个容器中，并且该容器的卷使用docker run的volumes-from选项被绑定给所有应用程序容器。这种方案的实现细节可以参考<a href="https://www.ihaiyun.cc/2018/06/28/ELK/">https://www.ihaiyun.cc/2018/06/28/ELK/</a></li></ul><p>由此可见，目前Docker的日志处理方案虽然并不完善，但灵活多样。如果与docker ps等命令结合使用，还可以获得与容器日志相对应的应用状态信息。</p><h3 id="容器化思维及更多"><a href="#容器化思维及更多" class="headerlink" title="容器化思维及更多"></a>容器化思维及更多</h3><p>我们在前面讲到，从技术角度理解容器化思维就是要意识到容器的本质是一个进程以及运行该进程所需要的各种依赖。但如果我们不止步于“从技术角度理解容器化思维”，而是把容器化思维扩展到“如何更好地使用容器”这一层面，那么容器化思维所包含的概念和实践方法就有很多了。其中，读者接触的比较多的应该就是微服务了。</p><p>所谓微服务有如下三大特性。</p><ul><li>彼此独立：微服务模式下的每一个组成部分，都是一个独立的服务，有一套完整的运行机制以及标准化的对外接口。不依赖于其他部分就能正常运转，同时可以探测其他组成部分的存在。</li><li>原子化：微服务应该是不可再分的原子化服务。如果一个服务还能继续划分为几个更小的服务，那便不能成为微服务，而更像是由多个微服务组成的“微系统”。</li><li>组合和重构：微服务的最大特点就在于它能快速地组合和重构，彼此组合成一个胸痛。系统里由所有的实体再逻辑上是等价的，因此它的结构相对于简单和松散，具有极强的可扩展性和鲁棒性。</li></ul><p>谈到容器经常会谈起微服务，这是因为容器技术轻量级的特性和“构建一次，到处运行”的特性降低了微服务型应用的额外开销（overhead），提升了微服务式的应用开发流程效率，使得微服务的开发模式成为可能。而与之相关的可以涵盖再容器化思维内的理念还包括DevOps、持续集成和持续交付（CICD）以及不可变基础设施（immutable infrastructure）。这些理念都可以单独成书了，所以我们就不在本书过多讨论，感兴趣的读者可以充分利用搜索引擎。</p><p>总之，我们在使用Docker时需要关注容器本身，时刻提醒自己我是在使用容器，从而享受它带来的种种便利，如快速的应用分发能力、高效的操作及反应能力、弹性灵活的部署能力以及低廉的部署成本；同时我们也要学习和解决围绕容器的各类实践问题，如网络、存储、监控、资源控制、配置管理、安全等。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> 容器化思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dockerfile 实践心得</title>
      <link href="/2018/07/21/Docker-dockerfile-1/"/>
      <url>/2018/07/21/Docker-dockerfile-1/</url>
      <content type="html"><![CDATA[<h3 id="Dockerfile-实践心得"><a href="#Dockerfile-实践心得" class="headerlink" title="Dockerfile 实践心得"></a>Dockerfile 实践心得</h3><a id="more"></a><ol><li>使用标签<ul><li>给镜像打上标签，易读的镜像标签可以帮助了解镜像的功能，如 docker build -t=”ruby:2.0-onbuild”</li></ul></li><li>谨慎选择基础镜像<ul><li>选择基础镜像时，尽量选择当前官方镜像库中的镜像。不同镜像的大小不同，目前Linux镜像大小有如下关系：busybox &lt; debian &lt; centos &lt; ubuntu</li><li>同时在构建自己的 Dcoekr 镜像时，只安装和更新必须使用的包。此外，相比 Ubuntu 镜像，更推荐使用 Debian 镜像，因为它非常轻量级（目前其大小事在 100MB以下），并且仍然是一个完整的发布版本</li></ul></li><li>充分利用缓存<ul><li>Docker daemon 会顺序执行 Dockerfile 中的指令，而且一旦缓存失效，后续命令将不能使用缓存。为了有效地利用缓存，需要保证指令的连续性，尽量将所有 Dockerfile 文件中的相同部分都放在前面，而将不同的部分放在后面。</li></ul></li><li>正确使用ADD与COPY指令<ul><li>尽管ADD与COPY用法和作用很相近，但COPY仍是首选。COPY相对于ADD而言，功能简单够用。COPY仅提供本地文件向容器的基本复制功能。ADD有额外的一些功能，比如支持复制本地压缩包（复制到容器中会自动解压）和URL远程资源。因此，ADD比较符合逻辑的使用方式是 ADD roots.tar.gz /。</li><li>尽量使用docker volume共享文件，而不是使用ADD或COPY指令添加文件到镜像中。</li></ul></li><li>RUN指令<ul><li>不要在一行中单独使用指令 RUN apt-get update。当软件源更新后，这样做会引起缓存问题，导致 RUN apt-get install 指令运行失败。所以，RUN apt-get update &amp;&amp; apt-get install -y package-har package-foo package-baz</li><li>避免使用指令 RUN apt-get upgrade 和 RUN apt-get dist-upgrade。因为在一个无特权的容器中，一些必要的包会更新失败。如果需要更新一个包（如foo），直接使用指令 RUN apt-get install -y foo</li><li>在Docker 的核心概念中，提交镜像使廉价的，镜像之间有层级关系，像一棵树。不要害怕镜像的层数过多，我们在任意层创建一个容器。因此，不要将所有的命令卸载一个 RUN 指令中。RUN 指令分层符合 Docker 的核心概念，这很像源码控制。</li></ul></li><li><p>CMD 和 ENTRYPOINT指令</p><ul><li>CMD 和 ENTRYPOINT 指令指定了容器运行的默认命令，推荐二者结合使用。使用exec格式的 ENTRYPOINT 指令设置固定的默认命令和参数，然后使用 CMD 指令设置可变的参数。</li></ul></li><li><p>不要在 Dockerfile 中做端口映射</p><ul><li>Docker 的两个核心概念使可重复性和可移植性，镜像应该可以在任何主机上运行多次。使用 Dockerfile的 EXPOSE 指令，虽然可以将容器端口映射到主机端口上，但会破坏 Docker 的可移植性，且这样的镜像在一台主机上只能启动一个容器。所以端口映射应在docker run命令中用 -p 参数指定。</li></ul></li><li>使用Dockerfile共享Docker镜像</li></ol><p>若要共享镜像，只需共享Dockerfile文件即可。共享Dcokerfile文件按具有以下优点。</p><pre><code>Dockerfile 文件可以加入版本控制，这样可以追踪文件的变化和回滚错误。通过 Dockerfile 文件，可以清楚镜像构建的过程使用 Dockerfile 文件构建的镜像具有确定性。</code></pre>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Dockerfile 实践心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker容器的监控手段</title>
      <link href="/2018/07/21/Docker-monitor/"/>
      <url>/2018/07/21/Docker-monitor/</url>
      <content type="html"><![CDATA[<h3 id="Docker容器监控维度"><a href="#Docker容器监控维度" class="headerlink" title="Docker容器监控维度"></a>Docker容器监控维度</h3><p>对于Docker容器，需要进行全面的监控和检测，以便及时了解Docker容器的运行情况即资源使用情况，为运维编排解决决策支持。下面将从Docker容器所在的主机、启动容器的镜像基础及容器本身这3个维度来总结Docker容器监控中所涉及的可用的监控指标。</p><a id="more"></a><h4 id="1-主机维度"><a href="#1-主机维度" class="headerlink" title="1. 主机维度"></a>1. 主机维度</h4><p>对于Docker的容器监控，主要以容器级别的监控指标为主。这里先介绍一些Docker主机级别的监控指标，通过这些指标可以从整体上了解一下主机上容器运行情况。我们可以监控主机的以下相关信息。</p><ul><li>主机的CPU情况和使用量</li><li>主机的内存情况和使用量</li><li>主机上的本地镜像情况</li><li>主机上的容器运行情况</li></ul><h4 id="2-镜像维度"><a href="#2-镜像维度" class="headerlink" title="2. 镜像维度"></a>2. 镜像维度</h4><p>作为容器的基础，还需要对主机上的镜像信息进行监控。镜像的相关信息一般为静态信息，可以反映出主机上用于构建容器的镜像的基础情况，以便从底层来掌握和优化主机上的容器。我们可以监控镜像的以下相关信息：</p><ul><li>镜像的基本信息</li><li>镜像与容器的对应关系</li><li>镜像构建的历史消息（层级的依赖信息）</li></ul><p>镜像的基本信息可以包括镜像的总数量、ID、名称、版本、大小等。</p><h4 id="3-容器维度"><a href="#3-容器维度" class="headerlink" title="3. 容器维度"></a>3. 容器维度</h4><p>在主机上运行的容器是监控的重中之重。作为应用的直接载体，使用者需要对容器的各类信息进行实时监控，以保证应用的正常运行。Docker在底层使用了linux内核提供的资源机制——namespace和cgroups，以此来支持容器的运行。通过这些机制，我们可以很方便地获取容器的各项监控指标。</p><ul><li>容器的基本信息</li><li>容器的运行状态</li><li>容器的用量信息</li></ul><p>容器的基本信息包括容器的总数量、ID、名称、镜像、启动命令、端口等信息。容器监控时可以依据容器的运行状态，即运行中、暂停、停止及异常退出，来统计各状态的容器的数量，并实时反馈各个容器的运行状态。容器的用量信息则是用户最关心的，也是监控中最为复杂的部分，他可以统计容器的CPU使用率、内存使用率、块设备I/O使用量、网络使用情况等资源的使用情况。这一部分监控数据大多数都来源于Cgroup下面的限制文件。</p><h3 id="容器监控命令"><a href="#容器监控命令" class="headerlink" title="容器监控命令"></a>容器监控命令</h3><p>Docker为用户提供了功能强大的命令行工具，可以让用户完成丰富的功能。同时，Docker为开发人员提供了标准化的API，通过调用这些API可以让开发人员定制自己的应用服务。</p><p>在Docker的监控中，namespace和cgroups的使用是至关重要的。接下来根据Docker所提供的命令行工具，针对其中与监控有关的命令行进行解读。</p><h4 id="1-docker-ps命令"><a href="#1-docker-ps命令" class="headerlink" title="1. docker ps命令"></a>1. docker ps命令</h4><p>用户通过docker ps命令，可以查看当前主机上的容器信息，包括容器ID、镜像名、容器启动执行命令、创建时间、状态、端口信息和容器名。该命令默认只累出当前正在运行的容器的信息，用户可以通过使用-a参数来列出包括已经停止的所有容器的信息。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">bb772b28a961        busybox             &quot;sh&quot;                3 seconds ago       Up 3 seconds                                    con3</span><br><span class="line">6de82becaa65        busybox             &quot;sh&quot;                18 hours ago        Exited (137) 16 hours ago                       con2</span><br><span class="line">80c26aff31f8        busybox             &quot;sh&quot;                18 hours ago        Exited (137) 16 hours ago                       con1</span><br></pre></td></tr></table></figure><p>一般情况下，docker ps命令用于查找容器的ID，以便用户查看特定容器的具体信息，后续的其他容器监控信息查看命令将普遍用到它。</p><h4 id="2-docker-images命令"><a href="#2-docker-images命令" class="headerlink" title="2. docker images命令"></a>2. docker images命令</h4><p>用户通过使用docker iamges命令，可以查看当前主机上的镜像信息，包括镜像所属的库、标签、ID、创建时间和实际大小。该命令默认只会累出所有顶层镜像的信息，但用户可以通过-a参数来查看所有中间层的镜像的信息。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker images </span><br><span class="line"></span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/ubuntu                trusty              971bb384a50a        3 days ago          188 MB</span><br><span class="line">docker.io/ubuntu                latest              74f8760a2a8b        3 days ago          82.4 MB</span><br><span class="line">docker.io/busybox               latest              22c2dd5ee85d        3 days ago          1.16 MB</span><br></pre></td></tr></table></figure><h4 id="3-docker-stats命令"><a href="#3-docker-stats命令" class="headerlink" title="3. docker stats命令"></a>3. docker stats命令</h4><p>docker stats命令是Docker 1.5版本中最新提供的命令，专门用于容器状态信息的统计，同时它还有配套的API（get /containers/(id)/stats），可供开发人员调用。使用该命令，用户可以实时监控启动中的容器的运行情况，包括CPU、内存、块设备I/O和网络I/O，这些信息都会定期刷新以显示最新的运行情况。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker stats con1 con2 con3</span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT    MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">con1                0.00%               56 KiB / 7.624 GiB   0.00%               0 B / 0 B           0 B / 0 B           1</span><br><span class="line">con2                0.00%               52 KiB / 7.624 GiB   0.00%               0 B / 0 B           0 B / 0 B           1</span><br><span class="line">con3                0.00%               56 KiB / 7.624 GiB   0.00%               0 B / 0 B           1.09 MB / 0 B       1</span><br></pre></td></tr></table></figure><blockquote><p>注意：docker stats命令目前只有在选用libcontainer作为执行驱动时才可以使用。</p></blockquote><p>docker stats命令显示的容器的资源使用情况有限，通过使用stats API可以查看更多详细信息。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo -e &quot;GET /containers/con1/stats HTTP/1.1\r\n\ &quot; | nc -U /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>开发者可以使用stats API将容器的运行状态信息传递到自己构建的应用中，以实现容器的系统监控。</p><h4 id="4-docker-inspect命令"><a href="#4-docker-inspect命令" class="headerlink" title="4. docker inspect命令"></a>4. docker inspect命令</h4><p>用户通过使用docker inspect命令，可以查看镜像或容器底层详细信息，以此来了解镜像或容器的完整构建信息，包括基础配置、主机配置、网络设置、状态信息等。同时，如果需要查看其特定信息，可以同故宫-f参数来设定输出格式。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker inspect -f &#123;&#123;.NetworkSettings.IPAddress&#125;&#125; con1</span><br></pre></td></tr></table></figure><h4 id="5-docker-top命令"><a href="#5-docker-top命令" class="headerlink" title="5. docker top命令"></a>5. docker top命令</h4><p>用户通过使用docker top命令，可以查看正在运行的容器中的进程的运行情况。该命令可以使用户在没有通过/bin/bash终端与容器进行交互时，帮助用户查看容器内的进程信息，包括进程号、父进程号、命令等。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker top con1</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                2721                2704                0                   11:44               pts/2               00:00:00            sh</span><br></pre></td></tr></table></figure><h4 id="6-docker-port命令"><a href="#6-docker-port命令" class="headerlink" title="6. docker port命令"></a>6. docker port命令</h4><p>docker port命令的用途较为特定化，用于查看容器与主机之间的端口映射关系信息。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># docker ps</span><br><span class="line">CONTAINER ID        IMAGE                      COMMAND             CREATED             STATUS              PORTS                NAMES</span><br><span class="line">2035c4f9a5e0        docker.io/busybox:latest   &quot;sh&quot;                4 seconds ago       Up 3 seconds        0.0.0.0:80-&gt;80/tcp   test</span><br><span class="line"></span><br><span class="line">[root@host1 ~]# docker port test</span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br></pre></td></tr></table></figure><h3 id="常用的容器监控工具"><a href="#常用的容器监控工具" class="headerlink" title="常用的容器监控工具"></a>常用的容器监控工具</h3><h4 id="1-Google的cAdvisor"><a href="#1-Google的cAdvisor" class="headerlink" title="1. Google的cAdvisor"></a>1. Google的cAdvisor</h4><p>cAdvisor（Container Advisor）是Google开发的用于分析运行中容器的资源占用和性能指标的开源工具。cAdvisor是一个运行时的守护进程，负责收集、聚合、处理和输出运行中容器的信息。需要特别说明的是，对于每个容器，cAdvisor都有资源隔离参数、资源使用历史情况以及完整历史资源使用和网络统计信息的柱状图。cAdvisor中的数据可以以容器或主机级别进行输出。</p><p>cAdvisor原生支持Google自家的Imctfy容器，即Let Contain That For You项目。Imctfy是Google开源那版本的容器栈，旨在代替LXC应用容器，以满足与资源隔离相关的需求。cAdvisor在2014年的DockerCon上发布，除了Imctfy容器外，同样支持Docker的还有libcontainer容器。同时，由于采用Go语言开发，cAdvisor可以方便地集成进libcontainer，它是除了Kubernetes外，Google支持Docker的另一个重要应用。</p><p>cAdvisor提供了一个Docker镜像，可以供用户在Docker中快速运行cAdvisor，操作简单方便。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--volume=/:/rootfs:ro \</span><br><span class="line">--volume=/var/run:/var/run:rw \</span><br><span class="line">--volume=/sys:/sys:ro \</span><br><span class="line">--volume=/var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">--publish=8080:8080 \</span><br><span class="line">--detach=true \</span><br><span class="line">--name=cadvisor \</span><br><span class="line">google/cadvisor:latest</span><br></pre></td></tr></table></figure><p>在启动cAdvisor后，它会在后台运行，并暴露8080端口，用户可以访问<a href="http://localhost:8080来查看cAdvisor。cAdvisor通过良好的Web" target="_blank" rel="noopener">http://localhost:8080来查看cAdvisor。cAdvisor通过良好的Web</a> UI提供给用户可视化的数据展示，其访问呢页面如下图所示。</p><p>实验没有成功，暂时无图。</p><p>cAdvisor你可以自行为用户提供监控服务，还可以结合其他应用为用户提供良好的服务移植和定制。cAdvisor支持输出状态信息到InflusDB数据库进行存储和读取。同时，它还支持将容器的统计信息以Prometheus标准指标形式输出，并存储在指定的/metrics HTTPd服务端点，以便可以通过Prometheus应用来查看cAdvisor。关于Prometheus应用的内容将稍后讲解。此外，对于使用集群的用户，Google的Heapster可以利用cAdvisor来监控集群。</p><p>cAdvisor作为一个开源应用，还未用户提供了丰富的API接口服务cAdvisor Remote REST API，以便为用户提供原始和已处理的统计数据。通过这一套API，用户可以将cAdvisor提供的而服务集成进自己的应用中，并扩展监控功能。</p><p>cAdviosr作为一个监控应用，其最终目标在于改善运行中的容器的资源使用和性能表现情况，通过有效的监控，可以实现以下蓝图：</p><ul><li>容器运行报告，包括容器的性能和资源使用情况；</li><li>依据报告，实现容器运行的自动调节；</li><li>为运维编排提供集群的资源使用预测。</li></ul><p>目前cAdvisor已经在诸多平台得到了应用，依靠其开源特性和Google的社区资源正在不断完善和丰富，并朝着其设计蓝图稳步前行。</p><h4 id="2-Datadog"><a href="#2-Datadog" class="headerlink" title="2. Datadog"></a>2. Datadog</h4><p>Datadog公司是一家初创企业，其主营业务是帮助其他公司管理和检测云端应用。Datadog能够帮助开发和运营团队检测其应用在云端工作时的各项数据指标，并提供功能丰富的控制平台，支持多种主流云服务，从而实现云服务的一站式管理。从2010年成立至今，Datadog已经支持包括亚马逊AWS、微软Azure、Google云平台等主流云服务提供商。Docker作为当下火热的新型平台，Datadog也迅速做出支持，实现了对Docker监控的集成。</p><p>Datalog利用Docker所使用的内核结构cgroups获取Docker的性能指标，包括CPU、内存、网络和I/O数据。Datadog可以检测和查看所有Docker可用的细化性能指标。</p><p>Datadog利用Docker自身的属性转化成分类标签，以实现对容器监控的聚合整理。通过标签的设定，可以实现复杂的条件筛选，按用户需求来创建容器的监控视图。此外，Datalog还支持警报功能，可以在发生法异常时第一时间向用户发送提醒。同样地，警报的设定可以结合标签来使用，便捷地设定多种警报。Datadog还支持对于容器的声明周期监控，实现了容器整个生命周期中创建、启动、停止和删除时间的可视化管理。</p><h4 id="3-SoundCloud的Prometheus"><a href="#3-SoundCloud的Prometheus" class="headerlink" title="3. SoundCloud的Prometheus"></a>3. SoundCloud的Prometheus</h4><p>SoundCloud公司的Prometheus是一个开源服务监控系统和时间序列数据库。它可以从配置好的监控对象按照指定的时间间隔来收集信息指标，进行可视化展示和高效的数据存储，并提供警报功能。Prometheus的优势在于高纬度时间序列数据进行处理、绘制图表和设定警报。得益于多维度数据模型基础，Prometheus可以方便地利用查询语言来进行数据的过滤和聚合。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker容器的监控手段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dockerfile的使用</title>
      <link href="/2018/07/21/Docker-dockerfile-use/"/>
      <url>/2018/07/21/Docker-dockerfile-use/</url>
      <content type="html"><![CDATA[<h3 id="Dockerfile的使用"><a href="#Dockerfile的使用" class="headerlink" title="Dockerfile的使用"></a>Dockerfile的使用</h3><p>Dockerfile是Docker用来构建镜像的文本文件，包含自定义的指令和格式。可以通过docker build命令从Dockerfile中构建镜像。这个过程与传统分布式集群的编排配置过程相似，且提供了一系列统一的资源配置语法。用户可以用这些统一的语法命令来根据需求进行配置，通过这份统一的配置文件，在不同的平台上进行分发，选哟使用时就可以根据文件按自动化构建，这解决了开发人员构建惊醒的法则过程。同时，Dockerfile与惊醒配合使用，使Docker在构建时可以充分利用镜像的功能进行缓存，大大地提高了Docker的使用效率。</p><a id="more"></a><p>本节主要介绍Docker构建镜像过程以及Dockerfile的使用方式。</p><h4 id="1-docker-build命令和镜像构建过程"><a href="#1-docker-build命令和镜像构建过程" class="headerlink" title="1. docker build命令和镜像构建过程"></a>1. docker build命令和镜像构建过程</h4><p>Dockerfile描述了组装镜像的步骤，其中每条指令都是单独执行的。除了FROM指令，其他每一条指令都会在上一条指令所生成的基础上执行，执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像上从而形成了新的镜像。Dockerfile所生成的最终镜像就是在基础镜像上面叠加一层层的镜像组建的。</p><p>为了提高镜像构建的速度，Docker daemon会缓存构建过程中的中间镜像。当从一个已在缓存中的基础镜像开始构建镜像时，会将Dockerfile中的下一条指令和基础镜像的所有子镜像做比较，如果有一个子镜像是由相同的指令生成的，则命中缓存，直接使用该镜像，而不用再生成一个新的镜像。再寻找缓存的过程中，COPY和ADD指令与其他指令稍有不同，其他指令只对比生成镜像的指令字符串是否相同；ADD和COPY指令除了对比指令字符串，还要对比容器中的文件内容和ADD、COPY所添加的文件内容是否相同。此外，镜像构建过程中，一旦缓存失效，则后续的指令都将生成新的镜像，而不再使用缓存。</p><h4 id="2-Dockerfile指令"><a href="#2-Dockerfile指令" class="headerlink" title="2. Dockerfile指令"></a>2. Dockerfile指令</h4><p>Dockerfile的基本格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Comment</span><br><span class="line">INSTRUCTION arguments</span><br></pre></td></tr></table></figure><p>在Dockerfile中，指令（INSTRUCTION）不区分大小写，但是为了与参数区分，推荐大写。Docker会顺序执行Dockerfile中的指令，第一条指令必须是FROM指令，它用于指定构建镜像的基础镜像。在Dockerfile中以#开头的行时注释，而在其他位置出现的#会被当成参数，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Comment</span><br><span class="line">RUN echo &apos;we are running some # of cool things&apos;</span><br></pre></td></tr></table></figure><p>Dockerfile中的指令有FROM、MAINTAINER、RUN、CMD、EXPOSE、ENV、COPY、ENTRYPOINT、VOLUME、USER、WORKDIR、ONBUILD，错误的指令会被忽略。下面将详细讲解一些重要的Docker指令。</p><h5 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h5><p>格式：ENV <key> <value>或ENV <key>=<value> …</value></key></value></key></p><p>ENV指令可以为镜像创建出来的容器声明环境变量。并且在Dockerfile中，ENV指令声明的环境变量会被后面的特定指令（即ENV、ADD、COPY、WORKDIR、EXPOSE、VOLUME、USER）解释使用。其他指令使用环境变量时，使用格式为$variable_name或者${variable_name}。在变量前面添加斜杠\可以转义，如\$foo或者\${foo}，将会分别转换为$foo和${foo}，而不是环境变量所保存的值。另外，ONBUILD指令不支持环境替换。</p><h5 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h5><p>格式：<code>FROM &lt;image&gt; 或 FROM &lt;image&gt;:&lt;tag&gt;</code></p><p>FROM指令的功能试为后面的指令提供基础镜像，因此一个有效的Dockerfile必须以FROM指令作为第一条非注释指令。从公共镜像库中拉取镜像很容易，基础镜像可以选择任何有效的镜像。在一个Dockerfile中，FROM指令可以出现多次，这样会构建多个镜像。在每个镜像创建完成后，Docker命令行界面输出该镜像的ID。若FROM指令中参数tag为空，则tag默认是latest；若参数image或tag指定的镜像不存在，则返回错误。</p><h5 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><p>格式：COPY <src> <dest></dest></src></p><p>COPY指令赋值<src>所指向的文件或目录，将它添加到新镜像中，复制的文件或目录在镜像中的路径是<dest>。<src>所指定的源可以有多个，但必须在上下文中，即必须是上下文根目录的相对路径。不能使用形如COPY ../something /something这样的指令。此外，<src>可以使用通配符指向所有匹配通配符的文件或目录，例如，COPY hom* /mydir/表示添加所有以 “home” 开头的文件到/mydir/中。</src></src></dest></src></p><p><dest>可以是文件或目录，但必须是目标镜像中的绝对或者相对于WORKDIR的相对路径（WORKDIR即Dockerfile中WORKDIR指令指定的路径，用来为其他指令设置工作目录）。若<dest>以反斜杠/结尾则其指向的是目录；否则指向文件。<src>同理。若<dest>是一个问紧啊，则<src>的内容会被写入到<dest>中；否则<src>所指向的文件或目录中的内容会被复制添加到<dest>目录中。当<src>指定多个源时，<dest>必须是目录。另外，如果<dest>不存在，则路径中不存在的目录会被创建。</dest></dest></src></dest></src></dest></src></dest></src></dest></dest></p><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>格式：ADD <src> <dest></dest></src></p><p>ADD与COPY指令在功能上很相似，都支持复制本地文件到镜像的功能，但ADD指令还支持其他功能。<src>可以是一个指向网络文件的URL，此时若<dest>指向一个目录，则URL必须是完全路径，这样可以获得该网络文件的文件名filename，该文件会被复制添加到<dest>/<filename>。例如，ADD <a href="http://example.com/foobar" target="_blank" rel="noopener">http://example.com/foobar</a> /会创建文件/foobar</filename></dest></dest></src></p><p><src>还可以指向一个本地压缩归档文件，该文件在复制到容器中时会被解压提取，如ADD example.tar.xz /。但若RUL中的文件为归档文件则不会被解压提取。</src></p><p>ADD和COPY指令虽然功能相似，但一般推荐使用COPY，因为COPY只支持本地文件，相比ADD而言，它更透明。</p><h5 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h5><p>RUN指令有两种格式：</p><ul><li>RUN <command> (shell格式)</li><li>RUN [“executable”, “param1”, “param2”] (exec格式，推荐格式)</li></ul><p>RUN指令会在前一条命令创建出的镜像的基础上创建一个容器，并在容器中运行命令，在命令结束运行后提交容器为新镜像，新镜像会被Dockerfile中的下一条指令使用。</p><p>RUN指令的两种格式表示命令在容器中的两种运行方式。当使用shell格式时，命令通过/bin/sh -c运行；当使用exec格式时，命令式直接运行的，容器不调用shell程序，即容器中没有shell程序。exec格式中的参数会当成JSON数组被Docker解析，故必须使用双引号而不能使用单引号。因为exec格式不会再shell中执行，所以环境变量的参数不会被替换，例如，当执行CMD [“echo”, “$HOME”]指令时，$HOME不会做变量替换。如果希望·运行shell程序，指令可以写成CMD[“sh”, “-c”, “echo”, “$HOME”]。</p><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>CMD指令有3种格式：</p><ul><li>CMD <command> (shell格式)</li><li>CMD [“executable”, “param1”, “param2”] (exec格式，推荐格式)</li><li>CMD [“param1”, “param2”]     (为ENTRYPOINT指令提供参数)</li></ul><p>CMD指令提供容器运行时的默认值，这些默认值可以是一条指令，也可以是一些参数。一个Dockerfile中可以有多条CMD指令，但只有最后一条CMD指令有效。CMD [“param1”, “param2”]格式是在CMD指令和ENTRYPOINT指令配合时使用的，CMD指令中的参数会添加到ENTRYPOINT指令中。使用shell和exec格式时，命令在容器中的运行方式与RUN指令相同。不同在于，RUN指令在构建镜像时执行命令，并生成新的镜像；CMD指令在构建镜像时并不执行任何命令，而是在容器启动时默认将CMD指令作为第一条执行的命令。如果用户在命令行界面运行docker run命令时指定了命令参数，则会覆盖CMD指令中的命令。</p><h5 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h5><p>ENTRYPOINT指令有两种格式：</p><ul><li>ENTRYPOINT <command> (shell格式)</li><li>ENTRYPOINT [“executable”, “param1”, “param2”] (exec格式，推荐格式)</li></ul><p>ENTRYPOINT指令和CMD指令类似，都可以让容器在每次启动时执行相同的命令，但它们之间又有不同。一个Dockerfile中可以有多条ENTRYPOINT指令，但只有最后一条ENTRYPOINT指令有效。当使用shell格式时，ENTRYPOINT指令会忽略任何CMD指令和docker run命令的参数，并且会运行在bin/sh -c中。这意味着ENTRYPOINT指令进程为bin/sh -c的子进程，进程在容器中的PID将不是1，且不能接收Unix信号。即当使用docker stop <container>命令时，命令进程接收不到SIGTERM信号。我们推荐使用exec格式，使用此格式时，docker run传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT指令的参数中。从ENTRYPOINT的使用中可以看出，CMD可以是参数，也可以是指令，而ENTRPOINT只能是命令；另外，docker run命令提供的运行命令参数可以覆盖CMD，但不能覆盖ENTRYPOINT。</container></p><h5 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h5><p>格式：ONBUILD [INSTRUCTION]</p><p>ONBUILD指令的功能时添加一个将来执行的触发器指令到镜像中。当该镜像作为FROM指令的参数时，这些触发器指令就会在FROM指令执行时加入到构建过程中。尽管任何指令都可以注册成一个触发器指令，但ONBUILD指令中不能包含ONBUILD指令，并且不会触发FROM和MAINTAINER指令。当需要制作一个基础镜像来构建其他镜像时，ONBUILD是很有用的。例如，当需要构建的镜像是一个可重复使用的Python环境镜像时，他可能需要将应用源代码加入到一个指定的目录中，还可能需要执行一个构建脚本。此时不能仅仅调用ADD和RUN指令，因为现在还不能访问应用源代码，并且不同应用的源代码是不同的。我们简单地提供要给Dockerfile模板给应用开发者，它与特定应用代码耦合，会引发低效、易错、难以更新等问题。这些场景的解决方案是使用ONBUILD指令注册触发器指令，利用ONBUILD指令构建一个语言栈镜像，该镜像可以构建任何用该语言编写的用户软件的镜像。</p><p>ONBUILD指令的具体执行步骤如下。</p><ol><li><p>在构建过程中，ONBUILD指令会添加到触发器指令镜像元数据中。这些触发器指令不会在当前构建过程中执行。</p></li><li><p>在构建过程最后，触发器指令会被存储在镜像详情中，其主键是OnBuild，可以使用docker inspect命令查看。</p></li><li><p>之后该镜像可能作为其他Dockerfile中的FROM指令的参数。在构建过程中，FROM指令会寻找ONBUILD触发器指令，并且会以它们注册的顺序执行。若有触发器指令执行失败，则FROM指令被中止，并返回失败；若所有触发器指令执行成功，则FROM指令完成并继续执行下面的指令。在镜像构建完成后，触发器指令会被清楚，不会被子孙镜像继承。</p></li></ol><p>使用包含ONBUILD指令的Dockerfile构建的镜像应该有特殊的标签，如uby:2.0-onbuild。在ONBUILD指令中添加ADD或COPY指令时要额外注意。加入新构建过程的上下文缺失了被添加的资源，那么新构建过程会失败。给ONBUILD镜像添加标签，可以提示编写Dockerfile开发人员小心应对。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Dockerfile的使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker高级网络实践</title>
      <link href="/2018/07/21/Docker-network-3/"/>
      <url>/2018/07/21/Docker-network-3/</url>
      <content type="html"><![CDATA[<h3 id="Docker高级网络实践"><a href="#Docker高级网络实践" class="headerlink" title="Docker高级网络实践"></a>Docker高级网络实践</h3><p>在前面的文章中，我们已经详细解读了Docker中libnetwor提供的4种驱动，它们各有千秋，但实际上每一种方式都有一定的局限性。假设需要运营一个数据中心的网络，我们有许多宿主机，每台宿主机上运行了数百个甚至上千个Docker容器，使用4种网络驱动的具体情况如下。</p><a id="more"></a><ul><li>使用host驱动可以让容器与宿主机共用一个网络栈，这么看似解决了网络问题，可实际上并未使用network namespace的隔离，缺乏安全性。</li><li>使用Docker默认的bridge驱动，容器没有对外IP，只能通过NAT来实现对外通信。这种方式不饿能解决跨主机容器间直接通信的问题，难以满足复杂场景下的需求。</li><li>使用overlay驱动，可以用于支持快主机网络通信，但必须要配合Swarm进行配置和使用才能实现跨主机的网络通信。</li><li>使用null驱动实际上不进行任何网络设置。</li></ul><p>可见，为了实现数据中心大量容器间的跨主机网络通信，为了更加灵活地实现容器间网络的共享与隔离，也为了在管理成千上万容器时可以更加自动化进行网络配置，我们需要学习更高级的网络实践方案。</p><p>本节主要讲述Docker网络的高级实践部分，将通过一些工具和额外的操作来突破Docker网络原有的限制，实现一些更高级的功能，以满足实际运用种的复杂需求。</p><h3 id="玩转-Linux-network-namespace"><a href="#玩转-Linux-network-namespace" class="headerlink" title="玩转 Linux network namespace"></a>玩转 Linux network namespace</h3><p>ip是Linux系统下一个强大的网络配置工具，它不仅可以替代一些传统的网络管理工具，如ifconfig、route等，还可以实现更为丰富的功能。下面将介绍如何使用ip命令来配置管理network namespace。</p><h4 id="1-使用ip-netns命令操作network-namesapce"><a href="#1-使用ip-netns命令操作network-namesapce" class="headerlink" title="1. 使用ip netns命令操作network namesapce"></a>1. 使用ip netns命令操作network namesapce</h4><p>ip netns命令是用来操作network namespace的指令，具体使用方法如下。</p><p>创建一个netwokr namespace：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个名为nstest的network namespace</span><br><span class="line"># ip netns add nstest</span><br></pre></td></tr></table></figure><p>列出系统中已存在的network namespace：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ip netns ls</span><br><span class="line">nstest</span><br></pre></td></tr></table></figure><p>删除一个natwork namespace：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除nstest</span><br><span class="line"># ip netns delete nstest</span><br></pre></td></tr></table></figure><p>在network namespace中执行一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 命令格式</span><br><span class="line">ip netns exec  &lt;network namespace name&gt; &lt;command&gt;</span><br><span class="line"># 如显示nstest namespace中的网卡信息</span><br><span class="line">ip netns exec nstest ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></pre></td></tr></table></figure><p>使用ip netns exec来执行命令稍显麻烦，可以使用一个更直接的办法——在network namespace中启动一个shell，具体示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 命令格式</span><br><span class="line">ip netns exec &lt;network namespae name&gt; bash</span><br></pre></td></tr></table></figure><p>这样就可以在上面执行命令，就好像使用者进入了这个network namespace中；若要退出则输入exit即可。</p><h4 id="2-使用ip命令为network-namespace配置网卡"><a href="#2-使用ip命令为network-namespace配置网卡" class="headerlink" title="2. 使用ip命令为network namespace配置网卡"></a>2. 使用ip命令为network namespace配置网卡</h4><p>当使用ip netns add命令创建了一个network namespace后，就拥有了一个独立的网络空间，可以根据需求来配置该网络空间，如添加网卡、配置IP、设置路由规则等。下面以之前建立的名为nstest的network namespace为例来演示如何进行这些操作。</p><p>当使用ip命令创建一个network namespace时，会默认创建一个回环设备（loopback interface:lo）。该设备默认不启动，用户最好将其启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip netns exec nstest ip link set dev lo up</span><br></pre></td></tr></table></figure><p>在主机上创建两张虚拟网卡veth-a和veth-b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link add veth-a type veth peer name veth-b</span><br></pre></td></tr></table></figure><p>将veth-b设备添加到nstest这个network namespace中，veth-a留在主机中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set veth-b netns nstest</span><br></pre></td></tr></table></figure><p>现在nstest这个network namespace就有了两块网卡lo和veth-b，来验证一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip netns exec nstest ip link</span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">7: veth-b@if8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000</span><br><span class="line">    link/ether 9e:fa:80:47:86:e8 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure><p>现在可以为网卡分配IP并启动网卡了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在主机上为veth-a配置IP并启动</span><br><span class="line">ip addr add 10.0.0.1/24 dev veth-a</span><br><span class="line">ip link set dev veth-a up</span><br><span class="line"></span><br><span class="line"># 为nstest的veth-b配置IP并启动</span><br><span class="line">ip netns exec nstest ip addr add 10.0.0.2/24 dev veth-b</span><br><span class="line">ip netns exec nstest ip link set dev veth-b  up</span><br></pre></td></tr></table></figure><p>给两张网卡配置了IP后，会在各自的network namespace中生成一条路由，用ip route或route -a命令查看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在主机中</span><br><span class="line">ip route</span><br><span class="line">...</span><br><span class="line">10.0.0.0/24 dev veth-a  proto kernel  scope link  src 10.0.0.1</span><br><span class="line"></span><br><span class="line"># 在nstest network namespace中</span><br><span class="line">ip netns exec nstest ip route</span><br><span class="line">10.0.0.0/24 dev veth-b  proto kernel  scope link  src 10.0.0.2</span><br></pre></td></tr></table></figure><p>这两条路由表明的意义时目的地址为10.0.0.0/24网络的IP包分别从veth-a和veth-b发出。</p><p>现在nstest这个network namespace有了自己的网卡、IP地址、路由表等信息，俨然成了一台小型的“虚拟机”。测试一下它的连通性，以检查配置是否正确。</p><p>从主机的veth-a网卡ping nstest network namesapc的veth-b网卡：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ping 10.0.0.2</span><br><span class="line">PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=0.051 ms</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">从nstest network namespace的veth-b网卡ping主机的veth-a网卡：</span><br><span class="line"># ip netns exec nstest ping 10.0.0.1</span><br><span class="line">PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=0.037 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="3-将两个network-namespace连接起来"><a href="#3-将两个network-namespace连接起来" class="headerlink" title="3. 将两个network namespace连接起来"></a>3. 将两个network namespace连接起来</h4><p>很多时候，想搭建一个复杂的网络环境来测试数据，往往受困于没有足够的资源来创建虚拟机。掌握了如何配置network namespace后，便可以轻松解决这个问题。可以在一台普通的机器上，以非常简答的方式创建很多相互隔离的network namespace，然后通过网卡、网桥等虚拟设备将它们连接起来，组成想要的拓扑网络。下面来演示一个简单的例子——将连个network namespace通过veth pair设备连接起来。具体过程如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建两个network namespace ns1，ns2</span><br><span class="line">ip netns add ns1</span><br><span class="line">ip netns add ns2</span><br><span class="line"></span><br><span class="line"># 创建veth pair设备veth-a，veth-b</span><br><span class="line">ip link add veth-a type peer name veth-b</span><br><span class="line"></span><br><span class="line"># 将网卡分别放到两个namespace中</span><br><span class="line">ip link set veth-a netns ns1</span><br><span class="line">ip link set veth-b netns ns2</span><br><span class="line"></span><br><span class="line"># 启动两张网卡</span><br><span class="line">ip netns exec ns1 ip link set dev veth-a up</span><br><span class="line">ip netns exec ns2 ip link set dev veth-v up</span><br><span class="line"></span><br><span class="line"># 分配IP</span><br><span class="line">ip netns exec ns1 ip addr add 10.0.0.1/24 dev veth-a</span><br><span class="line">ip netns exec ns2 ip addr add 10.0.0.2/24 dev veth-b</span><br><span class="line"></span><br><span class="line"># 验证连通</span><br><span class="line">ip netns exec ns1 ping 10.0.0.2</span><br><span class="line">PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过veth pair设备连接起来的两个network namespace就好像直接通过网线连接起来的两台机器。</p><p>如果有更多的network namespace需要连接，那就有必要引入虚拟网桥了，就如同Docker网络一样。</p><h4 id="4-使用ip命令配置Docker"><a href="#4-使用ip命令配置Docker" class="headerlink" title="4. 使用ip命令配置Docker"></a>4. 使用ip命令配置Docker</h4><p>Docker是使用Linux namespace技术进行资源隔离的，网路也是如此。当用默认网络模式（bridge模式）启动一个Docker容器时，一定是在主机上新创建了一个Linux network namespace。用户可以按照network namespace中配置网络的方法来配置Docker容器的网络。</p><p>首先，启动一个名为tes1的Docker容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test1 ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>然后，使用ip netns list命令查看是否可以看到新创建的network namespace。执行命令后发现并没有看到新增的network namespace。这并不代表Docker容器没有创建network namespace，只是ip nettns命令无法查看罢了，这与ip netns命令的工作方式有关。</p><p>当使用ip netns命令创建了两个network namespce（ns1和ns2）后，会在/var/run/netns目录下看到ns1和ns2两项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ls -la /var/run/netns/</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 root root 100 Jul 19 11:08 .</span><br><span class="line">drwxr-xr-x 25 root root 860 Jul 19 11:18 ..</span><br><span class="line">-r--r--r--  1 root root   0 Jul 19 11:08 ns1</span><br><span class="line">-r--r--r--  1 root root   0 Jul 19 11:08 ns2</span><br></pre></td></tr></table></figure><p>ip netns list命令在/var/run/netns目录留下查找network namespace。由于Docker创建的network namespace并不会在此目录下创建任何项，因此，需要一些额外的操作来使ip命令可以操纵Docker创建的network namespace。</p><p>Linux下的每一个进程都会属于一个特定的network namespace，来看一下不同netowrk namespace环境中/proc/$PID/ns目录下有何区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># /proc/self链接到当前正在运行的进程</span><br><span class="line"># 主机默认的network namespace中</span><br><span class="line">ls -la /proc/self/ns</span><br><span class="line">...</span><br><span class="line">lrwxrwxrwx 1 root root 0 Jul 19 11:23 net -&gt; net:[4026531956]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在ns1中</span><br><span class="line">ip netns exec ns1 ls -ls /proc/self/ns</span><br><span class="line">...</span><br><span class="line">0 lrwxrwxrwx 1 root root 0 Jul 19 11:25 net -&gt; net:[4026532572]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在ns2中</span><br><span class="line">ip netns exec ns2 ls -ls /proc/self/ns</span><br><span class="line">...</span><br><span class="line">0 lrwxrwxrwx 1 root root 0 Jul 19 11:25 net -&gt; net:[4026532629]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从上面可以发现，不同的network namespace中的进程有不同的net:[]号码分配。这些号码代表着不同的network namespace，拥有相同的net:[]号码的进程属于同一个network namespace。只要将代表Docker创建的network namespace的文件链接到/var/run/netns目录下，就可以使用ip netns命令进行操作了，具体步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 用docker inspect查看test1容器的PID</span><br><span class="line">docker inspect --format &apos;&#123;&#123;.State.Pid&#125;&#125;&apos; test1</span><br><span class="line">2908</span><br><span class="line"></span><br><span class="line"># 若不存在/var/run/netns目录，则创建</span><br><span class="line">mkdir -p /var/run/netns</span><br><span class="line"></span><br><span class="line"># 在/var/run/netns目录下创建软链接，指向test1容器的network namespace</span><br><span class="line">ln -s /proc/2908/ns/net /var/run/netns/test1</span><br><span class="line"></span><br><span class="line"># 测试是否成功</span><br><span class="line">ip netns list</span><br><span class="line"></span><br><span class="line">test1</span><br><span class="line">ns2</span><br><span class="line">ns1</span><br><span class="line"></span><br><span class="line">ip netns exec test1 ip link </span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure><p>完成以上配置后，就可以自行配置Docker的网络环境了。另外，需要读者注意的是，在不开特权模式的情况下（–privileged=false），是没有权限直接在Docker容器内部进行网络配置的，而特权模式会给主机带来安全隐患，因此最好使用ip netns exec来进行Docker容器网络的配置。</p><p>除了ip netns命令外，还有一些其他工具可以进入Linux namespace，比如nsenter。nsenter可以更方便的操作Docker的namespace，但需要额外安装。在Ubuntu下，由于util-linux软件包版本较早，需要从源码安装。为此，Jerome Petazzoni使用了Docker容器来帮助用户完成安装，相见nsenter。</p><h3 id="pipework原理解析"><a href="#pipework原理解析" class="headerlink" title="pipework原理解析"></a>pipework原理解析</h3><p>Docker现有的网络模式比较简单，扩展性和灵活性都不能满足很多复杂应用场景的需求。很多时候用户都需要自定义Docker容器的网络，而非使用Docker默认创建的IP和NAT规则。</p><h4 id="1-将Docker容器配置到本地网络环境中"><a href="#1-将Docker容器配置到本地网络环境中" class="headerlink" title="1. 将Docker容器配置到本地网络环境中"></a>1. 将Docker容器配置到本地网络环境中</h4><p>如果想要使用Docker容器和容器主机处于同一个网络，那么容器和主机应该处在一个二层网络中。能想到的场景就是把两台机器连在同一个交换机上，或者连在不同的级联交换机上。在虚拟场景下，虚拟网桥可以将容器连在一个二层网络中，只要将主机的网卡桥接到虚拟网桥中，就能将容器和主机的网络连接起来。构建完拓扑结构后，只需再给Docker容器分配一个本地局域网IP就大功告成了。</p><p>下面通过一个例子来分析一下这个过程。本地网络为192.168.8.0/24，网关为192.168.8.1，有一台IP地址为192.168.8.12/24的主机（网卡为eth0），要在这台主机上启动一个名为test1的Docker容器，并给它配置IP为192.168.8.15/24。由于并不需要Docker提供的网络，所以用–net=none参数来启动容器。具体示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 启动一个名为test1的Docker容器</span><br><span class="line">docker run -itd --name test1 --network none ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"># 创建一个供容器连接的网桥br0</span><br><span class="line">brctl addbr br0</span><br><span class="line">ip link set br0 up</span><br><span class="line"></span><br><span class="line"># 将主机eth0桥接到br0上，并把eth0的IP配置在br0上。由于远程操作，会导致网络断开，因此这里放在一条命令中执行</span><br><span class="line">ip addr add 192.168.8.12/24 dev br0 ;\</span><br><span class="line">ip addr del 192.168.8.12/24 dev ens34;\</span><br><span class="line">brctl addif br0 ens34 ;\</span><br><span class="line">ip route del default ;\</span><br><span class="line">ip route add default via 192.168.8.1 dev br0</span><br><span class="line"></span><br><span class="line"># 找到test1的PID，保存到pid中</span><br><span class="line">pid=$(docker inspect --format &apos;&#123;&#123;.State.Pid&#125;&#125;&apos; test1) </span><br><span class="line"></span><br><span class="line"># 将容器的network namespace添加到/var/run/netns目录下</span><br><span class="line">mkdir -p /var/run/netns</span><br><span class="line">ln -s /proc/$pid/ns/net /var/run/netns/$pid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建用于连接网桥和Docker容器的网卡设备</span><br><span class="line"># 将veth-a连接到br0网桥中</span><br><span class="line">ip link add veth-a type veth peer name veth-b</span><br><span class="line">brctl addif br0 veth-a</span><br><span class="line">ip link set veth-a up</span><br><span class="line"></span><br><span class="line"># 将veth-b放到test1的network namespace中，重命名为eth0，并为其配置IP和默认路由</span><br><span class="line">ip link set veth-b netns $pid</span><br><span class="line">ip netns exec $pid ip link set dev veth-b name eth0</span><br><span class="line">ip netns exec $pid ip link set eth0 up</span><br><span class="line">ip netns exec $pid ip addr add 192.168.8.15/24 dev eth0</span><br><span class="line">ip netns exec $pid ip route add default via 192.168.8.1</span><br></pre></td></tr></table></figure><p>现在test1容器可以很方便地实现与本地主机相互访问，并且test1容器可以通过本地网络的网关192.168.8.1访问外部网络。</p><h4 id="2-pipework解析"><a href="#2-pipework解析" class="headerlink" title="2. pipework解析"></a>2. pipework解析</h4><p>从上面可以发现，配置Docker容器的网络是相当繁琐的。如果需要经常自定义Docker网络，可以考虑提炼上述过程，编写成shell脚本，方便操作。事实上，目前已经有了一个这样的工具来帮助用户扩展Docker的网络功能，这就是由Docker公司工程师Jerome Petazzoni在GitHub上发布的名为pipework的工具。pipework号称是容器的SDN解决方案，可以在复杂场景下将容器连接起来。它既支持普通的LXC容器，也支持Docker容器。随着Docker网络的不断改进，pipework工具的很多功能可能会被Docker原生支持，因此pipework只是目前的过渡方案之一。下面来看下pipework的功能和实现。</p><h5 id="支持Linux网桥连接容器并配置容器IP地址"><a href="#支持Linux网桥连接容器并配置容器IP地址" class="headerlink" title="支持Linux网桥连接容器并配置容器IP地址"></a>支持Linux网桥连接容器并配置容器IP地址</h5><p>在上一个例子中，用来很多ip命令来配置test1容器的IP地址ihe网关，用Pipework工具则可以很方便地完成配置，具体示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下载pipework</span><br><span class="line">git clone https://github.com/jpetazzo/pipework.git</span><br><span class="line"></span><br><span class="line"># 将pipework脚本放入PATH环境变量所指定的目录下，如/usr/local/bin</span><br><span class="line">cp ~/pipework/pipework /usr/local/bin</span><br><span class="line"></span><br><span class="line"># 完成test1的配置</span><br><span class="line">pipework br0 test1 192.168.8.15/24@192.168.8.1</span><br></pre></td></tr></table></figure><p>这一行配置命令执行的操作如下：</p><ul><li>查看主机中是否存在br0网桥，不存在就创建；</li><li>向test1中加入一块名为eth1的网卡，并配置IP地址为192.168.8.15/24；</li><li>若test1中已经有默认路由，则删掉，把192.168.8.1设为默认路由的网关；</li><li>将test1容器连接到之前创建的网桥br0上。</li></ul><h5 id="支持使用macvlan设备将容器连接到本地网络"><a href="#支持使用macvlan设备将容器连接到本地网络" class="headerlink" title="支持使用macvlan设备将容器连接到本地网络"></a>支持使用macvlan设备将容器连接到本地网络</h5><p>除了使用Linux Bridge将Docker容器桥连接到本地网络之中，还有另外一种方式，即使用主机网卡的macvlan子设备。macvlan设备是从网卡上虚拟出的一块新网卡，它和主网卡分别由不同的MAC地址，可以配置独立的IP地址。macvlan早前在LXC中被广泛使用，目前Docker网络本身不提供macvlan支持，但可以借助pipework来完成macvlan配置。如果采用macvlan来完成之前例子，那么整个过程只需要执行一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipework eth0 test1 192.168.8.15/24@192.168.8.1</span><br></pre></td></tr></table></figure><p>这里，pipework的第一个参数是主机上的一块以太网卡，而非网桥。pipework不会再创建veth pair设备来连接容器和网桥，转而采用macvlan设备作为test1容器的网卡，操作过程如下：</p><ol><li>从主机的eth0上创建一块macvlan设备，将macvlan设备放入到test1中并命名为儿童和<br>；</li><li>为test1中新添加的网卡配置IP地址为192.168.8.15/24；</li><li>若test1中已经有默认路由，则删掉，把192.168.8.1设为默认路由的网关。</li></ol><h5 id="支持DHCP获取容器的IP"><a href="#支持DHCP获取容器的IP" class="headerlink" title="支持DHCP获取容器的IP"></a>支持DHCP获取容器的IP</h5><p>Docker社区中经常会有使用者发问，如何让Docker容器通过DHCP方式获取IP地址？看来DHCP获取IP的需求也非常迫切。目前较好的解决方案还是依赖pipework。如果Docker要接入的网络环境中存在DHCP服务器，那么Docker容器就可以通过发送DHCP请求获取新网卡的网络配置信息。具体用法是将pipework指令中的IP地址参数替换为dhcp，示例如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 手动配置IP地址的命令</span><br><span class="line">pipework eth0 test1 192.168.8.15/24@192.168.8.1 </span><br><span class="line"></span><br><span class="line"># 通过主机网络中的DHCP服务器获取IP地址的命令</span><br><span class="line">pipework eth0 test1 dhcp</span><br></pre></td></tr></table></figure><blockquote><p>注意：DHCP服务除了要求主机环境中存在DHCP服务器外，Docker主机上还必须安装有DHCP客户端（如udhcpc、dhclient或者dhcpcd）。pipework根据不同的DHCP客户端执行不同的命令发送DHCP请求。</p></blockquote><h5 id="支持Open-vSwitch"><a href="#支持Open-vSwitch" class="headerlink" title="支持Open vSwitch"></a>支持Open vSwitch</h5><p>Open vSwitch是一个开源的虚拟交换机，相比于Linux Bridge，Open vSwitch支持VLAN、QoS等功能，同时还提供对OpenFlow协议的支持，可以很好地与SDN体系融合。因此，提供对Open vSwitch的支持，有助于借助Open vSwitch的强大功能来扩展Docker网络。不过，目前pipework对OpenvSwitch的支持相对简单，并没有涉及很多高级的功能。</p><p>具体做法是将pipework第一个参数设为Open vSwitch网桥。若需要pipework创建Open vSwitch网桥，则要将网桥的名称以 “ovs” 开头。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipework ovsbr0 $CONTAINERID 192.168.8.15/24</span><br></pre></td></tr></table></figure><h5 id="支持设置网卡MAC地址以及配置容器VLAN"><a href="#支持设置网卡MAC地址以及配置容器VLAN" class="headerlink" title="支持设置网卡MAC地址以及配置容器VLAN"></a>支持设置网卡MAC地址以及配置容器VLAN</h5><p>pipework除了支持给网卡配置IP外，还可以指定网卡的MAC地址。具体用法是在IP参数后面再加一个MAC参数，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipework br0 $CONTAINERID dhcp 02:42:fe:65:e4:59</span><br></pre></td></tr></table></figure><p>如果想给Docker容器划分VLAN，那么可以把MAC参数写成[MAC]@VID，其中，MAC地址可以省略，VID为VLAN的ID号。设置VLAN只支持Open vSwitch和macvlan设备，不支持普通的Linux网桥。示例如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipework ovsbr0 $CONTAINERID dhcp @10</span><br></pre></td></tr></table></figure><h3 id="pipework-跨主机通信"><a href="#pipework-跨主机通信" class="headerlink" title="pipework 跨主机通信"></a>pipework 跨主机通信</h3><p>如果将Docker容器应用在大规模集群环境中，不可避免地会遭遇Docker容器跨主机通信的问题。在目前Docker默认网络环境下，单台主机上的Docker容器可以通过docker0网桥直接通信，而不同主机上的Docker容器之间只能通过在主机上做端口映射的方法进行通信。这种端口映射方式对很多集群应用来说极不方便。如果能使Docker容器之间直接使用本身IP地址进行通信，很多问题便会自然化解。那么，如何在当前Docker网络环境下实现这样的需求呢？下面来介绍两种实现方法。</p><h4 id="1-桥接"><a href="#1-桥接" class="headerlink" title="1. 桥接"></a>1. 桥接</h4><p>上面刚刚演示了如何使用虚拟网桥将Docker容器桥接到本地网络环境中。按照这种方法，把同一个局域网中不同主机上的Docker容器都配置在主机网络环境中，它们之间可以直接通信。但这么做可能会出现下列问题：</p><ul><li>Docker容器占用主机网络的IP地址；</li><li>大量Docker容器引起广播风暴，导致主机所在网络性能下降；</li><li>Docker容器连在主机网络中可能引起安全问题。</li></ul><p>因此，如果情况不是无法回避，必须将Docker容器连接在主机网络中，最好还是将其分离开。为了隔离Docker容器间网络和主机网络，需要额外使用一块网卡桥接Docker容器。思路还是与采用一块网卡时一样：在所有主机上用虚拟网桥将本机的Docker容器连接起来，然后将一块网卡加入到虚拟网桥中，使所有主机上用虚拟网桥将本机的Docker容器连接起来，然后将一块网卡加入到虚拟网桥中，使所有主机上的虚拟网桥级联在一起，这样，不同主机上的Docker容器也就如同连在了一个大的逻辑交换机上。</p><p>关于Docker容器的IP，由于不同机器上的Docker容器可能获得相同的IP地址，因此需要解决IP的冲突问题。一种方法是使用pipework为每一个容器分配一个不同的IP，而不使用Dockersdaemon分配的IP。此种方法相当繁琐，因此一般采用另外一种方法——为每一台主机上的Docker daemon指定不同的–fixed-cidr参数，将不同主机的Docker容器限定在不同网段中。</p><h4 id="2-直接路由"><a href="#2-直接路由" class="headerlink" title="2. 直接路由"></a>2. 直接路由</h4><p>桥接的方式将所有主机上的Docker容器放在一个二层网络中，它们之间的通信是由交换机直接转发，不通过路由器。另一种跨主机通信的方式是通过在主机中添加静态路由实现的。如果有两台主机host1和host2，两主机上的Docker容器是两个独立的二层网络，将con1法网con2的数据流现转发到主机host2上，再由host2再转发到其上的Docker容器中；反之亦然。</p><p>由于使用容器的IP进行路由，就需要避免不同主机上的Docker容器使用相同的IP，所以应该为不同的主机分配不同的IP子网。</p><p>本节介绍的两种跨主机通信方式简单有效，但他们都要求主机在同一个局域网中。如果两台主机在不同的二层网络中，又该如何实现容器间的跨主机通信呢？后面内容继续介绍。</p><h3 id="OVS划分VLAN"><a href="#OVS划分VLAN" class="headerlink" title="OVS划分VLAN"></a>OVS划分VLAN</h3><p>在计算机网络中，传统的交换机虽然能隔离冲突域，提高每一个端口的性能，但并不能隔离广播域，当网络中的机器足够多时会引发广播风暴。同时，不同部门、不同组织的机器连接在同一个二层网络中也会造成安全问题。因此，在交换机中划分子网、隔离广播域的思路便形成了VLAN的概念。VLAN（Virtual Local Area Network）即虚拟局域网，按照功能、部门等因素将网络中的机器进行划分，使之分属于不同的部分，每一个部分形成一个虚拟的局域网络，共享一个单独的广播域。这样就可以把一个大型交换网络划分为许多个独立的广播域，即VLAN。</p><p>VLAN技术将一个二层网络中的机器隔离开来，那么如何区分不同VLAN的流量呢？IEEE802.1q协议规定了VLAN的实现方法，即在传统的以太网帧中再台南佳一个VLAN tag字段，用于标识不同的VLAN。这样，支持VLAN的交换机在转发帧时，不仅会关注MAC地址，还会考虑到VLAN tag字段。VLAN tag包括了TPID、PCP、CFI、VID，其中VID（VLAN ID）部分用来具体指出帧时属于哪个VLAN的。VID占12位，所以其取值范围为0到4095.</p><p>在分析下图之前，先来介绍一下交换机的access端口和trunk端口。图中，Port1、Port2、Port5、Port5、Port6、Port7、Port8为access端口，每一个access端口都会分配一个VLAN ID，标识它所连接的设备属于哪一个VLAN。当数据帧从外界通过access端口进入交换机时，数据帧原本是不带tag的额，access端口给数据帧打上tag（VLAN ID即为access端口所分配的VLAN ID）；当数据帧从交换机内部通过access端口发送时，数据帧的VLAN ID必须和access端口的VLAN ID一致，access端口菜接收此帧，接着access端口将帧的tag信息去掉，再发送出去。Port3、Port4为trunk端口，trunk端口不属于某个特定的VLAN，而是交换机和交换机之间多个VLAN的通道。trunk端口声明了一组VLAN ID，表明只允许带有这些VLAN ID的数据帧通过，从trunk端口进入和出去的数据帧都是带tag的（不考虑默认VLAN的情况）。PC1和PC3属于uVLAN100，PC2和PC4属于VLAN200，所以PC1和PC3处在同一个二层网络中，PC2和PC4处在同一个二层网络中。尽管PC1和PC2连接在同一台交换机中，但它们之间的通信是需要经过路由器的。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-16.png" title="多交换机VLAN划分"></center><p>在这个例子中，VLAN tag是如何发挥作用的呢？当PC1向PC3发送数据时，PC1将IP包封装在以太帧中，帧的目的MAC地址为PC3的地址，此时帧并没有tag信息。当帧到达Port1时，Port1给帧打上tag（VID=100），帧进入switch1，然后帧通过Port3、Port4到达Switch2（Port3、Port4允许VLAN ID为100、200的帧通过）。在switch2中，Port5所标记的VID和帧相同，MAC地址也匹配，帧就发送到Port5上，Port5将帧的信息去掉，然后发给PC3.由于PC2、PC4与PC1的VLAN不同，因此收不到PC1发出的帧。</p><p>在多租户的云环境中，VLAN是一个最基本的隔离手段。作为云计算的新宠儿——Docker，如何实现VLAN的划分呢？曾提到过pipework支持配置容器的VLAN，本节将详细介绍如何使用pipework实现Docker容器的VLAN划分。</p><h4 id="1-单主机Docker容器的VLAN划分"><a href="#1-单主机Docker容器的VLAN划分" class="headerlink" title="1. 单主机Docker容器的VLAN划分"></a>1. 单主机Docker容器的VLAN划分</h4><p>在Docker默认网络模式下，所有的容器都连在docker0网桥上。docker0网桥时普通的Linux网桥，不支持VLAN功能，为了方便操作，使用Open vSwitch代替docker0进行VLAN划分。下图时一个在一台主机上进行Docker容器VLAN划分的例子。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-17.png" title="单主机Docker容器VLAN划分"></center> <p>为了演示隔离效果，图中四个容器都在同一个网段中，但实际上它们时二层隔离的两个网络，有不同的广播域。为完成上图所示的配置，我们在主机A上做如下操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 在主机A上创建4个Docker容器：con1、con2、con3、con4</span><br><span class="line">docker run -itd --name con1 ubuntu /bin/bash</span><br><span class="line">docker run -itd --name con2 ubuntu /bin/bash</span><br><span class="line">docker run -itd --name con3 ubuntu /bin/bash</span><br><span class="line">docker run -itd --name con4 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装并启动open-vswitch</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y openvswitch</span><br><span class="line">systemctl start openvswitch.service</span><br><span class="line"></span><br><span class="line"># 使用pipework将con1、con2划分到一个VLAN中</span><br><span class="line">pipework ovs0 con1 192.168.0.1/24 @100</span><br><span class="line">pipework ovs0 con2 192.168.0.2/24 @200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用pipework将con3、con4划分到一个VLAN中</span><br><span class="line">pipework ovs0 con3 192.168.0.3/24 @200</span><br><span class="line">pipework ovs0 con4 192.168.0.4/24 @200</span><br></pre></td></tr></table></figure><p>pipework配置完成后，每个容器都多了一块eth1网卡，eth1连在ovs0网桥上，并且执行力VLAN的隔离。通过nc命令测试各容器之间的连通性时发现，con1和con2可以相同通信，但与con3和con4隔离。如此一来，一个简单的VLAN隔离容器网络就完成了。</p><p>使用Open vSwitch配置VLAN比较简单，如创建access端口使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在ovs0网桥上增加两个端口port1、port2</span><br><span class="line">ovs-vsctl add-port ovs0 port1 tag=100</span><br><span class="line">ovs-vsctl add-port ovs0 port2 trunk=100,200</span><br></pre></td></tr></table></figure><p>pipework就是使用这样的方式将veth pair的一段加入到ovs0网桥的，只不过并不需要用到trunk端口。在向Open vSwitch中添加端口时，若不添加任何限制，此端口则转发所有帧。</p><h4 id="多主机Docker容器的VLAN划分"><a href="#多主机Docker容器的VLAN划分" class="headerlink" title="多主机Docker容器的VLAN划分"></a>多主机Docker容器的VLAN划分</h4><p>介绍完单主机VLAN的隔离，将进一步讲解多主机的情况。多主机VLAN的情况下，可定有属于同一VLAN但又在不同主机上的容器，因此多主机VLAN划分的前提时跨主机通信。在上面介绍过两种跨主机通信的方式，要使不同主机上的容器处于同一VLAN，就只能采用桥接方式。桥接需要将主机的一块网卡桥接到容器所连接的Open vSwitch网桥上，使用一块额外的网卡eth1来完成，桥接的网卡需要卡其混杂模式。下图演示了一个多主机Docker容器VLAN划分的例子。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-18.png" title="多主机Docker容器VLAN划分"></center><p>这里，我们将不同VLAN的容器设在同一个子网中，仅仅是为了演示隔离效果。上图中，host1上的 con1和host2的con3属于VLAN100，con2和con4属于VLAN200.由于会有VLAN ID为100和VLAN ID为200的帧通过，物理交换机上连接host1和host2的端口映射为trynk端口。host1和host2上eth1没有设置VLAN的限制，是允许所有帧通过的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 在host1上</span><br><span class="line">docker run -itd --name con1 busybox </span><br><span class="line">docker run -itd --name con2 busybox</span><br><span class="line">pipework ovs0 con1 192.168.0.1/24 @100</span><br><span class="line">pipework ovs0 con2 192.168.0.2/24 @200</span><br><span class="line">ovs-vsctl add-port ovs0 eth1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在host2上</span><br><span class="line">docker run -itd --name con3 busybox </span><br><span class="line">docker run -itd --name con4 busybox</span><br><span class="line">pipework ovs0 con3 192.168.0.3/24 @100</span><br><span class="line">pipework ovs0 con4 192.168.0.4/24 @200</span><br><span class="line">ovs-vsctl add-port ovs0 eth1</span><br></pre></td></tr></table></figure><p>完成之后，通过ping命令测试实验效果即可。</p><h3 id="OVS隧道模式"><a href="#OVS隧道模式" class="headerlink" title="OVS隧道模式"></a>OVS隧道模式</h3><p>在上面的内容中，讲述了跨主机通信的两种方法，并提到了这两种方法有一个局限——要求主机在同一个子网中。当基础设施的规模足够强大时，这种局限性就会暴露出来，比如两个数据中心的Docker容器需要通信时，这两种方法就会失效。 当前的主流隔离技术VLAN在Docker中的应用，然而VLAN也有诸多限制。首先，VLAN是在二层帧头上做文章，也要求主机在同一个子网中。其次，提到过VLAN ID只有12各比特位，即可用的数量为4000个左右，这样的数量对于公有云或大型虚拟化环境而言捉襟见肘。除此之外，VLAN配置比较繁琐且不够灵活。这些问题就是当前云计算所面临的网络考验，目前比较普遍的解决方法是使用Overlay的虚拟化网络技术。</p><h4 id="1-OVerlay技术模型"><a href="#1-OVerlay技术模型" class="headerlink" title="1. OVerlay技术模型"></a>1. OVerlay技术模型</h4><p>Overlay网络其实就是隧道技术，即将一种网络协议包装在另一种协议中传输的技术。如果有两个使用IPv6的站点之间需要通信，而它们之间的网路哦使用IPv4协议，这是就需要IPv6的数据包在IPv4数据包中进行传输。隧道被广泛用于连接因而使用不同网络而被隔离的主机和网络，使用隧道技术搭建的网络就是i所谓Overlay网络。它能有效地覆盖在基础网络之上，该模型可以很好地解决跨网络Docker容器实现二层通信的需求。</p><p>在普通的网络传输中，源IP地址和目的IP地址是不变的，而二层的帧头在每个路由器节点上都会改变，这是TCP/IP协议所作的规定。那么，如何使两个中间隔离了因特网的主机像连在同一台交换机上一样通信呢？如果将以以太网帧封装在IP包中，通过中间的因特网，最后传输到目的网络中再解封装，这样就可以保证二层帧头在传输过程中不改变，这也就是早起Ethernet in IP的二层Overlay技术。至于多租户隔离问题，解决思路是将不同租户的流量放在不同的隧道中进行隔离。用于封装传输数据的协议也会有一个类似VLAN ID的标识，以区分不同的隧道。</p><p>当前主要的OVerlay技术有VXLAN（Virtual Extensible LAAN）和NVAGE（Network Virtualization using Generic Routing Encapsulation）。VXLAN是将以太网保温封装在UDP传输层上的一种隧道转发模式，它采用24位比特标识二层网络分段，成为VNI（VXLAN Network Identifier），类似于VLAN ID的作用。NVGRE同VXLAN类似，它使用GRE的方法来打通二层与三层的通路，采用24位比特的GRE key来作为网络标识（TNI）。</p><h4 id="2-GRE简介"><a href="#2-GRE简介" class="headerlink" title="2. GRE简介"></a>2. GRE简介</h4><p>NVGRE使用GRE协议来封装需要传送的数据，因此需要先了解一下GRE。GRE协议可以用来封装任何其他网络层的协议。</p><h4 id="3-GRE实现Docker容器跨网络通信（容器在同一子网中）"><a href="#3-GRE实现Docker容器跨网络通信（容器在同一子网中）" class="headerlink" title="3. GRE实现Docker容器跨网络通信（容器在同一子网中）"></a>3. GRE实现Docker容器跨网络通信（容器在同一子网中）</h4><p>既然GRE共呢个如此强大，可以实现真正的容器间跨主机通信，那么我们该如何使用它呢？目前比较普遍的方式是结合Open vSwitch使用。前文简单介绍过Open vSwitch是一个功能强大的虚拟交换机，支持GRE、VXLAN等协议，因此Open vSwitch是一个不错的选择。</p><h4 id="4-GRE实现Docker容器跨网络通信（容器在不同子网中）"><a href="#4-GRE实现Docker容器跨网络通信（容器在不同子网中）" class="headerlink" title="4. GRE实现Docker容器跨网络通信（容器在不同子网中）"></a>4. GRE实现Docker容器跨网络通信（容器在不同子网中）</h4><h4 id="5-多租户环境下的GRE网络"><a href="#5-多租户环境下的GRE网络" class="headerlink" title="5. 多租户环境下的GRE网络"></a>5. 多租户环境下的GRE网络</h4><p>在多租户云环境下，租户之间的隔离显得非常重要。传统的VLAN方法有诸多限制，在大型公有云环境下并不合适。Overlay网络在虚拟化场景中除了实现虚拟机间的跨网路通信外，还能填补VLAN的不足，满足多租户的隔离需求，OpenStack的Neutron项目就是一个很好的实现例子。</p><p>OpenStack是一个开源的IaaS云平台，简而言之，就是能为用户提供虚拟机服务，如计算、存储和网络。Neutron是OpenStack的一个子项目，提供虚拟环境下的网络功能。Neutron有多种模式以满足不同的需求，其中GRE模式就是一个典型的多租户场景网络解决方案。鉴于OpenStack可以很好地管理虚拟机，并且有强大的网络功能，不妨学习一下Neutron的GRE模式，这对解决Docker网络问题有很好的启发作用。</p><p>Neutron的GRE模式也是使用Open vSwitch来实现的，不同在于，Neutron的GRE模式中有一个专门用来做GRE隧道的Open vSwitch网桥br-tun，该网桥使用流表来转发数据包。流表是什么呢？其实，在Open vSwitchh中，有两种工作方式——普通模式和流表模式。</p><p>在普通模式下，Open vSwitch交换机就如同一台普通的二层MAC地址自学习交换机一样，对于每一个收到帧，记录其源MAC地址和进入的端口，然后根据目的MAC地址转发到合适的端口，或者洪泛到所有的端口。</p><p>流表是OpenFlow引入的一个概念，OpenFloe是一种新型的网络模型，可以用来实现SDN（Software Defined Network）。流表是由流表项组成的，每个流表项就是一个转发规则。每个流表项由匹配域、处理指令、优先级等组成。匹配域定义了流表的匹配规则，匹配域的匹配字段相当丰富，可以是二层MAC地址、三层IP地址、四层TCP端口等，而不仅仅是MAC地址。处理指定定义了当数据包满足匹配域的规则时，需要执行的动作。常见的处理动作包括将数据从某个端口转发出去、修改数据协议头部的某个字段、提交给其他流表等。每一个流表项属于一个特定的流表，并有一个给定的优先级。当有数据进入流表模式的Open vSwitch交换机后，首先会进入table 0，按照流表项的优先级从高到低匹配。如果在table 0中没有匹配到相应的规则则丢弃；如果匹配成功，则执行相应的动作。</p><p>Open vSwitch的流表模式就是按照流表项转发数据的工作方式。如何判断Open vSwitch交换机使用的是哪种模式呢？可以使用ovs-ofctl dump-flows <bridgenname>命令查看，如果仅有一条“NORMAL”的规则，则使用的是普通模式，如下所示。</bridgenname></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ovs-ofctl dump-flows ovs0</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=3702.998s, table=0, n_packets=37, n_bytes=2442, idle_age=3633, priority=0 actions=NORMAL</span><br></pre></td></tr></table></figure><p>具体实验过程略。。。</p><p>下面介绍其中需要用到的一些关键命令的示例。</p><ol><li>使用pipework将Docker容器连接在br-int网桥上，并设置VLAN。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ovs-ctl add-br br-int</span><br><span class="line"># pipework br-int con1 192.168.100.1/24 @1</span><br></pre></td></tr></table></figure><ol start="2"><li>使用ovs-ofctl add-flow <bridgename>命令向Open vSwitch添加流表信息。</bridgename></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-ofctl add-flow vr-tun &quot;hard_timeout idle_timeout=0 priority in_port=1 actions=resubmit(,1)&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>在Open vSwitch创建GRE隧道</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ovs-vsctl add-port br-tun gre0 --set Interface gre0 type=gre options:local_ip=192.168.100.100 options:in_key=flow options:remote_ip=192.168.100.101 options:out_key=flow</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker高级网络实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dcoekr与容器安全</title>
      <link href="/2018/07/21/Docker-security/"/>
      <url>/2018/07/21/Docker-security/</url>
      <content type="html"><![CDATA[<h3 id="Docker与容器安全"><a href="#Docker与容器安全" class="headerlink" title="Docker与容器安全"></a>Docker与容器安全</h3><p>容器安全是目前Docker社区极为关注的一个问题，Docker能否大规模用于生产环境，尤其是公有云环境，关键就在于Docker是否能提供安全的环境。本节我们将围绕Docker目前的安全机制、使用Docker过程中可能存在的安全问题以及如何增强Docker安全这三个方面，一起来探讨Docker与容器安全的问题，希望通过原理性的分析能够尽可能地给大家以启发。</p><a id="more"></a><h3 id="Docker的安全机制"><a href="#Docker的安全机制" class="headerlink" title="Docker的安全机制"></a>Docker的安全机制</h3><p>Docker目前已经在安全方面做了一定的工作，包括Docker dameon在以TCP形式提供服务的同时使用传输层安全协议；在构建和使用镜像时会验证镜像的签名证书；通过cgroups及namespaces来对容器进行资源限制和隔离；提供自定义容器的能力（capabilty）的接口；通过定义seccomp profile限制容器内进程系统调用的范围等。如果合理地实现上述安全方案，可以在很大程度上提高Docker容器的安全性。</p><h4 id="1-Docker-daemon安全"><a href="#1-Docker-daemon安全" class="headerlink" title="1. Docker daemon安全"></a>1. Docker daemon安全</h4><p>Docker向外界提供服务主要有4中通信形式，默认是以Unix域套接字的方式来与客端进行通信。这种通信方式相对于TCP形式比较安全，只有进入daemon宿主机所在机器并且有权访问我daemon的域套接字才可以和daemon建立通信。</p><p>如果以TCP形式向外界提供服务，可以访问到daemon所在主机的用户都可能成为潜在的攻击者。同时，由于数据传输需要通过网络进行，数据可能备截获甚至修改。为了提高基于TCP的通信方式的安全性，Docker为我们提供TLS（Transport Layer Security）传输层安全协议。在Docker中可以设置–tlsverify来进行安全传输检验，通过–tlscacert（信任的证书 ）、–tlskey（服务器或者客户端密钥）、–tlscert（证书位置）3个参数来配置。安全认证主要是在服务器端设置，客户端可以对服务端进行验证。客户端在访问daemon时只需要提供签署的证书，那么就可以使用Docker daemon服务。Docker官网提供了详细的证书配置过程，有兴趣的读者可以参考官网daemon HTTPS的配置。</p><h4 id="2-镜像安全"><a href="#2-镜像安全" class="headerlink" title="2. 镜像安全"></a>2. 镜像安全</h4><p>Docker目前提供registry访问权限控制以保证镜像安全。另外，Docker从1.3版本就开始有了镜像数字签名功能，用以防止官方镜像被篡改或损坏，以此来保证官方镜像的完整性，但是镜像校验功能仅当访问官方V2 registry时才会生效，需要用户进行docker login登录。</p><h5 id="Docker-registry访问控制"><a href="#Docker-registry访问控制" class="headerlink" title="Docker registry访问控制"></a>Docker registry访问控制</h5><h5 id="验证校验和"><a href="#验证校验和" class="headerlink" title="验证校验和"></a>验证校验和</h5><p>进行校验和用来保证镜像的完整性，以预防可能出现的镜像的破坏。Docker registry下的每一个镜像都有对应拥有自己的manifest文件以及该文件本身的签名。其中的信息包括镜像所在的命名空间、镜像在此仓库下对应的标签、镜像校验方法及校验和、镜像形成时的运行信息以及manifest文件本身的签名。</p><h4 id="3-内核安全"><a href="#3-内核安全" class="headerlink" title="3. 内核安全"></a>3. 内核安全</h4><p>内核为容器提供两种技术cgroups和namespace，分别对容器进行资源限制和资源隔离，使容器仿佛是在使用一台独立主机环境。</p><h5 id="cgroups资源限制"><a href="#cgroups资源限制" class="headerlink" title="cgroups资源限制"></a>cgroups资源限制</h5><p>容器本质上是进程，cgroups的存在就是为了限制宿主机上不同容器的资源使用量，避免单个容器耗尽宿主资源而导致其他容器异常。</p><h5 id="namespace资源隔离"><a href="#namespace资源隔离" class="headerlink" title="namespace资源隔离"></a>namespace资源隔离</h5><p>为了使容器处在独立的环境中，Docker使用namespace技术来隔离容器，使容器与容器之间、容器与宿主机之间相互隔离。</p><p>Docker对uts、ipc、pid、network、mount这5种namespace有完整的支持，而Docker 1.10版本的发布又增加了对user namespace的支持。只要用户在启动Docker daemon的时候指定了–user-remap，那么当用户运行容器时，容器内部的root用户并不等于宿主机内的root用户，而是映射到宿主机上的普通用户。除了上述资源之外，还有诸多系统资源未进行隔离，如/proc和/sys信息未完成隔离，SELinux、time、syslog和/dev设备等信息均未隔离。可见在内核安全方面，Docker具体真正的安全还有一定距离。</p><h4 id="4-容器之间的网络安全"><a href="#4-容器之间的网络安全" class="headerlink" title="4. 容器之间的网络安全"></a>4. 容器之间的网络安全</h4><p>Docker daemon指定–icc标志的时候，可以禁止容器与容器之间的通信，主要通过设定iptables规则实现。</p><h4 id="5-Docker容器能力限制"><a href="#5-Docker容器能力限制" class="headerlink" title="5. Docker容器能力限制"></a>5. Docker容器能力限制</h4><p>docker run参数种提供了容器能力配置的接口，可以在创建容器时在容器默认能力的基础上对容器的能力进行增加或减少，配置命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage:docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">Run a command in a new container</span><br><span class="line">--cap-add=[]Add Linux capabilities</span><br><span class="line">--cap-drop=[]Drop Linux capabilities</span><br></pre></td></tr></table></figure><p>什么是能力呢？Linux超级用户权限划分为若干组，每一组代表了所能执行的系统调用操作，以此来切割超级用户权限。比如NET_RAW表示用户可以创建原生套接字。如果是root用户，但是被剥夺了这些能力，那么依旧无法执行系统调用。这样做的好处是可以分解超级用户所拥有的权限。对于普通用户，此时可以考虑为该用户增加一些能力，但不需要赋予其所有超级用户权限。Docker正是使用这种方法在更细的粒度上限制容器进程所能使用的系统调用。</p><p>容器默认拥有的能力包括CHOWN、DAC_OVERRIDE、FSETID、FOWNER、MKNOD、NET_RAW、SETGID、SETUID、SETFCAP、SETPCAP、NET_BINDSERVICE、SYS_CHROOT、KILL和AUDIT_WRITE，其中较为主要的几个作用如下。</p><ul><li>CHOWN：允许任意更改文件UID以及GID。</li><li>DAC_OVERRIDE：允许忽略文件的读、写、执行访问权限检查。</li><li>FSETID：允许文件修改后保留setuid/setgid标志位。</li><li>SETGID：允许改变进程组ID。</li><li>SETFCAP：允许向其他进程转移或者删除能力。</li><li>NET_RAW：允许创建RAW和PACKET套接字。</li><li>MKNOD：允许使用mknod创建指定文件。</li><li>SYS_REBOOT：允许使用reboot或者kexec_load。kexec_load功能是加载新的内核作为reboot重新启动所需内核。</li><li>SYS_CHROOT：允许使用chroot。</li><li>KILL：允许发送信号。</li><li>NET_BIND_SERVICE：允许绑定常用端口号（端口号小于1024）.</li><li>AUDIT_WRITE：允许审计日志写入。</li></ul><h5 id="削减能力"><a href="#削减能力" class="headerlink" title="削减能力"></a>削减能力</h5><p>可以通过命令削减Docker容器进程的能力，假设不需要使用SETGID、SETUID的能力，可以执行如下操作。</p><p><code>docker run --cap-drop SETUID --cap-drop SETGID -it ubuntu:trusty /bin/bash</code></p><p>削减了这两个能力以后，容器进程试图调用setuid、setgid时会执行失败。</p><p>可以通过docker ps &amp;&amp; docker inspect命令查看容器的进程cid，指定pscap | grep cid查看进程的能力，执行结果如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root bash chown, dac_override, fowner, fsetid, kill, setpcap, net_bind_service, net_raw, sys_chroot, mknod, audit_write, setfcap</span><br></pre></td></tr></table></figure><p>可以看到，此时容器进程能力中已经没有SETGID和SETUID能力了。</p><h5 id="增添能力"><a href="#增添能力" class="headerlink" title="增添能力"></a>增添能力</h5><p>如果容器需要使用默认能力之外的能力，可以通过在docker run时使用–cap-add参数来增加能力，如给容器增加一个允许修改系统时间的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --cap-drop ALL --cap-add SYS_TIME ntpd /bin/sh</span><br></pre></td></tr></table></figure><p>同上，查看进程的能力，执行结构如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24015 26333 root bash chown, dac_override, fowner, fsetid, kill, setpcap, net_bind_service, net_raw, sys_chroot, sys_time, mknod, audit_write, setfcap</span><br></pre></td></tr></table></figure><p>可以看到容器中已经增加了sys_time能力，可以修改系统时间了。</p><h4 id="6-seccomp"><a href="#6-seccomp" class="headerlink" title="6. seccomp"></a>6. seccomp</h4><p>从Docker 1.10版本开始，Docker安全特性中增加了对seccomp的支持。seccomp（secute computing mode）是Linux的一种内核特性，可用于限制进程能够调用的系统调用（systemc call）的范围，从而减少内核的供给面，被管饭用于构建沙盒。</p><h5 id="使用seccomp"><a href="#使用seccomp" class="headerlink" title="使用seccomp"></a>使用seccomp</h5><p>使用seccomp的前提是Docker构建时已包含seccomp，并且内核中的CONFIG_SECCOMP已开启。可使用如下方法检查内核是否支持seccomp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /boot/config-`uname -r` | grep CONFIG_SECCOMP=</span><br><span class="line">CONFIG_SECCOMP=y</span><br></pre></td></tr></table></figure><blockquote><p>说明 Docker目前使用seccomp 2.2.1版本，该版本仅在如下发行版中得到支持：Debian 9 “Stretch”、Ubuntu 15.10、 Wily、Fefora22、CeontOS7和Oracle LInux 7。在Ubuntu 14.04上启用Docker的seccomp功能，需要下载最新的Docker Linux Binary。</p></blockquote><h6 id="seccomp-profile"><a href="#seccomp-profile" class="headerlink" title="seccomp profile"></a>seccomp profile</h6><p>在Docker中，我们通过为每个容器编写json格式的seccomp profile来实现对容器中进程系统调用的限制。</p><h6 id="使用seccomp-profile"><a href="#使用seccomp-profile" class="headerlink" title="使用seccomp profile"></a>使用seccomp profile</h6><p>默认情况下，Docker运行容器时会使用默认的seccomp profile。可将unconfined传入docker run的security-opt seccomp选项禁用默认的seccomp profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker run --rm -it --security-opt seccomp=unconfined hello-world</span><br></pre></td></tr></table></figure><p>也可以通过docker run的security-opt seccomp选项，使用特定的seccomp profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker run --rm -it --security-opt seccomp=/path/to/seccomp/profile.json hello-world</span><br></pre></td></tr></table></figure><p>理想状况下，不同的Docker容器应根据自身的运行需要，定义个性化的seccomp profile，限制运行时的系统调用。但定制seccomp profile并非易事，普通程序员可能为了防止容器内的应用出现难以预料的故障而方式限制很多的系统调用。</p><h4 id="2-Docker-安全问题"><a href="#2-Docker-安全问题" class="headerlink" title="2. Docker 安全问题"></a>2. Docker 安全问题</h4><h5 id="1-磁盘资源限制问题"><a href="#1-磁盘资源限制问题" class="headerlink" title="1. 磁盘资源限制问题"></a>1. 磁盘资源限制问题</h5><p>容器本质上是一个进程，通过镜像层叠的方式来构建容器的文件系统。当需要改写文件时，把改写的文件复制到最顶层的读写层，其本质上还是在宿主机文件系统的某一目录下存储这些信息。所有容器的rootfs最终存储在宿主机上。所以，既有可能出现一个容器把宿主机上所有的磁盘容量耗尽的情况，届时其他容器将无法进行文件存储操作，所以有必要对容器的磁盘使用量进行限制。具体限制方法将在后续内容中介绍。</p><h5 id="2-容器逃逸问题"><a href="#2-容器逃逸问题" class="headerlink" title="2. 容器逃逸问题"></a>2. 容器逃逸问题</h5><p>容器的安全问题一致制约着容器技术的进一步发展，在全虚拟化和半虚拟化中，每一个租户都运行一个内核，比Docker使用操作系统虚拟化更安全。操作系统虚拟化指的是共享内核、内存、CPU以及磁盘等，所以容器的安全问题特别突出，其中尤以容器逃逸问题最为著名。当容器从监狱（jail）中逃出时，所有容器以及宿主机都将收到威胁。容器逃逸的情况很多，目前已经发生多次容器逃逸的时间，下面为大家介绍2014年的一个案例，该案例通过open_by_handle_at调用暴力扫描宿主机文件系统获取主机敏感文件，以此达到逃逸效果。</p><p>这个案例即著名的shocker.c程序，详情请见：<a href="https://yq.aliyun.com/articles/57803" target="_blank" rel="noopener">https://yq.aliyun.com/articles/57803</a></p><h5 id="3-容器DoS攻击与流量限制问题"><a href="#3-容器DoS攻击与流量限制问题" class="headerlink" title="3. 容器DoS攻击与流量限制问题"></a>3. 容器DoS攻击与流量限制问题</h5><p>目前，在公网上的DoS攻击（deny-of-service，拒绝服务攻击）预防已经有很成熟的产品，这对传统网络有比较好的防御效果，但是随着虚拟化技术的兴起，攻击数据可能不需要通过物理网卡就可以攻击同一个宿主机下的其他容器。所以传统DoS预防措施对容器之间的DoS攻击没有太大效果。</p><p>默认的Docker网络是网桥模式，所有容器连接到网桥上。容器通过veth pair技术创建veth pair网卡，然后将其中一端放入容器内部并且命名为eth0，另外一张网卡留在宿主机网络环境中。容器内网卡发出数据包都会发往宿主机上对应网卡，再由物理网卡进行转发。同理，物理网卡收到的数据根据地址会相应发送到不同的容器内。实际上所有容器在共用一张物理网卡。如果在同一宿主机中的某一个容器抢占了大部分带块，将会影响其他容器的使用，例如大流量的容器内下载程序会影响其他交互式应用的访问。</p><h5 id="4-超级权限问题"><a href="#4-超级权限问题" class="headerlink" title="4. 超级权限问题"></a>4. 超级权限问题</h5><p>Docker在0.6版本的时候给容器引入了超级权限，可以在docker run时加上–privileged参数，使容器获得超级权限。下面来看看–privileged之后做了说明？</p><p>Docker首先去检测docker run时是否指定了–privileged标志，如果指定就调用setPrivileged这个操作。setPrivileged函数完成两件事情，一是获取所有能力赋值给容器，而是扫描宿主机所有设备文件挂载到容器内。</p><p>首先执行container.Capalilities = capabilities.GetAllCapabilities()获取超级用户权限的所有能力，然后将其设置为container的能力。之后再执行’hostDeviceNodes, err := devices.GetHostDeviceNodes()’获取宿主的设备文件，将其设置为MountConfig参数传入。下面来分别解释一下这两个函数做了扫描。</p><h6 id="GetAllCapabilities做了什么"><a href="#GetAllCapabilities做了什么" class="headerlink" title="GetAllCapabilities做了什么"></a>GetAllCapabilities做了什么</h6><p>能力的主体是进程，通过限制各个进程的能力来限制用户的权限。能力分为effective、permitted、inheritable和bounding这4种。</p><ul><li>effecitve：表示进程当前有效能力位图（为徒的每一比特代表从超级用户权限分离出来的能力，该位为1则代表拥有该能力）。</li><li>permitted：表示进程可以使用的能力位图，这和effective的区别在于permitted可以有很多能力，但是进程不一定用，可以通过系统调用进行更改，但是最多不超过permitted赋予的能力。</li><li>inheritable：表示当前进程的子进程可以继承的能力位图。</li><li>bounding：表示inheritable能力的超集，用来限制可以加入到inheritable集合的能力。</li></ul><p>GetAllCapabilities()函数相当于把超级用户的权限全部赋值给当前容器，也就是当前容器不再受超级权限能力的限制。</p><p>下面来看看具体的区别。</p><ul><li>执行docker run -it ubuntu:trusty /bin/bash。</li><li>通过docker inspect container_id查看容器进程pid，可在state字段查询到。</li><li>执行cat /proc/$pid/status可以查看到如下4个capability位图。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CapInh:00000000a80425fb</span><br><span class="line">CapPrm:00000000a80425fb</span><br><span class="line">CapEff:00000000a80425fb</span><br><span class="line">CapBnd:00000000a80425fb</span><br></pre></td></tr></table></figure><ul><li>再次执行docker run -it –privileged ubuntu:trusty /bin/bash操作同上，查看/proc/$pid/status，可以看到如下4个capability位图。可以看到加上–privileged的能力位图与超级用户的能力位图一样。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CapInh:0000001fffffffff</span><br><span class="line">CapPrm:0000001fffffffff</span><br><span class="line">CapEff:0000001fffffffff</span><br><span class="line">CapBnd:0000001fffffffff</span><br></pre></td></tr></table></figure><h6 id="GetHostDeviceNodes做了什么"><a href="#GetHostDeviceNodes做了什么" class="headerlink" title="GetHostDeviceNodes做了什么"></a>GetHostDeviceNodes做了什么</h6><p>GetHostDeviceNodes将会获取宿主机目录下的所有设备文件，并将其设置到容器。下面来看GetHostDeviceNodes具体实现。GetHostDeviceNodes函数调用getDeviceNodes(“/dev”)，在getDeviceNodes()函数中，首先通过ioutilReadDir读取/dev目录，遍历该目录下的所有文件。如果是目录，那么除了pts、shm、fd、mqueue以及console之外，其他目录都保存下来，返回给调用者。如果不是目录，就直接将此设备加入到返回的结果中，返回给调用者。</p><p>查看下Docker容器没有–privliege参数时，即普通权限下的/dev目录文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@4a616382a0eb:/# ls /dev</span><br><span class="line">console  core  fd  full  mqueue  null  ptmx  pts  random  shm  stderr  stdin  stdout  tty  urandom  zero</span><br></pre></td></tr></table></figure><p>相比之下，再来看看加了–privliege参数时，即超级权限下的/dev目录文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@c4468ba4ed2c:/# ls /dev </span><br><span class="line">agpgart        cpu_dma_latency  hidraw0       midi                port    sda1  snapshot  tty1   tty17  tty24  tty31  tty39  tty46  tty53  tty60  ttyS1    usbmon2  vcsa   vga_arbiter</span><br><span class="line">autofs         crash            hpet          mqueue              ppp     sda2  snd       tty10  tty18  tty25  tty32  tty4   tty47  tty54  tty61  ttyS2    vcs      vcsa1  vhci</span><br><span class="line">bsg            dmmidi           input         net                 ptmx    sda3  sr0       tty11  tty19  tty26  tty33  tty40  tty48  tty55  tty62  ttyS3    vcs1     vcsa2  vhost-net</span><br><span class="line">btrfs-control  dri              kmsg          network_latency     pts     sda4  stderr    tty12  tty2   tty27  tty34  tty41  tty49  tty56  tty63  uhid     vcs2     vcsa3  vmci</span><br><span class="line">bus            fb0              loop-control  network_throughput  random  sda5  stdin     tty13  tty20  tty28  tty35  tty42  tty5   tty57  tty7   uinput   vcs3     vcsa4  vsock</span><br><span class="line">console        fd               mapper        null                raw     sg0   stdout    tty14  tty21  tty29  tty36  tty43  tty50  tty58  tty8   urandom  vcs4     vcsa5  zero</span><br><span class="line">core           full             mcelog        nvram               rtc0    sg1   tty       tty15  tty22  tty3   tty37  tty44  tty51  tty59  tty9   usbmon0  vcs5     vcsa6</span><br><span class="line">cpu            fuse             mem           oldmem              sda     shm   tty0      tty16  tty23  tty30  tty38  tty45  tty52  tty6   ttyS0  usbmon1  vcs6     vfio</span><br></pre></td></tr></table></figure><p>可以看到，加了特权后，宿主机所有设备文件都挂载在容器内。</p><p>这一节可以看到，–privilege参数给的权限太多，使用–privilege时需要慎重考虑。如果需要挂载某个特定的设备，可以通过–device=/dev/sdc:dev/xvdc:rwm操作，来把容器需要使用的设备定向挂载到容器，而不是把宿主机的全部设备挂载到容器上。此外，可以通过–add-cap和–drop-cap这两个Docker参数来对容器的能力进行调整，以最大限度地保证容器使用的安全。</p><h4 id="Docker安全的解决方案"><a href="#Docker安全的解决方案" class="headerlink" title="Docker安全的解决方案"></a>Docker安全的解决方案</h4><h5 id="1-SELinux"><a href="#1-SELinux" class="headerlink" title="1. SELinux"></a>1. SELinux</h5><p><strong>为什么在Docker中使用SELinux</strong></p><p>阅读完我们对SELinux的介绍，可能你会文，为什么要在Docker中使用SELinux呢？原因可简单总结为以下3点。</p><ul><li>SELinux把所有进程和文件都打上标签。进程之间相互隔离，SELinux策略控制进程如何访问资源，也即是限制容器如何去访问资源。</li><li>SELinux策略是全局的，它不是针对具体用户设定，而是强制整个系统去遵循，使攻击者很难突破。</li><li>减少提权攻击的风险，如果一个进程被攻陷，攻击者将会获得该进程的所有权限，访问该进程能访问的权限。比如Apache的httpd进程被攻陷，那么它仅能访问httpd所能访问的文件，而无法去访问其他目录的文件（如/home、/etc/passwd目录就不行），防止了更为严重的危害。</li></ul><p>虽然SELinux功能强大，但是注意SELinux不是一个杀毒软件，不能替换防火墙、密码等其他安全体系。SELinux不是对现有的安全体制进行替换，而是增添一道严格的防线而已。</p><p><strong>Docker中启动SELinux</strong></p><p>对SELinux有了一定了解之后，我们将介绍如何在Docker中使用SELinux。在Docker启动时执行docker -d –selinux-enabled=true让Docker daemon启动SELinux，当然前提使宿主机已经安装了SELinux，并且确保SELinux已经处于enforcing模式或者处于Permissive状态。对于不同的应用需要设置不同的能力，对应用的能力进行定制化。</p><h5 id="2-磁盘限额"><a href="#2-磁盘限额" class="headerlink" title="2. 磁盘限额"></a>2. 磁盘限额</h5><p>Docker目前提供–storage-opt[]来进行磁盘限额，不过此选项目前仅仅支持Device Mapper文件系统的磁盘限额。其他几种存储引擎都还不支持。由于目前cgroups没有对磁盘资源进行限制，Linux磁盘限额使用的quota技术主要是基于用户和文件系统的，基于进程或者目录磁盘限额还是比较麻烦。下面提供几种可能解决方案去实现容器磁盘限额。</p><ul><li>为每一个容器创建一个用户，所有用户共用宿主机上的一块磁盘。通过限制用户在这块磁盘上的使用量来限定容器的磁盘使用量。不过磁盘限额仅仅对普通用户有用，对超级用户没有限制。</li><li>选择支持可以对某一个目录进行限额的文件系统支持，比如XFS可以支持用户、用户组、目录、项目等形式对磁盘使用量进行限制。</li><li>让Docker定期检查每一个容器的磁盘使用量，这时最差的一种方法，对Docker本身的性能也会造成影响。</li><li>创建虚拟文件系统，此文件系统仅供某一个容器使用。</li></ul><h5 id="3-宿主机内容器流量限制"><a href="#3-宿主机内容器流量限制" class="headerlink" title="3.宿主机内容器流量限制"></a>3.宿主机内容器流量限制</h5><p>Dcoker已经为肉过期的资源限制做了许多工作，但是在网络带宽方面却没有进行限制，这就可能导致一些安全隐患，尤其是使用Docker构建容器云时，可能存在多租户共同使用宿主机资源的情况，这种问题就显得尤为突出，极有可能出现诸如容器内Dos攻击等危害。无限制的大流量访问会破坏容器的实时交互能力，所以需要对容器流量进行限制。</p><p><strong>trafic controller概述</strong></p><p>traffic controller是Linux的流量控制模块，其原理是为数据包建立队列，并且定义了队列中数据包的发送规则，从而实现在技术上对流量进行限制、调度等控制操作。</p><p>traffic controller中的流量控制队列分为两种：无类队列和分类队列。</p><ul><li>无类队列就是对进入网卡的数据进行统一对待，无类对垒能够接收数据包并对网卡流量整形，但是不能对数据包进行细致划分，无类队列规定主要有PFIFO_FAST、TBF和SFQ等，无类队列的流量整形手段主要是排序、限速以及丢包。</li><li>分类队列则是对进入网卡的数据包根据不同的需求以分类的方式区分对待。数据包进入分类队列后，通过过滤器对数据包进行分类，过滤器返回一个决定，这个决定指向某一个分类，队列就根据这个返回的决定把数据包发送到相应的某一类队列中排队。每个子类可以再次使用自己的过滤器对数据进一步的分类，直到不需要分类位置，数据包最终会进入相关类的队列中排队。</li></ul><h5 id="4-GRSecurity内核安全增强工具"><a href="#4-GRSecurity内核安全增强工具" class="headerlink" title="4. GRSecurity内核安全增强工具"></a>4. GRSecurity内核安全增强工具</h5><p>同一个宿主上的容器是共享内核、内存、磁盘以及带宽等，所有容器都在共享宿主的物理资源，所以Linux内核提供了namespace来进行资源隔离，通过cgroups来限制容器的资源使用。但是在内存安全问题上仍有很多问题，比如C/C++等非内存安全的怨言，并不会去检查数组的边界，程序可能会超越边界，而破坏相邻的内存区域。因此需要一些内存破坏的防御工作，去补充namespace和cgroups。GRSecurity是一个对内核的安全扩展，通过智能访问控制来阻止内存破坏，预防0day漏洞等。GRSecurity对用户提供了丰富的安全限制，可以提供内存破坏防御、文件系统增强等各式各样的防御。</p><h5 id="5-关于fork炸弹"><a href="#5-关于fork炸弹" class="headerlink" title="5. 关于fork炸弹"></a>5. 关于fork炸弹</h5><p>众所周知，fork炸弹（fork bomb）是一种利用系统调用fork（或其他等效的方式）进行的服务阻断攻击的手段。简单来说，所谓的fork炸弹就是以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，从而使系统无法运行新程序。</p><p>另一方面，由于fork炸弹程序所创建的所有示例都不会探测空缺的进程槽并尝试取用以创新进程，因而即使在某进程终止后也基本不可能运行新进程。而且，fork炸弹生成的子程序在消耗进程表空间的同时也会占用CPU和内存，从而导致系统与现有进程运行速度放缓，相应时间也会随之大幅增加，以致于无法正常完成任务，从而使系统的正常运作受到严重影响。</p><p>这个攻击手段在容器云中尤为明显：毕竟容器中运行着的应用使用户自己上传的，它完全可以就是一个fork炸弹；而不同用户的容器往往会共用一个宿主机，再加上容器本身再内核隔离性的不足，使得一旦fork炸弹被触发，能够带来的影响往往使灾难性的。</p><p>素以fork炸弹的应付从一开始就是很受社区关注的（比如issue 6279）。不过目前为止，现有的方案都不算完美解决。</p><p><strong>通过ulimit限制最大进程数目</strong></p><p>说起进程数限制，大家可能知道ulimit的nproc这个配置：当调用fork创建一个进程时，如果该UID用户的进程数之和大于等于进程的RLIMIT_NPROC值时，fork调用将会失败返回。</p><p>由于ulimit再1.6.0以上的Docker已经被支持，所以用户可以直接使用docker run –ulimit来为每个容器单独配置ulimit参数了（比如nproc=2）。可遗憾的是，张茹上面所说，nproc是一个以用户为管理单位的设置选项，它调节的是属于一个用户UID的最大进程数之和。这是nproc与其他ulimit选项的一个显著的不同点。</p><p>这就意味着这个限制是对于该容器首进程所属的用户（以UID区分）下所有的容器进程有效的，而并不是意味着我们预想中那样能够分别对每个容器里能够创建的进程数做限制，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 我们使用daemon用户启动4个容器，并设置允许最大进程数为3</span><br><span class="line">docker run -d -u daemon --ulimit nproc=3 busybox top</span><br><span class="line">docker run -d -u daemon --ulimit nproc=3 busybox top</span><br><span class="line">docker run -d -u daemon --ulimit nproc=3 busybox top</span><br><span class="line">docker run -d -u daemon --ulimit nproc=3 busybox top # 这个容器会失败报错：资源不足</span><br></pre></td></tr></table></figure><p>上述例子中，我们指定使用daemon用户来在容器中启动top进程，结果启到第4个容器的时候就报错了。而实际上，我们本来想限制的是：在每个容器里，用户最多创建3个进程。</p><p>另外，默认情况下，Docker在容器中启动的进程是root用户下的，而ulimit的nproc参数无法对超级用户进行限制。所以，准确地说，目前在Docker中无法使用ulimint来限制fork炸弹问题。</p><p><strong>限制内核内存使用</strong></p><p>前面提到过，fork炸弹的一大危害是它会消耗掉一系列的内核资源，比如进程表、内核内存等。其中，由于内核内存资源永远保存在内存中而不会交换到swap区，所以fork炸弹可以轻而易举地形成对系统的Dos攻击。</p><p>不过，这同时也就意味着我们可通过限制进程的内核内存资源使用来限制fork炸弹。事实上，喝多内核开发者都建议使用kmem（即Cgroup的memory.kmem.limit_in_bytes）来限制fork炸弹，这的确有效，但是同时也带来了如下3个问题。</p><ul><li>目前Docker还不支持直接配置memory.kmem.limit_in_bytes。不过已经有PR #14006来解决这个问题。</li><li>kmem不是仅用来存储进程相关信息的，它还保存了一些注入文件系统相关、内核加密等内核数据。这就意味着简单粗暴地限制死kmem的使用很可能会对其他正常的操作系统产生影响。</li><li>Linux的4.0内核之前的kmem实现存在泄露问题，4.0+之后解决了内存泄漏问题。但是4.0+版本是刚刚发布的额，在生产环境中的大规模使用至少还需一段时间。</li></ul><p><strong>cgroup pid子系统</strong></p><p>目前，Linux啮合还有一个开发中的特性叫做cgroup pids子系统，这个子系统将可以允许用户配置在一定条件下直接拒绝调用、以及增加了任务计数器子系统等功能，从而完美解决了fork炸弹的问题，所以非常值得期待。</p><p>总体来看，Docker自身已经提供了很多安全机制，在使用Docker的时候，需要充分利用Docker已有的安全机制，在多用户环境下则尤其注意Docker的安全问题。Docker目前仍然只适用于运行可信应用程序，如果需要运行任意代码，安全很难得到保证，可以通过利用SELinux、GRSecurity等工具来增强容器安全。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Dcoekr与容器安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 网络管理</title>
      <link href="/2018/07/21/Docker-network-2/"/>
      <url>/2018/07/21/Docker-network-2/</url>
      <content type="html"><![CDATA[<h3 id="Docker-网络管理"><a href="#Docker-网络管理" class="headerlink" title="Docker 网络管理"></a>Docker 网络管理</h3><p>虚拟化技术是云计算的主要推动技术，而相较于服务器虚拟化及存储虚拟化的不断突破和成熟，网络虚拟化似乎有些跟不上节奏，成为目前云计算发展的一大瓶颈。Docker作为云计算领域的一颗耀眼新星，彻底释放了轻量级虚拟化的威力，使得云计算资源的利用率提升到了一个新的层次，大有取代虚拟机的趋势。Docker借助强大的镜像技术，让应用的分发、部署与管理变得异常便捷。那么，Docker的网络功能又如何，能否满足各种场景的需求？下面介绍Docker网络的功能和实现方式。</p><a id="more"></a><h3 id="Docker-网络基础"><a href="#Docker-网络基础" class="headerlink" title="Docker 网络基础"></a>Docker 网络基础</h3><p>在深入Docker内部的网络实现原理之前，从一个用户的角度来直观感受一下Docker的网络架构与基本操作。</p><h4 id="1-Docker网络架构"><a href="#1-Docker网络架构" class="headerlink" title="1. Docker网络架构"></a>1. Docker网络架构</h4><p>Docker在1.9版本中引入了一整套的docker network子命令和跨主机网络支持。这允许用户可以根据他们应用的拓扑结构创建虚拟网络并将容器接入其所对应的网络。其实，早在Docker1.7版本中，网络部分代码就已经被抽离并单独成为了Docker的网络库，即libnetwork。在此之后，容器的网络模式也被抽象变成了统一接口的驱动。</p><p>为了标准化网络驱动的开发步骤和支持多种网络驱动，Docker公司在libnetwork中使用了CNM（Container Netwokr Model）。CNM定义了构建容器虚拟化网络的模型，同时还提供了可以用于开发多种网络驱动的标准化接口和组件。</p><p>libnetwork和Docker及各个网络驱动的关系可以通过下图进行形象的表示。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-13.png" title="Docker网络虚拟化架构"></center><p>如上图所示，Docker daemon通过调用libnetwork对外提供的API完成网络的创建和管理等功能。libnetwork中则使用率CNM来完成网络功能的提供。而CNM中主要有沙盒（sandbox）、端点（endpoint）和网络（network）这3中组件。libnetwork中内置的5中驱动则为libnetwork提供了不同类型的网路服务。下面分别对CNM中的3个核心组件和libnetwork中的5种内置驱动进行介绍。</p><p>CNM中的3个核心组件如下。</p><ul><li>沙盒：一个沙盒包含了一个容器网络栈的信息。沙盒可以对容器的接口、路由和DNS设置等进行管理。沙盒的实现可以是Linux network namespace、FreeBSD Jail或者类似的机制。一个沙盒可以有多个端点和多个网络。</li><li>端点：一个端点可以加入一个沙盒和一个网络。端点的实现可以是veth pair、Open vSwitch内部端口或者相似的设备。一个端点只可以属于一个网络并且只属于一个沙盒。</li><li>网络：一个网络是一组可以直接互相连通的端点。网络的实现可以是Linux bridge、VLAN等。一个网络可以包含多个端点。</li></ul><p>libnetwork中的5中内置驱动如下。</p><ul><li>Bridge驱动。此驱动为Docker的默认设置，使用这个驱动的时候，libnetwork将创建出来的Docker容器连接到Docker网桥上。作为最常规的模式，bridge模式已经可以满足Docker容器最基本的使用需求了。然而其与外界通信使用NAT，增加了通信的复杂性，在复杂场景下使用会有诸多限制。</li><li>host驱动。使用这种驱动的时候，libnetwork将不为Docker容器创建网络协议栈，即不会创建独立的network namespace。Docker容器中的进程处于宿主机的网路环境中，相当于Docker容器和宿主机共用一个network namespace，使用宿主机的网卡、IP和端口等信息。但是，容器其他方面，如文件系统、进程列表等还是和宿主机隔离的。host模式很好地解决了容器与外界通信的地址转换问题，可以直接使用宿主机的IP进行通信，不存在虚拟化网络带来的额外性能负担。但是host驱动也降低了容器与容器之间、容器与宿主机之间网络层面的隔离性，引起网络资源的竞争与冲突。因此可以认为host驱动适用于对容器集群规模不大的场景。</li><li>overlay驱动。此驱动采用IETF标准的VXLAN方式，并且是VXLAN中被普通认为最适合大规模的云计算虚拟化环境的SDN controller模式。在使用的过程中，需要一个额外的配置存储服务，例如Consul、etcd或ZooKeeper。还需要在启动Docker daemon的时候额外添加菜蔬来指定所使用的配置存储服务地址。</li><li>remote驱动。这个驱动实际上并未做真正的网络服务实现，而是调用了用户自行的网络驱动插件，是libnetwork实现了驱动的插件化，更好地满足了用户的多种需求。用户只要根据libnetwork提供的协议标准，实现其所要求的各个接口并向Docker daemon进行注册。</li><li>null驱动。使用这种驱动的时候，Docker容器拥有自己的network namespace，但是并不为Docker容器进行任何网络配置。也就是说，这个Docker容器除了network namespace自带的loopback网卡外，没有其他任何网络、IP、路由等信息，需要用户为Docker容器添加网卡、配置IP等。这种模式如果不进行特定的配置是无法正常使用的额，但是有点也非常明显，它给用户最大的自由度来自定义容器的网络环境。</li></ul><p>在初步了解了libnetwork中各个组件和驱动后，为了帮助读者更加深入地理解libnetwork中的CNM模型和熟悉docker network子命令的使用，这里介绍一个libnetwork官方GitHub上示例的搭建过程，并在搭建成功后对其中容器之间的连通性进行验证，如下图。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-14.png" title="CNM主要组件示例图"></center><p>在这个例子中，使用Docker默认的bridge驱动进行演示。在此示例中，会在Docker上组成一个网络拓扑的应用。</p><ul><li>它有两个网络，其中backend network为后端网络，frontend network则为前端网络，两个网络互不连通。</li><li>其中container1和container3各拥有一个端点，并且分别加入到后端网络和前端网络中。而container2则有两个端点，它们分别加入到后端网络和前端网络中。</li></ul><p>通过以下命令分别创建名为backend和frontend的两个网络。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker network create backend</span><br><span class="line"># docker network create frontend</span><br></pre></td></tr></table></figure><p>使用docker network ls可以查看这台主机上所有的Docker网络。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">c7a255b38671        backend             bridge              local</span><br><span class="line">fd6f92791e3a        bridge              bridge              local</span><br><span class="line">ed38c6583f19        frontend            bridge              local</span><br><span class="line">64a1f808576f        host                host                local</span><br><span class="line">25e3fa8dc1ee        none                null                local</span><br></pre></td></tr></table></figure><p>除了刚才创建的backend和frontend之外，还有3各网络。这3个网络是Docker daemon默认创建的，分别使用了三种不同的驱动，而这3种驱动则对应了Docker原来的3种网络模式，这个在后面做详细讲解。需要注意的是，3种内置的默认网络是无法使用docker network rm进行删除的。</p><p>在创建了所需要的两个网络之后，接下来创建3个容器，并使用如下命令将名为container1和container2的容器加入到backend网络中，将名为container3的容器加入到frontend网络中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker run -itd --name container1 --network backend busybox</span><br><span class="line"># docker run -itd --name container2 --network backend busybox</span><br><span class="line"># docker run -itd --name container3 --network frontend busybox</span><br></pre></td></tr></table></figure><p>分别在container1和container3中使用ping命令测试其与container2的连通性，因为container1与container2都在backend网络中，所以两者可以连通。但是，因为container3和container2不再一个网络中，所以两个之间并不能连通。</p><p>可以在container2中使用ifconfig来查看此容器中的网卡及其配置情况。可以看到，此容器中只有一块以太网卡，其名称为eth0，并且配置了和网桥backend同在一个IP段的IP地址，这个网卡就是CNM的端点。</p><p>最后，使用如下命令将container2加入到frontend网络中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect frontend container2</span><br></pre></td></tr></table></figure><p>再次，在container2中使用命令ifconfig来查看此容器中的网卡及配置情况。发现多了一块名为eth1的以太网卡，并且其IP和网桥frontend同在一个IP段。测试container2与container3的连通性后，可以发现两者已经连通。</p><p>可以看出，docker network connect命令会在所连接的容器中创建新的网卡，以完成其与所指定网络的连接。</p><h4 id="2-bridge驱动实现机制分析"><a href="#2-bridge驱动实现机制分析" class="headerlink" title="2. bridge驱动实现机制分析"></a>2. bridge驱动实现机制分析</h4><p>前面我们演示了bridge驱动下的CNM使用方式，接下来本节将会分析bridge驱动的实现机制。</p><h5 id="docker0网桥"><a href="#docker0网桥" class="headerlink" title="docker0网桥"></a>docker0网桥</h5><p>当在一台未经特殊网络配置的Ubuntu机器上安装完Docker之后，在宿主机上通过使用ifconfig命令可以看到多了一块名为docker0的网卡，假设IP为172.17.0.1/16。有了这样一块网卡，宿主机也会在内核路由表添加一条到达相应网络的静态路由，可通过route -n命令查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ route -n</span><br><span class="line">...</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0</span><br></pre></td></tr></table></figure><p>此条路由表示所有目的IP地址为172.17.0.0/16的数据包从docker0网卡发出。</p><p>然后使用docker run命令创建一个执行shell（/bin/bash）的Docker容器，假设容器名称为con1.</p><p>在con1容器中可以看到它有两块网卡lo和eth0.lo设备不必多说，是容器的回环网卡；eth0即为容器与外界通信的网卡，eth0的IP为172.17.0.2.16，和宿主机上的网桥docker0在同一个网段。</p><p>查看con1的路由表，可以发现con1的默认网关正是宿主机的docker0网卡，通过测试，con1可以顺利访问外网和宿主机的网络，因此表明con1的eth0网卡与宿主机的docker0网卡是相互连通的。</p><p>这时在其他控制台窗口查看宿主机的网络设备，会发现有一块以“veth”开头的网卡，如veth6c137e9，我们可以大胆猜测这块网卡肯定就是veth设备了，而veth pair总是成对出现的。veth pair通常用来连接两个network namespace，那么另一个应该是Docker容器con1中的eth0了。之前已经判断con1容器的eth0和宿主机的docker0是相连的，那么veth6c137e9也应该是与docker0相连的，不难想到，docker0就不只是一个简单的网卡设备了，而是一个网桥。</p><p>真实情况正是如此，下图即为Docker默认网络模式（bridge模式）下的网络环境拓扑图，创建了docker0网桥，并以veth pair连接各容器的网络，容器中的数据通过docker0网桥转发到eth0网卡上。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-15.png" title="Docker网络bridge模式示意图"></center><p>这里网桥的概念等同于交换机，为连在其上的设备转发数据帧。王桥上的veth网卡设备相当于交换机上的端口，可以将多个容器或虚拟机连接在其上，这些端口工作在二层，所以是不需要配置IP信息的。图中docker0网桥就为连在其上的容器转发数据帧，使得同一台宿主机上的Docker容器之间可以相互通信。读者应该注意到docker0既然是二层设备，其上怎么也配置了IP呢？docker0是普通的Linux网桥，它是可以在上面配置IP的，可以认为其内部有一个可以用于配置IP信息的网卡接口（如同每一个Open vSwitch网桥都有一个同名的内部接口一样）。在Docker的桥接网络模式中，docker0的IP地址作为连于之上的容器的默认网关地址存在。</p><p>在Linux中，可以使用brctl命令查看和管理网桥（需要安装bridge-utils软件包）如果查看本机上的Linux网桥以及其上的端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242d7865058noveth6c137e9</span><br></pre></td></tr></table></figure><p>更多关于brctl命令的功能和使用方法，请读者通过man brctl或brctl –help查阅。</p><p>docker0网桥是在Docker daemon启动时自动创建的，其IP默认为172.17.0.1/16，之后创建的Docker容器都会在docker0子网的范围内选区一个未占用的IP使用，并连接到docker0王桥上。Docker提供了如下参数可以帮助用户自定义docker0的设置。</p><ul><li>–bip=CIDR: 设置docker0的IP地址和子网范围，使用CIDR格式，如192.168.100.1/24。注意这个参数仅仅是配置docker0的，对其他自定义的网桥无效。并且在指定这个参数的时候，宿主机是不存在docker0的或者docker0已经存在且docker0的IP和参数指定的IP一致才行。</li><li>fixed-cidr=CIDR：限制Docker容器获取IP的范围。Docker容器默认获取的IP范围为Docker网桥（docker0网桥或者–bridge指定的网桥）的整个子网范围，此参数可将其缩小到某个子网范围内，所以这个参数必须在Docker网桥的子网范围内。如docker0的IP为172.17.0.1/16，可将–fixed-cidr设为172.17.1.1/24，那么Docker容器的IP范围将为172.17.1.1 ~ 172.17.1.254。</li><li>–mtu=BYTES：指定docker0的最大传输单元（MTU）。</li></ul><p>除了使用docker0网桥外，还可以使用自己创建的网桥，使用–bridge=BRIDGE参数指定。是用如下命令添加一个名为br0的网桥，并且为其配置IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brctl addbr br0</span><br><span class="line">ifconfig br0 188.18.0.1</span><br></pre></td></tr></table></figure><p>然后在启动Docker daemon的时候使用–bridge=br0指定使用br0网桥即可。注意此参数若和–bip参数同时使用会产生冲突。</p><p>以上参数在Docker daemon启动时指定，如docker daemon –fixed-cidr=172.17.1.1/24。在Ubuntu中，也可以将这些参数写在DOCKER_OPTS变量中（位于/etc/default/docker文件中），然后重启Docker服务。</p><h5 id="iptables规则"><a href="#iptables规则" class="headerlink" title="iptables规则"></a>iptables规则</h5><p>Docker安装完成后，将默认在宿主机系统上增加一些iptables规则，以用于Docker容器和容器之间的容器之间以及和而外界的通信，可以使用iptables-save命令查看。其中nat表上的POSTROUTING链有这么一条规则：</p><p><code>-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</code></p><p>这条规则关系着Docker容器和外界的通信，含义是将源地址为172.17.0.0/16的数据包（即Docker容器发出的数据），当不是从docker0网卡发出时做SNAT（源地址转换，将IP包的源地址替换为相应网卡的地址）。这样一来，从Docker容器访问外网的流量，在外部看来就是从宿主机上发出的，外部感觉不到Docker容器的存在。那么，外界想要访问Docker容器的服务时该怎么办？我们启动一个简单的Web服务容器，观察iptables规则有何变化。</p><p>首先启动一个Web容器，将其5000端口映射到宿主机的5000端口上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><p>然后查看iptables规则，省略部分无用信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">*nat</span><br><span class="line">-A DOCKER ! -i docker0 -p tcp -m tcp --dport 5000 -j DNAT --to-destination 172.17.0.4:5000</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">*filter</span><br><span class="line">-A DOCKER -d 172.17.0.4/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 5000 -j ACCEPT</span><br></pre></td></tr></table></figure><p>可以看到，在nat和filter的DOCKER链中分别增加了一条规则，这两条规则将访问宿主机5000端口的流量转发到172.1.0.4的5000端口上（真正提供服务的Docker容器IP端口），所以外界访问Docker容器是通过iptables做DNAT（目的地址转换）实现的。此外，Docker的forward规则默认允许所有的外部IP访问容器，可以通过在filter的DOCKER链上添加规则来对外部的IP访问做出限制，如只允许源IP8.8.8.8的数据包访问容器，需要添加如下规则：</p><p><code>iptables -I DOCKER -i docker0 ! -s 8.8.8.8 -j DROP</code></p><p>不仅仅是与外界间通信，Docker容器之间互相通信也受到iptables规则限制。通过前面的学习，了解到同一台宿主机上的Docker容器默认都连在docker0网桥上，它们属于一个子网，这时满足相互通信的第一步。同时，Docker daemon会在filter的FORWARD链中增加一条ACCEPT的规则（–ic=true）：</p><p><code>-A FORWARD -i docker0 -o docker0 -j ACCEPT</code></p><p>这时满足互相通信的第二步。当Docker daemon启动参数–icc（icc参数表示是否允许容器间互相通信）设置为false时，以上规则会被设置为DROP，Docker容器间的相互通信就被禁止，这种情况下，想让两个容器间通信就需要在docker run时使用–link选项。</p><p>在Docker容器和外界通信的过程中，还涉及了数据包在多个网卡间的转发（如从docker0网卡到宿主机eth0的转发），这需要内核将ip-forward功能打开，即将ip_forward系统参数设为1。Docker daemon启动的时候默认会将其设为1（–ip-forward=true），也可以通过以下命令手动设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"># cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>以上过程中涉及的Docker daemon启动参数如下。</p><ul><li>–iptables：是否允许Docker daemon设置宿主机的iptables规则，默认为true。当设为false时，Docker daemon将不会改变你宿主机上的iptables规则。</li><li>–icc：是否允许Docker容器间相互通信，默认为true。true或false改变的是FORWARD链中相应的iptables规则的策略（ACCEPT、DROP）。由于操作的是iptables规则，所以需要–iptables=true才能生效。</li><li>–ip-forward：是否将ip_forward参数设为1，默认为true，用于打开Linux内核的ip数据包转发功能。</li></ul><p>这些参数也是在Dcoekr daemon启动时进行设置的，所以可以设置在DOCKER_OPTS变量中。</p><h5 id="Docker容器的DNS和主机名"><a href="#Docker容器的DNS和主机名" class="headerlink" title="Docker容器的DNS和主机名"></a>Docker容器的DNS和主机名</h5><p>同一个Docker镜像可以启动很多个Docker容器，通过查看，它们的主机名并不一样，也就是说主机名并非是写入镜像中的。实际上容器中/etc目录下有3各文件是容器启动后被虚拟文件覆盖掉的，分别是/etc/hostname、/etc/hosts、/etc/resolv.conf，通过在容器中运行mount命令可以查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mount</span><br><span class="line">...</span><br><span class="line">/dev/sda2 on /etc/hosts type xfs (rw,relatime,attr2,inode64,noquota)</span><br><span class="line">/dev/sda2 on /etc/resolv.conf type xfs (rw,relatime,attr2,inode64,noquota)</span><br><span class="line">/dev/sda2 on /etc/hostname type xfs (rw,relatime,attr2,inode64,noquota)</span><br></pre></td></tr></table></figure><p>这样就能解决主机名的问题，同时也能让DNS及时更新（改变resolv.conf）。由于这些文件的维护方法随着Docker版本演进而不断变化，因此尽量不要修改这些文件，而是通过Docker提供的参数进行相关参数设置，参数配置方式如下。</p><ul><li><p>-h HOSTNAME 或者 –hostname=HOSTNAME: 设置容器的主机名，此名称会写在/etc/hostname和/etc/hosts文件中，也会在容器的bash提示符中看到。但是在外部，容器的主机名是无法查看的，不会出现在其他容器的hosts文件中，即使使用docker ps命令也查看不到。此参数是docker run命令的参数，而非Docker daemon的启动参数。</p></li><li><p>–dns=IP_ADDRESS…：为容器配置DNS，写在/etc/resolv.conf中。该参数既可以在Docker daemon启动的时候设置也可以在docker run时设置，默认为8.8.8.8和4.4.4.4。</p></li></ul><p>注意对以上3各文件的修改不会被docker commit保存，也就是不会保存在镜像中，重启容器也会导致修改失效。另外，在不稳定的网络环境下使用需要特别注意DNS的设置。</p><h3 id="Docker-daemon-网络配置原理"><a href="#Docker-daemon-网络配置原理" class="headerlink" title="Docker daemon 网络配置原理"></a>Docker daemon 网络配置原理</h3><p>在对Docker的网络环境有了一定的认识之后，将深入到源码中理解Docker的网络原理。在Docker 1.6以及之前的版本中，Docker自身的网络主要分为两部分：Docker daemon的网络配置和libcontainer的网络配置。Docker daemon的网络指daemon启动时，在主机系统上所做的网络设置，可以被所有Docker容器所使用；libcontainer的网络配置针对具体的容器，是在使用docker run命令启动容器时，根据传入的参数为容器做的网络配置工作。</p><p>但是随着社区和用户对网络功能改善的需求日益迫切，Docker网络的代码也在快速地变化，在1.7以及后续的版本中，Docker网络将变为Docker中的“一等公民”，所有跟网络县官的代码都已经从Docker daemon主代码和libcontainer的代码中分离出来，整合成为一个单独的库——libnetwork。libnetwork通过插件的形式允许用户可以根据自己的需求来是西安自己的network driver。所谓driver，就是以前Docker daemon中网络相关代码加上libcontainer中网络相关的代码的集合。目前libcontainer实现了5种驱动，其中的bridge驱动为libnetwork的默认驱动，本节讲解中也将以bridge驱动为主。</p><p>Docker daemon在每次启动的过程中，都会初始化自身的网络环境，这样的网络环境最终为Docker容器提供网络通信服务。</p><h4 id="1-与网络相关的配置参数"><a href="#1-与网络相关的配置参数" class="headerlink" title="1. 与网络相关的配置参数"></a>1. 与网络相关的配置参数</h4><p>Docker daemon启动的过程中，在配置参数Config结构体中保存了一个用于网络配置的结构体bridgeConfig。daemon启动过程中与网络相关的参数配置都定义在bridgeConfig中，主要包括以下几项：EnableIptables、EnableIpForward、EnableIpMasq、DefaultIp、Iface、IP、FixedCIDR、InterContainerCommunication，这些变量在Config中的默认值以及作用如下。</p><ul><li>EnableIptables：默认值为true，对应于Docker daemon启动时的–iptables参数，作用为是否允许Docker daemon在宿主上添加iptables规则。</li><li>EnableIpMasq：默认为true，对应于Docker daemon启动时的–ip-masq参数，作用为是否为Docker容器通往外界的包做SNAT。MASQUERADE的iptables桂萼，此变量即控制是否添加那条规则。</li><li>DefaultIp：对应–ip参数，默认值为“0.0.0.0”。这个变量的作用为：当启动容器做端口映射时，将DefaultIp作为默认使用的IP地址。</li><li>EnableIpForward、Iface、IP、FixedCIDR、InterContainerCommunication分别对应–ip-forward、–bridge、–bip、–fixed-cidr、–icc。</li></ul><p>Docker daemon通过这些配置项来决定如何初始化网络。每一个配置项都有其默认值，单用户可以使用Docker daemon的启动参数来改变其默认值，达到自定义Docker daemon网络的效果。</p><h4 id="2-初始化过程"><a href="#2-初始化过程" class="headerlink" title="2. 初始化过程"></a>2. 初始化过程</h4><h5 id="网络参数校验"><a href="#网络参数校验" class="headerlink" title="网络参数校验"></a>网络参数校验</h5><p>当Docker daemon启动时，首先对启动参数进行解析，将参数值赋予相应的变量。然后对这些配置选项进行判断和校验。关于网络方面，主要检查烈3对互斥配置选项。</p><p>首先是iface和IP，也就是不能在指定自定义网桥的同时又指定新建网桥的IP。为什么？如果指定了自定义的网桥，那么该网桥已经存在，无需指定网桥的IP地hi；相反，若用户指定网桥IP，那么该网桥肯定还未新建成功，则Docker daemon在新建网桥时使用默认网桥名docker0，并绑定IP。这也说明了–bip参数之恩呢配置docker0网桥的原因。</p><p>第二队互斥选项时EnableIptables和InterContainerCommunication，上面介绍过–icc参数的原理，如果InterContainerCommunicationg为false，就需要修改iptables规则，而EnableIptables为false则规定不允许Docker daemon修改宿主机的iptales规则，因此两参数不能同为false。此外，EnableIpMasq选项也与iptables规则相关，因此在iptables规则禁止的情况下，EnableIpMasq也不能为true。</p><h5 id="是否初始化bridge驱动"><a href="#是否初始化bridge驱动" class="headerlink" title="是否初始化bridge驱动"></a>是否初始化bridge驱动</h5><p>参数校验完成后，接着判断Iface和disableNetworkBridge的值是否相同，Iface保存的是网桥名称，disableNetworkBridge是一个字符串常量，值为none。因此，若用户通过传过来的参数将Iface设为none，则config.DisableBridge变量为true，否则为false。</p><p>接下来会调用libnetwork.New()生成网络控制器controller，这个控制器主要用于创建和管理Network。然后会通过null驱动和host驱动来进行默认的网络创建。</p><p>最后会根据DisableBridge的值来决定bridge驱动是否进行初始化。若DisableNetwork为false，则运行initBridgeDriver函数。initBridgeDriver函数就是完成默认的bridge驱动的初始化任务。</p><h5 id="处理网桥参数"><a href="#处理网桥参数" class="headerlink" title="处理网桥参数"></a>处理网桥参数</h5><p>已经直到Docker网桥默认为docker0，也可以通过–bridge参数指定自定义的网桥。处理用户自定义网桥的流程分为如下两步。</p><ol><li>将用户指定的网桥名传入Iface，若Iface不为空，则将其传赋值给bridgeName。如果Iface为空，则将bridgeName指定为DefaultNetworkBridge。DefaultNetworkBridge是一个字符串常量，为docker0，即表示当用户没有传入网桥参数时，启动默认网桥docker0。</li><li>首先，寻找Docker网桥名是否在宿主机上又对应的显卡，如果存在则返回其IP等信息，否则则从系统预定义的IP列表中非配一个可用IP。如果用户没有使用–bip来指定Docker网桥的IP地址，那么上面得到的IP会被写入ipamV4Conf结构体中，此结构体用于保存关于Docker网桥上有关于IPV4的相关信息，如果用户进行了指定则会将指定的IP信息写入ipamV4Conf结构体中。如果默认的网关不为空，则将其信息写入到ipamV4Conf结构体中。然后，入宫FixedCIDRv6，则将用户指定的IPV6网络范围和相关的IPV6配置信息写入ipamV6Conf中。最后使用上述信息作为参数调用controller.NetNetwork()函数，并指定bridge驱动来创建Docker网桥。</li></ol><h5 id="创建网桥设置队列"><a href="#创建网桥设置队列" class="headerlink" title="创建网桥设置队列"></a>创建网桥设置队列</h5><p>当需要Docker daemon创建网络时，则调用controller.NewNetwork()函数来通过libnetwork完成创建，实现过程的主要步骤如下。</p><ol><li>使用IP管理器的默认驱动创建IP管理器，并使用IP管理器从其自身维护的iP池中获取参数中指定的IP地址段。</li><li>在确保新的网络设置和已经存在的网路不冲突之后，创建与这个驱动（即bridge驱动）相符的配置结构体network。接下来根据配置中的网桥名寻找对应的网桥。如果网桥不存在，则将创建网桥的步骤加入设置对垒。</li><li>定义关于网络隔离的iptables规则设置的函数，在接下来的步骤加入到设置队列中，以确保不同额昂罗之间相互隔离。</li><li>将IPV4配置到网桥上、IPV6配置、IPV6转发、开启本地回环接口的地址路由、开启iptables、IPV4和IPV6的网关信息配置、网络隔离的iptalbes规则设置和网桥过滤等步骤加入到设置队列中。</li><li>最后，运行设置队列中的所有步骤，主要通过netlink进行系统调用来完成Docker网桥的创建和配置工作。</li></ol><h5 id="更新相关配置信息"><a href="#更新相关配置信息" class="headerlink" title="更新相关配置信息"></a>更新相关配置信息</h5><p>完成上述操作后，libnetwork会将各种县官配置信息存储到Docker的LibKV数据仓库中，以备后续的查找和使用。</p><p>到这里，initNetworkController函数的执行就完成了，也代表着Docker daemon启动过程中网络初始化的部分也已完成。</p><h3 id="libcontainer网络配置原理"><a href="#libcontainer网络配置原理" class="headerlink" title="libcontainer网络配置原理"></a>libcontainer网络配置原理</h3><p>Docker容器的网络就是在创建特定容器的时候，根据传入的参数为容器配置特定的网络环境，主要内容包括为容器配置网卡、IP、路由、DNS等一些列任务。Docker容器一般使用docker run命令来创建，其关于网络方面的参数有–net、–dns等。–net是一个非常重要的参数，用于指定docker的网络模式。</p><h4 id="1-命令行参数阶段"><a href="#1-命令行参数阶段" class="headerlink" title="1. 命令行参数阶段"></a>1. 命令行参数阶段</h4><h4 id="2-创建容器阶段"><a href="#2-创建容器阶段" class="headerlink" title="2. 创建容器阶段"></a>2. 创建容器阶段</h4><h4 id="3-启动容器阶段"><a href="#3-启动容器阶段" class="headerlink" title="3. 启动容器阶段"></a>3. 启动容器阶段</h4><h5 id="initializeNetworking函数"><a href="#initializeNetworking函数" class="headerlink" title="initializeNetworking函数"></a>initializeNetworking函数</h5><h5 id="populateCommand函数"><a href="#populateCommand函数" class="headerlink" title="populateCommand函数"></a>populateCommand函数</h5><h5 id="waitForStart函数"><a href="#waitForStart函数" class="headerlink" title="waitForStart函数"></a>waitForStart函数</h5><h4 id="4-execdriver网络执行流程"><a href="#4-execdriver网络执行流程" class="headerlink" title="4. execdriver网络执行流程"></a>4. execdriver网络执行流程</h4><h4 id="5-libcontainer网络执行流程"><a href="#5-libcontainer网络执行流程" class="headerlink" title="5. libcontainer网络执行流程"></a>5. libcontainer网络执行流程</h4><h4 id="6-linnetwork实现内核态网络配置"><a href="#6-linnetwork实现内核态网络配置" class="headerlink" title="6. linnetwork实现内核态网络配置"></a>6. linnetwork实现内核态网络配置</h4><h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5><h5 id="libcontainer网络执行流程"><a href="#libcontainer网络执行流程" class="headerlink" title="libcontainer网络执行流程"></a>libcontainer网络执行流程</h5><h3 id="传统的link原理解析"><a href="#传统的link原理解析" class="headerlink" title="传统的link原理解析"></a>传统的link原理解析</h3><p>在使用Docker容器部署服务的时候，经常会遇到需要容器间交互的情况，如Web应用与数据库服务。容器间的通信有Docker daemon的启动参数–icc控制。很多情况下，为了保证容器以及主机的安全，–icc通常设置为false。这种情况下该如何解决容器间的通信呢？通过容器向外界进行端口映射的方式可以实现通信，但这种方式不够安全，因为提供服务的容器仅希望个别容器可以访问。除此之外，这种方式需要经过NAT，效率也不高。这时候，就需要使用Docker的连接（linking）系统了。Docker的链接系统可以再两个容器之间建立一个安全的通道，使得接收容器（如Web应用）可以通过通道得到源容器（如数据库服务）指定的相关信息。</p><p>在Docker 1.9版本后，网络操作独立成为一个命令组（docker network），link胸痛也与原来不同了，Docker为了保持对向上兼容，若容器使用默认的bridge模式网络，则会默认使用传统额link系统；而使用用户自定义的网络（user-defined network），则会使用新的link系统。</p><h4 id="1-使用link通信"><a href="#1-使用link通信" class="headerlink" title="1. 使用link通信"></a>1. 使用link通信</h4><h4 id="2-设置接收容器的环境变量"><a href="#2-设置接收容器的环境变量" class="headerlink" title="2. 设置接收容器的环境变量"></a>2. 设置接收容器的环境变量</h4><h4 id="3-更新接收容器的-etc-hosts文件"><a href="#3-更新接收容器的-etc-hosts文件" class="headerlink" title="3. 更新接收容器的/etc/hosts文件"></a>3. 更新接收容器的/etc/hosts文件</h4><h4 id="4-建立iptables规则进行通信"><a href="#4-建立iptables规则进行通信" class="headerlink" title="4. 建立iptables规则进行通信"></a>4. 建立iptables规则进行通信</h4><h3 id="新的link介绍"><a href="#新的link介绍" class="headerlink" title="新的link介绍"></a>新的link介绍</h3><p>相比于传统的link系统提供的名字和别名解析、容器间网络隔离（–icc=false）以及环境变量的注入，Docker v1.9后为用户自定义网络提供了DNS自动名字解析、同一个网络中容器间的隔离、可以动态加入或者退出多个网络、支持–link为源容器设定别名等服务。在使用上，可以说除了环境变量的注入，新的网络模型给用户提供了更便捷和更自然的使用方式而不影响原有的使用习惯。</p><p>在新的网络模型中，link系统只是在当前网络给源容器起了一个别名，并且这个别名只对接收容器有效。新旧link系统的另一个重要的区别是新的link系统在创建一个link时并不要求源容器已经创建或者启动。</p><p>从本节的介绍中，可以看到Docker通过libnetwork库使用Linux网桥、端口映射、iptables规则和link等技术完成了Docker的网络功能，已经能满足简单应用在单机环境下的几把呢需求。此外，linetwork还通过overlay驱动构建overlay网络允许跨主机通信；通过为用户创建独立的网络环境来实现多租户的隔离；通过配置IPAM也可以实现容器的固定IP等功能。目前，Docker将网络单独成一个库——libnetwork，但是其还属于雏形阶段。在Docker官方完善网络功能之前，就需哟啊引入额外的机制来扩展Docker的网络。后续继续介绍如何解决Docker用户的复杂网络需求。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker 网络管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 数据卷</title>
      <link href="/2018/07/21/Docker-volume-2/"/>
      <url>/2018/07/21/Docker-volume-2/</url>
      <content type="html"><![CDATA[<h3 id="Docker-数据卷"><a href="#Docker-数据卷" class="headerlink" title="Docker 数据卷"></a>Docker 数据卷</h3><a id="more"></a><p>Docker的镜像是由一系列的只读层组合而来的，当启动一个容器时，Docker加载镜像的所有只读层，并在最上层加入一个读写层。这个涉及使得Docker可以提高镜像构建、村粗和分发的效率，节省了实践和存储空间，然而也存在如下问题。</p><ul><li>容器中的文件在宿主机上存在形式复杂，不能再宿主机上很方便地对容器种的文件进行访问。</li><li>多个容器之间的数据无法共享。</li><li>当删除容器时，容器产生的数据将丢失。</li></ul><p>为了解决这些问题，Docker引入了数据卷（volume）机制。volume时存在于一个或多个容器中的特定文件或文件夹，这个目录以独立于联合文件系统的形式再宿主机种存在，并未数据的共享于持久化提供以下便利。</p><ul><li>volume在容器创建时就会初始化，在容器运行时就可以使用其中的文件。</li><li>volume能在不同的容器之间共享和重用。</li><li>对volume中数据的操作会马上生效。</li><li>对volume中数据的操作不会影响到镜像本身。</li><li>volume的生存周期独立于容器的生存周期，即使删除容器，volume仍然会存在，没有任何容器使用的volume也不会被Docker删除。</li></ul><p>Docker提供了volumedriver接口，通过实现该接口，我们可以为Docker容器提供不同的volume存储支持。当前官方默认实现了local这种volumedriver，它使用宿主机得文件系统为Docker容器提供volume。</p><h3 id="数据卷的使用方式"><a href="#数据卷的使用方式" class="headerlink" title="数据卷的使用方式"></a>数据卷的使用方式</h3><p>为容器添加volume，类似于Linux的mount操作，用户将一个文件夹作为volume挂载到容器上，可以很方便地将数据添加到容器中供其中的进程使用。多个容器可以共享同一个volume，为不同的容器之间的数据共享提供了便利。</p><h4 id="1-创建volume"><a href="#1-创建volume" class="headerlink" title="1. 创建volume"></a>1. 创建volume</h4><p>docker 1.9版本中引入了新的自命令，即docker volume。用户可以使用这个命令对volume进行创建、查看和删除，与此同时，传统的-v参数创建volume的方式也得到了保留。</p><p>用户可以使用docker volume create创建一个evolume，以下命令创建了一个指定名字的volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker volume create --name vol_simple</span><br></pre></td></tr></table></figure><blockquote><p>说明 Docker当前并未对volume的大小提供配额管理，用户在创建volume时也无法指定volume的大小。在用户使用Docker创建volume时，由于采用的是默认的local volumedriver，所以volume的文件系统默认使用宿主机的文件系统，如果用户需要创建其他文件系统的volume，则需要使用其他的volumedriver。</p></blockquote><p>用户在使用docker run或docker create创建新容器时，也可以使用-v标签为容器添加volume，以下命令创建了一个随机名字的volume，并挂载到容器中的/data目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -v /data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>以下命令创建了一个指定名字的volume，并挂载到容器中的/data目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -v vol_simple: /data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>Docker在创建volume的时候会在宿主机/var/lib/docker/volume/中创建一个以volume ID为名的目录，并将volume中的内容存储在名为data的目录下。</p><p>使用docker volume inspect命令可以获得该volume包括其在宿主机中该文件夹的位置等信息。</p><h4 id="2-挂载volume"><a href="#2-挂载volume" class="headerlink" title="2. 挂载volume"></a>2. 挂载volume</h4><p>用户在使用docker run或docker create创建新容器时，可以使用-v标签为容器添加volume。用户可以将自行创建或者由Docker创建的volume挂载到容器中，也可以将宿主机上的目录或者文件作为volume挂载到容器中。下面分别介绍这两种挂载方式。</p><p>用户可以使用如下命令创建volume，并将其创建的volume挂载到容器中的/data目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker volume create --name vol_simple</span><br><span class="line">$ sudo docker run -d -v vol_simple: /data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>如果用户不执行第一条命令而直接执行第二条命令的话，Docker会替代用户来创建一个名为vol_simple的volume，并将其挂载到容器中的/data目录下。</p><p>用户也可以使用如下命令创建一个随机的volueme挂载到容器中。Docker同时也允许我们将宿主机上的目录挂载到容器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -v /host/dir/container/dir ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>使用以上命令将宿主机中的/host/dir文件夹作为一个volume挂载到容器中的/container/dir。文件夹必须使用绝对路径，如果宿主机中不存在/host/dir，将创建一个空文件夹。在/host/dir文件夹中的所有文件或文件夹可以在容器的/container/dir文件夹下被访问。如果镜像中原本存在/container/dir文件夹，该文件夹下原有的内容将被隐藏，以保持与宿主机中的文件夹一致。</p><p>用户还可以将单个的文件作为volume挂载到容器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name vol_file -v /host/file:/container/file ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>使用上条命令将主机中的/host/file文件作为一个volume挂载到容器中的/container/file。文件必须使用绝对路径，如果文件中不能存在/host/file，则Docker会创建一个同名空目录。挂载后文件内容与宿主机中的文件一致，也就是说如果容器中原本存在/conttainer/file，该文件将被隐藏。</p><p>将主机上的文件或文件夹作为volume挂载时，可以使用:ro指定该volume为只读。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name vol_unshared -v /host/dir:/container/dir:Z ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>类似于SELinux这类的标签系统，可以在volume挂载时使用z和Z来指定该volume是否可以共享。Docker默认的是z，即共享该volume。用户也可以在挂载时使用Z来标注该volume为私有数据卷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name vol_read_only -v /host/dir:/container/dir/ro ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>在使用docker run或者docker create创建新容器时，可以使用多个-v标签为容器添加多个volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name vol_mult -v /data1 -v /data2 -v /host/dir:/container/dir ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h4 id="3-使用Dockerfile添加volume"><a href="#3-使用Dockerfile添加volume" class="headerlink" title="3. 使用Dockerfile添加volume"></a>3. 使用Dockerfile添加volume</h4><p>使用VOLUME指令向容器添加volume。</p><p>VOLUME /data</p><p>在使用docker build命令生成镜像并且以该镜像启动容器时会挂载一个volume到/data。与上文中vol_simple例子类似，如果镜像中存在/data文件夹，这个文件夹中的内容全部被复制到宿主机中对应的文件夹中，并且根据容器中的文件设置合适的权限和所有者。</p><p>类似地，可以使用VOLUME指令添加多个volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/data1&quot;, &quot;/data2&quot;]</span><br></pre></td></tr></table></figure><p>与使用docker run -v不同的是，VOLUME指令不能挂载主机中指定的而文件夹。这时为例保证Dockerfile的可移植性，因为不能保证所有宿主都有对应的文件夹。</p><p>需要注意的是，在Dockerfile中使用的VOLUME指令之后的代码，如果尝试对这个volume进行修改，这些修改都不会生效。在下面的例子中，在创建volume后，尝试在其中添加一些初始化的文件并改变所有权。</p><h4 id="4-共享volume（–volumes-form）"><a href="#4-共享volume（–volumes-form）" class="headerlink" title="4. 共享volume（–volumes-form）"></a>4. 共享volume（–volumes-form）</h4><p>在使用docker run或docker create创建新容器时，可以使用–volumes-from标签使得容器与已有的容器共享volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo  docker run --rm -it --name vol_use --volumes-from vol_simple ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>新创建的vol_use与之前创建的容器vol_simple共享voleme，这个volume目的目录也是/data。如果被共享的容器有多个volume（如上文中出现的vol_mult），新容器也将会有多个volume，并且其挂载的目的地也与vol_mult中的相同。</p><p>可以使用多个–volumes-from标签，使得容器与多个已有容器共享volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm -it --name vole_use_mult --volumes-from vol_1 --volumes-from vol_2 ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>一个容器挂载了一个volume，即使这个容器停止运行，该volume仍然存在，其他容器也可以使用–volumes-from与这个容器共享volume。如果有一些数据，比如配置文件、数据文件等，要在多个容器间之间共享，一种常见的做法是创建一个数据容器，其他的容器之间共享volume。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --name vol_data -v /data ubuntu echo &quot;This is a data-only container&quot; </span><br><span class="line">$ sudo docker run -it --name vol_share1 --volumes-from vol_data ubuntu /bin/bash</span><br><span class="line">$ sudo docker run -it --name vol_share2 --volumes-from vol_data ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>上述命令首先创建了一个挂载了volume的数据容器vol_data，这个额容器仅仅输出了一条提示后就停止运行以避免资源浪费。接下来的两个容器vol_share1和vol_share2与这个数据容器共享这个voleme。这样就将两个需要共享数据的容器进行了较好的解耦，避免了容器之间因为共享数据而产生相互依赖。</p><h4 id="5-删除volume"><a href="#5-删除volume" class="headerlink" title="5. 删除volume"></a>5. 删除volume</h4><p>如果创建容器时从容其中挂载了volume，在/var/lib/docker/volumes下生成与volume对应的目录，使用docker rum删除容器并不会删除与volume对应的目录，这些目录会占据不必要的存储空间，即使可以手动删除，因为有些随机生成的目录名称是无意义的随机字符串，要知道它们是否违背删除的容器对应也十分麻烦。所以在删除容器时需要对容器的volume妥善处理。在删除容器时一并删除volume有以下三种方法。</p><ul><li>使用docker volume rm &lt;volume_name&gt;删除volume。</li><li>使用docker rm -v &lt;container_name&gt;删除容器。</li><li>在运行容器时使用docker run –rm，–rm标签会在容器停止运行时删除容器以及容器所挂载的volume。</li></ul><p>需要注意的是，在使用docker volume rm删除volume时，只有当没有任何容器使用该volume的时候，该volume才能成功删除。另外两种方法只会对挂载在该容器上的未命名的volume进行删除，而会对用户指定名字的volume进行保留。</p><p>如果volume时在创建容器时从宿主机中挂载的，无论对容器进行任何操作都不会导致其在书主机中被删除，如果不需要这些文件，只能手动删除它们。</p><h4 id="6-备份、恢复或迁移volume"><a href="#6-备份、恢复或迁移volume" class="headerlink" title="6. 备份、恢复或迁移volume"></a>6. 备份、恢复或迁移volume</h4><p>volume作为数据的载体，在很多情况下需要对其中的数据进行备份、迁移，或时从已有数据恢复。以上文中创建的容器vol_simple为例，该容器在/data挂载了一个evolume。如果需要将这里面的数据备份，一个很容器想到的方法是使用docker inspect命令查找到/data在宿主机上对应文件夹位置，然后复制其中的内容或是使用tar进行打包；同样地，如果需要恢复某个volume中的数据，可以查找到volume对应的文件夹，将树复制进这个volume对应的文件夹，将数据复制进这个文件夹或是使用tar从存档文件中恢复。这些做法可行但并不值得推荐，下面推荐一个用–volumes-from实现的volume的备份与恢复方法。</p><p>备份volume可以使用以下方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from vol_simple -v $(pwd):/backup ubuntu tar cvf /backup/data.tar /data</span><br></pre></td></tr></table></figure><p>vol_simple容器包含了我们希望备份的一个volume，上面这行命令启动了另外一个临时的容<br>器，这个容器挂载了两个volume,第一个volume来自于vol_simple容器的共享，也就是需要备份的volume,第二个volume将宿主机的当前目录挂载到容器的/backup下。容器运行后将要备份的内容(/data文件夹)备份到/backup/data.tar, 然后删除容器，备份后的data.tar就留在了当前目录。</p><p>恢复volume可以使用以下方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --name vol_bck -v /data ubuntu /bin/bash</span><br><span class="line">$ sudo docker run --rm --volumes-from vol_bck -v $(pwd):/backup ubuntu tar xvf /backup/data.tar -C /</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>首先运行了一个新容器作为数据恢复的目标。第二行指令启动了一个临时容器，这个容器挂载了两个volume,第一个volume与要恢复的volume共享，第二个volume将宿主机的当前目录挂载到容器的/backup下。由于之前备份的data. tar在当前目录下，那么它在容器中的/backup也能访问到，容器启动后将这个存档文件中的/data恢复到根目录下，然后删除容器，恢复后的数据就在vol_ bck的volume中了。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker 数据卷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 存储管理</title>
      <link href="/2018/07/21/Docker-storage-manage/"/>
      <url>/2018/07/21/Docker-storage-manage/</url>
      <content type="html"><![CDATA[<h3 id="Docker-存储管理"><a href="#Docker-存储管理" class="headerlink" title="Docker 存储管理"></a>Docker 存储管理</h3><p>Dcoker拥有写镜像分层与写时复制机制，为了支持这些特性，Docker提供了存储驱动的接口。存储驱动根据操作系统底层的支持提供了针对某种文件系统的初始化操作以及对镜像层的增、删、改、查和差异比较等操作。目前存储系统的接口已有aufs、btrfs、devicemapper、vfs、overlay、zfs这6种具体实现，其中vfs不支持写时复制，是为使用volume提供的存储驱动，仅仅做了简单的文件瓜子啊操作；剩下5种存储驱动支持写时复制，它们的实现有一定的相似之处。</p><a id="more"></a><h4 id="存储驱动Device-Mapper"><a href="#存储驱动Device-Mapper" class="headerlink" title="存储驱动Device Mapper"></a>存储驱动Device Mapper</h4><p>Device Mapper是Linux 2.6内核中提供的一种逻辑设备到物理设备的映射框架机制，在该机制下，用户可以很方便地更具自己的需要指定实现存储资源的管理策略。</p><p>简单来说，Device Mapper包括3个概念：映射设备、映射表和目标设备。映射设备是内核向外提供的逻辑设备。一个映射设备通过一个映射表与多个目标设备映射起来，映射表包含了多个多元组，每个多元组记录了这个映射设备的其实地址、范围与一个目标设备的地址偏移量的映射关系。目标设备可以是一个物理设备，也可以是一个映射设备，这个映射设备可以继续向下迭代。印个映射设备最终通过一棵映射树映射到物理设备上。Device Mapper本hi功能就是根据映射关系描述IO处理规则，当映射设备接收到IO请求的时候，这个IO请求会根据映射表逐级转发，直到这个请求最终传到最底层的物理设备上。</p><p>Docker下面的devicemapper存储驱动式使用Device Mapper的精简配置（thin-provisioning）和快照（snapshotting）功能实现镜像分层。这个模块使用了两个块设备（一个用于存储数据，另一个用于存储元数据），并将其构建成一个资源池（thin pool）用以创建其他存储镜像的块设备。数据区为生成其他块设备提供资源，元信息存储了虚拟设备和物理设备的映射关系。Copy on Write发生在块存储级别。devicemapper在构建一个资源池后，会先创建一个有文件系统的基础设备，再通过从已有设备创建快照的方式创建新的设备，这些新创建的块设备在写入内容之前并不会分配资源。所有的容器层和镜像层都有自己的块设备，均是通过其父镜像层创建快照的方式来创建（没有父镜像层的层从基础设备创建快照）。</p><p>值得说明的是，devicemapper存储驱动根据使用的两个基础块设备是真正的块设备还是稀疏文件挂载的loop设备分为两种模式，前者称为direct-lvm模式，后者是Docker默认的loop-lvm模式。两种方式对于配置的好的Docker用户来说是完全透明的，驱动层的工作方式也一致，但由于底层存储方式不同导致两者性能差别很大。考虑到loop-lvm不需要额外配置的易用性，Docker将其作为deicemapper的默认模式，但在生产环境中，推荐使用direct-lvm模式。</p><p>在已经创建好两个块设备的基础上，要使用direct-lvm模式的devicemaper存储驱动，需要在Docker daemon启动的时候除了添加-s=devicemapper参数外，还要下列的参数指定存储数据和原数据的块设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--storage-opt dm.datadev=/path/to/data</span><br><span class="line">--storage-opt dm.metadatadev=/path/to/metadata</span><br></pre></td></tr></table></figure><p>如果使用过devicemapper存储驱动，在/var/lib/docker/下会创建devicemapper/以及image/devicemapper目录。同样，image/devicemapper也是存储了镜像和逻辑镜像层的元数据信息。</p><p>最终，具体的文件都会存储在/var/lib/docker/devicemapper文件夹下，这个文件夹下有3个子文件夹，其中mnt为设备挂载目录，devicemapper文件夹下，这个文件夹下有3个子文件夹，其中mnt为设备挂载目录，devicemaper下存储了loop-lvm模式下的两个稀疏文件，metadata下存储了每个块设备驱动层的元数据信息。</p><p>以loop-lvm模式为例，在devicemapper实际查看一下，可以看到data是一个100GB的稀疏文件，它包含了所有镜像和容器的实际文件内容，是整个资源池的默认大小。每一个容器默认被限制在10GB大小的卷内，可以通过重新启动daemon，并添加参数–storage-opt dm.basesize=[size]调整急促块设备的大小，原有镜像层以及在原有镜像基础上创建的容器层的大小限制不受影响，只有在更改参数后pull下来的基础上创建的容器才会生效，并且basesize只能比原来的大，否则daemon会报错。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker 存储管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 镜像管理</title>
      <link href="/2018/07/21/Docker-manage-image/"/>
      <url>/2018/07/21/Docker-manage-image/</url>
      <content type="html"><![CDATA[<h3 id="一-什么是Docker镜像"><a href="#一-什么是Docker镜像" class="headerlink" title="一. 什么是Docker镜像"></a>一. 什么是Docker镜像</h3><p>Docker镜像是一个只读的Docker容器模板，含有启动Docker容器所需的文件系统结构及其内容，因此启动一个Docker容器的基础。Docker镜像的文件内容以及一些运行的Docker容器的配置文件组成了Docker容器的静态文件系统运行环境——rootfs。可以这么理解，Docker镜像是Docker容器的静态视角，Docker容器是Docker镜像的运行状态。</p><a id="more"></a><h4 id="1-rootfs"><a href="#1-rootfs" class="headerlink" title="1. rootfs"></a>1. rootfs</h4><p>rootfs是Docker容器在启动时内部进程可见的文件系统，即Docker容器的根目录。rootfs通常包含一个操作系统运行所需的文件系统，例如可能包含典型的类Unix操作系统中的目录系统，如/dev、/proc、/bin、/etc、/lib、/usr、/tmp及运行Docker容器所需的配置文件、工具等。</p><p>在传统的Linux操作系统内核启动时，首先挂载一个只读（read-only）的rootfs，当系统给检测其完整性之后，再将其切换为读写（read-write）模式。而在Docker架构中，当Docker daemon为Docker容器挂载rootfs时，沿用了Linux内核启动时的方法，即将rootfs设为只读模式。再挂载完毕之后，利用联合挂载（union mount）技术在已有的只读rootfs再挂载一个读写层，只有再Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读可写层，并隐藏只读层中的老版本文件。</p><h4 id="2-Docker镜像的主要特点"><a href="#2-Docker镜像的主要特点" class="headerlink" title="2. Docker镜像的主要特点"></a>2. Docker镜像的主要特点</h4><h5 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h5><p>Docker镜像时采用分层的方式构建的，每个镜像都由一系列的“镜像层”组成。分层结构是Docker镜像如此轻量的重要原因，当需要修改容器镜像内的某个文件时，只对处于最上方的读写曾进行变动，不覆写下层已有的文件系统内容，已有文件在只读层的原版本仍然存在，但会被读写曾中的新版文件所隐藏。当使用docker commit提交这个修改过的容器文件系统为一个新的镜像时，保存的内容仅为最上层读写文件系统中被更新过的文件。分层达到了在不同镜像之间共享镜像层的效果。</p><h5 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h5><p>Dockerr镜像使用写时复制（copy-on-write）策略，在多个容器之间共享镜像，每个容器在启动的时候并不需要单独复制一份镜像文件，而是将所有镜像层以只读的方式挂载到一个挂载点，再在上面覆盖一个可读可写的容器层。在未更改文件内容时，所有容器共享同一份数据，只有在Docker容器运行过程中文件系统发生变化时，才会把变化的文件内容写到可读写层，并隐藏只读层中的老版本文件。写时复制配合分层机制减少了镜像对磁盘空间的占用和容器启动时间。</p><h5 id="内容寻址"><a href="#内容寻址" class="headerlink" title="内容寻址"></a>内容寻址</h5><p>在Docker 1.10版本后，Docker镜像改动较大，其中最重要的特性便是引入了内容寻址存储（content-addressable storage）的机制，根据文件内容来索引镜像和镜像层。与之前版本对每一个镜像层随机生成一个UUID不同，新模型对镜像层的内容计算校验和，生成一个内容哈希值，并以此哈希值替代之前的UUID作为镜像层的唯一标志。该机制主要提高了镜像的安全性，并在pull、push、load和save操作后的检测数据的完整性。另外，基于内容哈希来索引镜像层，在一定程度上减少了ID的冲突并且增强了镜像层的共享。对于来自不同的构建的镜像层，只要拥有相同的内容哈希，也能被不同的镜像共享。</p><h5 id="联合挂载"><a href="#联合挂载" class="headerlink" title="联合挂载"></a>联合挂载</h5><p>通俗地讲，联合挂载技术可以在一个挂载点挂载多个文件系统，将挂载点的原目录与被挂载内容进行整合，使得最终可见的文件系统将会包含整合之后的各层的文件和目录。实现这种联合挂载技术的文件系统通常被称为联合文件系统（union filesystem）。</p><p>联合挂载是用于将多个镜像层的文件系统挂载到一个挂载点来实现一个统一文件系统视图的途径，是下层存储驱动（如aufs、overlay等）实现分层合并的方式。所以严格来说，来奶和挂载并不是Docker镜像的必需技术，比如我们在使用Device Mapper存储驱动时，其实是使用了快照技术来达到分层的效果，没有联合挂载这一概念。</p><h3 id="二、-Docker镜像的存储组织方式"><a href="#二、-Docker镜像的存储组织方式" class="headerlink" title="二、 Docker镜像的存储组织方式"></a>二、 Docker镜像的存储组织方式</h3><p>上一节从概念上讲解了Docker镜像，本节将介绍Docker镜像的关键概念，为深入理解Docker镜像实现原理做好铺垫。</p><h4 id="1-registry"><a href="#1-registry" class="headerlink" title="1. registry"></a>1. registry</h4><p>我们知道，每个Docker容器都从Docker镜像生成。俗话说，“巧妇难为无米之炊”，当使用docker run命令启动一个容器时，从哪里获取需要的镜像呢？答案是，如果头一次基于某个镜像启动容器，宿主上并不存在需要的镜像，那么Docker将从registry中下载该镜像并保存到宿主机；否则，直接从宿主机镜像完成启动。那么，registry是什么呢？</p><p>registry用以保存Docker镜像，其中还包括镜像层级结构和关于镜像的元数据。可以将registry简单地想象成类似于Git仓库之类的实体。</p><p>用户可以在自己的数据中心搭建私有的registry，也可以使用Docker官方的公用registry服务，及Docker Hub。它是由Docker公司维护的一个公共镜像仓库，供用户下载使用。Docker Hub中由两种类型的仓库。即用户仓库（user repository）与顶层仓库（top-level repository）。用户仓库由普通的Docker Hub用户创建，顶层仓库则由Docker公司负责维护，提供官方版本镜像。理论是，顶层仓库中的镜像经过Docker公司验证，被认为是架构良好且安全的。</p><h4 id="2-repository"><a href="#2-repository" class="headerlink" title="2. repository"></a>2. repository</h4><p>repository即由具有某个功能的Docker镜像的所有迭代版本构成的景象组。由上文可知，registry由一系类经过命名的repository组成，repository通过命名规范对用户仓库和顶层仓库进行组织。用户仓库的命名由用户名和repository名两部分组成，中间以“/”隔开，即username/repository_name的形式，repository名通常表示镜像所具有的功能，如ansible/ubuntu14.04-ansible；而顶层仓库只包含repository名的部分，如ubuntu。</p><p>读者也许会产生疑问，通常将ubuntu视为镜像名称，这里却解释为repository，那么repository和镜像之间是说明关系呢？事实上，repository是一个镜像集合，其中包含了多个不同版本的镜像，使用标签进行版本区分，如ubuntu:14.04、ubutnu:12.04等，它们均属于ubuntu这个repository。</p><p>一言以屏之，registry是repository的集合，repository是镜像的集合。</p><h4 id="3-manifest"><a href="#3-manifest" class="headerlink" title="3. manifest"></a>3. manifest</h4><p>manifest（描述文件）主要存在于registry中作为Docker镜像的元数据文件，在pull、push、save和load中作为镜像结构和基础信息的描述文件。在镜像被pull或者load到Docker宿主机时，manifest被转换为本地的镜像配置文件config。新版本（v2，schema 2）的manifest list可以组合不同架构实现同名Docker镜像的manifest，用以支持多架构Docker镜像。</p><h4 id="4-image和layer"><a href="#4-image和layer" class="headerlink" title="4. image和layer"></a>4. image和layer</h4><p>Docker内部的image概念是用来存储一组镜像相关的元数据信息，主要包括镜像的架构（如amd64）、镜像默认配置信息、构建镜像的容器配置信息、包含所有镜像层信息的rootfs。Docker利用rootfs中的diff_id计算出内容寻址的索引（chainID）来获取layer相关信息，进而获取每一个镜像层的文件内容。</p><p>layer（镜像层）是一个Docker用来管理镜像层的中间概念，本节前面提到镜像是由镜像层组成的，而单个镜像层可能被多个镜像共享，所以Docker将layer与image的概念分离。Docker镜像管理中的layer主要存放了镜像层的diff_id、size、cache-id和parent等内容，实际的文件内容则是由存储驱动来管理，并可以通过cache-id在本地索引到。</p><h4 id="5-Dockerfile"><a href="#5-Dockerfile" class="headerlink" title="5. Dockerfile"></a>5. Dockerfile</h4><p>Dockerfile是在通过docker build命令构建自己的Docker镜像时需要使用到的定义文件。它允许用户使用基本的DSL语法来定义Docker镜像，每一条指令描述了构建镜像的步骤。</p><h3 id="三、Docker镜像构建操作"><a href="#三、Docker镜像构建操作" class="headerlink" title="三、Docker镜像构建操作"></a>三、Docker镜像构建操作</h3><p>Docker提供了比较简单的方式来构建镜像或者更新现有的镜像——docker build和docker commit。不过原则上讲，用户并不能“无中生有”地创建一个镜像，无论是启动一个容器或者构建一个镜像，都是在其他镜像基础上进行的，Docker有一些列镜像被称为基础镜像（如基础Ubuntu镜像ubuntu、基础Fedora镜像fedora等），基础镜像便是镜像构建的起点。不同的是，docker commit是将容器提交为一个镜像，也就是从容器更新或者构建镜像；而docker build是在一个镜像的基础上构建镜像。</p><h4 id="1-commit镜像"><a href="#1-commit镜像" class="headerlink" title="1. commit镜像"></a>1. commit镜像</h4><p>docker commit命令只提交容器镜像发生变更了的部分，即修改后的容器镜像与当前仓库中对应镜像之间的差异部分，这使得该操作实际需要提交的文件往往并不多。</p><p>Docker daemon接收到对应的HTTP请求后，需哟啊执行的步骤如下。</p><ul><li>(1) 根据用户输入pause参数的设置确定是否暂停该Docker容器的运行</li><li>(2) 将容器的可读可写层导出打包，该读写层代表了当前运行容器的文件系统与当初启动该容器的镜像之间的差异。</li><li>(3) 在层存储（layerStore）中注册可读可写差异包</li><li>(4) 更新镜像历史信息和rootfs，并据此在镜像存储（imageStore）中创建一个新的镜像，记录其元数据。</li><li>(5) 如果指定了repository信息，则给上述镜像添加tag信息。</li></ul><h4 id="2-build构建镜像"><a href="#2-build构建镜像" class="headerlink" title="2. build构建镜像"></a>2. build构建镜像</h4><p>一般来说，用户主要使用Dockerfile和docker build命令来完成一个新镜像的构建。这条命令的格式如下；</p><p>Usage: docker build [OPTIONS]  PATH | URL | -</p><p>其中PATH或URL所指向的文件称为context（上下文），context包含build Docker镜像过程中需要的的Dockerfile以及其他的资源文件。下面介绍该命令的执行流程。</p><h5 id="Docker-client端"><a href="#Docker-client端" class="headerlink" title="Docker client端"></a>Docker client端</h5><p>当Docker client接收到用户命令，首先解析命令行参数。根据第一个参数的不同，将分为以下4种情况分别处理。</p><h6 id="情况1：第一个参数为“-”，即"><a href="#情况1：第一个参数为“-”，即" class="headerlink" title="情况1：第一个参数为“-”，即"></a>情况1：第一个参数为“-”，即</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#从STDIN种输入Dockerfile，没有context。</span><br><span class="line">$ sudo docker build - &lt; Dockerfile</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#从STDIN种读入压缩的context</span><br><span class="line">$ sudo docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure><p>此时，则根据命令行输入参数对Dockerfile和context进行设置。</p><h6 id="情况2：-第一个参数为URL，且是git-repository-URL，如"><a href="#情况2：-第一个参数为URL，且是git-repository-URL，如" class="headerlink" title="情况2： 第一个参数为URL，且是git repository URL，如"></a>情况2： 第一个参数为URL，且是git repository URL，如</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure><p>则调用git clone –depth 1 –recursive命令克隆该GitHub repository，该操作会在本地的一个临时目录中进行，命令成功之后该目录将作为context传给Docker daemon，该目录中的Dockerfile会被用来进行后续构建Docker镜像。</p><h6 id="情况3：-第一个参数为URL，且不是git-repository-URL，则从该URL下载context，并将其封装为一个io流——io-Reader，后面的处理情况与情况1相同，只是将STDIN换为了io-Reader。"><a href="#情况3：-第一个参数为URL，且不是git-repository-URL，则从该URL下载context，并将其封装为一个io流——io-Reader，后面的处理情况与情况1相同，只是将STDIN换为了io-Reader。" class="headerlink" title="情况3： 第一个参数为URL，且不是git repository URL，则从该URL下载context，并将其封装为一个io流——io.Reader，后面的处理情况与情况1相同，只是将STDIN换为了io.Reader。"></a>情况3： 第一个参数为URL，且不是git repository URL，则从该URL下载context，并将其封装为一个io流——io.Reader，后面的处理情况与情况1相同，只是将STDIN换为了io.Reader。</h6><h6 id="情况4：-其他情况，即context为本地文件或目录的情况。"><a href="#情况4：-其他情况，即context为本地文件或目录的情况。" class="headerlink" title="情况4： 其他情况，即context为本地文件或目录的情况。"></a>情况4： 其他情况，即context为本地文件或目录的情况。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#使用了当前文件夹作为context</span><br><span class="line">$ sudo docker build -t vieux/apache:2.0 .</span><br></pre></td></tr></table></figure><p>如果目录中有.dockerignore文件，则将context中文件名满足其定义的规则的文件都从上传列表中排除，不打包传给Docker daemon。但唯一的例外是.dockerignore文件中误写入了.dockerignore本身或者Dockerfile，将不会产生作用。如果定义了tag，则对其指定的repository和tag进行验证。</p><p>完成了相关信息的设置之后，Docker client向Docker server发送POST/build的HTTP请求，包含了所需的context信息。</p><h5 id="Docker-server端"><a href="#Docker-server端" class="headerlink" title="Docker server端"></a>Docker server端</h5><p>Docker server接收到相应的HTTP请求后，需要做的工作如下。</p><ul><li>(1) 创建一个临时目录，并将context指定的文件系统解压到该目录下。</li><li>(2) 读取并解析Dockerfile。</li><li>(3) 根据解析出的Dockerfile遍历其中的所有指令，并分发到不同的模块去执行。Dockerfile每条指令的格式均为INSTRUCTION arguments，INSTRUCTION是一些特定的关键词，包括FROM、RUN、USER等，都会映射到不同的parser进行处理。</li><li>(4) parser为上述每一个指令创建一个对应的临时容器，在临时容器中执行当前指令，然后通过commit使用此容器生成一个镜像层。</li><li>(5) Dockerfile中所有的指令对应的层的集合，就是此次build后的结果。如果指定了tag参数，便给镜像打上对应的tag。最后一次commit生成的镜像ID就会作为最终的镜像ID返回。</li></ul><p>综上所述，本节从概念阐述与源码分析两个角度深入刨析了镜像技术在Docker架构中的应用，相信读者也对如何与DOcker镜像交互有了自己的见解。当然，由于Docker镜像是构建Docker服务的基础，相关的命令还远远不止此，等待读者亲手实践。而在上述镜像功能的分析和梳理中其涉及很多关于镜像文件和目录的操作，这一部分跟底层的存储驱动比如aufs是息息相关的。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker 镜像管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>libcontainer</title>
      <link href="/2018/07/21/Docker-libcontainer/"/>
      <url>/2018/07/21/Docker-libcontainer/</url>
      <content type="html"><![CDATA[<h3 id="libcontainer简介"><a href="#libcontainer简介" class="headerlink" title="libcontainer简介"></a>libcontainer简介</h3><p>说到底，容器是一个与宿主机系统共享内核但与系统中的其他进程资源相隔离的执行环境。Docker通过对namespaces、cgroups、capabilities以及文件系统的管理和分配来“隔离”出一个上述执行环境，这就是Docker容器。</p><p>如果读者直接阅读Docker execdriver的代码，可能会觉得这部分对libcontainer的使用比较晦涩难懂。其实，execdriver首先要完成的工作是再拿到了Docker daemon提交command信息之后，生成一份专门的容器配置。</p><p>这个容器配置的生成过程虽然复杂，但是原理很简单。例如，再Docker daemon提交过来的command中，包含namespace、cgroups以及未来容器中将要运行的进程的重要信息。其中Network、Ipc、Pid等字段描述了隔离容器所需的namespace。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Command struct&#123;</span><br><span class="line">CommonCommand</span><br><span class="line"></span><br><span class="line">Ipc*Ipc`json:&quot;ipc&quot;`</span><br><span class="line">Pid *Pid`json:&quot;pid&quot;`</span><br><span class="line">ReadonlyRootfsbool`json:&quot;readonly_roofs&quot;`// rootfs是否为只读</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommonCommand字段中包含了Linux平台和Windows平台通用的配置信息。本节主要对Linux平台上的容器runtime和libcontainer进行讲解，不对Windows相关的代码做过多解释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">types CommonCommand struct &#123;</span><br><span class="line">...</span><br><span class="line">Mounts[]mount `json:&quot;mounts&quot;`// volume挂载点信息</span><br><span class="line">Network*Network`json:&quot;network&quot;`// cgroups相关信息</span><br><span class="line">ProcessConfigProcessConfig`json:&quot;process_config&quot;`// 容器中init进程的相关信息</span><br><span class="line">ProcessLabelstring`json:&quot;process_label&quot;`// 描述容器中的进程</span><br><span class="line">Resources*Resources `json:&quot;resources&quot;`// cgroups相关配置</span><br><span class="line">rootfs string`json:&quot;rootfs&quot;`// 容器的rootfs</span><br><span class="line">WorkingDir string`json:&quot;working_dir`  // 荣启红的工作目录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Resources字段包含了该容器cgroups的配置信息，定义如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type Resources struct &#123;</span><br><span class="line">Memoryint 64 `json:&quot;memory&quot;`</span><br><span class="line">MemorySwapint 64 `json:&quot;memory_swap&quot;`</span><br><span class="line">CpuSharesint 64 `json:&quot;cpu_shares&quot;`</span><br><span class="line">CpusetCpusstring `json:&quot;cpuset_cpus&quot;`</span><br><span class="line">CpusetMemsstring `json:&quot;cpusetmems&quot;`</span><br><span class="line">CpuPeriodint 64 `json:&quot;cpu_period&quot;`</span><br><span class="line">CpuQuotaint 64 `json:&quot;cpu_quota&quot;`</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProcessConfig字段描述容器中未来要运行的进程信息，定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type ProcessConfig struct &#123;</span><br><span class="line">...</span><br><span class="line">Entrypoint string `json:&quot;entrypoint&quot;`// Dockerfile里指定的Entrypoint，默认是/bin/sh -c</span><br><span class="line">Arguments []string `json:&quot;arguments&quot;`// 用户指定的cmd会作为Entrypoint的执行参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，execdriver会加载一个预定义的容器配置模板container，然后在模板中给添加来自command的相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">container := &amp;configs.Config&#123;</span><br><span class="line">...</span><br><span class="line">Namespaces: configs.Namespaces([]configs.Namespace)&#123;</span><br><span class="line">&#123;Type: &quot;NEWNS&quot;&#125;,</span><br><span class="line">&#123;Type: &quot;NEWUTS&quot;&#125;,</span><br><span class="line">&#123;Type: &quot;NEWIPC&quot;&#125;,</span><br><span class="line">&#123;Type: &quot;NEWPID&quot;&#125;,</span><br><span class="line">&#123;Type: &quot;NEWNET&quot;&#125;,</span><br><span class="line">&#123;Type: &quot;NEWUSER&quot;&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">Cgroups:configs.Cgroup(</span><br><span class="line">...</span><br><span class="line">ScopePrefix: &quot;docker&quot;,</span><br><span class="line">Resources: &amp;configs.Resources&#123;</span><br><span class="line">AllowAllDevices: false,</span><br><span class="line">MemorySwappiness: -1,</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等到上述容器配置模板container中的所有项都按照command提供的内容填好之后，一份该容器专属的容器配置container就生成好了。注意，小写的container其实是一个存储配置信息的对象，后面我们很快会提到大写的Container，它才是libcontainer里的容器对象。container可以理解为libcontainer与Docker daemon之间进行信息交换的标准格式。之后，libcontainer就能根据这份配置知道它需要在宿主机上创建MOUNT、UTS、IPC、PID、NET这5个namespace以及相应的cgroups配置，从而创建出Docker容器。</p><blockquote><p>提示 上述容器配置模板位于daemon/execdriver/native/template/default_template_linux.go。其中大多数启动容器所需的基础配置，比如namespace、系统目录的挂载等属性都已经定义好了。CommonCommand的定义在daemon/execdriver/driver.go#CommonCommand中，读者可以做对比。</p></blockquote><p>上述实现的全过程是daemon/execdriver/native/driver.go#Run按照先后顺序调用下述几个方法。</p><ul><li>创建容器配置：daemon/execdriver/native/create.go#createContainer;</li><li>加载模板：daemon/execdriver/native/driver_linux.go#InitContainer;</li><li>在createContainer方法中执行一系列createXXX方法填充模板。</li></ul><h3 id="libcontainer的工作方式"><a href="#libcontainer的工作方式" class="headerlink" title="libcontainer的工作方式"></a>libcontainer的工作方式</h3><p>上一节讲到，execdriver的Run方法通过Docker daemon提交的command信息创建了一份可以供libcontainer解读的容器配置container。这一节将讲解execdriver接下来如何调用libcontainer加载容器配置container，继而创建真正的Docker容器。Open Container Initiative（OCI）组织成立以后，libcontainer进化为runC，因此从技术上说，未来libcontainer/runC创建的将是符合Open Container Format（OCF）标准的容器。</p><p>这个阶段，execdriver需要借助libcontainer处理以下的事情。</p><ul><li>创建libcontainer构建容器所需要使用的“进程”，进程对象（非真正进程），称为Process；</li><li>设置容器的输出管道，这里使用的就是Docker daemon提供给libcontainer的pipes，详见上一节的描述；</li><li>使用名为Factory的工厂类，通过factory.Create(&lt;容器ID&gt;,&lt;容器配置container&gt;)创建一个“逻辑”上的容器，称为Container，在这个过程中，容器配置container会填充到Container对象的config项里，Container的使用至此就完成了；</li><li>执行Container.Start(Process)启动物理的容器；</li><li>execdriver执行由Docker daemon提供的startCallback完成回调动作；</li><li>execdriver执行Process.Wait，一直等上述Process的所有工作都完成。</li></ul><p>可以看到，libcontainer对Docker容器做了一层更高级的抽象，它定义了Process和Container来对应Linux中“进程”与“容器”的关系。一旦“物理”的容器创建成功，其他调用者就可以通过容器ID获取这个逻辑容器Container，接着使用Container.Stats得到容器的资源使用信息，或者执行Container.Destory来销毁这个容器。</p><p>综上，libcontainer中最主要的内容是Process、Container以及Factory这3个逻辑实体的实现原理，而execdriver或者其他调用者只要依次执行“使用Factory创建逻辑容器Container”、“启动逻辑容器Container”和“用逻辑容器创建物理容器”，即可完成Docker容器的创建。</p><p>接下来，我们深入到libcontainer内部，为读者解读其背后的机制。</p><h3 id="libcontainer-实现原理"><a href="#libcontainer-实现原理" class="headerlink" title="libcontainer 实现原理"></a>libcontainer 实现原理</h3><p>这一节，我们先把前面Docker daemon借助execdriver创建和启动容器的过程归纳为如下一段伪代码，使读者对这个过程有个初步的认识，也方便读者能在接下来介绍Process、Factory和Container的过程进行参照和对比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 在Docker daemon中创建driver（默认用libcontainer），并在这个过程中初始化Factory，默认为Linux的工厂类factory = libcontainer.New()</span><br><span class="line">...</span><br><span class="line">// 在Docker daemon中调用execdriver.Run，提交三大参数，容器配置、管道描述符和回调函数</span><br><span class="line">driver.Run(command,pipes,startCallback)</span><br><span class="line">//接下来创建容器的全过程都在driver中执行，也就是libcontainer</span><br><span class="line"></span><br><span class="line">// 1. 使用工厂Factory和容器配置container创建逻辑容器（Container），container中的各项内容均来自command参数</span><br><span class="line">container = Factory.Create(&quot;id&quot;,container)</span><br><span class="line"></span><br><span class="line">// 2. 传概念简要在容器内运行的进程（Process）</span><br><span class="line">Process = libcontainer.Process&#123;</span><br><span class="line">// Arg数组就是用户在Dockerfile里指定的Entrypoint的命令和参数集合，同样解析自command参数</span><br><span class="line">Args:&quot;/bin/bash&quot;, &quot;-x&quot;,</span><br><span class="line">Env:&quot;PATH=/bin&quot;,</span><br><span class="line">Cwd:&quot;/&quot;,</span><br><span class="line">User:&quot;daemon&quot;,</span><br><span class="line">Stdin:os.Stdin,</span><br><span class="line">Stdout:os.Stdout,</span><br><span class="line">Stderr:os.Stderr,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3. 使用上述Process启动物理容器</span><br><span class="line">Container.Start(Process)</span><br><span class="line"></span><br><span class="line">// 在这里执行回调方法startCallback等，略去</span><br><span class="line"></span><br><span class="line">// 4. 等待直到物理容器创建成功</span><br><span class="line">status = Process.Wati()</span><br><span class="line"></span><br><span class="line">// 5. 如果需要的话，销毁物理容器</span><br><span class="line">Container.Destroy()</span><br></pre></td></tr></table></figure><p>好了，接下来进入正题，我们先从Factory创建逻辑容器Container开始。</p><h4 id="1-用Factory创建逻辑容器Container"><a href="#1-用Factory创建逻辑容器Container" class="headerlink" title="1. 用Factory创建逻辑容器Container"></a>1. 用Factory创建逻辑容器Container</h4><p>libcontainer中Factory存在的意义就是能够创建一个逻辑上的“容器对象”Container，这个逻辑上的“容器对象”并不是一个运行着的Docker容器，而是包含了容器要运行的指令及其参数、namespace和cgroups配置参数等。对于Docker daemon来说，容器的定义只需要一种就够了，不同的容器只是实例的内容（属性和参数）不一样而已。对于libcontainer来说，由于它需要与底层系统打交道，不同的平台就需要创建出完全异构的“逻辑容器对象”（比如Linux容器和Windows容器），这也就解释了为什么这里会使用“工厂模式”；今后libcontainer可以支持更多平台上各种类型的容器的实现，而execdriver调用glibcontainer创建容器的方法却不会受到影响。</p><p>下面解释以下Factory的Create操作具体做的事情。</p><ul><li>验证容器运行的根目录（默认/var/lib/docker/containers）、容器ID（字母、数字和下划线构成，长度范围为1~1024）和容器配置这三项内容的合法性。</li><li>验证上述容器ID与现有的容器不冲突。</li><li>在根目录西啊创建以ID为名的容器工作目录（/var/lib/docker/containers/{容器ID}）。</li><li>返回一个eCOntainer对象，其中的信息包括了容器ID、容器工作目录、容器配置、初始化指令和参数（即dockerinit），以及cgroups管理器（这里有直接通过文件操作管理和systemd管理两个选择，默认选第一种）。</li></ul><p>至此，Container就已经创建和初始化完毕了。</p><h4 id="2-启动逻辑容器Container"><a href="#2-启动逻辑容器Container" class="headerlink" title="2. 启动逻辑容器Container"></a>2. 启动逻辑容器Container</h4><p>前面提到，Container主要包括了容器配置、控制等信息，是对不同操作系统下容器实现的抽象，目前Linux平台下的容器更为完善。</p><p>参与物理容器创建过程的Process一共有两个实例，第一个叫Process，用于物理容器内进程的配置和IO的管理，前面的伪码中创建的Process就是指它；另一个叫ParentProcess，负责从物理容器外处理物理容器启动工作，与Container对象直接进行交互。启动工作完成后，ParentProcess负责执行等待、发信号、获得容器内进程pid等管理工作。</p><p>ParentProcess出现在哪里呢？答案是在启动逻辑容器的时候，即Container.Start()执行的时候。Container的Start()启动过程主要有两个工作：创建ParentProcess实例，然后执行ParentProcess.start()来启动物理容器。</p><p>创建ParentProcess的过程如下。</p><ul><li>(1) 创建一个管道（pipe），用来与容器内未来要运行的进程通信（这个pipe不同于前面的输出流pipes，后面会做解释）。</li><li>(2) 根据逻辑容器Container中与容器内未来要运行的进程相关的信息创建一个容器内进程启动命令cmd对象，这个对象由Golang语言中的os/exec包进行声明，Docker会调用os/exec包中的内置函数，根据cmd对象来创建一个新的进程，即容器中的第一个进程dockerinit。而cmd对象则需要从Container中获得的属性包括启动命令的路径、命令参数、输入输出、执行命令的根目录以及进程管道pipe等。</li><li>(3) 为cmd添加一个环境变量_LIBCONTAINER_INITTYPE=standard来告诉将来的容器进程（dockerinit）当前执行的是“创建”动作。设置这个标志是因为libcontainer还可以进入已有的容器执行子进程，即docker exec指令执行的效果。</li><li>(4) 将容器需要配置的namespace添加到cmd的Cloneflags中，表示将来这个cmd要运行在上述的namespace中。若需要加入user namespace，还要针对配置项进行用户映射，默认映射到宿主机的root用户。</li><li>(5) 将Container中的额容器配置和Process中的Entrypoint信息合并为一份哦那个其配置加入到ParentProcess当中。</li></ul><p>实际上，ParentProcess是一个接口，上述过程真正创建的是一个称为initProcess的具体实现对象。cmd、pipe、cgroup管理器和容器配置这4部分共同组成了一个initProcess。这个对象是用来“创建容器”所需要的ParentProcess，这主要是未来同setnsProcess区分，后者的作用是进入已有的容器。逻辑容器Container启动的过程实际上就是initProcess对象的构建过程，而构建initProcess则是为创建物理容器做准备。</p><p>接下来逻辑容器Container执行initProcess.start()，真正的Docker容器终于诞生了。</p><h4 id="3-用逻辑容器创建物理容器"><a href="#3-用逻辑容器创建物理容器" class="headerlink" title="3. 用逻辑容器创建物理容器"></a>3. 用逻辑容器创建物理容器</h4><p>逻辑容器Container通过initProcess.start()方法新建物理容器的过程如下。</p><ul><li>(1) Docker daemon利用Golang的exec包执行initProcess.md，其效果等价于创建一个新的进程并为它设置namespace。这个cmd里指定的命令就是容器诞生时的第一个进程。对于libcontainer来说，这个命令来自于execdriver新建容器时加载daemon的initPath，即Docker工作目录下的/var/lib/docker/init/dockerinit-{version}文件。dockerinit进程所在的namespace即用户为最终的Docker容器指定的namespace。</li><li>(2) 把容器进程dockerinit的PID加入到cgroup中管理。至此我么可以说dockerinit的容器隔离环境已经初步创建完成。</li><li>(3) 创建容器内部的网络设备，包括lo和veth。这一部分设计netlink等。</li><li>(4) 通过管道发送容器配置给容器内进程dockerinit。</li><li>(5) 通过管道等待dockerinit根据上述配置完成所有初始化工作，或者出错返回。</li></ul><p>综上所述，ParentProcess即（initProcess，后面不在进行区分了）启动了一个子进程dockerinit作为容器内的初始进程，接着，ParentProcess作为父进程通过pipe在容器外面对dockerinit管理和维护。那么在容器内部，dockerinit又做了哪些初始化工作呢？</p><p>dockerinit进程只有一个功能，那就是执行reexec.init()，该init方法做上面共呢个，是由对应的execdrive注册到reexec当中的具体实现来决定的。对于libcontainer来说，这里要注册执行的是Factory当中的StarInitialization()。再次提醒读者，接下来的所有动作都发生在容器内部。</p><ul><li>创建pipe管道所需的文件描述符。</li><li>通过管道获取ParentProcess传来的容器配置，如namespace、网络等信息。</li><li>从配置信息中获取并设置容器内的环境变量，如区别新建容器和在已存在容器中执行命令的环境变量_LIBCONTAINER_INITTYPE。</li><li>如果用户在docker run中指定了-ipc、-pid、-uts参数，则dockerinit还需要把自己加入到用户指定的上述namespace中。</li><li>出画完了过设备，这些网络设备正是在ParentProcess中创建出来的lo和veth。这里的初始化工作包括：修改名称、分配MAC地址、设置MTU、添加IP地址和配置默认网关等。</li><li>设置路由和RLIMIT参数</li><li>创建mount namespace，为挂载文件系统做准备。</li><li>在上述mount namespace中设置挂载点，挂载rootfs和各类文件设备，比如/proc。然后通过pivot_root切换进程根路径到rootfs的根路径。</li><li>写入hostname等，加载profile信息。</li><li>比较当前进程的父进程ID与初始化进程一开始记录下来的父进程ID，如果不相同，说明父进程异常推出过，终止这个初始化进程。否则执行最后一步。</li><li>最后一步，使用execv系统调用执行容器配置中的Args指定的命令。</li></ul><p>上述Arg指定的命令是什么呢？读者不妨回顾一下本节一开始总结的那段伪码。可以发县，Args[0]正是用户指定的Entrypoint，Args[1,2,3…]则是该指令后面跟的运行参数。所以当容器创建成功后，它里面运行起来的进程已经从dockerinit变成了用户指定的命令Entrypoint（如果不指定，Docker默认的是Entrypoint为/bin/sh -c）。execv调用就是为了保证这个 “替换” 发生后的Entrypoint指令继续使用原先dockerinit的PID等信息。</p><p>如果用户执行的是docker run -i -t ubuntu <cmd>呢？那么，所有用户指定的<cmd>都会作为Entrypoint的参数保存在前面说过的Arg[0..]里。</cmd></cmd></p><p>至此，容器的创建和启动过程宣告结束。</p><p>容器进程经历的3个阶段的变化。</p><ol><li>Docker daemon进行 “用Factory创建逻辑容器Container” “启动逻辑容器Container” 等准备工作，构建ParentProcess对象，然后利用它创建容器内的第一个进程dockerinit。</li><li>dockerinit利用reexec.init()执行StartInitialization()。这里dockerinit会将自己加入到用户指定的namespace（如果制定了的话），然后再开始进行容器内部的各项初始化工作。</li><li>StartInitialization()使用execv系统调用执行容器配置中的Args指定的命令，jiEntryPoint和docker run[COMMAND]参数。</li></ol><p>那么Docker daemon如何管理已经创建后的容器呢？下面我们就来说明容器创建后的通信方式——管道。</p><h4 id="4-Docker-daemon与容器之间的通信方式"><a href="#4-Docker-daemon与容器之间的通信方式" class="headerlink" title="4. Docker daemon与容器之间的通信方式"></a>4. Docker daemon与容器之间的通信方式</h4><p>前面解析的容器进程启动后需要做初始化工作，就使用了namespace隔离后的两个进程间的通信。我们把负责创建容器的进程成为父进程，容器进程成为子进程。父进程克隆出子进程以后，依旧是共享内存的。如何子进程感知内存中写入了新数据依旧是一个问题，一般有一下4中方法。</p><ul><li>发送信号通知（signal）</li><li>对内存轮询访问（poll memory）</li><li>sockers通信（sockets）</li><li>文件和文件描述符（files and file-descriptors）</li></ul><p>对于signal而言，本身包含的信息有限，需要额外记录，namespace带来的上下文变化使其操作更为复杂，并不是最佳选择。显然通过轮询内存的方式i来沟通是一个非常低效的做法。另外，因为Docker会加入network namespace，实际上初始时网络栈也是完全隔离的，所以socket方式并不可行。</p><p>Docker族中选择的方式就是管道——文件和文件按描述符方式。在Linux中，通过pipe（intfd[2]）系统调用就可以创建管道，参数是一个包含两个整形的数组。调用完成后，在fd[1]端戏入的数据，就可以从fd[0]端读取，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">int fd[2];</span><br><span class="line">// 在父进程中进行初始化</span><br><span class="line">pipe(fd);</span><br><span class="line">// 关闭管道文件描述符</span><br><span class="line">close(checkpoint[1]);</span><br></pre></td></tr></table></figure><p>调用pipe函数后，创建的子进程会内嵌这个打开的文件描述符，对fd[1]写入数据后可以在fd[0]端读取。通过管道，父子进程之间就可以通信。这个通信完成的标志就在EOF信号的传递。总所周知当打开的文件描述符都关闭时，才能读到EOF信号。因此libcontainer中父进程在通过pipe向子进程发送完毕初始化所需信息后，先关闭自己这一端的管道，然后等待子进程关闭另一端的管道文件描述符，传来EOF表示子进程已经完成了这些初始化工作。</p><p>至此，libcontainer主要的实现原理就介绍完毕了。</p><h3 id="使用runC-与-libcontainer-进行交互"><a href="#使用runC-与-libcontainer-进行交互" class="headerlink" title="使用runC 与 libcontainer 进行交互"></a>使用runC 与 libcontainer 进行交互</h3><p>Linux基金会于2015年6月成立OCI（Open Container Initiative）组织，旨在围绕容器格式和运行时指定一个开发的工业化标准。制定容器格式标准（Open Container Format，OCF）的宗旨概括来说就是不受上层结构的限定，如特定的客户端、编排栈等，同时也不受特定的供应商或项目的限定，即不受限于特定操作系统、硬件、CPU架构、公有云等。runC直接对libcontainer包进行调用，去除了Docker包含的诸如镜像、volume等高级特性，以最朴素简洁的方式达到符合OCF标准的容器管理实现。</p><p>在本节的最后，我们必须要介绍一下runc的使用方法。nsinit是一个为了方便不通过Docker就可以直接使用libcontainer而开发的命令行工具。他可以用于启动一个容器或者在已有的容器中执行命令。使用nsinit需要有rootfs及相应的撇脂文件。</p><h4 id="1-runC的构建"><a href="#1-runC的构建" class="headerlink" title="1. runC的构建"></a>1. runC的构建</h4><p>使用runC需要相关容器配置文件以及rootfs，相关配置文件可以使用run spec命令来进行生成。其中的config.json为容器的基础配置文件去·* ，runtime.json为容器的运行时文件。其中rootfs最简单、最常用的是使用Docker busybox，可以使用如下命令生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir rootfs</span><br><span class="line">docker export $(docker create busybox) | tar -C rootfs -xvf -</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">官方的README文档中已经给出具体的构建步骤，此处不再赘述。在准备好相关配置文件以及rootfs之后，只需执行如下命令，即可进行创建并运行一个名叫runc-test的容器（需要root权限）。</span><br></pre></td></tr></table></figure><p>run start runc-test<br><code>`</code></p><p>执行完成后会在/run/runc之下生成一个以容器ID命名的文件夹，该文件夹会生成一个state.json文件，表示容器的状态，其中的内容与配置参数中的内容类似，展示容器的状态。</p><h4 id="runC的使用"><a href="#runC的使用" class="headerlink" title="runC的使用"></a>runC的使用</h4><p>目前runC定义了多个指令，使用runc -h就可以看到，杜宇每个单独的指令使用–help就能获得更详细的使用参数，如runc start –help。</p><p>runC这个命令行是借助开源项目github.com/codegangsta/cli实现的，main.go中定义了各个子命令，而每个子命令又使用单独的.go文件进行实现，这使得runC本身的代码非常简介明了。具体的命令功能如下。</p><ul><li>delete：删除任何被此容器所占用的资源</li><li>events：展示容器中类似于OOM提示，CPU、内存和IO的使用情况。</li><li>exec：在容器中执行一个新的进程。</li><li>init：这是一个内置的参数，用户并不能直接使用。这个命令是在容器内部执行，为容器进行namespace初始化，并在完成初始化后执行用户指令。所以在代码中，运行runc exec后，传入到容器中运行的实际上是runc init，把用户指令作为配置项传入。</li><li>kill：给容器中的init发送一个特性的信号（默认为SIGTERM）。</li><li>list：列出在给定目录下被runC启动的容器。</li><li>ps：展示容器中运行的进程。 </li><li>pause/resume：暂停/恢复容器中的进程。</li><li>spec：使用内置的默认参数加上执行命令时用户添加的部分参数，生成一份容器可用的标准配置文件。</li><li>start：创建并启动一个容器。</li><li>state：展示容器状态，就是读取state.json文件。</li><li>update：更新容器的资源文件。</li><li>checkpoint：保存容器的检查点快照并结束容器进程，需要填–imnage-path参数，后面是检查点保存的快照文件路径，完成的命令实例如下。<ul><li><code>runc checkpoint run-test --image-path=/tmp/criu</code></li></ul></li><li>restore：从容器检查点跨海早恢复容器进程的运行，参数同上。</li></ul><p>综上，runC与Docker execdriver进行的工作基本相同，在Docker的源码中并不会涉及runC包的调用，但runC为libcontainer自身的调试和使用带来了极大的便利。</p><p>本节主要介绍了用于Docker容器管理的libcontainer，从libcontainer的使用入手解读源码实现方式。我们深入到容器进程内部，感受到了libcontainer周到全面的设计。总体而言，libcontainer本身主要分为三大块工作内容，一是容器的创建及初始化，而是容器生命周期管理，三是进程管理，调用方为Docker的execdriver。容器的监控主要通过cgroups的状态统计信息，未来会加入进程追踪等更加丰富的功能。另一方面，libcontainer在安全支持方面也为用户尽可能地提供了支持和选择。遗憾的是，容器安全的配置需要用户对系统安全本身有足够深的理解，可见libcontainer依旧有很多功能需要完善。Docker社区的火热带动了大家对libcontainer的关注，相信在不久的将来，libcontainer就会变得更安全，更易用。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> libcontainer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker client和daemon</title>
      <link href="/2018/07/21/Docker-client-daemon/"/>
      <url>/2018/07/21/Docker-client-daemon/</url>
      <content type="html"><![CDATA[<p>使用过Docker的恐怕对docker这个命令是再熟悉不过了，不知读者有没有思考过，当使用这个命令时究竟发生了什么？该从哪里入手去跟踪一个docker命令的执行流程呢？实际上，要回答这个问题，首先要了解docker命令的两种模式：client模式和daemon模式。</p><a id="more"></a><h3 id="client模式"><a href="#client模式" class="headerlink" title="client模式"></a>client模式</h3><p>什么是Docker的client模式呢？我们知道，docker命令对应的源文件是docker/docker.go（如果不做说明，根路径是项目的根目录docker/），它的使用方式如下：</p><p>docker [OPTIONS] COMMAND [ARG…]</p><p>其中OPTIONS参数称为flag，任何时候执行一个docker命令，Docker都需要先解析这些flag，然后按照用户声明的COOMAND向制定的自命令执行对应的操作。</p><p>如果子命令为daemon，Docker就会创建一个运行在宿主机的daemon进程（docker/daemon.go#mainDaemon），即执行daemon模式。其余子命令都会执行client模式。处于client模式下的docker命令工作流程包含如下几个步骤。</p><h4 id="1-解析flag信息"><a href="#1-解析flag信息" class="headerlink" title="1. 解析flag信息"></a>1. 解析flag信息</h4><p>docker命令支持大量的OPTION，或者说flag，这里列出对于运行在client模式下的docker比较重要的一些flag。</p><ul><li>Debug，对应-D和–debug参数，它将向系统中添加DEBUG环境变量且赋值为1，并把日志显示等级调为DEBUG级，这个flag用于启动调试模式。</li><li>LogLevel，对应-l和–log-level参数，默认等级为info，即只输出普通的操作信息。用户可以指定的日志等级现在有panic、fatal、error、warn、info、debug这几种。</li><li>Hosts，对应-H和–host=[]参数，对于client模式，就是指本次操作需要连接的Docker daemon位置，而对于daemon模式，则提供索要监听的地址。若Hosts变量或者系统环境变量DOCKER_HOST不为空，说明用户指定了host对象；否则使用默认设定，默认情况下Linux系统设置为unix:///var/run/docker.sock</li><li>protoAddrParts，这个信息来自于-H参数中：//前后的两部分的组合，即与Docker daemon建立通信的协议方式与socket地址。</li></ul><h4 id="2-创建client实例"><a href="#2-创建client实例" class="headerlink" title="2. 创建client实例"></a>2. 创建client实例</h4><p>client的创建就是在已有配置参数信息的基础上，调用api/client/cli.go#NewDockerClie，需要设置好proto（传输协议）、addr（host的目标地址）和tlsConfig（啊暖传输层协议的配置），另外还会配置标准输入输出及错误输出。</p><h4 id="3-执行具体的命令"><a href="#3-执行具体的命令" class="headerlink" title="3. 执行具体的命令"></a>3. 执行具体的命令</h4><p>Docker client对象创建成功后，剩下的执行具体的命令就交给cli/cli.go来处理了。</p><h5 id="从命令映射到对应的方法"><a href="#从命令映射到对应的方法" class="headerlink" title="从命令映射到对应的方法"></a>从命令映射到对应的方法</h5><p>cli主要通过反射机制，从用户输入命令（比如run）得到匹配的执行方法（比如CmdRun），这也是所谓“约定大于配置”的方法命令规范。</p><p>同时，cli会根据参数列表的长度判断是否用于多级Docker命令支持（例如未来也许会加入一条命令，如docker group run可以指定一组Dcoker容器一起运行某个命令），然后根据找到的执行方法，把剩余参数传入并执行。若传入的方法不合法或参数不正确，则返回docker命令的帮助信息并退出。</p><p>在v1.10的Docker中每一个类似api/client/commnd.go#CmdRun的方法都被剥离出阿里作为一个单独的文件存在，例如读者想要学习docker run这个命令的执行过程，就需要寻早api/clientrun.go这个文件。</p><h5 id="执行对应的方法，发起请求"><a href="#执行对应的方法，发起请求" class="headerlink" title="执行对应的方法，发起请求"></a>执行对应的方法，发起请求</h5><p>找到具体的执行方法后，就开始执行。虽然请求内容会有所不同，但执行流程却大致相同。基本的流程如下所示。</p><ul><li>解析传入的参数，并针对参数进行配置处理</li><li>获取与Docker daemon通信所需要的认证配置信息。</li><li>根据命令业务类型，给Docker daemon发送POST、GET等请求。</li><li>读取来自Docker daemon的返回结果。</li></ul><p>由此可见，在请求执行过程中，大多都是将命令行中关于请求的参数进行初步处理，并添加响应的辅助信息，最终通过指定的协议给Docker daemon发送Docker client API请求，主要的任务执行均有Docker daemon完成。</p><p>至此，client模式下的一个命令的处理流程就结束了，接下来介绍daemon模式。</p><h3 id="daemon-模式"><a href="#daemon-模式" class="headerlink" title="daemon 模式"></a>daemon 模式</h3><p>上一节讲到了Docker运行时如果使用docker daemon自命令，就会运行Docker daemon。本节将重点讲解Docker daemon在启动过程中所做的工作。</p><p>一旦docker进入了daemon模式下，剩下的初始化工作和启动工作就都由Docker的docker/daemon.go#CmdDaemon来完成。</p><p>下面是Docker daemon启动与初始化过程的详细解析。</p><h4 id="1-API-Server的配置和初始化过程"><a href="#1-API-Server的配置和初始化过程" class="headerlink" title="1. API Server的配置和初始化过程"></a>1. API Server的配置和初始化过程</h4><p>首先，在docker/daemon.go#CmdDaemon中，Docker会继续按照用户的配置完成server的初始化并启动它。server又称为APi Server，顾名思义就是专门负责响应用户请求并将请求交给daemon具体方法去处理的进程。它的启动过程如下。</p><ul><li><1> 整理解析用户指定的各项参数。</1></li><li><2>    创建PID文件。</2></li><li><3> 加载所需的server辅助配置，包括日志、是否允许远程访问、版本以及TLS认证信息等。</3></li><li><4> 根据上述server配置，加上之前解析出来的用户指定的server配置（比如Hosts），通过goroutine的方式启动API Server。这个server监听的socker位置就是Hosts的值。</4></li><li><5> 创建一个负责处理业务的daemon对象（对应daemon/damone.go）作为负责处理用户请求的逻辑实体。</5></li><li><6> 对APIserver中的路由表进行初始化，即将用户的请求和对应的处理函数相对应起来。</6></li><li><7> 设置一个channel，保证上述goroutine只有在server出错的情况下才会退出。</7></li><li><8> 设置信号捕获，当Docker daemon进程收到INT、TERM、QUIT信号时，关闭API Server，调用shutdownDaemon停止这个daemon。</8></li><li><9> 如果上述操作都成功，API Server就会与上述daemon绑定，并允许接收来自client的连接。</9></li><li><10> 最后，Docker daemon进程向宿主机的init守护进程发送“READY<br>=1”信号，表示这个Docker daemon已经开始工作了。</10></li></ul><p>那么shutdownDaemon是如何来关闭一个daemon的呢？这个流程如下步骤。</p><ul><li>(1) 创建并设置一个channel，使用select监听数据。在正确完成关闭daemon工作后将该channel关闭，标识该工作的完成；狗则在超时（15秒）后报错。</li><li>(2) 调用daemon/daemon.go#Shutdown方法执行如下工作。<ul><li>便利所有运行中的容器，先使用SIGTERM软件杀死容器进程，如果10秒内不能完成，则使用SIGKILL强制杀死。</li><li>入宫netController被初始化过，调用#libnetwork/controller.go#GC方法进行垃圾回收。</li><li>结束运行中的镜像存储驱动进程。</li></ul></li></ul><p>在1.6版本的早期和以前的所有版本，上述server的启动和初始化使用了一种复杂的Job机制（API Server即被看作一种Job），并且依赖于一个专门的Docker Engine来管理和运行这些Job。到1.7版本，这个设计已经在整个社区的推动下被重构了，浙江大学SEL实验室云计算团队也参与到了此次重构得过程中。所以本书介绍的新的server初始化流程，该server会通过与daemon对象绑定来接收并处理完成具体得请求（类似一个API接收器绑定了一个业务逻辑处理器）。目前得1.10版仍保持了这个设计。</p><h4 id="2-daemon对象得创建与初始化过程"><a href="#2-daemon对象得创建与初始化过程" class="headerlink" title="2. daemon对象得创建与初始化过程"></a>2. daemon对象得创建与初始化过程</h4><p>既然API Serverr是同daemon对象绑定起来共同完成工作得，那么这个daemon对象是如何创建出来的呢？事实上，这个过程对应的正是daemon/daemon.go#NewDaemon方法。</p><p>NewDaemon过程会按照Docker的功能点，逐条为daemon对象所需的属性设置用户或者系统指定的值，这是一个相当复杂的过程。</p><p>截至到本书截稿，这个过程需要完成的而配置至少包括了如下功能点：Docker容器的配置信息、检测系统支持及用户权限、配置工具路径、加载并配置graphdriver、创建Docker网络环境、创建并初始化镜像数据库、创建容器管理驱动、检测DNS配置和加载已有Docker容器等。下面将为读者一一解释。</p><h5 id="Docker容器的配置信息"><a href="#Docker容器的配置信息" class="headerlink" title="Docker容器的配置信息"></a>Docker容器的配置信息</h5><p>容器配置信息的主要功能是：供用户自由配置Dokcer容器的可选功能，使得Docker容器的运行更贴近用户期待的运行场景。配置信息的处理包含以下几个部分。</p><ul><li>设置默认的网络最大传输单元：当用户没有对-mtu参数进行指定时，将其设置为1500.否则，沿用用户指定的参数值。</li><li>检测网桥配置信息：此部分配置为进一步配置Docker网桥提供铺垫，将在后续详细介绍。</li></ul><h5 id="检测系统支持及用户权限"><a href="#检测系统支持及用户权限" class="headerlink" title="检测系统支持及用户权限"></a>检测系统支持及用户权限</h5><p>初步处理完Docker的配置信息之后，Docker对自身运行的环境进行了一系列的检测，主要包括3个方面。</p><ul><li>操作系统类型对Docker daemon的支持，目前Docker daemon只能运行在Linux系统上。</li><li>用户权限的级别，必须是root权限。</li><li>内核版本与处理器的支持，支持amd64架构的处理器，且内核版本必须升至3.10.0及以上。</li></ul><h5 id="配置daemon工作路径"><a href="#配置daemon工作路径" class="headerlink" title="配置daemon工作路径"></a>配置daemon工作路径</h5><p>配置Docker daemon的工作路径，主要是创建Docker daemon运行中所在的工作目录，默认为/var/lib/docker。若该目录不存在，则会创建，并赋予0700权限。</p><h5 id="配置Docker容器所需的文件环境"><a href="#配置Docker容器所需的文件环境" class="headerlink" title="配置Docker容器所需的文件环境"></a>配置Docker容器所需的文件环境</h5><p>这一步Docker daemon会在Docker工作根目录/bar/lib/docker下面初始化一些重要的目录和文件，来构建Docker容器工作所需的文件系统环境。</p><p><strong>第一</strong> ，创建容器配置文件目录。Docker daemon再创建Docker容器之后，需要将容器内的配置文件放到这个目录下统一管理。目录默认位置为：/var/lib/docker/containers，它下面会为每个具体容器保存如下几个配置文件，其中xxx为容器ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls /var/lib/docker/containers/xxx</span><br><span class="line">checkpoints  config.v2.json  hostconfig.json  hostname  hosts  resolv.conf  secrets  shm</span><br></pre></td></tr></table></figure><p>这些配置文件里包含了这个容器的所有元数据。</p><p><strong>第二</strong> ，配置graphdriver目录。它用于完成Docker容器镜像管理所需的底层存储驱动层。所以，在这一步的配置工作就是加载并配置镜像存储驱动graphdriver，创建存储驱动管理镜像层文件系统所需的目录和环境，初始化镜像层元数据存储。</p><p>创建graphdriver时，首先会从环境变量DOCKER_DRIVER中读用户指定的驱动，若为空，则开始遍历优先级数组选择一个graphdriver。在Linux环境下，优先级从高到低依次为aufs、btfs、zfs、devicemapper、overlay和vfs。在不同操作系统下，优先级列表的内容和顺序都会不同，而且随着内核的发展以及驱动的完善，会继续发生变化。</p><p>需要注意，目前vfs在Docker中是用来管理volume的，并不作为镜像存储使用。另外，由于目前在overlay文件系统上运行的Docker容器不兼容SELinux，因此当config中及配置信息需要启用SELinux并且driver的类型为overlay时，该过程就会报错。</p><p>当识别出对应的driver（比如aufs）后，Docker会执行这个driver对应的初始化方法（位于daemon/graphdriver/aufs/aufs.go），这个初始化的主要工作包括：尝试加载内核aufs模块来确定Docker主机支持aufs；发起statfs系统调用获取当前Docker主目录（/var/lib/docker/）的文件系统信息，确定aufs是否支持该文件系统；创建aufs驱动根目录（默认：/var/lib/docker/aufs）并将该目录配置为私有挂载；在根目录下创建mnt、diff和layers目录作为aufs驱动的工作环境。</p><p>上述工作完成后，graphdriver的配置工作就完成了。</p><p><strong>第三</strong> ，配置镜像目录。主要工作是在Docker主目录下创建一个image目录，来存储所有镜像和镜像层管理数据，默认目录为“/var/lib/docker/image/”。在image目录下，每一个graphdriver都有一个具体的目录用于存储使用该graphdriver存储的镜像相关的元数据。</p><p>根据上一步graphdriver的选择情况（这里以aufs为例），创建image/aufs/layerdb/目录作为镜像层元数据存储目录，并创建MetadataStore用来管理这些元数据。根据graphdriver与元数据存储结构创建layerStore，用来管理所有的景象层和容器曾，将逻辑镜像层的操作映射到物理存储驱动根层graphdriver的操作；创建用于对registry的镜像上传下载的uploadManager和downloadManager。</p><p>创建image/aufs/imagedb/目录用于存储镜像的元数据，并根据layerStore创建imageStore，用来管理镜像的元数据。layerdb和imagedb目录结构和作用会在后续详细说明。</p><p><strong>第四</strong> ，调用volume/local/local.go#New创建volume驱动目录（默认为/var/lib/docker/volumes），Docker中volume是宿主机上挂载到Docker容器内部的特定目录。volumes目录下有一个metadata.db数据库文件用于存储volume相关的元数据，其余以volume ID命名的文件夹用于存储具体的volume内容。默认的volume驱动式local，用户也可以通过插件的形式使用其他volume驱动来存储。</p><p><strong>第五</strong> ，准备“可信镜像”所需的工作目录。在Docker工作根目录下创建trust目录。这个存储目录可以根据用户给出的可信URL加载授权文件，用来处理可信镜像的授权和验证过程。</p><p><strong>第六</strong> ，创建distributionMetadataStore和referenceStore。referenceStore用于存储镜像的仓库列表。记录镜像仓库的持久化文件位于Docker根目录下的image/[graphdriver]/repositories.json中，主要用于做镜像ID与镜像仓库之间的映射。distributionMetadataStore存储与第二版镜像仓库registry有关的元数据，主要用于做镜像层的diff_id与registry中镜像层数据之间的映射。</p><p><strong>第七</strong>，将持久化在Docker根目录中的镜像、镜像层以及镜像仓库等的元数据内容恢复到daemon的imageStore、layerStore和referenceStore中。</p><p><strong>第八</strong> ，执行镜像迁移。由于Docker 1.10版本以后，镜像管理部分使用率基于内容寻址存储（content-addressable storage）。升级到1.10以上的新版本后，在第一次启动daemon时，为例将老版本中的graph镜像管理迁移到新的经此昂管理体系中，这里会检查Docker根目录总是否存在graph文件夹，如果存在就会读取graph中的老版本镜像信息，计算校验和并将镜像数据写入到新版的imageStore和layerStore中。读者需要注意的是，迁移镜像中计算校验和是一个非常占用CPU的工作，并且在未完成镜像迁移时，Docker daemon是不会响应任何请求的，所以如果你本地的老板本镜像和容器比较多，或者是在对服务器负载和响应比较敏感的线上环境尝试升级Docker版本，那就要注意妥善安排时间了。Docker官方也提供了迁移工具让用户在老版本daemon运行的时候进行镜像的迁移。</p><p>综上，这里Docker daemon需要在Docker根目（/var/lib/docker）下创建初始化一系列根容器文件密切相关的目录和文件。这些文件和目录的具体作用我们会在讲解镜像和volume的时候做详细解释，这里献给读者进行一个简答的总结。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-11.png" title="Docker根目录"></center><h5 id="创建Docker-daemon网络"><a href="#创建Docker-daemon网络" class="headerlink" title="创建Docker daemon网络"></a>创建Docker daemon网络</h5><p>创建Docker daemon运行环境的时候，创建网络环境时极为重要的一个部分。这不仅关系着容器对外的通信，同样也关系着容器间的通信。网络部分早已被抽离出来作为要给单独的模块，称为libnetwork。libnetwork通过插件的形式为Docker提供网络功能，使得用户可以根据自己的需求实现自己的driver来提供不同的网络功能。截止到Docker 1.10版本，libnetwork实现了host、null、bridge和overlay的驱动。其中，bridge driver为默认驱动，和之前版本中的Docker网络功能是基本等价的。需要注意的是，同之前的Docker网络一样，bridge driver并不能提供跨主机通信的能力，overlay driver则适用于多主机环境。</p><h5 id="初始化execdriver"><a href="#初始化execdriver" class="headerlink" title="初始化execdriver"></a>初始化execdriver</h5><p>execdriver是Docker中用来管理Docker容器的驱动。Docker会调用execdrivers中的eNewDriver()函数来创建新的execdriver。</p><p>在创建execdriver的时候，需哟啊注意以下5部分信息。</p><ul><li>运行时中指定使用的驱动类别，在默认配置文件中默认使用nativer，即其对应的容器运行时为libcontainer；</li><li>用户定义的execdriver选项，即-exec-opt参数值；</li><li>用户定义的-exec-root参数值，Docker execdriver运行的root路径，默认为/var/run/docker；</li><li>Docker运行时的root路径，默认为/var/lib/docker；</li><li>系统功能信息，包括容器的内存限制功能、交换分区限制功能、数据转发功能以及AppArmor安全功能等。</li></ul><p>AppArmor通过host主机是否存在/sys/kernel/security/apparmor来判断是否加入AppArmor配置，这部分会在后续内容中介绍。</p><p>最后，如果选择了native作为这个execdriver的驱动实现，上述driver的创建过程就会新建一个libcontainer，这个elibcontainer会在后面创建和启动Linux容器时发挥作用。</p><h5 id="daemon对象诞生"><a href="#daemon对象诞生" class="headerlink" title="daemon对象诞生"></a>daemon对象诞生</h5><p>DOcker daemon进程在经过以上诸多设置以及创建对象之后，最终创建出了daemon对象实例，其属性总结如下：</p><ul><li>ID：根据传入的证书生成的容器ID，若并没有换入则自动使用ECDSA加密算法生成。</li><li>repository：部署所有DOcker容器的路径。</li><li>containers：用于存储具体Docker容器信息的对象。</li><li>execCommadns：Docker容器所执行的命令</li><li>referenceStore：存储Docker镜像仓库名和镜像ID的映射。</li><li>distributionMetadataStore：v2版registry相关的元数据存储</li><li>trustKey：可信任证书</li><li>idIndex：用于通过简短有效的字符串前缀定位唯一的镜像。</li><li>sysInfo：Docker所在宿主机的系统信息</li><li>configStore：Docker所需要的配置信息。</li><li>execDriver：Docker容器执行驱动，默认为native类型。</li><li>statsCollector：收集容器网络及cgroup状态信息。</li><li>defaultLogConfig：提供日志的默认配置信息</li><li>registryService：镜像存储服务相关信息。</li><li>EventsService：时间服务相关信息</li><li>volumes：volume所使用的驱动，默认为local类型。</li><li>root：Docker运行的工作根目录。</li><li>uidMaps：uid的对应图</li><li>gidMaps：gid的对应图</li><li>seccompEnable：是否使用seccompute。</li><li>nameIndex：记录键和其名字的对应关系</li><li>linkIndex：容器的link目录，记录容器的link关系。</li></ul><h5 id="恢复已有的Docker容器"><a href="#恢复已有的Docker容器" class="headerlink" title="恢复已有的Docker容器"></a>恢复已有的Docker容器</h5><p>当Docker daemon启动时，回去查看在daemon.repository也就是在/var/lib/docker/containers中的内容。若有已经存在的Docker容器，则将相应信息收集并进行维护，同期重启restart policy为always的容器。</p><p>综上所述，Docker daemon的启动看起来非常复杂，这是Docker在演进的过程中不断添加功能点造成的。但不管今后Docker的功能点增加多少，Docker daemon进程的启动都将遵循以下3步。</p><p>(1) 首先是启动一个API Server，它工作在用户通过-H指定的socker上面；</p><p>(2) 然后Docker使用NewDaemon方法创建一个daemon对象来保存信息和处理了业务逻辑；</p><p>(3) 最后将上述API Server和daemon对象绑定起来，接收并处理client的请求。</p><p>只不过，NewDaemon方法的长度会不断增减而已。</p><blockquote><p>提示 上述过程住哟啊设计daemon/daemon.go#NewDaemon这部分源码，读者若有兴趣可以进一步深入研究。</p></blockquote><h3 id="从-client到daemon"><a href="#从-client到daemon" class="headerlink" title="从 client到daemon"></a>从 client到daemon</h3><p>在前面的小节中已经描述过Docker client和daemon启动并初始化的全过程，接下来的问题是，一个已经在运行的daemon是如何相应并处理来自client的请求的呢？就从docker run这个命令说起吧。</p><h4 id="1-发起请求"><a href="#1-发起请求" class="headerlink" title="1. 发起请求"></a>1. 发起请求</h4><ul><li>(1) docker run命令开始运行，用户端的Docker进入client模式，开始了上文中讲述的client工作过程；</li><li>(2) 经过初始化，新建出了一个client；</li><li>(3) 上述client通过反射机制找到了CmdRun方法。</li></ul><p>CmdRun在解析过用户提供的容器参数一些列操作后，最终发出了这样两个请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;POST&quot;, &quot;/containers/create?&quot;+containerValues//创建容器</span><br><span class="line">&quot;POST&quot;,  &quot;/containers/&quot;+createResponse.ID+&quot;start&quot;//启动容器</span><br></pre></td></tr></table></figure><p>至此，client的主要任务结束。</p><p>前面说过，daemon在启动后维护了一个API Server来相应上述请求，同样遵循“约定大于配置”的原则，daemon端负责响应第一个create请求的方法是；api/server/server.go#postContainersCreate。</p><p>在1.6版本以前，Docker daemon会将一个创建容器的Job交给所谓的Docker Engine来管接下来的任务。不过这个过程已经被完全废弃并且再也不会回来了。所以接下来我们会按照1.10版本的方式讲解daemon创建和启动容器的过程，解析过程读者完全不需要翻阅代码。</p><h4 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2. 创建容器"></a>2. 创建容器</h4><p>估计读者已经猜到，在这一部Docker daemon并不需要真正创建一个Linux容器，它只需要解析用户通过client提交的POST表单，然后使用这些参数在daemon中新建一个container对象出来即可。这个container实体就是container/container_unix.go，其中的CommonContainer字段定义在container/container.go中，为Linux平台和windows平台上容器共有的属性，本书主要以Linux平台为主，这里将Linux平台上容器最重要的定义片段一并列举如下。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-12.png" title="container/container.go"></center><p>这里需要额外注意的是daemon属性，即container是能够知道管理它的daemon进程信息的，很快会看到这个关系的作用。</p><p>上述过程完成后，container的信息会作为Response返回给client，client会紧接着发送start请求。</p><h4 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3. 启动容器"></a>3. 启动容器</h4><p>这时候daemon这边的重点来了。API Server接收到start请求后会告诉Dcoekr daemon进行container启动容器操作，这个过程是daemon/start.go。</p><blockquote><p>注意：1.7版本以后的Docke不仅把所有的client端的请求都是用了一个对应的api/client/{请求名称}.go文件来定义，在daemon端，所有请求的处理过程也放在daemon/{请求名称}.go文件中来定义。读者可以根据自己想了解的内容寻找对应的文件。</p></blockquote><p>此时，由于container所需的各项参数，比如NetworkSettings、ImageID等，都已经在创建容器过程中赋好了值，Docker daemon会在start.go中直接执行daemon.ContainerStart，就能够在宿主机上创建对应的容器了。</p><p>等一下，创建容器的过程不是要创建namespace，配置cgroup，挂载rootfs？谁负责做这些事情呢？答案当然还是Docker daemon。containerMonitor将daemon设置为自己的supervisor。所以经过一些类调用后，daemon.ContainerStart实际上执行操作的是：</p><p><code>containerMonitor.daemon.Run(container ...)</code></p><p>即告诉daemon进程：请使用本container县官信息做参数，执行对应execdriver的Run方法。</p><blockquote><p>提示    具体来说，daemon/container.go#ContainerStart其实是经过了waitForstart以及daemon/monitor.go#start的连续调用最终编程daemon.Run的，读者可以自行跟踪上述几个方法。</p></blockquote><h4 id="4-最后一步"><a href="#4-最后一步" class="headerlink" title="4. 最后一步"></a>4. 最后一步</h4><p>“万事俱备，只欠东风。”在Docker daemon已经完成了所有的准备工作，最后下达了执行Run操作的命令后，Docker该如何指挥操作系统，来为用户启动一个容器出来呢？</p><p>答案很简单，所有需要跟操作系统打交道的任务都交给ExecDriver.run（具体是哪种Driver由container决定）来完成。</p><p>读者应该了解，execdriver的daemon的一个重要组成布恩，它封装了对namespace、cgroup等所有对OS资源进行操作的所有方法。而在Docker中，execdriver的默认实现（native）就是libcontainer了。</p><p>所以在这最后一部，Docker daemon只需要向execdriver提供如下三大参数，接着等待返回结果就可以了。</p><ul><li>commandv：该容器需要的所有配置信息集合（container的属性之一）；</li><li>pipes：用于将容器stdin、stdout、stderr重定向到daemon；</li><li>starttCallback()：回调方法</li></ul><p>在下一节里，将会带领读者进入到libcontainer的世界，深入解析它如何仅凭借上述三项内容完成Docker容器的创建。</p><p><strong>建议：</strong>  希望读者能够学会上述跟踪一个Docker命令运行的过程，以1.10版本为例总结如下。</p><ul><li>docker/docker.go是所有命令的起始。它创建出来的client（DockerCli）对应api/client/cli.go。</li><li>api目录下是所有与“client如何发送请求” “server如何响应请求” 相关的文件。</li><li>api/client/xxx.go中定义Cmdxxx函数，其中调用的cli.client.xxx函数指明了该命令滚发起何种HTTP请求。</li><li>api/server/router中则按照不同的请求类型定义了所有响应具体请求的方法。</li><li>每个请求的处理函数都会对应一个edaemon/xxx.go文件，daemon会使用其中相应的函数来对请求进行处理。</li><li>处理过程中负责执行具体动作的daemon对象是daemon/daemon.go#NewDaemon创建出来的。</li><li>daemon所使用到的Container对象即container/container_unix.go。</li><li>一般daemon对象的具体动作再执行下去就是去掉偶用execdriver了。比如启动容器调用的就是daemon/execdriver/native/driver.go#Run（三大参数），然后交由底层模块处理。</li></ul>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> docker client和daemon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 架构概览</title>
      <link href="/2018/07/21/Docker-arch/"/>
      <url>/2018/07/21/Docker-arch/</url>
      <content type="html"><![CDATA[<h3 id="Docker-架构概览"><a href="#Docker-架构概览" class="headerlink" title="Docker 架构概览"></a>Docker 架构概览</h3><a id="more"></a><p>Docker使用了传统的client-server架构模式，总架构图如下图所示。用户通过Docker client与Docker daemon建立通信，并将请求发送给后者。而Docker的后端是松耦合结构，不同模块各司其职，有机组合完成用户的请求。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-10.png" title="图1-8 Docker架构总览"></center><p>从上图中可以看出，Docker daemmon是Docker架构中的主要用户接口。首先，它提供了API Server用于接收来自Docker client的请求，其后根据不同的请求分发给Docker daemon的不同模块执行相应的工作，其中对容器运行时、volume、镜像以及网络方面的具体实现已经放在daemon意外的模块或项目中。值得注意的是，Docker一直致力于将其自己进一步解耦，削减Docker daemon的功能。</p><p>Docker通过driver模块来实现对Docker容器执行环境的创建和管理。当需要闯进啊DOcker容器时，可通过镜像管理（image management）部分的distribution和registry模块从Docker registry中下载镜像，并通过镜像管理的image、reference和layer存储镜像的元数据，通过镜像存储驱动graphdriver将镜像文件存储于具体的文件系统中；当需要为Docker容器创建网络环境时，通过网络模块network调用libnetwork创建并配置Docker容器的网络环境；当需要为容器创建数据卷volume时，则通过volume模块调用某个具体的volumedrive，来创建一个数据卷并负责后续的挂载操作；当需要限制Docker容器运行资源或执行用户指令操作时，则通过execdrive来完成。libcontainer是对cgroups和namespace的二次封装，execdrive是通过libcontainer来实现对容器的具体管理，包括利用UTS、IPC、PID、Network、Mount、User等namespace实现容器之间的资源隔离和利用cgroups实现对容器的资源限制。当运行容器的命令执行完毕后，一个实际的容器就处于运行状态，该容器具有独立的文件系统、相对安全且相互隔离的运行环境。Docker 1.9版本以后，volume和network的生命周期都是独立于容器的，与容器一样是Docker的一等公民，Docker用户可以单独增删该查volume或者network，然后在创建容器的时候根据需要配置给容器。</p><p>在对各个模块进行深入探讨之前，我们首先对各个模块的功能进行简单介绍。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker 架构概览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cgroups资源限制</title>
      <link href="/2018/07/21/Docker-cgroups/"/>
      <url>/2018/07/21/Docker-cgroups/</url>
      <content type="html"><![CDATA[<p>上一节中，我们了解了Docker背后使用额资源隔离技术namespace，通过系统调用构建一个相对隔离的shell环境，也可以称之为简单的“容器”。这一届将讲解另一个强大的内核工具——cgroups。它不仅可以限制被namespace隔离起来的资源，还可以为资源设置权重、计算使用量、操控任务（进程或线程）启停等。在本节最后介绍完基本概念后，将详细讲解Docker中使用到的cgroups内容。</p><blockquote><p>注意：在Linux系统中，内核本身的调度和管理并不对进程和线程进行区分，只根据clone创建时传入参数的不同，来从概念上区别进程和线程，所以本节同一称之为任务。</p></blockquote><a id="more"></a><h3 id="1-cgroups是什么"><a href="#1-cgroups是什么" class="headerlink" title="1. cgroups是什么"></a>1. cgroups是什么</h3><p>cgroups最初名为process container，由Google工程师Paul Menage和Rohit Seth于2006年提出，后来由于container有多重含义容易引起误解，就在2007年更名为control groups，并整合进Linux内核，顾名思义就是把任务放到一个组里面同一加以控制。官方的定义如下：</p><p>cgroups是Linux内核提供的一种机制，这种机制可以根据需求把一系列系统任务及其子任务整合（或分隔）到按资源划分等级的不同组内，从而为系统资源管理提供一个同一的框架。</p><p>通俗地说，cgroups可以限制、记录任务组所使用的物理资源（包括CPU、Menory、IO等），为容器实现虚拟化提供了基本保证，是构建Docker等一系列虚拟化管理工具的基石。</p><p>对开发者来说，cgroups有如下4个特点。</p><ul><li>cgroups的API以一个伪文件系统的方式实现，用户态的程序可以通过文件操作实现cgroups的组织管理。</li><li>cgroups的组织管理操作单元可以细粒度到线程级别，另外用户可以创建和销毁cgroups，从而实现资源再分配和管理。</li><li>所有资源管理的功能都以子系统的方式实现，接口同一。</li><li>子任务创建之初与其父任务处于同一个cgroups的控制组。</li></ul><p>本质上来说，cgroups是内核附加在程序上的一系列钩子（hook），通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。</p><h3 id="2-cgroups的作用"><a href="#2-cgroups的作用" class="headerlink" title="2. cgroups的作用"></a>2. cgroups的作用</h3><p>实现cgroups的主要目的是为不同用户层面的资源管理，提供一个统一化的接口。从单个任务的资源控制到操作系统层面的虚拟化，cgroups提供了以下四大功能。</p><ul><li>资源限制：cgroups可以对任务使用的资源总额进行限制。如设定应用运行时使用内存的上限，一旦超过这个配额就发出OOM（Out of Memorg）提示。</li><li>优先级分配：通过分配的CPU时间片数量及磁盘IO带宽的大小，实际上就相当于控制了任务运行的优先级。</li><li>资源统计：cgroups可以统计系统的资源使用量，如CPU使用时长、内存使用量扽给，这个功能非常适用于计费。</li><li>任务控制：cgroups可以对任务执行挂起、恢复等操作。</li></ul><p>过去有一段时间，内核开发者甚至把namespace也作为一个cgroups的子系统加入进来，也就是说cgroups曾经甚至还包含了资源隔离的能力。但是资源隔离会给cgroups带来许多问题，如pid namespace加入后，PID在循环出现的时候，cgroup会出现命名冲突、cgroup创建后进入新的namespace导致其他子系统资源脱离了控制等，所以在2011年就被移除了。</p><h3 id="3-cgroups术语表"><a href="#3-cgroups术语表" class="headerlink" title="3. cgroups术语表"></a>3. cgroups术语表</h3><ul><li>task（任务）：在cgroups的术语中，任务表示系统的一个进程或线程。</li><li>cgroup（控制组）：cgroups中的资源控制都以cgroup为单位实现。cgroup表示按某种资源控制标准划分而成的任务组，还包含一个或多个子系统。一个任务可以加入某个cgroup，也可以从某个cgroup迁移到另外一个cgroup。</li><li>subsystem（子系统）：cgroups中的子系统就是一个资源调度控制器。比如CPU子系统可以控制CPU时间分配，内存子系统可以限制cgroup内存使用量。</li><li>hierarchy（层级）：层级由一系列cgroup以一个树状结构排雷而成，每个层级通过绑定对应的子系统进行资源控制。层级中的cgroup节点可以包含零或多个子节点，子节点继承父节点挂载的子系统。整个操作系统可以有多个层级。</li></ul><h3 id="4-组织结构与基本规则"><a href="#4-组织结构与基本规则" class="headerlink" title="4. 组织结构与基本规则"></a>4. 组织结构与基本规则</h3><p>在前面已经介绍过，传统的Unix任务管理，实际上是先启动init任务作为根节点，再有init节点创建自惹怒我作为子节点，而每个子节点又可以创建新的子节点，如此往复，形成一个树状结构。而系统中的多个cgroup也构成类似的树状结构，字节点从父节点继承属性。</p><p>它们最大的不同在于，系统中的多个cgroup构成的层级并非单根结构，可以允许存在多个。如果任务模型是由init作为根节点构成的一棵树，那么系统中的多个cgroup则是由多个层级构成的森林。这样做的目的很好理解，如果只有一个层级，那么所有任务都将被迫绑定其上的所欲子系统，这会给某些任务造成不必要的限制。在Docker中，每个子系统独自构成一个层级，这样做非常易于管理。</p><p>了解了cgroups的组织结构，再来了解cgroups、任务、子系统、层级四者间的关系及其基本规则。</p><ul><li>规则1：同一个层级可以附加一个或多个子系统。如图1-4所示，CPU和Memory的子系统功能附加到了一个层级。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Docker-6.png" title="图1-4 同一层级可以附加一个或多个子系统"></center><ul><li>规则2：一个子系统可以附加到多个层级，并且仅当目标层级只有唯一一个子系统时。图1-5中小圈中的数字表示子系统附加的时间顺序，CPU子系统附加到层级A的同时不能再附加到层级B，因为层级B已经附加了内存子系统。如果层级B没有附加过子系统，那么CPU子系统同时附加到两个层级时允许的。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Docker-7.png" title="图1-5 一个已经附加在某个层级上的子系统不能附加到其他含有别的子系统的层级上"></center><ul><li>规则3：系统每次新建一个层级时，该系统上的所有任务默认加入这个新建层级的初始化cgroup，这个cgroup也被称为root cgroup。对于创建的每个层级，任务只能存在于其中一个cgroup中，即一个任务不能存在于同一个层级的不同cgroup中，但一个任务可以存在于不同层级的多个cgroup中如果操作时把一个任务添加到同一个层级中的另一个cgroup中，则会将它从第一个cgroup中移除。从图1-6可以看到，httpd任务已经加入到层级A中的/cg1，而不能加入同一个层级中的/cg2，但是可以加入层级B中的/cg3。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Docker-8.png" title="图1-6 一个任务不能属于同一个层级的不同cgroup"></center><ul><li>规则4：任务再fork/clone自身时创建的子任务默认与原任务再同一个cgroup中，但是子任务允许被移动到不同的cgroup中。即fork/clone完成后，父子任务间字在cgroup方面是互不影响的。图1-7中小圈中的数字表示任务出现的时间顺序，当httpd刚fork出另一个httpd时，两者在同一个层级中的同一个cgroup中。但是随后如果ID为4840的httpd需要移动到其他cgroup也是可以的，因为父子任务间已经独立。总结起来就是：初始化时子任务与父任务在同一个cgroup，但是这种关系随后可以改变。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Docker-9.png" title="图1-7 刚fork/clone出的子任务在初始状态与其父任务处于同一个cgroup"></center><h3 id="5-子系统简介"><a href="#5-子系统简介" class="headerlink" title="5. 子系统简介"></a>5. 子系统简介</h3><p>子系统实际上就是cgroups的资源控制系统，每种子系统独立地控制一种资源，目前Docker使用如下9种子系统，其中，net_cls子系统在内核中已经广泛实现，但是Docker尚未采用，Docker在网络方面的控制方式在后续内容中有详细介绍，以下时它们的用途。</p><ul><li>blkio：可以为块设备设定输入/输出限制，比如物理驱动设备（包括磁盘、固态硬盘、USB等）。</li><li>cpu：使用调度程序控制任务对CPU的使用。</li><li>cpuacct：自动生成cgroup中任务对CPU资源使用情况的报告。</li><li>cpuset：可以为cgroup中的任务分配独立的CPU（此处针对多处理器系统）和内存</li><li>devices：可以开启或关闭cgroup中任务对设备的访问</li><li>freezer：可以挂起或恢复cgroup中的任务</li><li>memory：可以设定cgroup中任务对内存使用量的限定，并且自动生成这些任务对内存资源使用情况的报告。</li><li>perf_event：使用后使cgroup中的任务可以进行统一的性能测试。</li><li>net_cls：Docker没有直接使用它，它通过使用等级识别符（classid）标记网络数据包，从而允许Linux流量控制程序（Traffic Controller，TC）识别从具体cgroup中生成的数据包。</li></ul><p>Linux中cgroup的实现形式表现为一个文件系统，因此需要mount这个文件系统才能够使用（也有可能已经mount好了），挂载成功后，就能看到各类子系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#Centos 7.3</span><br><span class="line">[test@node1 test]$ mount -t cgroup</span><br><span class="line">cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/</span><br><span class="line">usr/lib/systemd/systemd-cgroups-agent,name=systemd)cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct,cpu)</span><br><span class="line">cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)</span><br><span class="line">cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)</span><br><span class="line">cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)</span><br><span class="line">cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)</span><br><span class="line">cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)</span><br><span class="line">cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)</span><br><span class="line">cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)</span><br><span class="line">cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio,net</span><br><span class="line">_cls)cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)</span><br></pre></td></tr></table></figure><p>以cpu子系统为例，先看一下挂载了这个子系统的控制组下的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[test@node1 test]$ ls /sys/fs/cgroup/cpu</span><br><span class="line">cgroup.clone_children  cpuacct.stat          cpu.cfs_quota_us   cpu.stat           system.slice</span><br><span class="line">cgroup.event_control   cpuacct.usage         cpu.rt_period_us   machine.slice      tasks</span><br><span class="line">cgroup.procs           cpuacct.usage_percpu  cpu.rt_runtime_us  notify_on_release  user.slice</span><br><span class="line">cgroup.sane_behavior   cpu.cfs_period_us     cpu.shares         release_agent</span><br></pre></td></tr></table></figure><p>在/sys/fs/cgroup的cpu子目录下创建控制组，控制组目录创建成功后，它下面就会有很多类似的文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# cd /sys/fs/cgroup/cpu</span><br><span class="line">[root@node1 cpu]# mkdir cg1</span><br><span class="line">[root@node1 cpu]# ls cg1</span><br><span class="line">cgroup.clone_children  cpuacct.usage         cpu.rt_period_us   notify_on_release</span><br><span class="line">cgroup.event_control   cpuacct.usage_percpu  cpu.rt_runtime_us  tasks</span><br><span class="line">cgroup.procs           cpu.cfs_period_us     cpu.shares</span><br><span class="line">cpuacct.stat           cpu.cfs_quota_us      cpu.stat</span><br></pre></td></tr></table></figure><p>下面的例子展示了如何限制PID为18828的进程的cpu使用配额：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 限制18828进程</span><br><span class="line">[root@node1 cpu]# echo 18828 &gt;&gt; /sys/fs/cgroup/cpu/cg1/tasks</span><br><span class="line"># 将cpu限制为最高使用20%</span><br><span class="line">[root@node1 cpu]# echo 20000 &gt;&gt; /sys/fs/cgroup/cpu/cg1/cpu.cfs_quota_us</span><br></pre></td></tr></table></figure><p>在Docker的实现中，Docker daemon会在单独挂载了每一个子系统的控制组目录（比如/sys/fs/cgroup/cpu）下创建一个名为docker的控制组，然后在docker控制组里面，再为每个容器创建一个以容器ID为名称的容器控制组，这个容器里的所有进程的进程号都会写到该控制组tasks中，并且在控制文件（比如cpu.cfs_quota_us）中写入预设的限制参数值。</p><h3 id="6-cgroups实现方式及工作原理简介"><a href="#6-cgroups实现方式及工作原理简介" class="headerlink" title="6. cgroups实现方式及工作原理简介"></a>6. cgroups实现方式及工作原理简介</h3><p>在对cgroups规则和子系统有了一定了解以后，下面简单介绍操作系统内核级别上cgroups的工作原理，希望能有助于读者理解cgroups如何对Docker容器中的进程产生作用。</p><p>cgroups的实现本质上是给任务挂上钩子，当任务运行的过程中涉及某种资源时，就会触发钩子上所附带的子系统进行检测，根据资源类别的不同，使用对应的技术进行资源限制和优先级分配。</p><h4 id="cgroups如何判断资源超出限额之后的措施"><a href="#cgroups如何判断资源超出限额之后的措施" class="headerlink" title="cgroups如何判断资源超出限额之后的措施"></a>cgroups如何判断资源超出限额之后的措施</h4><p>对于不同的系统资源，cgroups提供了同一的接口对资源进行控制和统计，但限制的具体方式则不尽相同。比如memory子系统，会在描述内存状态的“mm_struct”结构体中记录它所属的cgroup，当进程需要申请更多内存时，就会触发cgroup用量检测，用量超过cgroup规定的限额，则拒绝用户的内存申请，否则就给予相应内存并在cgroup的统计信息中记录。实际实现要比以上描述复杂得多，不仅需要考虑内存的分配与回收，还需考虑不同类型的内存如cache（缓存）和swap（交换区内存拓展）等。</p><p>进程所需的内存超过它所属的cgroup最大限额以后，如果设置了OOM Control（内存超限控制），那么进程就会收到OOM新后并结束；否则进程就会被挂起，进入睡眠状态，知道cgroup中其他进程释放了足够的内存资源为止。Docker中默认时开启OOM Control的。其他子系统的实现与此类似，cgroups提供了多种资源的限制策略供用户选择。</p><h4 id="cgroup与任务之间的关联关系"><a href="#cgroup与任务之间的关联关系" class="headerlink" title="cgroup与任务之间的关联关系"></a>cgroup与任务之间的关联关系</h4><p>实现上，cgroup与任务之间时多对多的关系，所以它们并不直接关联，而是通过一个中间结构把双向的关联信息记录起来。每个任务结构体task_struct中都包含了一个指针，可以查询到对应cgroup的情况，同时也可以查询到各个子系统的状态，这些子系统状态中也包含了找到任务的指针，不同类型的子系统按需定义本身的控制信息结构体，最终在自定义的结构体中把子系统状态指针包含进去，然后内核通过container_of（这个宏可以通过一个结构体的成员找到结构体自身）等宏定义来获取对应的结构体，关联到业务，以此达到资源限制的目的。同时，为了让cgroups便于用户理解和使用，也为了用精简的内核代码为cgroup提供熟悉的权限和命名空间管理，内核开发者们按照Linux虚拟文件系统给转换器（Virtual Filssystem Switch，VFS）接口实现了一套名为cgroup的文件系统，非常巧妙地用来表示cgroups的层级概念，把各个子系统的实现都封装到文件系统的各项操作中。有兴趣的读者可以阅读VFS的相关内容，在此就不赘述了。</p><h4 id="Docker在使用cgroup时的注意事项"><a href="#Docker在使用cgroup时的注意事项" class="headerlink" title="Docker在使用cgroup时的注意事项"></a>Docker在使用cgroup时的注意事项</h4><p>在实际的使用过程中，Docker需要通过挂载cgroup文件系统新建一个层级结构，挂载时指定要绑定的子系统。把cgroup文件系统挂在上以后，就可以像操作文件一样对cgroups的层级进行浏览和操作管理（包括权限管理、子文件管理等）。除了cgroup文件系统以外，内核没有为cgroups的访问和操作添加任何系统调用。</p><p>如果新建的层级结构要要绑定的子系统与目前已经存在的层级结构完全相同，那么新的挂载会重用原来一斤给存在的那一套（指向相同的css_set）。否则，如果要绑定的子系统已经被别的层级绑定，就会返回挂载失败的错误。如果以切顺利，挂在完成后层级就被激活并与相应子系统关联起来，可以开始使用了。</p><p>目前无法将一个新的子系统绑定到激活的层级上，或者从一个激活的层级中解除某个子系统的绑定。</p><p>当一个顶层的cgroup文件系统被卸载（umount）时间，如果其中创建过深层次的后台cgroup目录，那么就算上层的cgroup被卸载了，层级也是激活状态，其后代cgroup中的配置依旧有效。只有递归式地卸载层级中的所有cgroup，哪个层级才会被真正删除。</p><p>在创建的层级中创建文件夹，就类似于fork了一个后代cgroup，后代cgroup中默认继承原有cgroup中的配置属性，但似乎可以根据需求对配置参数进行调整。这样就把一个大的cgroup系统分割成一个个嵌套的、可动态变化的“软分区”。</p><h4 id="sys-fs-cgroup-cpu-docker-下文件的作用"><a href="#sys-fs-cgroup-cpu-docker-下文件的作用" class="headerlink" title="/sys/fs/cgroup/cpu/docker/下文件的作用"></a>/sys/fs/cgroup/cpu/docker/<container-id>下文件的作用</container-id></h4><p>前面已经说过，以资源开头（比如cpu.shares）的文件系统都是用来限制这个cgroup下任务的可用配置文件。一个cgroup创建完成，不管绑定了任何子系统，其目录下都会生成一下几个文件，用来描述cgroup的相应信息。同样，把相应的信息写入这些配置文件就可以生效，内容如下。</p><p>一个cgroup创建完成，不管绑定了任何子系统，其目录下都会生成以下几个文件，用来描述cgroup的相应信息。同样，把相应的信息写入这些配置文件就可以生效，内容如下。</p><ul><li>tasks：这个文件中罗列了所有在该cgroup中任务的TID，即所有进程或线程的ID。该文件并不保证任务的TID有序，把一个任务的TID写到这个文件中就意味着把这个任务加入这个cgroup中，如果这个任务所在的任务组与其不在同一个cgroup，那么会在cgroup.procs文件里记录一个该任务组的TGID值，但是该任务组的其他任务并不受影响啊。</li><li>cgroup.procs：这个文件罗列所有在该cgroup中的TGID（进程组的ID），即线程组第一个进程的PID。该文件并不保证TGID有序和无重复。写一个TGID到这个文件就意味着把与其相关的线程都加入到这个cgroup中。</li><li>notify_on_release：填0或1，表示是否在cgroup中最后一个任务退出时通知运行release agent，默认情况下是0，表示不运行。</li><li>release_agent：指定release agent执行脚本的文件路径（该文件在最顶层cgroup目录中存在），这个脚本通常用于自动卸载无用的cgroup。</li></ul><p>本节由浅入深地讲解了cgroups，从cgroups是什么，到cgroups该怎么用，最后对大量的cgroup子系统配置参数进行了梳理。可以看到，内核对cgroups的支持已经较多，但是依旧有许多工作需要完善。如网络方面目前通过TC（Traffic Controller）来控制，未来需要统一整合；优先级调度方面依旧有很大的改进空间。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> cgroups资源限制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>namespace资源隔离</title>
      <link href="/2018/07/21/Docker-namespace/"/>
      <url>/2018/07/21/Docker-namespace/</url>
      <content type="html"><![CDATA[<h3 id="namespace-资源隔离"><a href="#namespace-资源隔离" class="headerlink" title="namespace 资源隔离"></a>namespace 资源隔离</h3><p>Docker大热之后，热衷技术的开发者就会思考，想要实现一个资源隔离的容器，应该从哪些方面下手？也许第一反应就是chroot命令，这条命令给用户最直观的感受就是再使用后根目录/的挂载点切换了，即文件系统被隔离了。接着，为了在分布式的环境下进行通信和定位，容器必须要有独立的IP、端口、路由等，自然就联想到了网络的隔离。同时，容器还需要一个独立的主机名以便在网络中标识自己。有了网络，自然离不开通信，也就想到了进程间通信需要隔离。开发者可能也已想到了权限的问题，对用户和用户组的隔离就实现了用户权限的隔离。最后，运行在容器中的应用需要有进程号（PID），自然也需要与宿主机中的PID进行隔离。</p><a id="more"></a><p>由此，基本上完成了一个容器所需要做的6项隔离，Linux内核中提供了这6中namespace隔离的系统调用，如下表。当然，真正的容器还需要处理许多其他工作。</p><table><thead><tr><th style="text-align:center">namespace</th><th style="text-align:center">系统调用参数</th><th style="text-align:center">隔离内容</th></tr></thead><tbody><tr><td style="text-align:center">UTS</td><td style="text-align:center">CLONE_NEWUTS</td><td style="text-align:center">主机名与域名</td></tr><tr><td style="text-align:center">IPC</td><td style="text-align:center">CLONE_NEWIPC</td><td style="text-align:center">信号量、消息队列和共享内存</td></tr><tr><td style="text-align:center">PID</td><td style="text-align:center">CLONE_NEWPID</td><td style="text-align:center">进程编号</td></tr><tr><td style="text-align:center">Network</td><td style="text-align:center">CLONE_NEWNET</td><td style="text-align:center">网络设备、网络栈、端口等</td></tr><tr><td style="text-align:center">Mount</td><td style="text-align:center">CLONE_NEWNS</td><td style="text-align:center">挂载点（文件系统）</td></tr><tr><td style="text-align:center">User</td><td style="text-align:center">CLONE_NEWUSER</td><td style="text-align:center">用户和用户组</td></tr></tbody></table><p>实际上，Linux内核实现namespace的一个主要目的，就是实现轻量级虚拟化（容器）服务。在同一个namespace下的进程可以感知彼此的变化，而对外界的进程一无所知。这样就可以让容器中的进程产生错觉，仿佛自己置身于一个独立的系统环境中，以达到独立和隔离的目的。</p><p>需要说明的是，本节所讨论的namespace实现针对的均是Linux内核3.8及以后的版本。接下来，将首先介绍使用namespace的API，然后对这6种namespace进行逐一讲解，并通过程序让读者切身感受隔离效果。</p><h4 id="1-进行namespace-API的四种方式"><a href="#1-进行namespace-API的四种方式" class="headerlink" title="1. 进行namespace API的四种方式"></a>1. 进行namespace API的四种方式</h4><p>namespace的API包括clone()、sents()以及unshare()，还有/proc下的部分文件。为了确定隔离的到底是哪6项namespace，在使用这些API时，通常需要指定以下6个参数中的一个或多个，通过|（位或）操作来实现。从表1-1可知，这6个参数分别是CLONE_NEWIPC、CLONE_NEWNS、CLONE_NEWNET、CLONE_NEWPID、CLONE_NEWUSER和CLONE_NEWUTS。</p><h5 id="通过clone-在创建新进程的同时创建namespace"><a href="#通过clone-在创建新进程的同时创建namespace" class="headerlink" title="通过clone()在创建新进程的同时创建namespace"></a>通过clone()在创建新进程的同时创建namespace</h5><p>使用clone()来创建一个独立namespace的进程，是最常见的做法，也是Docker使用namespace最基本的方法，它的调用方式如下。</p><p>int clone(int (<em>child_func)(void </em>), void <em>child_stack, int flags, void </em>arg);</p><p>clone()实际上是Linux系统调用fork()的一种更通用的实现方式，它可以通过flags来控制使用多少功能。一共有20多种CLONE_*的flag（标志位）参数用来控制clone进程的方方面面（如是否与夫进程共享虚拟内存等），下面挑选与namespace相关的4个参数进行说明。</p><ul><li>child_func传入子进程运行的程序的主函数。</li><li>child_stack传入子进程使用的栈空间</li><li>flags表示使用哪些CLONE_*标志位，与namespace相关的主要包括CLONE_NEWIPC、CLONE_NEWNS、CLONE_NEWNET、CLONE_NEWPID、CLONE_NEWUSER和CLONE_NEWUTS。</li><li>args则可用于传入用户参数</li></ul><h5 id="查看-proc-pid-ns文件"><a href="#查看-proc-pid-ns文件" class="headerlink" title="查看/proc/[pid]/ns文件"></a>查看/proc/[pid]/ns文件</h5><p>从3.8版本的内核开始，用户就可以在/proc/[pid]/ns文件下看到指向不同namespace号的文件，效果如下所示，形如[4026531838]者集为namespace号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# ll /proc/$$/ns/&lt;&lt;-- $$是shell中表示当前运行的进程ID号</span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 7月   9 11:21 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 7月   9 11:21 mnt -&gt; mnt:[4026532767]</span><br><span class="line">lrwxrwxrwx 1 root root 0 7月   9 11:21 net -&gt; net:[4026531968]</span><br><span class="line">lrwxrwxrwx 1 root root 0 7月   9 11:21 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 7月   9 11:21 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 7月   9 11:21 uts -&gt; uts:[4026531838]</span><br></pre></td></tr></table></figure><p>如果两个进程指向的namespace编号相同，就说明它们在同一个namespace下，否者便在不同的namespace里面。/proc/[pid]/ns里设置这些Link的另外一个作用是，一旦上述link文件被打开，只要打开的文件描述符（fd）存在，那么就算该namespace下的所有进程都已经结束，这个namespace也会一直存在，后续的进程也可以再加入进来。在Docker中，通过文件描述符定位和加入一个存在的namespace是最基本的方式。</p><p>另外，把/proc/[pid]/ns目录文件使用–bind方式挂载起来可以起到同样的作用，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># touch ~/uts</span><br><span class="line"># mount --bind /proc/145690/ns/uts ~/uts</span><br></pre></td></tr></table></figure><p>为了方便起见，后面的讲解中会使用这个~/uts文件来代替/proc/145690/ns/uts</p><p>注意：如果读者看到ns下的内容与本节所述不符，那可能是因为使用了3.8以前版本的内核。如在内核版本2.6中，该目录下存在的只有ipc、net和uts，并且以硬链接方式存在。</p><h5 id="通过setns-加入一个已经存在的namespace"><a href="#通过setns-加入一个已经存在的namespace" class="headerlink" title="通过setns()加入一个已经存在的namespace"></a>通过setns()加入一个已经存在的namespace</h5><p>上文提到，在进程都结束的情况下，也可以通过挂载的形式把namespace保留下来，保留namespace的目的是为以后有进程加入做准备。在Docker中，使用docker exec命令在已经运行着的容器中执行以一个新命令，就需要用到该方法。通过setns()系统调用，进程从原先的namespace加入某个已经存在的namespace，使用方法如下。通常为了不影响进程的调用者，也为了是新加入的pid namespace生效，会在setns()函数执行后使用clone()创建子进程继续执行命令，让原先的进程结束运行。</p><p>int setns(int fd,int nstype);</p><ul><li>参数fd表示要加入namespace的文件描述符。上文提到，它是一个指向/proc/[pid]/ns目录的文件描述符，可以通过直接打开该目录下的链接或者打开一个挂载了该目录下的链接文件得到。</li><li>参数nstype让调用者可以检查fd指向的namespace类型是否符合实际要求。该参数为0表示不检查。</li></ul><p>为了把新加入的namespace利用起来，需要引入execve()系列函数，该函数可以执行用户命令，最常用的就是调用/bin/bash并接受参数，运行一个shell，用法如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd = open(argv[1], 0_RDONLY);/* 获取namespace文件描述符 */</span><br><span class="line">setns(fd,0);/* 加入新的namespace */</span><br><span class="line">execvp(argv[2],&amp;argv[2]);/* 执行程序 */</span><br></pre></td></tr></table></figure><p>假设编译后的程序名称为setns-test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./setns-test ~/uts /bin/bash # ~/uts 是绑定的/proc/145690/ns/uts</span><br></pre></td></tr></table></figure><p>至此，就可以在新加入的namespace中执行shell命令了，下文会多次使用这种方式来演示隔离的效果。</p><h5 id="通过unshare-在原先进程上进行namespace隔离"><a href="#通过unshare-在原先进程上进行namespace隔离" class="headerlink" title="通过unshare()在原先进程上进行namespace隔离"></a>通过unshare()在原先进程上进行namespace隔离</h5><p>最后要说明的系统调用是unshare()，它与clone()很像，不同的是，unshare()运行在原先的进程上，不需要启动一个新进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int unshare(int flags);</span><br></pre></td></tr></table></figure><p>调用unshare()的主要作用就是，不启动新进程就可以起到隔离的效果，相当于跳出原先的namespace进行操作。这样，就可以在原进程进行一些需要隔离的操作。Linux中自带的unshare命令，就是通过unshare()系统调用实现的。Docker目前并没有使用这个系统调用，这里不做展开，读者可以自行查阅资料学习该命令的知识。</p><h6 id="fore-系统调用"><a href="#fore-系统调用" class="headerlink" title="fore()系统调用"></a>fore()系统调用</h6><p>系统调用函数fork()并不术语namespace的API，这部分属于延伸阅读，如果读者已经对fork()有足够多的了解，可以忽略该部分。</p><p>当程序调用fork()函数时，系统会创建新的进程，为其分配资源，例如存储数据和代码的空间，然后把原来进程的所有值都复制到新进程中，只有少量署至与原来的进程值不同，相当于复制了本身。那么程序的后续代码逻辑要如何区分自己是新进程还是父进程呢？</p><p>fork()的神奇之处在于它仅仅被调用一次，却能够返回两次（父进程与子进程各返回一次），通过返回值的不同就可以区分夫进程与子进程。它可能有以下3中不同的返回值：</p><ul><li>在父进程中，fork()返回创建子进程的进程ID；</li><li>在子进程中，fork()返回0；</li><li>如果出现错误，fork()返回一个负值。</li></ul><p>下面给出一段代码，命名为fork_example.c。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main ()&#123;</span><br><span class="line">pid_t fpid; // fpid表示fork函数返回的值</span><br><span class="line">int count=0;</span><br><span class="line">fpid=fork();</span><br><span class="line">if (fpid &lt; 0)printf(&quot;error in fork!&quot;);</span><br><span class="line">else if (fpid == 0) &#123;</span><br><span class="line">printf(&quot;I am child. Process id is %d\n&quot;,getpid());</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">printf(&quot;i am parent. Process id is %d\n&quot;,getpid());</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并执行，结果如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# gcc -Wall fork_example.c &amp;&amp; ./a.out</span><br><span class="line">i am parent. Process id is 125009</span><br><span class="line">I am child. Process id is 125010</span><br></pre></td></tr></table></figure><p>代码执行过程中，在语句fpid=fork()之前，只有一个进程在执行这段代码，在这条语句之后，就编程夫进程和子进程同时执行了。这两个进程几乎完全相同，将执行的下一条语句都是if(fpid&lt;0)，同时fpid=fork()的返回值会依据所属进程返回不同的值。</p><p>使用fork()后，夫进程有义务监控子进程的运行状态，并在子进程退出后自己才能正常退出，否则子进程就会成为“孤儿”进程。</p><p>下面将根据Docker内部对namespace资源隔离使用的方式分别对6种namespace进行详细的解析。</p><h4 id="2-UTS-namespace"><a href="#2-UTS-namespace" class="headerlink" title="2. UTS namespace"></a>2. UTS namespace</h4><p>UTS（UNIX Time-sharing System）namespace提供了主机名和域名的隔离，这样每个Docker容器就可以拥有独立的主机名和域名了，在网络上可以被视作一个独立的节点，而非宿主上的一个进程。Docker种，每个镜像基本都以自身所提供的服务名称来命令镜像的hostname，且不会对宿主机产生任何印象，其原理就是利用了UTS namespace。</p><p>下面通过代码来感受以下UTS隔离的效果，首先需要一个程序的骨架。打开编辑器创建uts.c文件，输入如下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_SIZE (1024 * 1024)</span><br><span class="line"></span><br><span class="line">static char child_stack[STACK_SIZE];</span><br><span class="line">char* const child_args[] = &#123;</span><br><span class="line">    &quot;/bin/bash&quot;,</span><br><span class="line">    NULL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int child_main(void* args) &#123;</span><br><span class="line">    printf(&quot;在子进程中!\n&quot;);</span><br><span class="line">    execv(child_args[0],child_args);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;程序开始：\n&quot;);</span><br><span class="line">    int child_pid = clone(child_main, child_stack + STACK_SIZE, SIGCHLD, NULL);</span><br><span class="line">    waitpid(child_pid, NULL, 0);</span><br><span class="line">    printf(&quot;已退出\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并运行上述代码，执行如下命令，效果如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# gcc -Wall uts.c -o uts.o</span><br><span class="line">[root@node1 test]# ./uts.o </span><br><span class="line">程序开始：</span><br><span class="line">在子进程中!</span><br><span class="line">[root@node1 test]# exit</span><br><span class="line">exit</span><br><span class="line">已退出</span><br></pre></td></tr></table></figure><p>下面将修改代码，加入UTS隔离。运行代码需要root权限，以防止普通用户随意修改系统主机名导致set-user-ID相关的应用运行出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# vim namespace.c </span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_SIZE (1024 * 1024)</span><br><span class="line"></span><br><span class="line">static char child_stack[STACK_SIZE];</span><br><span class="line">char* const child_args[] = &#123;</span><br><span class="line">    &quot;/bin/bash&quot;,</span><br><span class="line">    NULL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int child_main(void* args) &#123;</span><br><span class="line">    printf(&quot;在子进程中!\n&quot;);</span><br><span class="line">    sethostname(&quot;NewNamespace&quot;, 12);</span><br><span class="line">    execv(child_args[0],child_args);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;程序开始：\n&quot;);</span><br><span class="line">    int child_pid = clone(child_main, child_stack + STACK_SIZE, SIGCHLD, NULL);</span><br><span class="line">    waitpid(child_pid, NULL, 0);</span><br><span class="line">    printf(&quot;已退出\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行，就可以看到hostname已经变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# gcc -Wall namespace.c -o main.o &amp;&amp; ./main.o</span><br><span class="line">程序开始：</span><br><span class="line">在子进程中!</span><br><span class="line">[root@NewNamespace test]# exit</span><br><span class="line">exit</span><br><span class="line">已退出</span><br><span class="line">[root@node1 test]#&lt;- 回到原来的hostname</span><br></pre></td></tr></table></figure><p>值得一提的是，也许有读者会尝试不加CLONE_NEWUTS参数运行上述代码，发现主机名同样改变了，并且输入exit后主机名也恢复了，似乎并没有区别。实际上，不加CLONE_NEWUTS参数进行隔离时，由于使用sethostname函数，所以宿主机的主机名被修改了。而看到exit退出后主机名还原，是因为bash只是在刚登录时读取一次UTS，不会实时获取最新的主机名。当重新登录或者使用uname命令进行查看时，就会发现产生的变化。</p><h4 id="3-IPC-namespace"><a href="#3-IPC-namespace" class="headerlink" title="3. IPC namespace"></a>3. IPC namespace</h4><p>进程间通信（Inter-Process Communitcation，IPC）涉及的IPC资源包括常见的信号量、消息队列和共享内存。申请IPC资源就申请了一个全局唯一的32位ID，所有IPC namespace中实际上包含了系统IPC标识符以及实现POSIX消息队列的文件系统。在同一个IPC namespace下的进程彼此可见，不同的IPC namespace下的进程则互相不可见。</p><p>IPC namespace在实现代码上与UTS namespace相似，只是标识位有所变化，需要加上CLONE_NEWIPC参数。主要改动如下，其他部分不变，程序名称改为ipc.c。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# vim ipc.c </span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_SIZE (1024 * 1024)</span><br><span class="line"></span><br><span class="line">static char child_stack[STACK_SIZE];</span><br><span class="line">char* const child_args[] = &#123;</span><br><span class="line">    &quot;/bin/bash&quot;,</span><br><span class="line">    NULL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int child_main(void* args) &#123;</span><br><span class="line">    printf(&quot;在子进程中!\n&quot;);</span><br><span class="line">    sethostname(&quot;NewNamespace&quot;, 12);</span><br><span class="line">    execv(child_args[0],child_args);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;程序开始：\n&quot;);</span><br><span class="line">    int child_pid = clone(child_main, child_stack + STACK_SIZE, CLONE_NEWIPC | CLONE_NEWUTS | SIGCH</span><br><span class="line">LD, NULL);    waitpid(child_pid, NULL, 0);</span><br><span class="line">    printf(&quot;已退出\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在shell中使用ipcmk -Q命令创建一个message queue。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# ipcmk -Q</span><br><span class="line">消息队列 id：32769</span><br></pre></td></tr></table></figure><p>通过ipcs -q可以查看到已经开启的message queue，序号为32769。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# ipcs -q</span><br><span class="line"></span><br><span class="line">--------- 消息队列 -----------</span><br><span class="line">键        msqid      拥有者  权限     已用字节数 消息         </span><br><span class="line">0x630a5186 32769      root       644        0            0</span><br></pre></td></tr></table></figure><p>然后可以编译运行加入了IPC namespace隔离的ipc.c，在新建的子进程中调用shell中执行的ipcs -q查看你message queue。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# gcc -Wall ipc.c -o ipc.o &amp;&amp; ./ipc.o</span><br><span class="line">程序开始：</span><br><span class="line">在子进程中!</span><br><span class="line">[root@NewNamespace test]# ipcs -q</span><br><span class="line"></span><br><span class="line">--------- 消息队列 -----------</span><br><span class="line">键        msqid      拥有者  权限     已用字节数 消息      </span><br><span class="line"></span><br><span class="line">[root@NewNamespace test]# exit</span><br><span class="line">exit</span><br><span class="line">已退出</span><br></pre></td></tr></table></figure><p>从结果显示中可以发现，子进程找不到原先声明的message queue了，已经实现了IPC的隔离。</p><p>从结果显示中可以发现，子进程找不到原先声明的message queue了，已经实现了IPC的隔离。</p><p>目前使用IPC namespace机制的系统不多，启动比较有名的有PostgreSQL。Docker当前也使用了IPC namespace是实现了容器与宿主机、容器与容器之间的IPC隔离。</p><h4 id="4-PID-namespace"><a href="#4-PID-namespace" class="headerlink" title="4. PID namespace"></a>4. PID namespace</h4><p>PID namespace 隔离非常使用，他对进程PID重新标号，即两个不同namespace下的进程可以有相同的PID。每个PID namespace都有自己的计数程序。内核为所有的PID namespace维护了一个树状结构，最顶层时系统初始时创建的，被称为root namespace。它创建的新PID namespace被称为child namespace（树的子节点），而原先的PID namespace就是新创建的PID namespace就是新创建的PID namespace的parent namespace（树的父节点）。通过这种方式，不同的PID namespaces会形成一个层级体系。所属的父节点可以看到子节点中的进程，并可以通过信号等方式对子节点中的而进程产生影响。反过来，子节点却不能看到父节点PID namespace中的任何内容，由此产生如下结论。</p><ul><li>每个PID namespace中的第一个进程 “PID 1”，都会像传统Linux中的init进车给一样拥有特权，起到特殊作用。</li><li>一个namespace中的进程，不可能通过kill或ptrace影响父节点或者兄弟节点中的进程，因为其他节点的PID在这个namespace中没有任何意义。</li><li>如果你在新的PID namespace中重新挂载/proc文件系统，会发现其下只显示同属于一个PID namespace中的其他进程。</li><li>在root namespace中可以看到所有的进程，并且递归包含所有子节点中的进程。</li></ul><p>到这里，读者可能已经联想到一种在外部监控Docker中运行程序的方法了，就是监控Docker daemon所在的PID namespace下的所有进程及其子进程，再进行筛选即可。</p><p>下面通过运行代码来感受一下PID namespace的隔离效果。修改上文的代码，加入PID namespace的标识位，并把程序命名改为pid.c。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# vim pid.c </span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_SIZE (1024 * 1024)</span><br><span class="line"></span><br><span class="line">static char child_stack[STACK_SIZE];</span><br><span class="line">char* const child_args[] = &#123;</span><br><span class="line">    &quot;/bin/bash&quot;,</span><br><span class="line">    NULL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int child_main(void* args) &#123;</span><br><span class="line">    printf(&quot;在子进程中!\n&quot;);</span><br><span class="line">    sethostname(&quot;NewNamespace&quot;, 12);</span><br><span class="line">    execv(child_args[0],child_args);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;程序开始：\n&quot;);</span><br><span class="line">    int child_pid = clone(child_main, child_stack + STACK_SIZE, CLONE_NEWIPC | CLONE_NEWPID | CLONE</span><br><span class="line">_NEWUTS | SIGCHLD, NULL);    waitpid(child_pid, NULL, 0);</span><br><span class="line">    printf(&quot;已退出\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后可以看到如下结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# gcc -Wall pid.c -o pid.o &amp;&amp; ./pid.o </span><br><span class="line">程序开始：</span><br><span class="line">在子进程中!</span><br><span class="line">[root@NewNamespace test]# echo $$</span><br><span class="line">1</span><br><span class="line">[root@NewNamespace test]# exit</span><br><span class="line">exit</span><br><span class="line">已退出</span><br></pre></td></tr></table></figure><p>打印$$可以看到shell的PID，退出后如果再次执行可以看到效果如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# echo $$</span><br><span class="line">139020</span><br></pre></td></tr></table></figure><p>已经回到了正常状态。有的读者可能在子进程的shell中执行了ps aus/top之类的命令，发现还是可以看到所有父进程的PID，那是因为还没有对文件系统挂载点进行隔离，ps/top之类的命令调用的时真实系统下的/proc文件内容，看到的自然是所有的进程。所有，与其他的namespace不同的时，为了实现一个稳定安全的容器，PID namespace还需要进行一些额外的工作才能确保运行顺利，下面将逐一介绍。</p><h5 id="PID-namespace中的init进程"><a href="#PID-namespace中的init进程" class="headerlink" title="PID namespace中的init进程"></a>PID namespace中的init进程</h5><p>在传统的Unix系统中，PID为1的进程时init，地位非常特殊。它作为所有进程的父进程，维护一张进程表，不断检查进程的状态，一旦有某个子进程因为父进程错误成为了“孤儿进程”，init就会扶着收养这个子进程并最终回收资源，结束进程。所以在要实现的容器中，启动的第一个进车给也需要实现类似init的功能，维护所有后续启动进程的运行状态。</p><p>当系统中存在树状嵌套结构的PID namespace时，若某个子进程成为孤儿进程，收养孩子进程的责任就交给了该子进程所属的PID namespace中的init进程。</p><p>至此，可能读者已经明白了内核设计的良苦用心。PID namespace维护这样一个树状结构，有利于系统的资源监控与回收。因此，如果确实需要一个Docker容器内运行多个进程，最先启动的命令进车给应该时具有资源监控和回收的个管理能力的，如bash。</p><h6 id="信号与init进程"><a href="#信号与init进程" class="headerlink" title="信号与init进程"></a>信号与init进程</h6><p>内核还未PID namespace中的init进程赋予了其他特权——信号屏蔽。如果init中没有编写处理某个信号的代码逻辑，那么与init在同一个PID namespace下的进程（即使有超级权限）发送给它的该信号都会被屏蔽。这个功能的主要作用是方式init进程被误杀。</p><p>那么，父节点PID namespace中的进程发送同样的信号给子节点中的init进程，这会被忽略吗？父节点中的集成发送的信号，如果不似乎SIGKILL（销毁进程）或SIGSTOP（暂停进程）也会被忽略。但如果发送SIGKILL或SIGSTOP，子节点的init会强制执行（无法通过代码捕捉进行特殊处理），也就是说父节点中的进程有权终止子节点中的进程。</p><p>一旦init进程被销毁，同一PID namespace中的其他进程也随之接收到SIGKILL信号而被销毁。理论上，该PID namespace也不复存在了。但是如果/proc/[pid]/ns/pid处于被挂载或者打开状态，namespace就会被保留下来。然而，保留下来的namespace无法通过setns()或者fork()创建进程，所以实际上并没有什么作用。</p><p>当一个容器内存在多个进程时，容器内的init进程可以对信号进行捕获，当SIGTERM或SIGINT等信号到来时，对其子进程做信息保存、资源回收等处理工作。在Docker daemon的源码中也可以看到类似的处理方式，当结束信号来临时，结束容器进程并回收相应资源。</p><h6 id="挂载proc文件系统"><a href="#挂载proc文件系统" class="headerlink" title="挂载proc文件系统"></a>挂载proc文件系统</h6><p>前文提到，如果在新的PID namespace中使用ps命令查看，看到的还是所有的进程，因为与PID直接相关的/proc文件系统（procfs）没有挂载到一个与源/proc不同的位置。如果只想看到与PID namespace本身应该看到的进程，需要重新挂载/proc，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# ./pid.o </span><br><span class="line">程序开始：</span><br><span class="line">在子进程中!</span><br><span class="line">[root@NewNamespace test]# mount -t proc /proc</span><br><span class="line">[root@NewNamespace test]# ps a</span><br><span class="line">   PID TTY      STAT   TIME COMMAND</span><br><span class="line">     1 pts/0    S      0:00 /bin/bash</span><br><span class="line">    18 pts/0    R+     0:00 ps a</span><br><span class="line">[root@NewNamespace test]# exit</span><br><span class="line">exit</span><br><span class="line">已退出</span><br></pre></td></tr></table></figure><p>可以看到实际的PID namespace就只有两个进程在运行。</p><blockquote><p>注意：此时并没有进行mount namespace的隔离，所以该操作实际上已经影响了root namespace的文件系统。当推出新建的PID namespace以后，再执行ps a时，就会发现出错，再次执行mount -t proc proc /proc可以修复错误。后面还会介绍通过mount namespace来隔离文件系统，当我们基于mount namespace实现了proc文件系统隔离后，我们就能在Docker容器中使用ps等命令看到与PID namespace对应的进程列表。</p></blockquote><h6 id="unshare-和setns"><a href="#unshare-和setns" class="headerlink" title="unshare()和setns()"></a>unshare()和setns()</h6><p>本章开头就谈到了unshare()和setns()这两个API，在PID namespace中使用时，也有一些特别之处需要注意。</p><p>unshare()允许用户在原有进程中建立命名空间进行隔离。但创建了PID namespace后，原先unshare()调用者进程并不进入新的PID namespace，接下来创建的子进程才会进入新的namespace，这个子进程也就随之成为新的namespace中的init进程。</p><p>类似地，调用setns()创建新的PID namespace时，调用者进程也不进入新的PID namespace，而是随后创建的子进程进入。</p><p>为什么创建其他namespace时unshare()和setns()回直接进入新的namespace，而唯独PID namespace例外呢？因为调用getpid()函数得到的PID是根据调用者所在的PID namespace而决定返回哪个PID，进入新的PID namespace会导致PID产生变化。而对用户态的程序和库函数来说，它们都认为进程的PID是一个常量，PID的变化会引起这些进程崩溃。</p><p>换句话说，一旦程序进程创建以后，那么它的PID namespace的关系就确定下来了，进程不会变更它们对应的PID namespace。在Docker中，docker exec会使用setns()函数加入已经存在的命名空间，但是最终还是会调用clone()函数，原因就在于此。</p><h4 id="5-mount-namespace"><a href="#5-mount-namespace" class="headerlink" title="5. mount namespace"></a>5. mount namespace</h4><p>mount namespace通过隔离文件系统挂载点对隔离文件系统提供支持，他是历史上第一个Linux namespace，所以标识位比较特殊，就是CLONE_NEWNS。隔离后，不同mount namespace中的文件结构发生变化也互不影响。可以通过/proc/[pid]/mounts查看到所有挂载在当前namespace中的文件系统，还可以通过/proc/[pid]/mountstats看到mount namespace中文件设备的统计信息，包括挂载文件的名字、文件系统类型、挂载位置等。</p><p>进程在创建mount namespace时，会把当前的文件结构复制给新的namespace。新的namespace中的所有moount操作都只影响自身的文件系统，对外界不会产生任何影响。这种做法非常严格地实现了隔离，但对某些情况可能并不适用。比如父节点namespace中的进程挂载了一张CD-ROM，这时子节点namespace复制的目录结构是无法自动挂载上这张CD-ROM的，因为这种操作会影响到父节点的文件系统功能。</p><p>2006年引入的挂载传播（mount propagation）解决了这个问题，挂载传播定义了挂载对象（mount object）之前的关系，这样的关系包括共享关系和从属关系，系统用这些关系决定任何挂载对象中的挂载事件如何传播到其他挂载对象。</p><ul><li>共享关系（share relationship）。如果两个挂载对象具有共享关系，那么一个挂载对象中的挂载事件会传播到另一个挂载对象，反之亦然。</li><li>从属关系（slave relationship）。如果两个挂载对象形成从属关系，那么一个挂载对象中的挂载事件会传播到另一个挂载对象，但是反之不行；在这种关系中，从属对象是事件的接收者。</li></ul><p>一个挂载状态可能为以下一种：</p><ul><li>共享挂载（share）</li><li>从属挂载（slave）</li><li>共享/从属挂载（shared and slave）</li><li>私有挂载（private）</li><li>不可绑定挂载（unbindable）</li></ul><p>传播事件的挂载对象称为共享挂载；接收传播事件的挂载对象称为从属挂载；同时兼有前述两者特征的挂载对象称为共享/从属挂载；既不传播也不接收传播事件的挂载对象称为私有挂载；另一种特殊的挂载对象称为不可绑定的挂载，它们与私有挂载相似，但是不允许绑定挂载，即创建mount namespace时这块文件对象不可被复制。通过图1-1可以更好地了解它们的状态变化。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-1.png" title="图1-1 mount各类挂载状态示意图"></center><p>下面我们以图1-1为例说明常用的挂载传播方式。最上层的mount namespace下的/bin目录与child namespace通过master slave方式进行挂载传播，当mount namespace中的/bin目录发生变化时，发生的挂载事件能够自动传播到child namespace中；/lib目录使用完全的共享挂载传播，各namespace之间发生的变化都会互相影响；/proc目录使用私有挂载传播的方式，各mount namespace之间互相隔离；最后的/root目录一般都是管理员所有，不能让其他mount namespace挂载绑定。</p><p>默认情况下，所有的挂载状态都是私有的。设置为共享挂载的命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount --make-shared &lt;mount-object&gt;</span><br></pre></td></tr></table></figure><p>从共享挂载状态的挂载对象克隆的挂载对象，其状态也是共享，它们相互传播挂载事件。</p><p>设置为从属挂载的命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount --make-slave &lt;shared-mount-object&gt;</span><br></pre></td></tr></table></figure><p>来源于从属挂载对象克隆的挂载对象也是从属的挂载，它也从属于原来的从属挂载的主挂载对象。</p><p>将一个从属挂载对象设置为共享/从属挂载，可以执行如下命令，或者将其移动到一个共享挂载对象下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount --make-shared &lt;slave-mount-object&gt;</span><br></pre></td></tr></table></figure><p>如果想把修改过的挂载对象重新标记为私有的，可以执行如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount --make-private &lt;mount-object&gt;</span><br></pre></td></tr></table></figure><p>通过执行以下命令，可以将挂载对下岗标记为不可绑定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount --make-unbindable &lt;mount-object&gt;</span><br></pre></td></tr></table></figure><p>这些设置都可以递归式地应用到所有子目录中，如果读者感兴趣可以自行搜索相关命令。</p><p>在代码中实现mount namespace隔离与其他namespace类似，加上CLONE_NEWNS标识位即可。让我再次修改代码，并且另存为mount.c进行编译运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 test]# cat mount.c</span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_SIZE (1024 * 1024)</span><br><span class="line"></span><br><span class="line">static char child_stack[STACK_SIZE];</span><br><span class="line">char* const child_args[] = &#123;</span><br><span class="line">    &quot;/bin/bash&quot;,</span><br><span class="line">    NULL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int child_main(void* args) &#123;</span><br><span class="line">    printf(&quot;在子进程中!\n&quot;);</span><br><span class="line">    sethostname(&quot;NewNamespace&quot;, 12);</span><br><span class="line">    execv(child_args[0],child_args);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;程序开始：\n&quot;);</span><br><span class="line">    int child_pid = clone(child_main, child_stack + STACK_SIZE, CLONE_NEWIPC | CLONE_NEWNS | CLONE_</span><br><span class="line">NEWPID | CLONE_NEWUTS | SIGCHLD, NULL);    waitpid(child_pid, NULL, 0);</span><br><span class="line">    printf(&quot;已退出\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CLONE_NEWNS生效之后，子进程进行的挂载与卸载操作都将只作用于这个mount namespace，因此在上文中提到的处于单独PID namespace隔离的进程中再加上mount namespace的隔离之后，即使该进程重新挂载了/proc文件系统，当进程退出后，root mount namespace（主机）的/proc文件系统是不会被破坏的。</p><h4 id="6-network-namespace"><a href="#6-network-namespace" class="headerlink" title="6. network namespace"></a>6. network namespace</h4><p>当我们了解完各类namespace，兴致勃勃地构建出一个容器，并在容器中启动一个Apache进程时，却出现了“80端口已被占用”的错误，原来主机上已经运行了一个Apache进程，这时就需要借助network namespac而技术进行网络隔离。</p><p>network namespace主要提供了关于网络资源的隔离，包括网络设备、IPv4和IPv6协议栈、IP路由表、防火墙、/proc/net目录、/sys/class/net目录、套接字（socker）等。一个物理的网络设备最多存在于一个network namespace中，可以通过创建veth pair（虚拟网络设备对：有两端，类似管道，如果数据从一端传入另一端也能接受到，反之亦然）在不同的network namespace间创建通道，以达到通信目的。</p><p>一般情况下，物理离网络设备都分配在最初的root namespace（表示系统默认的namespace）中。但是如果有多块物理网卡，也可以把其中一块或多块给新创建的network namespace。需要注意的是，当新创建的network namespace被释放时（所有内部的进程都终止并且namespace文件没有被挂载或打开），在这个namespace中的物理网卡会返回到root namespace，而非创建该进程的父进程所在的network namespace。</p><p>当说到network namespace时，指的未必是真正的网络隔离，而是把网络独立出来，给外部用户一种透明的感觉，仿佛在于一个独立网络实体进行通信。为例达到该目的，容器的经典做法就是创建俺一个veth pair，一端放置在新的namespace中，通常命名为eth0，一段放在原先的namespace中连接物理网络设备，再通过多个设备接入网桥或者进行路由转发啊，来实现通信的目的。</p><p>也许读者会好奇，在建立起veth pair之前，新旧namespace如何通信呢？答案是pipe（管道）。以Docker daemon启动容器的过程为例，假设容器内初始化的进程称为init。Docker daemon在宿主机上负责创建这个veth pair，把一端绑定到docker0王桥上，另一端接入新建的network namespace进程中。这个过程期间，Docker daemon和init就通过pipe进行通信。具体来说，就是在Docker daemon完成veth pair的创建之前，init在管道的另一端循环等待，知道管道另一端传来Docker daemon关于veth设备的信息，并关闭管道。init才结束等待的过程，并把它的“eth0”启动起来。整个结构如图1-2所示。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-2.png" title="图1-2 Docker网络示意图"></center><p>与其他namespace类似，对network namespace的使用其实就是在创建的时候添加CLONE_NEWNET标识位。后续会详细讲解，此处不在赘述。</p><h4 id="7-user-namespace"><a href="#7-user-namespace" class="headerlink" title="7. user namespace"></a>7. user namespace</h4><p>user namespace主要隔离了安全相关的标识符（identifier）和属性（attribute），包括用户ID、用户组ID、root目录、key（指密码）以及特殊权限。通俗地讲，一个普通用户的进程通过clone()创建的新进程在新user namespace中可以拥有不同的用户和用户组。这意味着一个进程在容器外属于一个没有特权的普通用户，但是它创建的容器进程却属于拥有所有权限的超级用户，这个技术为容器提供了极大的自由。</p><p>user namespace时目前的6各namespace中最后一个支持的，并且直到Linux内核3.8版本的时候还未完全实现（还有部分文件系统不支持）。user namespace实际上并不算完全成熟，很多发行版担心安全问题，在编译内核的时候还未开启USER_NS。Docker在1.10版本中对user namespace进行了支持。只要用户在启动Docker daemon的时候指定了–user-remap，那么当用户运行容器时，容器内部的root用户并不等于宿主机内的root用户，而是映射到宿主机上的普通用户。在进行接下来的代码实验时，请确保系统的Linux内核版本高于3.8并且内核编译时开启了USER_NS（如果不会悬着，请使用Ubuntu14.04）。</p><p>Linux中，特权用户的user ID就是0，延时的最后将看到user ID非0的进程启动user namespace后user ID可以变为0.使用user namespace的方法根别的namespace相同，即调用cone()或unshare()时加入CLONE_NEWUSER标识位。修改代码并另存为userns.c，为例看到用户权限（Capabilities），还需要安装licap-devel包。</p><p>首先包含以下头文件以调用Capabilities包。</p><p>#include &lt;sys/capability.h&gt;</p><p>首次在子进程函数中加入geteuid()和getegid()得到namespace内部的user ID，通过cap_get_proc()得到当前进程的用户拥有的权限，并通过cap_to_text()输出。</p><p>此次实验没有成功，把原书内容贴出来吧。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-3.png" title="user namespace实验"></center><p>通过验证可以得到以下信息。</p><ul><li>user namespace被创建后，第一个进程被赋予了该namespace中的全部权限，这样该init进程就可以完成所有必要的初始化工作，而不会因权限不足出现错误。</li><li>从namespace内部观察到的UID和GID已经与阿文i不不同了，默认显示为65534，表示尚未与外部namespace用户映射。此时需要对user namespace内部的这个初始user和它外部namespace的某个用户建立映射，这样可以保证当涉及一些对外部namespace的操作时，系统可以检验其权限（比如发送一个信号或操作某个文件）。同样用户组也要建立映射。</li><li>还有一点虽然不能哦才能够输出中发现，但却值得注意。用户在新namespace中有全部权限，但它在创建它的父namespace中不包含任何权限，就算调用和创建它的进程有全部权限也是如此。因此哪怕时root用户调用了clone()在user namespace中创建出的新用户，在外部也没有任何权限。</li><li>最后，user namespace的创建其实是一个层层嵌套的树状结构。最上层的根节点就是root namespace，新创建的每个user namespace都有一个父节点user namespace，以及零个或多个子节点user namespace，这一点与PID namespace非常相似。</li></ul><p>从图1-3中可以看到，namespace实际上就是按层次关联起来，每个namespace都发源于最初的root namespace并与之建立映射。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-4.png" title="图1-3 namespace映射图"></center><p>接下来就要进行用户绑定操作，通过在/proc/[pid]/uid_map和/proc/[pid]/gid_map两个文件中写入对应的绑定信息就可以实现这一点，格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID-inside-ns ID-outside-ns length</span><br></pre></td></tr></table></figure><p>写这两个文件时需要注意以下几点。</p><ul><li>这两个文件只允许由拥有该user namespace中CAP_SETUP权限的进程写入一次，不允许修改。</li><li>写入的进程必须是该user namespace的父namespace或者子namespace。</li><li>第一字段ID-inside-ns表示新建的user namespace中对应的user/group ID，第二个字段ID-outside-ns表示namespace外部映射的user/group ID。最后一个字段表示映射范围，通常填1，表示只映射一个，如果填大于1的值，则按顺序建立一一映射。</li></ul><p>明白了上述原理，再次修改代码，添加设置uid和gid的函数。</p><center><img src="https://houhaiyun.github.io/img/images/Docker-5.png" title="修改代码"></center><p>至此，就已经完成了绑定的工作，可以看到演示全程都是在普通用户下执行的，最终实现了在user namespace中成为root用户，对应到外部则是一个uid为1000的普通用户。</p><p>如果要把user namespace与其他namespace混合使用，那么依旧需要root权限。解决方案是以普通用户身份创建user namespace，然后在新建的namespace中作为root，在clone()进程加入其他类型的namespace隔离。</p><p>讲解完user namespace，再来谈谈Docker。Docker不仅使用了user namespace，还使用了在user namespace中涉及的Capabilities机制。从内核2.2版本开始，Linux把原来和超级用户相关的高级权限划分为不同的安源，称为Capability。这样管理员就可以独立对特定的Capability进行使用或禁止。Docker同时使用user namespace和Capability，这在很大程度上加强了容器的安全性。</p><p>说到安全，namespace的6项隔离看似全面，实际上依旧没有完全隔离Linux的资源，比如SELinux、cgroups以及/sys、/proc/sys、/dev/sd*等目录下的资源。关于安全，将会在后续内容中进一步探讨。</p><p>本节从namespace使用的API开始，街斗Docker逐步对6各namespace进行了讲解。相信把讲解过程中所有的代码整合起来，读者也能实现一个属于自己的“shell”容器了。虽然namespace技术使用非常简单，但要真正把容器做到安全易用却并非易事。PID namespace中，需要实现一个完善的init进程来维护好所有进程；network namespace中，还有复杂的路由表和iptables规则没有配置；user namespace中还有许多权限问题需要考虑。其中的某些方面Docker已经做得不错，而且有些方面才刚刚起步，这些内容会在后续中详细介绍。</p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> namespace资源隔离 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用vmware harbor构建镜像仓库</title>
      <link href="/2018/07/21/Docker-harbor/"/>
      <url>/2018/07/21/Docker-harbor/</url>
      <content type="html"><![CDATA[<h3 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install -y docker docker-compose</span><br><span class="line">[root@centos7 ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br><span class="line">[root@centos7 ~]# docker-compose -v</span><br><span class="line">docker-compose version 1.9.0, build 2585387</span><br></pre></td></tr></table></figure><h3 id="下载hambor离线安装包软件包"><a href="#下载hambor离线安装包软件包" class="headerlink" title="下载hambor离线安装包软件包"></a>下载hambor离线安装包软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/harbor-releases/release-1.4.0/harbor-offline-installer-v1.4.0.tgz     # 注：离线安装包较大，稍等片刻，如果下载失败的话可以通过浏览器下载；</span><br></pre></td></tr></table></figure><p><a href="https://github.com/vmware/harbor/releases" target="_blank" rel="noopener">离线下载地址：https://github.com/vmware/harbor/releases</a></p><h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# hostnamectl set-hostname registry.haiyun.com</span><br><span class="line">[root@centos7 ~]# exec bash </span><br><span class="line">[root@registry ~]# hostname</span><br><span class="line">registry.haiyun.com</span><br></pre></td></tr></table></figure><h3 id="解压harbor压缩包"><a href="#解压harbor压缩包" class="headerlink" title="解压harbor压缩包"></a>解压harbor压缩包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@registry ~]# ls</span><br><span class="line">harbor-offline-installer-v1.4.0.tgz</span><br><span class="line">[root@registry ~]# tar xf harbor-offline-installer-v1.4.0.tgz </span><br><span class="line">[root@registry ~]# ls</span><br><span class="line">harbor  harbor-offline-installer-v1.4.0.tgz</span><br></pre></td></tr></table></figure><h3 id="修改harbor配置文件"><a href="#修改harbor配置文件" class="headerlink" title="修改harbor配置文件"></a>修改harbor配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@registry ~]# cd harbor/</span><br><span class="line">[root@registry harbor]#</span><br><span class="line">[root@registry harbor]# vim harbor.cfg</span><br><span class="line">hostname = registry.haiyun.com</span><br><span class="line">ui_url_protocol = http</span><br></pre></td></tr></table></figure><h3 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@registry harbor]# ./install.sh        # 注：执行安装脚本前要记得启动docker；</span><br><span class="line"></span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 1.12.6</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.9.0</span><br><span class="line"></span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line"></span><br><span class="line">。。。省略部分内容</span><br><span class="line"></span><br><span class="line">[Step 4]: starting Harbor ...</span><br><span class="line">Creating network &quot;harbor_harbor&quot; with the default driver</span><br><span class="line">Creating harbor-log</span><br><span class="line">Creating registry</span><br><span class="line">Creating harbor-adminserver</span><br><span class="line">Creating harbor-db</span><br><span class="line">Creating harbor-ui</span><br><span class="line">Creating harbor-jobservice</span><br><span class="line">Creating nginx</span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://registry.haiyun.com. </span><br><span class="line">For more details, please visit https://github.com/vmware/harbor .</span><br><span class="line"></span><br><span class="line">[root@registry harbor]# docker ps       # 查看已经启动的容器；</span><br><span class="line">CONTAINER ID        IMAGE                                  COMMAND                  CREATED              STATUS                        PORTS                                                 </span><br><span class="line">             NAMESd3c99b77570c        vmware/nginx-photon:v1.4.0             &quot;nginx -g &apos;daemon off&quot;   About a minute ago   Up About a minute             0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443</span><br><span class="line">-&gt;4443/tcp   nginx1a1d2e3fdb93        vmware/harbor-jobservice:v1.4.0        &quot;/harbor/start.sh&quot;       About a minute ago   Up About a minute (healthy)                                                         </span><br><span class="line">             harbor-jobservice095337e1a098        vmware/harbor-ui:v1.4.0                &quot;/harbor/start.sh&quot;       About a minute ago   Up About a minute (healthy)                                                         </span><br><span class="line">             harbor-ui7002f9a6ae34        vmware/harbor-db:v1.4.0                &quot;/usr/local/bin/docke&quot;   About a minute ago   Up About a minute (healthy)   3306/tcp                                              </span><br><span class="line">             harbor-dbde2e5ac2b0f8        vmware/harbor-adminserver:v1.4.0       &quot;/harbor/start.sh&quot;       About a minute ago   Up About a minute (healthy)                                                         </span><br><span class="line">             harbor-adminserver28e15d039cae        vmware/registry-photon:v2.6.2-v1.4.0   &quot;/entrypoint.sh serve&quot;   About a minute ago   Up About a minute (healthy)   5000/tcp                                              </span><br><span class="line">             registryd1e356654e83        vmware/harbor-log:v1.4.0               &quot;/bin/sh -c /usr/loca&quot;   About a minute ago   Up About a minute (healthy)   127.0.0.1:1514-&gt;10514/tcp                             </span><br><span class="line">             harbor-log</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><center><img src="http://ovuhiuqqd.bkt.clouddn.com/vmware-harbor-test1.png"></center><p>默认登陆用户名和密码为：admin/Harbor12345。再次提醒，生产环境中部署一定要修改配置复杂密码。</p><h3 id="重要-修改配置文件使镜像仓库使用http"><a href="#重要-修改配置文件使镜像仓库使用http" class="headerlink" title="重要 修改配置文件使镜像仓库使用http"></a><em>重要</em> 修改配置文件使镜像仓库使用http</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@registry harbor]# vim /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">&quot;insecure-registries&quot;: [&quot;registry.haiyun.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 此处需要注意哦，一定要写域名，否则镜像打标签时就需要写IP了</span><br></pre></td></tr></table></figure><h3 id="创建项目并测试上传镜像"><a href="#创建项目并测试上传镜像" class="headerlink" title="创建项目并测试上传镜像"></a>创建项目并测试上传镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@registry harbor]# docker images</span><br><span class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">vmware/clair-photon           v2.0.1-v1.4.0       a1df3526fe43        2 weeks ago         300.3 MB</span><br><span class="line">vmware/notary-server-photon   v0.5.1-v1.4.0       3edfddb8ece2        2 weeks ago         211.2 MB</span><br><span class="line">vmware/notary-signer-photon   v0.5.1-v1.4.0       cc70a05cdb6a        2 weeks ago         208.7 MB</span><br><span class="line">vmware/registry-photon        v2.6.2-v1.4.0       8920f621ddd1        2 weeks ago         197.8 MB</span><br><span class="line">vmware/nginx-photon           v1.4.0              20c8a01ac6ab        2 weeks ago         134.5 MB</span><br><span class="line">vmware/harbor-log             v1.4.0              9e818c7a27ab        2 weeks ago         199.7 MB</span><br><span class="line">vmware/harbor-jobservice      v1.4.0              29c14d91b043        2 weeks ago         190.6 MB</span><br><span class="line">vmware/harbor-ui              v1.4.0              6cb4318eda6a        2 weeks ago         209.5 MB</span><br><span class="line">vmware/harbor-adminserver     v1.4.0              8145970fa013        2 weeks ago         182.2 MB</span><br><span class="line">vmware/harbor-db              v1.4.0              c38da34727f0        2 weeks ago         521 MB</span><br><span class="line">vmware/mariadb-photon         v1.4.0              8457013cf6e3        2 weeks ago         521 MB</span><br><span class="line">vmware/postgresql-photon      v1.4.0              59aa61520094        2 weeks ago         220.6 MB</span><br><span class="line">docker.io/busybox             latest              5b0d59026729        4 weeks ago         1.146 MB</span><br><span class="line">vmware/harbor-db-migrator     1.4                 7a4d871b612e        5 weeks ago         1.146 GB</span><br><span class="line">vmware/photon                 1.0                 9b411d78ad9e        5 weeks ago         129.7 MB</span><br><span class="line">[root@registry harbor]# docker tag 5b0d59026729 registry.haiyun.com/test/busybox:latest</span><br><span class="line">[root@registry harbor]# docker images</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">vmware/clair-photon                v2.0.1-v1.4.0       a1df3526fe43        2 weeks ago         300.3 MB</span><br><span class="line">vmware/notary-server-photon        v0.5.1-v1.4.0       3edfddb8ece2        2 weeks ago         211.2 MB</span><br><span class="line">vmware/notary-signer-photon        v0.5.1-v1.4.0       cc70a05cdb6a        2 weeks ago         208.7 MB</span><br><span class="line">vmware/registry-photon             v2.6.2-v1.4.0       8920f621ddd1        2 weeks ago         197.8 MB</span><br><span class="line">vmware/nginx-photon                v1.4.0              20c8a01ac6ab        2 weeks ago         134.5 MB</span><br><span class="line">vmware/harbor-log                  v1.4.0              9e818c7a27ab        2 weeks ago         199.7 MB</span><br><span class="line">vmware/harbor-jobservice           v1.4.0              29c14d91b043        2 weeks ago         190.6 MB</span><br><span class="line">vmware/harbor-ui                   v1.4.0              6cb4318eda6a        2 weeks ago         209.5 MB</span><br><span class="line">vmware/harbor-adminserver          v1.4.0              8145970fa013        2 weeks ago         182.2 MB</span><br><span class="line">vmware/harbor-db                   v1.4.0              c38da34727f0        2 weeks ago         521 MB</span><br><span class="line">vmware/mariadb-photon              v1.4.0              8457013cf6e3        2 weeks ago         521 MB</span><br><span class="line">vmware/postgresql-photon           v1.4.0              59aa61520094        2 weeks ago         220.6 MB</span><br><span class="line">docker.io/busybox                  latest              5b0d59026729        4 weeks ago         1.146 MB</span><br><span class="line">registry.haiyun.com/test/busybox   latest              5b0d59026729        4 weeks ago         1.146 MB</span><br><span class="line">vmware/harbor-db-migrator          1.4                 7a4d871b612e        5 weeks ago         1.146 GB</span><br><span class="line">vmware/photon                      1.0                 9b411d78ad9e        5 weeks ago         129.7 MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@registry data]# docker login 192.168.8.12         # 此步必须要做</span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">[root@registry data]# docker push registry.haiyun.com/test/busybox:latest       # 已经推送成功；</span><br><span class="line">The push refers to a repository [registry.haiyun.com/test/busybox]</span><br><span class="line">4febd3792a1f: Layer already exists </span><br><span class="line">latest: digest: sha256:4cee1979ba0bf7db9fc5d28fb7b798ca69ae95a47c5fecf46327720df4ff352d size: 527</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> 使用vmware harbor构建镜像仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker构建私有仓库</title>
      <link href="/2018/07/21/Docker-repertory/"/>
      <url>/2018/07/21/Docker-repertory/</url>
      <content type="html"><![CDATA[<h3 id="安装docker-distribution"><a href="#安装docker-distribution" class="headerlink" title="安装docker-distribution"></a>安装docker-distribution</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 yum.repos.d]# yum info docker-distribution</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.nwsuaf.edu.cn</span><br><span class="line"> * centosplus: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.neusoft.edu.cn</span><br><span class="line">Available Packages</span><br><span class="line">Name        : docker-distribution</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 2.6.2</span><br><span class="line">Release     : 1.git48294d9.el7</span><br><span class="line">Size        : 3.5 M</span><br><span class="line">Repo        : extras/7/x86_64       # 注意，此源是来自于centos默认的extras仓库中的；</span><br><span class="line">Summary     : Docker toolset to pack, ship, store, and deliver content</span><br><span class="line">URL         : https://github.com/docker/distribution</span><br><span class="line">License     : ASL 2.0</span><br><span class="line">Description : Docker toolset to pack, ship, store, and deliver content</span><br><span class="line"></span><br><span class="line">[root@centos7 yum.repos.d]# yum install -y docker-distribution</span><br><span class="line"></span><br><span class="line">[root@centos7 yum.repos.d]# rpm -ql docker-distribution </span><br><span class="line">/etc/docker-distribution/registry/config.yml</span><br><span class="line">/usr/bin/registry</span><br><span class="line">/usr/lib/systemd/system/docker-distribution.service</span><br><span class="line">/usr/share/doc/docker-distribution-2.6.2</span><br><span class="line">/usr/share/doc/docker-distribution-2.6.2/AUTHORS</span><br><span class="line">/usr/share/doc/docker-distribution-2.6.2/CONTRIBUTING.md</span><br><span class="line">/usr/share/doc/docker-distribution-2.6.2/LICENSE</span><br><span class="line">/usr/share/doc/docker-distribution-2.6.2/MAINTAINERS</span><br><span class="line">/usr/share/doc/docker-distribution-2.6.2/README.md</span><br><span class="line">/var/lib/registry</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 yum.repos.d]# vim /etc/docker-distribution/registry/config.yml</span><br><span class="line"></span><br><span class="line">version: 0.1 </span><br><span class="line">log:</span><br><span class="line">  fields:</span><br><span class="line">    service: registry</span><br><span class="line">storage:</span><br><span class="line">    cache:</span><br><span class="line">        layerinfo: inmemory</span><br><span class="line">    filesystem:</span><br><span class="line">        rootdirectory: /var/lib/registry</span><br><span class="line">http:</span><br><span class="line">    addr: :5000</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 yum.repos.d]# systemctl start docker-distribution.service </span><br><span class="line">[root@centos7 yum.repos.d]# ss -tnl     # 默认监听5000端口；</span><br><span class="line">State       Recv-Q Send-Q         Local Address:Port                        Peer Address:Port              </span><br><span class="line">LISTEN      0      128                        *:22                                     *:*                  </span><br><span class="line">LISTEN      0      100                127.0.0.1:25                                     *:*                  </span><br><span class="line">LISTEN      0      128                       :::22                                    :::*                  </span><br><span class="line">LISTEN      0      100                      ::1:25                                    :::*                  </span><br><span class="line">LISTEN      0      128                       :::5000                                  :::*</span><br></pre></td></tr></table></figure><h3 id="修改docker配置文件"><a href="#修改docker配置文件" class="headerlink" title="修改docker配置文件"></a>修改docker配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;bip&quot;: &quot;192.168.6.1/24&quot;,</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;docerhub.haiyun.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="重新打标签"><a href="#重新打标签" class="headerlink" title="重新打标签"></a>重新打标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">test                v1                  3f45104ca992        23 hours ago        204MB</span><br><span class="line">testimg             v10                 319bf0d748f8        23 hours ago        1.13MB</span><br><span class="line">testimg             v9                  c42d3b44209f        24 hours ago        1.13MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              45f6656576c1        24 hours ago        2.11MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker tag testimg:v9 dockerhub.haiyun.com/testimg:v1</span><br><span class="line">[root@centos7 ~]# docker images </span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">test                           v1                  3f45104ca992        23 hours ago        204MB</span><br><span class="line">testimg                        v10                 319bf0d748f8        23 hours ago        1.13MB</span><br><span class="line">testimg                        v9                  c42d3b44209f        24 hours ago        1.13MB</span><br><span class="line">dockerhub.haiyun.com/testimg   v1                  c42d3b44209f        24 hours ago        1.13MB</span><br><span class="line">&lt;none&gt;                         &lt;none&gt;              45f6656576c1        24 hours ago        2.11MB</span><br><span class="line">centos                         latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox                        1.27.2              6ad733544a63        2 months ago        1.13MB</span><br></pre></td></tr></table></figure><h3 id="推镜像测试"><a href="#推镜像测试" class="headerlink" title="推镜像测试"></a>推镜像测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker push dockerhub.haiyun.com/testimg:v1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker构建私有仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dockerfile编写</title>
      <link href="/2018/07/21/Docker-dockerfile/"/>
      <url>/2018/07/21/Docker-dockerfile/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Dockfile是一种被Docker程序解释的脚本，Dockerfile由一条一条的指令组成，每条指令对应Linux下面的一条命令。Docker程序将这些Dockerfile指令翻译真正的Linux命令。Dockerfile有自己书写格式和支持的命令，Docker程序解决这些命令间的依赖关系，类似于Makefile。Docker程序将读取Dockerfile，根据指令生成定制的image。相比image这种黑盒子，Dockerfile这种显而易见的脚本更容易被使用者接受，它明确的表明image是怎么产生的。有了Dockerfile，当我们需要定制自己额外的需求时，只需在Dockerfile上添加或者修改指令，重新生成image即可，省去了敲命令的麻烦。</p><a id="more"></a><h3 id="docker-file指令"><a href="#docker-file指令" class="headerlink" title="docker file指令"></a>docker file指令</h3><ul><li>注意：<ul><li><code>#</code>号开头代表注释</li><li>指令全部大写(这个是约定俗成的)</li><li>第一台非注释指令必须为<code>FROM</code>，类似于shll脚本中的<code>#!/bin/bash</code>机制；</li><li>.dockerignore文件中的内容代表不会被打包进镜像</li></ul></li></ul><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><ul><li>FROM指令是最重要的一个且必须为Dockerfile文件开篇的第一个非注释行，用于为映像文件构建过程指定基准镜像，后续的指令运行于此基准镜像所提供的运行环境。</li><li>实践中，基准镜像可以是任何可用镜像文件，默认情况下，docker build会在docker主机上查找指定的镜像文件，在其不存在时，则会从Docker Hub Registry上拉取所需的镜像文件<ul><li>如果找不到指定的镜像文件，docker build会返回一个错误信息</li></ul></li><li>Syntax<ul><li>FROM <repository>[:<tag>] 或 FROM　<resository>@<digest><ul><li><repository>：指定作为base image的名称；</repository></li><li><tag>：base image的标签，为可选项，省略时默认为latest；</tag></li></ul></digest></resository></tag></repository></li></ul></li></ul><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><ul><li>用于让Dockerfile制作者提供本人的详细信息</li><li>Dockerfile并不限制MAINTANIER指令可出现的位置，但推荐将其放置于FROM指令之后</li><li>Syntax<ul><li>MAINTAINER &lt;authtor’s detail&gt;<ul><li>&lt;authtor’s detail&gt;可是任何文本信息，但约定俗成地使用作者名称及邮件地址</li><li>例如：MAINTAINER “houhaiyun <a href="mailto:&#104;&#x6f;&#x75;&#95;&#x68;&#97;&#105;&#x79;&#x75;&#110;&#x40;&#x77;&#x65;&#x69;&#116;&#x61;&#99;&#x2e;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#104;&#x6f;&#x75;&#95;&#x68;&#97;&#105;&#x79;&#x75;&#110;&#x40;&#x77;&#x65;&#x69;&#116;&#x61;&#99;&#x2e;&#99;&#x6f;&#109;</a>“</li></ul></li></ul></li></ul><h4 id="CPOY"><a href="#CPOY" class="headerlink" title="CPOY"></a>CPOY</h4><ul><li>用于从Docker主机复制文件至创建的新映像文件</li><li>COPY <src> … <dest> 或 COPY [“<src>“,…”<dest>“]<ul><li><src>：要复制的源文件或目录，支持使用通配符</src></li><li><dest>：目标路径，即正在创建的image的文件系统路径；建议为<dest>使用绝对路径，否则，COPY指定则以WORKDIR为起始路径</dest></dest></li><li>注意：在路径中有空白字符时，通常使用第二种格式</li></ul></dest></src></dest></src></li><li>文件复制准则<ul><li><src>必须是build上下文中的路径，不能是其父目录中的文件</src></li><li>如果<src>是目录，则其内部文件或子目录会被递归复制，但<src>目录自身不会被复制</src></src></li><li>如果指定了多个<src>，或在<src>中使用了通配符，则<dest>必须是一个目录，且必须以/结尾</dest></src></src></li><li>如果<dest>实现不存在，它将会被自动创建，这包括其父目录路径。</dest></li></ul></li></ul><h5 id="COPY文件"><a href="#COPY文件" class="headerlink" title="COPY文件"></a>COPY文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir dockerfile</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cd dockerfile/</span><br><span class="line">[root@centos7 dockerfile]# echo &quot;test page&quot; &gt; index.html    # 创建测试复制文件；</span><br><span class="line">[root@centos7 dockerfile]# vim Dockerfile       # 注意：文件名必须写为Dockerfile；</span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">COPY index.html /data/</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v1 ./    # -t指定仓库名:标签；</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/3 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/3 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Running in ce681c84aef6</span><br><span class="line">Removing intermediate container ce681c84aef6</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/3 : COPY index.html /data/</span><br><span class="line"> ---&gt; 9fb27d5848c5</span><br><span class="line">Successfully built 9fb27d5848c5</span><br><span class="line">Successfully tagged testimg:v1</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v1                  9fb27d5848c5        33 seconds ago      1.13MB</span><br><span class="line">testbox             v0.1                da2444a15176        47 hours ago        1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        2 days ago          1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 days ago          1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -it --name t1 --rm testimg:v1     # 运行容器基于新创建的镜像；</span><br><span class="line">/ # ls /data/</span><br><span class="line">index.html</span><br><span class="line">/ # cat /data/index.html </span><br><span class="line">test page</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h5 id="COPY目录"><a href="#COPY目录" class="headerlink" title="COPY目录"></a>COPY目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# vim Dockerfile </span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">COPY index.html /data/</span><br><span class="line">COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# cp -r /etc/yum.repos.d/ ./</span><br><span class="line">[root@centos7 dockerfile]# ls</span><br><span class="line">Dockerfile  index.html  yum.repos.d</span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v2 ./</span><br><span class="line">Sending build context to Docker daemon  22.02kB</span><br><span class="line">Step 1/4 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/4 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/4 : COPY index.html /data/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9fb27d5848c5</span><br><span class="line">Step 4/4 : COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line"> ---&gt; d6885cecd73b</span><br><span class="line">Successfully built d6885cecd73b</span><br><span class="line">Successfully tagged testimg:v2</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v2                  d6885cecd73b        27 seconds ago      1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        9 minutes ago       1.13MB</span><br><span class="line">testbox             v0.1                da2444a15176        47 hours ago        1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        2 days ago          1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 days ago          1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run --name t1 --rm -it testimg:v2     # 基于新创建的镜像运行容器，ok；</span><br><span class="line">/ # ls /etc/yum.repos.d/</span><br><span class="line">CentOS-Base.repo       CentOS-Debuginfo.repo  CentOS-Sources.repo    CentOS-fasttrack.repo  docker-ce.repo</span><br><span class="line">CentOS-CR.repo         CentOS-Media.repo      CentOS-Vault.repo      backup</span><br></pre></td></tr></table></figure><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><ul><li>ADD指令类似于COPY指令，ADD支持使用TAR文件和URL路径</li><li>Syntax<ul><li>ADD <src>..<dest> 或 ADD [“<src>“,…”<dest>“]</dest></src></dest></src></li></ul></li><li>操作准则<ul><li>通COPY指令</li><li>如果<src>为URL且<dest>不以/结尾，则<src>指定的文件将被下载并直接被创建为<dest>；如果<dest>以/结尾，则文件名URL指定的文件将被直接下载并保存为<dest>/<filename></filename></dest></dest></dest></src></dest></src></li><li>如果<src>是一个本地系统上的压缩格式的tar文件，它将被展开为一个目录，其行为类似于“tar -x”命令；然而，通过URL获取到的tar文件将不会自动展开；</src></li><li>如果<src>有多个，或其间接或直接使用了通配符，则<dest>必须是一个以/结尾的目录路径；如果<dest>不以/结尾，则其被视作一个普通文件，<src>的内容将被直接写入到<dest>;</dest></src></dest></dest></src></li></ul></li></ul><h5 id="ADD示例"><a href="#ADD示例" class="headerlink" title="ADD示例"></a>ADD示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# vim Dockerfile</span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">#COPY index.html /data/</span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">ADD http://nginx.org/download/nginx-1.12.2.tar.gz /tmp</span><br><span class="line">ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# tar -zcf all.tar.gz ./*      # 准备tar文件；</span><br><span class="line">[root@centos7 dockerfile]# ls</span><br><span class="line">all.tar.gz  Dockerfile  index.html  yum.repos.d</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build  -t testimg:v3 ./       # 构建镜像；</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/4 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/4 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/4 : ADD http://nginx.org/download/nginx-1.12.2.tar.gz /tmp</span><br><span class="line">Downloading [==================================================&gt;]  981.7kB/981.7kB</span><br><span class="line"> ---&gt; e35ddcb1f8dc</span><br><span class="line">Step 4/4 : ADD all.tar.gz /usr/src/</span><br><span class="line"> ---&gt; 621f6100c2c6</span><br><span class="line">Successfully built 621f6100c2c6</span><br><span class="line">Successfully tagged testimg:v3</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v3                  621f6100c2c6        32 seconds ago      2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        22 minutes ago      1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        31 minutes ago      1.13MB</span><br><span class="line">testbox             v0.1                da2444a15176        2 days ago          1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        2 days ago          1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 days ago          1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -it --rm --name t1 testimg:v3     # ok，成功；</span><br><span class="line">/ # ls /usr/src</span><br><span class="line">Dockerfile   index.html   yum.repos.d</span><br><span class="line">/ # ls /tmp/</span><br><span class="line">nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><ul><li>用于为Dockerfile中所有的RUN、CMD、ENTRYPOINT、COPY和ADD指定设定工作目录</li><li>Syntax<ul><li>WORKDIR <dirpath><ul><li>在Dockerfile文件中，WORKDIR指令可出现多次，其路径可以为相对路径，不过，其是相对此前一个WORKDIR指令指定的路径</li><li>另外，WORKDIR也可以调用由ENV指定定义的变量</li></ul></dirpath></li><li>例如<ul><li>WORKDIR /var/log</li><li>WORKDIR $STATEPATH</li></ul></li></ul></li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# cat Dockerfile </span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line">WORKDIR /tmp</span><br><span class="line">#COPY index.html /data/</span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">#ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v4 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/4 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/4 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/4 : WORKDIR /tmp</span><br><span class="line">Removing intermediate container e7d4b6320bc7</span><br><span class="line"> ---&gt; 75588fa14579</span><br><span class="line">Step 4/4 : ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">Downloading [==================================================&gt;]  981.7kB/981.7kB</span><br><span class="line"> ---&gt; 9b2844373a64</span><br><span class="line">Successfully built 9b2844373a64</span><br><span class="line">Successfully tagged testimg:v4</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v4                  9b2844373a64        17 seconds ago      2.11MB</span><br><span class="line">testimg             v3                  621f6100c2c6        23 minutes ago      2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        44 minutes ago      1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        About an hour ago   1.13MB</span><br><span class="line">testbox             v0.1                da2444a15176        2 days ago          1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        2 days ago          1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 days ago          1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -it --rm --name t1 testimg:v4     # ok，成功；</span><br><span class="line">/tmp # ls /tmp/</span><br><span class="line">nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><ul><li>用于在image中创建一个挂载点目录，以挂载Docker host上的卷或其它容器上的卷</li><li>Syntax<ul><li>VOLUME <mountpoint> 或 VOLUME [“<mountpoint>“]</mountpoint></mountpoint></li></ul></li><li>如果挂载点目录路径下此前在文件存在，docker run命令会在卷挂载完成后将此前的所有文件复制到新挂载的卷中</li></ul><h5 id="卷示例"><a href="#卷示例" class="headerlink" title="卷示例"></a>卷示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# vim Dockerfile </span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">WORKDIR /tmp</span><br><span class="line"></span><br><span class="line">VOLUME &quot;/data/&quot;</span><br><span class="line"></span><br><span class="line">COPY index.html ./</span><br><span class="line"></span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">#ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">#ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v5 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/5 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/5 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/5 : WORKDIR /tmp</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 75588fa14579</span><br><span class="line">Step 4/5 : VOLUME &quot;/data/&quot;</span><br><span class="line"> ---&gt; Running in cb63a5cec868</span><br><span class="line">Removing intermediate container cb63a5cec868</span><br><span class="line"> ---&gt; a783b4bf5dfb</span><br><span class="line">Step 5/5 : COPY index.html ./</span><br><span class="line"> ---&gt; c0ae8d6e5c23</span><br><span class="line">Successfully built c0ae8d6e5c23</span><br><span class="line">Successfully tagged testimg:v5</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v5                  c0ae8d6e5c23        13 seconds ago      1.13MB</span><br><span class="line">testimg             v4                  9b2844373a64        10 minutes ago      2.11MB</span><br><span class="line">testimg             v3                  621f6100c2c6        34 minutes ago      2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        About an hour ago   1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        About an hour ago   1.13MB</span><br><span class="line">testbox             v0.1                da2444a15176        2 days ago          1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        2 days ago          1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 days ago          1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -it --name t1 --rm testimg:v5 </span><br><span class="line">/tmp # ls</span><br><span class="line">index.html</span><br><span class="line">/tmp # </span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker inspect t1 | grep  -A 10 &quot;Mounts&quot;     # 切换到另一个终端查看挂载信息，ok；</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;93b2df80ffc65ec9377955707b2a48ffac7991612513bfe4241cdc5c1d0b45e3&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/93b2df80ffc65ec9377955707b2a48ffac7991612513bfe4241cdc5c1d0b45e3/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><ul><li>用于为容器打开指定要监听的端口以实现与外部通信</li><li>Syntax<ul><li>EXPOSE <port>[/<protocol>][<port>[/<protocol>]…]<ul><li><protocol>用于指定传输层协议，可谓tcp或udp二者之一，默认为TCP协议</protocol></li></ul></protocol></port></protocol></port></li><li>EXPOSE指令可一次指定多个端口，例如<ul><li>EXPOSE 11211/UDP 11211/TCP</li></ul></li></ul></li></ul><h5 id="EXPOSE示例"><a href="#EXPOSE示例" class="headerlink" title="EXPOSE示例"></a>EXPOSE示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# vim Dockerfile </span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">WORKDIR /tmp</span><br><span class="line"></span><br><span class="line">VOLUME &quot;/data/&quot;</span><br><span class="line"></span><br><span class="line">COPY index.html ./</span><br><span class="line"></span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">#ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">#ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v6 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/6 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/6 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/6 : WORKDIR /tmp</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 75588fa14579</span><br><span class="line">Step 4/6 : VOLUME &quot;/data/&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a783b4bf5dfb</span><br><span class="line">Step 5/6 : COPY index.html ./</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c0ae8d6e5c23</span><br><span class="line">Step 6/6 : EXPOSE 80/tcp</span><br><span class="line"> ---&gt; Running in 13240498ddac</span><br><span class="line">Removing intermediate container 13240498ddac</span><br><span class="line"> ---&gt; 8a6e858cd4c3</span><br><span class="line">Successfully built 8a6e858cd4c3</span><br><span class="line">Successfully tagged testimg:v6</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v6                  8a6e858cd4c3        51 seconds ago      1.13MB</span><br><span class="line">testimg             v5                  c0ae8d6e5c23        13 minutes ago      1.13MB</span><br><span class="line">testimg             v4                  9b2844373a64        24 minutes ago      2.11MB</span><br><span class="line">testimg             v3                  621f6100c2c6        About an hour ago   2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        About an hour ago   1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        About an hour ago   1.13MB</span><br><span class="line">testbox             v0.1                da2444a15176        2 days ago          1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        2 days ago          1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 days ago          1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -it --name t1 --rm testimg:v6</span><br><span class="line">/tmp # </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker port t1        # 切换终端查看并没有开启端口；</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -it --name t1 --rm -P  testimg:v6     # 此时我们只需要，加一个-P选项就ok；</span><br><span class="line">/tmp # </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker port t1        # 切换终端查看端口已经开启；</span><br><span class="line">80/tcp -&gt; 0.0.0.0:32768</span><br></pre></td></tr></table></figure><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><ul><li>用于为镜像定义所需的环境变量，并可悲Dockerfile文件中位于其后的其它指令（如ENV、ADD、COPY等）所调用</li><li>调用的格式为$variable_name或${variable_name}</li><li>Syntax<ul><li>ENV<key><value> 或 </value></key></li><li>ENV <key>=<value>…</value></key></li></ul></li><li>第一种格式中，<key>之后的所有内容均会被视作其<value>的组成部分，因此，一次只能设置一个变量；</value></key></li><li>第二种格式可用一次设置多个变量，每个变量为一个””<key>=<value>“的键值对，如果<value>中包含空格，可以以反斜线()进行转义，也可通过对<value>加引号进行标识；另外，反斜线也可用于续行；</value></value></value></key></li><li>定义多个变量时，建议使用第二种方式，以便在同一层中完成所有功能 </li></ul><h5 id="ENV示例"><a href="#ENV示例" class="headerlink" title="ENV示例"></a>ENV示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# vim Dockerfile</span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">ENV nginx_version 1.12.2</span><br><span class="line">ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line">#WORKDIR /tmp</span><br><span class="line"></span><br><span class="line">#VOLUME &quot;/data/&quot;</span><br><span class="line"></span><br><span class="line">#COPY index.html ./</span><br><span class="line"></span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">#ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">#ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">#EXPOSE 80/tcp</span><br><span class="line">ADD $&#123;nginx_url&#125; /usr/local/src/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build  -t testimg:v7 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/5 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/5 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/5 : ENV nginx_version 1.12.2</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a6ad2115a130</span><br><span class="line">Step 4/5 : ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b9f11f2cc28e</span><br><span class="line">Step 5/5 : ADD $&#123;nginx_url&#125; /usr/local/src/</span><br><span class="line">Downloading  981.7kB/981.7kB</span><br><span class="line"> ---&gt; 14cde41cd62e</span><br><span class="line">Successfully built 14cde41cd62e</span><br><span class="line">Successfully tagged testimg:v7</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">testimg             v7                  14cde41cd62e        About a minute ago   2.11MB</span><br><span class="line">testimg             v6                  8a6e858cd4c3        23 hours ago         1.13MB</span><br><span class="line">testimg             v5                  c0ae8d6e5c23        23 hours ago         1.13MB</span><br><span class="line">testimg             v4                  9b2844373a64        23 hours ago         2.11MB</span><br><span class="line">testimg             v3                  621f6100c2c6        24 hours ago         2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        24 hours ago         1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        24 hours ago         1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago          204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago         1.13MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run --name t1 -it --rm testimg:v7 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">/ # ls /usr/local/src</span><br><span class="line">nginx-1.12.2.tar.gz</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><ul><li>用于指定docker build过程中运行的程序，其可以是任何命令</li><li>Syntax<ul><li>RUN<command> 或</li><li>RUN [“<executable>“,”<paraml>“,”<param2>“]</param2></paraml></executable></li></ul></li><li>第一种格式中，<command>通常是一个shell命令，且以“/bin/sh -c”来运行它，这意味着此进程在容器中的PID不为1，不能接收Unix信号，因此，当使用docker stop <container>命令停止容器时，此进程收不到SIGTERM信号；</container></li><li>第二种语法格式中的参数是一个JSON格式的数组，其中<executable>为要运行的命令，后面的<paramn>为传递给命令的选项或参数；然而，此种格式指定的命令不会以”/bin/sh -c”来发起，因此常见的shell操作如变量替换以及通配符(?，*等)替换将不会进行；不过，如果要运行的命令依赖于此shell特性的话，可以将其替换为类似下面的格式。<ul><li>RUN[“/bin/bash”,”-c”,”<executable>“,”<paraml>“]</paraml></executable></li></ul></paramn></executable></li></ul><h5 id="RUN示例"><a href="#RUN示例" class="headerlink" title="RUN示例"></a>RUN示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# cat Dockerfile </span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">ENV nginx_version 1.12.2</span><br><span class="line">ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line">WORKDIR /usr/local/src</span><br><span class="line"></span><br><span class="line">#VOLUME &quot;/data/&quot;</span><br><span class="line"></span><br><span class="line">#COPY index.html ./</span><br><span class="line"></span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">#ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">#ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">#EXPOSE 80/tcp</span><br><span class="line">ADD $&#123;nginx_url&#125; /usr/local/src/</span><br><span class="line"></span><br><span class="line">RUN tar xf nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v8 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/7 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/7 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/7 : ENV nginx_version 1.12.2</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a6ad2115a130</span><br><span class="line">Step 4/7 : ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b9f11f2cc28e</span><br><span class="line">Step 5/7 : WORKDIR /usr/local/src</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2934f3768935</span><br><span class="line">Step 6/7 : ADD $&#123;nginx_url&#125; /usr/local/src/</span><br><span class="line">Downloading  981.7kB/981.7kB</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 45f6656576c1</span><br><span class="line">Step 7/7 : RUN tar xf nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"> ---&gt; [Warning] IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line"> ---&gt; Running in a5236e8fe50b</span><br><span class="line">Removing intermediate container a5236e8fe50b</span><br><span class="line"> ---&gt; 7877f95160db</span><br><span class="line">Successfully built 7877f95160db</span><br><span class="line">Successfully tagged testimg:v8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v8                  7877f95160db        28 seconds ago      7.91MB</span><br><span class="line">testimg             v7                  14cde41cd62e        34 minutes ago      2.11MB</span><br><span class="line">testimg             v6                  8a6e858cd4c3        24 hours ago        1.13MB</span><br><span class="line">testimg             v5                  c0ae8d6e5c23        24 hours ago        1.13MB</span><br><span class="line">testimg             v4                  9b2844373a64        24 hours ago        2.11MB</span><br><span class="line">testimg             v3                  621f6100c2c6        24 hours ago        2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        25 hours ago        1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        25 hours ago        1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 dockerfile]# docker run -it --name t1 --rm testimg:v8 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">/usr/local/src # ls</span><br><span class="line">nginx-1.12.2         nginx-1.12.2.tar.gz</span><br><span class="line">/usr/local/src #</span><br></pre></td></tr></table></figure><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><ul><li>类似于RUN指令，CMD指令也可用于运行任何命令或应用程序，不过，二者的运行时间点不同<ul><li>RUN指令运行于影响文件构建过程中，而CMD指令运行与基于Dockerfile构建出的新影响文件启动一个容器时</li><li>CMD指令的首要目的在于为启动的容器指定默认要运行的程序，且其运行结束后，容器也将终止；不过CMD指定的指令其可以被docker run的命令行选项所覆盖</li><li><strong>在dockerfile中可以存在多个CMD指令，但仅最后一个会生效</strong></li></ul></li><li>Syntax<ul><li>CMD<command> 或</li><li>CMD[ “<executable>“,”<paraml>“,”<param2>“] 或</param2></paraml></executable></li><li>CMD[“<param1>“,”<param2>“]</param2></param1></li></ul></li><li>前两种语法格式的意义同RUN</li><li>第三种则用于ENTRYPOINT指令提供默认参数</li></ul><h5 id="CMD示例"><a href="#CMD示例" class="headerlink" title="CMD示例"></a>CMD示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v9 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/6 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/6 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/6 : ENV nginx_version 1.12.2</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a6ad2115a130</span><br><span class="line">Step 4/6 : ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b9f11f2cc28e</span><br><span class="line">Step 5/6 : WORKDIR /usr/local/src</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2934f3768935</span><br><span class="line">Step 6/6 : CMD [&quot;httpd&quot;,&quot;-f&quot;]</span><br><span class="line"> ---&gt; [Warning] IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line"> ---&gt; Running in 8d2cf2b7edc8</span><br><span class="line">Removing intermediate container 8d2cf2b7edc8</span><br><span class="line"> ---&gt; c42d3b44209f</span><br><span class="line">Successfully built c42d3b44209f</span><br><span class="line">Successfully tagged testimg:v9</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">testimg             v9                  c42d3b44209f        About a minute ago   1.13MB</span><br><span class="line">testimg             v8                  7877f95160db        26 minutes ago       7.91MB</span><br><span class="line">testimg             v7                  14cde41cd62e        About an hour ago    2.11MB</span><br><span class="line">testimg             v6                  8a6e858cd4c3        24 hours ago         1.13MB</span><br><span class="line">testimg             v5                  c0ae8d6e5c23        24 hours ago         1.13MB</span><br><span class="line">testimg             v4                  9b2844373a64        24 hours ago         2.11MB</span><br><span class="line">testimg             v3                  621f6100c2c6        25 hours ago         2.12MB</span><br><span class="line">testimg             v2                  d6885cecd73b        25 hours ago         1.14MB</span><br><span class="line">testimg             v1                  9fb27d5848c5        25 hours ago         1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago          204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago         1.13MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run --name t1 -d testimg:v9 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">6804ff290d44177acfbc4274a96e6e8fae97ae443c54c7bb56150e05bfea91fe</span><br><span class="line">[root@centos7 dockerfile]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6804ff290d44        testimg:v9          &quot;httpd -f&quot;          4 seconds ago       Up 3 seconds                            t1</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker exec -it t1 ifconfig      # 查看容器IP；</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:06:02  </span><br><span class="line">          inet addr:192.168.6.2  Bcast:192.168.6.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# curl 192.168.6.2     # 测试访问，ok；</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H1&gt;404 Not Found&lt;/H1&gt;</span><br><span class="line">The requested URL was not found</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><ul><li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使得容器像是一个单独的可执行程序</li><li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定的程序</li><li>不过，docker run命令的–entrypoint选项的参数可覆盖ENTRYPOINT指令指定的程序</li><li>Syntax<ul><li>ENTRYPOINT<command></li><li>ENTRYPOINT[“<executable>“,”<param1>“,”<param2>“]</param2></param1></executable></li></ul></li><li>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最为其参数使用</li><li>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</li></ul><h5 id="ENTRYPOINT示例"><a href="#ENTRYPOINT示例" class="headerlink" title="ENTRYPOINT示例"></a>ENTRYPOINT示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 dockerfile]# vim Dockerfile </span><br><span class="line">FROM busybox:1.27.2</span><br><span class="line"></span><br><span class="line">MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">ENV nginx_version 1.12.2</span><br><span class="line">ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line">WORKDIR /usr/local/src</span><br><span class="line"></span><br><span class="line">#VOLUME &quot;/data/&quot;</span><br><span class="line"></span><br><span class="line">#COPY index.html ./</span><br><span class="line"></span><br><span class="line">#COPY yum.repos.d/ /etc/yum.repos.d/</span><br><span class="line">#ADD http://nginx.org/download/nginx-1.12.2.tar.gz ./</span><br><span class="line">#ADD all.tar.gz /usr/src/</span><br><span class="line"></span><br><span class="line">#EXPOSE 80/tcp</span><br><span class="line">#ADD $&#123;nginx_url&#125; /usr/local/src/</span><br><span class="line"></span><br><span class="line">#RUN tar xf nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;httpd&quot;,&quot;-f&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker build -t testimg:v10 ./</span><br><span class="line">Sending build context to Docker daemon   25.6kB</span><br><span class="line">Step 1/6 : FROM busybox:1.27.2</span><br><span class="line"> ---&gt; 6ad733544a63</span><br><span class="line">Step 2/6 : MAINTAINER &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c81654ecab43</span><br><span class="line">Step 3/6 : ENV nginx_version 1.12.2</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a6ad2115a130</span><br><span class="line">Step 4/6 : ENV nginx_url http://nginx.org/download/nginx-$&#123;nginx_version&#125;.tar.gz</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b9f11f2cc28e</span><br><span class="line">Step 5/6 : WORKDIR /usr/local/src</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2934f3768935</span><br><span class="line">Step 6/6 : ENTRYPOINT [&quot;httpd&quot;,&quot;-f&quot;]</span><br><span class="line"> ---&gt; [Warning] IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line"> ---&gt; Running in 285ac7b0329c</span><br><span class="line">Removing intermediate container 285ac7b0329c</span><br><span class="line"> ---&gt; 319bf0d748f8</span><br><span class="line">Successfully built 319bf0d748f8</span><br><span class="line">Successfully tagged testimg:v10</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testimg             v10                 319bf0d748f8        3 minutes ago       1.13MB</span><br><span class="line">testimg             v9                  c42d3b44209f        22 minutes ago      1.13MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              45f6656576c1        About an hour ago   2.11MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run -d --name t1 --rm testimg:v10 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">8fa159cd20de19c894cf437d530fec16667e53128d0b3c703f27ea14cc5660bb</span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">8fa159cd20de        testimg:v10         &quot;httpd -f&quot;          10 seconds ago      Up 9 seconds                            t1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 dockerfile]# docker run  --name t2 -it --rm --entrypoint &quot;/bin/bash&quot; testimg:v10     # 可以使用此命令进行覆盖指令；</span><br></pre></td></tr></table></figure><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><ul><li>用于指定运行image时的或运行Dockerfile中的任意RUN、CMD或ENTRYPOINT指令指定的程序时的用户名或UID</li><li>默认情况下，container的运行身份为root用户</li><li>Syntax<ul><li>USER <uid><username></username></uid></li><li>需要注意的是，<uid>可以为任意数字，但实践中其必须为/etc/passwd中某用户的有效UID，否则，docker run命令将运行失败</uid></li></ul></li></ul><h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><ul><li>用于在Dockerfile中定义一个触发器</li><li>Dockerfile用于build映像文件，此映像文件亦可作为base image被另一个Dockerfile用作FROM指令的参数，并以之构建新的映像文件</li><li>在后面的这个Dockerfile中的FROM指令在build过程中被执行时，将会”触发“创建其base image的dockerfile文件中的ONBUILD指令定义的触发器</li><li>Suntax<ul><li>ONBUILD <instruction></instruction></li></ul></li><li>尽管任何指令都可注册成为触发器指令，但ONBUILD不能自我嵌套，且不会触发FROM和MAINTAINER指令</li><li>使用包含ONBUILD指令的Dockerfile构建的镜像应该使用特殊的标签，例如ruby:2.0-onbuild</li><li>在ONBUILD指令中使用ADD或COPY指令应该格外小心，因为新构建过程的上下文在缺少指定的源文件时会失败</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.jianshu.com/p/690844302df5" target="_blank" rel="noopener">Dockerfile语法：https://www.jianshu.com/p/690844302df5</a></p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Dockerfile编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker网络管理</title>
      <link href="/2018/07/21/Docker-network/"/>
      <url>/2018/07/21/Docker-network/</url>
      <content type="html"><![CDATA[<h3 id="列出当前主机上的docker网络"><a href="#列出当前主机上的docker网络" class="headerlink" title="列出当前主机上的docker网络"></a>列出当前主机上的docker网络</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker network  ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">3c295a6fa80b        bridge              bridge              local</span><br><span class="line">89f4fd8f26e7        host                host                local</span><br><span class="line">0a3b15434b1e        none                null                local</span><br></pre></td></tr></table></figure><h4 id="列出当前主机上的docker网络且显示完整网络ID"><a href="#列出当前主机上的docker网络且显示完整网络ID" class="headerlink" title="列出当前主机上的docker网络且显示完整网络ID"></a>列出当前主机上的docker网络且显示完整网络ID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker network ls --no-trunc </span><br><span class="line">NETWORK ID                                                         NAME                DRIVER              SCOPE</span><br><span class="line">3c295a6fa80b0ba848b6590477ed76c34b71c660cbf133f3e4947c205eb125a9   bridge              bridge              local</span><br><span class="line">89f4fd8f26e7cc79a1ddfe5f935150393d45e2f70ec49b232d361aab78f2cd6f   host                host                local</span><br><span class="line">0a3b15434b1e488c337c69ca0c3b1f524b9137ed33d2e978c4c9d5c83087e015   none                null                local</span><br></pre></td></tr></table></figure><h3 id="使用none网络模式"><a href="#使用none网络模式" class="headerlink" title="使用none网络模式"></a>使用none网络模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testbox             v0.1                da2444a15176        19 hours ago        1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        28 hours ago        1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        30 hours ago        1.13MB</span><br><span class="line">centos              latest              3fa822599e10        5 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@centos7 ~]# docker run -it --name none1 --network none --rm busybox:1.27.2      # 运行容器指定网络模式为none；</span><br><span class="line">/ # ifconfig -a</span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h3 id="使用host网络模式"><a href="#使用host网络模式" class="headerlink" title="使用host网络模式"></a>使用host网络模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name host1 --network host --rm busybox:1.27.2      # 运行容器指定网络模式为host；</span><br><span class="line">/ # ifconfig -a</span><br><span class="line">docker0   Link encap:Ethernet  HWaddr 02:42:0A:55:E6:89  </span><br><span class="line">          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">ens33     Link encap:Ethernet  HWaddr 00:0C:29:E3:30:CA  </span><br><span class="line">          inet addr:192.168.182.133  Bcast:192.168.182.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fee3:30ca/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7929 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:495 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:518271 (506.1 KiB)  TX bytes:46394 (45.3 KiB)</span><br><span class="line"></span><br><span class="line">ens34     Link encap:Ethernet  HWaddr 00:0C:29:E3:30:D4  </span><br><span class="line">          inet addr:192.168.8.17  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fee3:30d4/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1658 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1147 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:162610 (158.7 KiB)  TX bytes:112014 (109.3 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:80 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:80 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:6960 (6.7 KiB)  TX bytes:6960 (6.7 KiB)</span><br><span class="line"></span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式并指定主机名"><a href="#使用bridge网络模式并指定主机名" class="headerlink" title="使用bridge网络模式并指定主机名"></a>使用bridge网络模式并指定主机名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name bridge --rm --hostname www.ihaiyun.cc busybox:1.27.2 hostname</span><br><span class="line">www.ihaiyun.cc</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式并指定单个或多个DNS地址"><a href="#使用bridge网络模式并指定单个或多个DNS地址" class="headerlink" title="使用bridge网络模式并指定单个或多个DNS地址"></a>使用bridge网络模式并指定单个或多个DNS地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name bridge --rm --dns 8.8.8.8 busybox:1.27.2 cat /etc/resolv.conf     # 指定单个DNS；</span><br><span class="line">search localdomain 3.haiyun.com</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker run -it --name bridge --rm --network bridge --dns 8.8.8.8 --dns 114.114.114.114 busybox:1.27.2 cat /etc/resolv.conf </span><br><span class="line">search localdomain 3.haiyun.com     # 指定多个DNS；</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式并指定hosts文件内容"><a href="#使用bridge网络模式并指定hosts文件内容" class="headerlink" title="使用bridge网络模式并指定hosts文件内容"></a>使用bridge网络模式并指定hosts文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name bridge --network bridge --rm --add-host www.ihaiyun.cc:192.168.8.8 busybox:1.27.2 cat /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">192.168.8.8www.ihaiyun.cc</span><br><span class="line">172.17.0.2cb249f6b5173</span><br><span class="line"></span><br><span class="line"># 也可以添加多条：</span><br><span class="line">[root@centos7 ~]# docker run -it --name bridge --network bridge --rm --add-host www.test.com:1.1.1.1 --add-host www.test2.com:2.2.2.2 busybox:1.27.2 cat /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">1.1.1.1www.test.com</span><br><span class="line">2.2.2.2www.test2.com</span><br><span class="line">172.17.0.274cd24b35d4f</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式将容器内指定端口映射到宿主机的随机端口"><a href="#使用bridge网络模式将容器内指定端口映射到宿主机的随机端口" class="headerlink" title="使用bridge网络模式将容器内指定端口映射到宿主机的随机端口"></a>使用bridge网络模式将容器内指定端口映射到宿主机的随机端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ls /docker/data/volumes/b1/       </span><br><span class="line">test3  test.txt  tset2</span><br><span class="line">[root@centos7 ~]# echo &quot;tset Page&quot; &gt; /docker/data/volumes/b1/index.html     # 创建网站默认文件；</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker run -itd --name bridge --network bridge -v /docker/data/volumes/b1/:/data -p 80 busybox:1.27.2 httpd -f -h /data       # 运行容器，指定容器内的端口为80；</span><br><span class="line">4b8d1c40952110ae12136562e11fd7923df49ab8423923cec4b056136f1b468d</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker ps     # 查看当前运行的容器；</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">4b8d1c409521        busybox:1.27.2      &quot;httpd -f -h /data&quot;   12 seconds ago      Up 12 seconds       0.0.0.0:32768-&gt;80/tcp   bridge</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker port bridge        # 查看容器bridge的端口映射，映射的本地端口为32768；</span><br><span class="line">80/tcp -&gt; 0.0.0.0:32768</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl http://192.168.8.17:32768        # 访问测试ok；</span><br><span class="line">tset Page</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式将容器内指定端口映射到宿主机的指定端口"><a href="#使用bridge网络模式将容器内指定端口映射到宿主机的指定端口" class="headerlink" title="使用bridge网络模式将容器内指定端口映射到宿主机的指定端口"></a>使用bridge网络模式将容器内指定端口映射到宿主机的指定端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -itd --name bridge --network bridge -v /docker/data/volumes/b1/:/data -p 80:80 busybox:1.27.2 httpd -f -h /data    # -p 80:80代表第一个80代表宿主机端口，第二个80代表容器端口；</span><br><span class="line">680b54f241a367f28f1a4ddc96a7c11e463449d0e82b8065170b074e23c8c5b5</span><br><span class="line">[root@centos7 ~]# docker port bridge    </span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl 192.168.8.17         # 访问测试ok；</span><br><span class="line">tset Page</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式将容器内指定IP随机端口-映射-到宿主机的指定端口"><a href="#使用bridge网络模式将容器内指定IP随机端口-映射-到宿主机的指定端口" class="headerlink" title="使用bridge网络模式将容器内指定IP随机端口 映射 到宿主机的指定端口"></a>使用bridge网络模式将容器内指定IP随机端口 映射 到宿主机的指定端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -itd --name bridge -v /docker/data/volumes/b1/:/data -p 192.168.8.17::80 busybox:1.27.2 httpd -f -h /data     # 指定IP为192.168.8.17的随机端口映射到80端口；</span><br><span class="line">62a19dbea47f76b7afcbb917c3769f0d92f699897afa86b16605343dabc94800</span><br><span class="line">[root@centos7 ~]# docker port bridge    </span><br><span class="line">80/tcp -&gt; 192.168.8.17:32768</span><br><span class="line">[root@centos7 ~]# hostname -I </span><br><span class="line">192.168.182.133 192.168.8.17 172.17.0.1 </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl 192.168.8.17:32768       # 访问测试IP192.168.8.17，ok；</span><br><span class="line">tset Page</span><br><span class="line">[root@centos7 ~]# curl 192.168.182.133:32768    # 192.168.182.133就不行；</span><br><span class="line">curl: (7) Failed connect to 192.168.182.133:32768; Connection refused</span><br></pre></td></tr></table></figure><h3 id="使用bridge网络模式将容器内指定IP指定端口-映射-到宿主机的指定端口"><a href="#使用bridge网络模式将容器内指定IP指定端口-映射-到宿主机的指定端口" class="headerlink" title="使用bridge网络模式将容器内指定IP指定端口 映射 到宿主机的指定端口"></a>使用bridge网络模式将容器内指定IP指定端口 映射 到宿主机的指定端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -itd --name bridge -v /docker/data/volumes/b1/:/data -p 192.168.8.17:80:80 busybox:1.27.2 httpd -f -h /data     # 指定192.168.8.17:80来访问容器bridge的80端口；</span><br><span class="line">4e5014fd3b472a3746db7d6b10a8acb90012ee2078db64d9722aeb63b9d9dcdd</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker port bridge </span><br><span class="line">80/tcp -&gt; 192.168.8.17:80</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl 192.168.8.17</span><br><span class="line">tset Page</span><br><span class="line">[root@centos7 ~]# hostname -I </span><br><span class="line">192.168.182.133 192.168.8.17 172.17.0.1 </span><br><span class="line">[root@centos7 ~]# curl 192.168.182.133</span><br><span class="line">curl: (7) Failed connect to 192.168.182.133:80; Connection refused</span><br></pre></td></tr></table></figure><h3 id="联盟式容器"><a href="#联盟式容器" class="headerlink" title="联盟式容器"></a>联盟式容器</h3><p>联盟式容器是指使用某个已经存在容器的网络接口的容器，接口被联盟内的各容器共享使用；因此，联盟式容器彼此之间完全无隔离。</p><p>联盟式容器彼此间虽然共享同一个网络名称空间，但其它名称空间如User、Mount等还是隔离的。</p><p>联盟式容器彼此间存在端口冲突的可能性，因此，通常只会在多个容器上的程序需要程序loopback接口通信、或对某已存在的容器的网络属性进行监控时才使用此种模式的网络模型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># 创建第一个容器；</span><br><span class="line">[root@centos7 ~]# docker run -it --name con --rm -p 2222 busybox:1.27.2 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:578 (578.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">/ # cat /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.29fa18846d19f</span><br><span class="line">/ # cat /etc/resolv.conf </span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">search 3.haiyun.com</span><br><span class="line"></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br><span class="line">/ # </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 运行第二个容器，第二个容器和第一个容器内的网络和hosts和DNS都是一摸一样的；</span><br><span class="line">[root@centos7 ~]# docker run  -it --network container:con --name con2 busybox:1.27.2 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">/ # cat /etc/hosts </span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.29fa18846d19f</span><br><span class="line">/ # cat /etc/resolv.conf </span><br><span class="line"># Generated by NetworkManager</span><br><span class="line">search 3.haiyun.com</span><br><span class="line"></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure></p><h3 id="创建桥"><a href="#创建桥" class="headerlink" title="创建桥"></a>创建桥</h3><h4 id="创建本地桥"><a href="#创建本地桥" class="headerlink" title="创建本地桥"></a>创建本地桥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker network create --subnet 10.10.0.0/16 --ip-range 10.10.10.0/24 --gateway 10.10.10.1 br0      # --subnet：CIDR格式的子网代表一个网段，--ip-range：从子范围分配容器IP；--gateway：主网段的网关；</span><br><span class="line">ffbef008c8811296a324d6d1c31ebba71b99511bf7f7442339433bf77d06e8da</span><br><span class="line">[root@centos7 ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">ffbef008c881        br0                 bridge              local</span><br><span class="line">3c295a6fa80b        bridge              bridge              local</span><br><span class="line">89f4fd8f26e7        host                host                local</span><br><span class="line">0a3b15434b1e        none                null                local</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ifconfig </span><br><span class="line">br-ffbef008c881: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500       # 此网卡为新创建的本地桥；</span><br><span class="line">        inet 10.10.10.1  netmask 255.255.0.0  broadcast 10.10.255.255</span><br><span class="line">        ether 02:42:bc:76:de:b9  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8672  bytes 759405 (741.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5372  bytes 578104 (564.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        inet6 fe80::42:aff:fe55:e689  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:0a:55:e6:89  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 46  bytes 3262 (3.1 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 49  bytes 3572 (3.4 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 00:0c:29:e3:30:ca  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 11508  bytes 745770 (728.2 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 548  bytes 52148 (50.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.17  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:fee3:30d4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:e3:30:d4  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 8672  bytes 759405 (741.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5372  bytes 578104 (564.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 94  bytes 7940 (7.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 94  bytes 7940 (7.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试运行</span><br><span class="line">[root@centos7 ~]# docker run --name test -it --rm --network br0 busybox:1.27.2 </span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:0A:0A:0A:00  </span><br><span class="line">          inet addr:10.10.10.0  Bcast:10.10.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:10 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:836 (836.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">/ # route -n </span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         10.10.10.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">10.10.0.0       0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class="line">/ # ping -c 1 10.10.10.1        # 网关也可以ping通；</span><br><span class="line">PING 10.10.10.1 (10.10.10.1): 56 data bytes</span><br><span class="line">64 bytes from 10.10.10.1: seq=0 ttl=64 time=0.083 ms</span><br><span class="line"></span><br><span class="line">--- 10.10.10.1 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.083/0.083/0.083 ms</span><br></pre></td></tr></table></figure><h3 id="将容器关联之已有网络桥"><a href="#将容器关联之已有网络桥" class="headerlink" title="将容器关联之已有网络桥"></a>将容器关联之已有网络桥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -itd --name b1 --rm busybox:1.27.2 httpd -f    # 新运行一个容器b1；</span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">4357b1f6db6ea15827ea7cc020d396434a44883ea88b88589b2d969a1476ffcd</span><br><span class="line">[root@centos7 ~]# docker network connect br0 b1     # 将br0网桥关联至b1容器；</span><br><span class="line">[root@centos7 ~]# docker exec -it b1 sh     # 连接至容器b1；</span><br><span class="line">/ # ifconfig        # 已经关联成功；</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 02:42:0A:0A:0A:02  </span><br><span class="line">          inet addr:10.10.10.2  Bcast:10.10.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h3 id="删除网桥"><a href="#删除网桥" class="headerlink" title="删除网桥"></a>删除网桥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker network rm br0         # 删除时注意要把使用br0网桥的容器停止删除；</span><br><span class="line">br0</span><br></pre></td></tr></table></figure><h3 id="修改docker0的属性信息"><a href="#修改docker0的属性信息" class="headerlink" title="修改docker0的属性信息"></a>修改docker0的属性信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/docker/daemon.json       # 核心选项为bip，即bridge ip之意，用于指定docker0桥自身的iP地址；其它选项可通过此地址计算得出。</span><br><span class="line">&#123;</span><br><span class="line">&quot;bip&quot;: &quot;192.168.6.1/24&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos7 ~]# systemctl restart docker </span><br><span class="line">[root@centos7 ~]# ifconfig      # 修改成功；</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.6.1  netmask 255.255.255.0  broadcast 192.168.6.255</span><br><span class="line">        inet6 fe80::42:aff:fe55:e689  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:0a:55:e6:89  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 46  bytes 3262 (3.1 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 49  bytes 3572 (3.4 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 00:0c:29:e3:30:ca  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 12783  bytes 825312 (805.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 548  bytes 52148 (50.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.17  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:fee3:30d4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:e3:30:d4  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 11099  bytes 965952 (943.3 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 6874  bytes 771110 (753.0 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 106  bytes 8960 (8.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 106  bytes 8960 (8.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/userguide/networking/default_network/custom-docker0/" target="_blank" rel="noopener">帮助文档：https://docs.docker.com/engine/userguide/networking/default_network/custom-docker0/</a></p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker网络管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker数据卷</title>
      <link href="/2018/07/21/Docker-volume/"/>
      <url>/2018/07/21/Docker-volume/</url>
      <content type="html"><![CDATA[<h3 id="容器存储数据存在的问题"><a href="#容器存储数据存在的问题" class="headerlink" title="容器存储数据存在的问题"></a>容器存储数据存在的问题</h3><p>关闭并重启容器，其数据不受影响；但删除容器，则其更改的数据将会全部丢失；</p><p>存在的问题：</p><ol><li>存储于联合文件系统中，不易于宿主机的访问；</li><li>容器间数据共享不便；</li><li>删除容器其数据会丢失；</li></ol><a id="more"></a><h3 id="由docker管理的卷"><a href="#由docker管理的卷" class="headerlink" title="由docker管理的卷"></a>由docker管理的卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name b1 -v /data/ --rm busybox:1.27.2    # 运行一个容器，-v代表指定容器b1卷的路径；</span><br><span class="line">/ # ls /        # 列出根目录下的所有目录，已经有data目录；</span><br><span class="line">bin   data  dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class="line">/ # echo &quot;Test...&quot; &gt; /data/test     # 编写测试文件；</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker inspect b1 | grep -A 10 Mounts     # 查看容器b1的详细信息，并把Mounts信息显示出来；</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;0804f6b61524c3bdc4feb07cf1882e4f8901b43d20444cf34d5ae78caa9847ed&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/0804f6b61524c3bdc4feb07cf1882e4f8901b43d20444cf34d5ae78caa9847ed/_data&quot;,     # 此路径为宿主机所对应的真实路径；</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,     # 容器内的卷；</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,  </span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cat /var/lib/docker/volumes/0804f6b61524c3bdc4feb07cf1882e4f8901b43d20444cf34d5ae78caa9847ed/_data/test       # 查看宿主机目录下的test文件，已经存在；</span><br><span class="line">Test...</span><br><span class="line">[root@centos7 ~]# docker volume ls      # 列出当前主机所有的卷；</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               0804f6b61524c3bdc4feb07cf1882e4f8901b43d20444cf34d5ae78caa9847ed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cd /var/lib/docker/volumes/0804f6b61524c3bdc4feb07cf1882e4f8901b43d20444cf34d5ae78caa9847ed/_data/        # 进入此目录；</span><br><span class="line">[root@centos7 _data]# ls</span><br><span class="line">test</span><br><span class="line">[root@centos7 _data]# echo &quot;hello...&quot; &gt; test2       # echo一个文件；</span><br><span class="line">[root@centos7 _data]# ls</span><br><span class="line">test  test2</span><br><span class="line"></span><br><span class="line"># 切换到容器内部：</span><br><span class="line">/ # ls /data/       # 列出data目录，test2文件已经存在；</span><br><span class="line">test   test2</span><br><span class="line">/ # cat /data/test2     # cat此文件内容和宿主机上面的内容是一摸一样的；</span><br><span class="line">hello...</span><br></pre></td></tr></table></figure><h3 id="清理未使用的卷"><a href="#清理未使用的卷" class="headerlink" title="清理未使用的卷"></a>清理未使用的卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 _data]# docker volume prune </span><br><span class="line">WARNING! This will remove all volumes not used by at least one container.</span><br><span class="line">Are you sure you want to continue? [y/N] y</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><h3 id="自定义卷"><a href="#自定义卷" class="headerlink" title="自定义卷"></a>自定义卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir -pv  /docker/data/volumes/b1        # 在宿主机上面创建关联到容器上面的卷的目录；</span><br><span class="line">mkdir: created directory ‘/docker’</span><br><span class="line">mkdir: created directory ‘/docker/data’</span><br><span class="line">mkdir: created directory ‘/docker/data/volumes’</span><br><span class="line">mkdir: created directory ‘/docker/data/volumes/b1’</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker run -it --name b1 -v /docker/data/volumes/b1/:/data --rm busybox:1.27.2        # 运行容器，-v先指定宿主机的目录:容器内的卷；</span><br><span class="line">/ # ls /</span><br><span class="line">bin   data  dev   etc   home  proc  root  sys   tmp   usr   var</span><br><span class="line">/ # touch /data/test.txt        # 创建测试文件；</span><br><span class="line">/ # ls /data/</span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker inspect b1 | grep -A 10 Mounts     # 查看Mounts信息；</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/docker/data/volumes/b1&quot;,        # 宿主济的目录；</span><br><span class="line">                &quot;Destination&quot;: &quot;/data&quot;,         # 容器内的目录；</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">[root@centos7 ~]# ls /docker/data/volumes/b1/       # 文件已经存在；</span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# touch /docker/data/volumes/b1/tset2       # 宿主机创建test2文件；</span><br><span class="line">[root@centos7 ~]# ls /docker/data/volumes/b1/</span><br><span class="line">test.txt  tset2</span><br><span class="line"></span><br><span class="line"># 切换回容器</span><br><span class="line">/ # ls /data/       # test2文件已经存在；</span><br><span class="line">test.txt  tset2</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>情况一：如果宿主机要挂载的目录存在文件，那么会出现什么情况？<ul><li>在容器内是可以看到宿主济已经存在的文件。</li></ul></li><li>情况一：如果容器内的目录(就是卷)存在且有文件，那么会出现什么情况？<ul><li>容器内的目录内的数据将会被隐藏。</li></ul></li><li>情况三：如果容器内的目录(就是卷)存在且有文件，且宿主机要挂载的目录也存在文件，那么会出现什么情况？<ul><li>容器目录内的数据会被隐藏，宿主机目录内的数据将会被显示。</li></ul></li></ul><h3 id="共享卷"><a href="#共享卷" class="headerlink" title="共享卷"></a>共享卷</h3><h3 id="多个容器的卷使用同一个主机目录"><a href="#多个容器的卷使用同一个主机目录" class="headerlink" title="多个容器的卷使用同一个主机目录"></a>多个容器的卷使用同一个主机目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name b1 -v /docker/data/volumes/b1/:/data --rm busybox:1.27.2        # 运行容器指定宿主机的目录为：/docker/data/volumes/b1/；</span><br><span class="line">/ # ls /data/</span><br><span class="line">test.txt  tset2</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker run -it --name b2 -v /docker/data/volumes/b1/:/data --rm busybox:1.27.2        # 运行容器指定宿主机的目录也为：/docker/data/volumes/b1/；</span><br><span class="line">/ # ls /data        # 数据是相同的；</span><br><span class="line">test.txt  tset2</span><br><span class="line"></span><br><span class="line"># 容器b1操作</span><br><span class="line">/ # touch /data/test3       # 在b1创建test3；</span><br><span class="line">/ # ls /data/</span><br><span class="line">test.txt  test3     tset2</span><br><span class="line"></span><br><span class="line"># 容器b2操作</span><br><span class="line">/ # ls /data/           # 在b2也是可以看到的；</span><br><span class="line">test.txt  test3     tset2</span><br></pre></td></tr></table></figure><h4 id="复制其它容器的卷实现共享卷"><a href="#复制其它容器的卷实现共享卷" class="headerlink" title="复制其它容器的卷实现共享卷"></a>复制其它容器的卷实现共享卷</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name b1 -v /docker/data/volumes/b1/:/data --rm busybox:1.27.2        # 启动第一个容器；</span><br><span class="line">/ # ls /data/</span><br><span class="line">test.txt  test3     tset2</span><br><span class="line">/ # </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker run --name b2 -it --volumes-from b1 busybox:1.27.2         # 启动第二个容器，并指定复制容器b1所有的卷到b2上面；</span><br><span class="line">/ # ls /data/</span><br><span class="line">test.txt  test3     tset2</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><h3 id="挂载多个卷"><a href="#挂载多个卷" class="headerlink" title="挂载多个卷"></a>挂载多个卷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir /docker/data/volumes/b2</span><br><span class="line">[root@centos7 ~]# docker run -it --name b1 -v /docker/data/volumes/b1/:/data -v /docker/data/volumes/b2/:/test --rm busybox:1.27.2      # 可以挂载多个目录使用-v选项；</span><br><span class="line">/ # ls /</span><br><span class="line">bin   data  dev   etc   home  proc  root  sys   test  tmp   usr   var</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker数据卷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过commit方式制作Docker镜像</title>
      <link href="/2018/07/21/Docker-commit-image/"/>
      <url>/2018/07/21/Docker-commit-image/</url>
      <content type="html"><![CDATA[<h3 id="镜像的生成途径"><a href="#镜像的生成途径" class="headerlink" title="镜像的生成途径"></a>镜像的生成途径</h3><ol><li>Dockerfile</li><li>基于容器的制作</li><li>Docker Hub automated builds</li></ol><a id="more"></a><h3 id="基于容器的制作"><a href="#基于容器的制作" class="headerlink" title="基于容器的制作"></a>基于容器的制作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run --name b1 -it centos:latest bash       # 首先运行一个容器；</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker ps     # 容器已经运行；</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">cf95941eacaa        centos:latest       &quot;bash&quot;              2 minutes ago       Up 2 minutes                            b1</span><br><span class="line">[root@centos7 ~]# docker commit -a &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot; -p -m &quot;web site resource&quot; b1        # 制作镜像，-a指定作者，-p指定在制作镜像时暂停容器的所有操作，-m指定镜像描述信息，b1是容器名称；</span><br><span class="line">sha256:339a47fcd8315e35e8412c888137140db592b10265603afee1889e1a7c2f959e</span><br><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              339a47fcd831        11 seconds ago      204MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        8 weeks ago         1.13MB</span><br></pre></td></tr></table></figure><h4 id="为刚刚制作的镜像打标签"><a href="#为刚刚制作的镜像打标签" class="headerlink" title="为刚刚制作的镜像打标签"></a>为刚刚制作的镜像打标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images         # 列出所有镜像；</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              339a47fcd831        11 seconds ago      204MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        8 weeks ago         1.13MB</span><br><span class="line">[root@centos7 ~]# docker tag 339a47fcd831 registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc:web0.1       # 339a47fcd831为镜像ID，registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc:web0.1为仓库名:标签；</span><br><span class="line">[root@centos7 ~]# docker images     # 已经有仓库和标签；</span><br><span class="line">REPOSITORY                                               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc   web0.1              339a47fcd831        7 minutes ago       204MB</span><br><span class="line">centos                                                   latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox                                                  1.27.2              6ad733544a63        8 weeks ago         1.13MB</span><br></pre></td></tr></table></figure><h4 id="登陆阿里云开发者平台"><a href="#登陆阿里云开发者平台" class="headerlink" title="登陆阿里云开发者平台"></a>登陆阿里云开发者平台</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker login dev.aliyun.com</span><br><span class="line">Username: 13718403393</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h3 id="为新创建的镜像打第二个标签"><a href="#为新创建的镜像打第二个标签" class="headerlink" title="为新创建的镜像打第二个标签"></a>为新创建的镜像打第二个标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images     # 列出所有镜像；</span><br><span class="line">REPOSITORY                                               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc   web0.1              339a47fcd831        15 minutes ago      204MB</span><br><span class="line">centos                                                   latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox                                                  1.27.2              6ad733544a63        8 weeks ago         1.13MB</span><br><span class="line">[root@centos7 ~]# docker tag 339a47fcd831 websrv:0.1        # 打标签；</span><br><span class="line">[root@centos7 ~]# docker images     # 已经有标签；</span><br><span class="line">REPOSITORY                                               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">websrv                                                   0.1                 339a47fcd831        17 minutes ago      204MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc   web0.1              339a47fcd831        17 minutes ago      204MB</span><br><span class="line">centos                                                   latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox                                                  1.27.2              6ad733544a63        8 weeks ago         1.13MB</span><br></pre></td></tr></table></figure><h3 id="创建新镜像并指定默认运行命令"><a href="#创建新镜像并指定默认运行命令" class="headerlink" title="创建新镜像并指定默认运行命令"></a>创建新镜像并指定默认运行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker commit -a &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot; -p -m &quot;web server&quot; -c &apos;CMD [&quot;/usr/sbin/httpd&quot;,&quot;-f&quot;,&quot;-h&quot;,&quot;/web/html&quot;]&apos; b1     # 创建进行-c表示指定默认运行命令；</span><br><span class="line">sha256:5eb3758631b82331b0ea8f5d12bdb8d449df61579ecb69df5b2f55eba78a3fb5</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker images     # 显示所有镜像；</span><br><span class="line">REPOSITORY                                               TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">&lt;none&gt;                                                   &lt;none&gt;              5eb3758631b8        About a minute ago   323MB</span><br><span class="line">web                                                      0.1                 273281a7964b        10 minutes ago       323MB</span><br><span class="line">websrv                                                   0.1                 339a47fcd831        11 hours ago         204MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc   web0.1              339a47fcd831        11 hours ago         204MB</span><br><span class="line">centos                                                   latest              3fa822599e10        4 weeks ago          204MB</span><br><span class="line">busybox                                                  1.27.2              6ad733544a63        8 weeks ago          1.13MB</span><br><span class="line">[root@centos7 ~]# docker tag 5eb3758631b8 web:0.2       # 为新创建的镜像打标签；</span><br><span class="line">[root@centos7 ~]# docker images             # 显示所有镜像；</span><br><span class="line">REPOSITORY                                               TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">web                                                      0.2                 5eb3758631b8        About a minute ago   323MB</span><br><span class="line">web                                                      0.1                 273281a7964b        11 minutes ago       323MB</span><br><span class="line">websrv                                                   0.1                 339a47fcd831        11 hours ago         204MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc   web0.1              339a47fcd831        11 hours ago         204MB</span><br><span class="line">centos                                                   latest              3fa822599e10        4 weeks ago          204MB</span><br><span class="line">busybox                                                  1.27.2              6ad733544a63        8 weeks ago          1.13MB</span><br></pre></td></tr></table></figure><h3 id="docker删除镜像"><a href="#docker删除镜像" class="headerlink" title="docker删除镜像"></a>docker删除镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY                                               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc   web0.1              339a47fcd831        23 hours ago        204MB</span><br><span class="line">centos                                                   latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox                                                  1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker rmi 339a47fcd831</span><br><span class="line">Untagged: registry.cn-hangzhou.aliyuncs.com/houhaiyun/ihaiyun.cc:web0.1</span><br><span class="line">Deleted: sha256:339a47fcd8315e35e8412c888137140db592b10265603afee1889e1a7c2f959e</span><br><span class="line">Deleted: sha256:79923bbbcf9f2cb45ba7ae035553b7e67026853cd5808e03a4ff35402bd3a7fa</span><br><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br></pre></td></tr></table></figure><h3 id="commit制作命令并指定默认运行命令"><a href="#commit制作命令并指定默认运行命令" class="headerlink" title="commit制作命令并指定默认运行命令"></a>commit制作命令并指定默认运行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 docker commit -a &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot; -p -m &quot;web server&quot; -c &apos;CMD [&quot;/bin/httpd&quot;,&quot;-f&quot;]&apos; bbox1</span><br><span class="line">sha256:87aadc5b53c75e1ff9cefa62541eec46534c7d490814ff0d6285d2e8f291f8dd</span><br><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              87aadc5b53c7        7 seconds ago       1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        About an hour ago   1.13MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker tag 87aadc5b53c7 web:0.2</span><br><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">web                 0.2                 87aadc5b53c7        22 seconds ago      1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        About an hour ago   1.13MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker run --name web2 -d web:0.2 </span><br><span class="line">d8e57eea043d27c65d7c3f8768bfed272fc4efb935cb86a475b55e51a77f7098</span><br><span class="line">[root@centos7 ~]# docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">d8e57eea043d        web:0.2             &quot;/bin/httpd -f&quot;     3 seconds ago       Up 2 seconds                            web2</span><br><span class="line">83430a68dae7        busybox:1.27.2      &quot;sh&quot;                3 minutes ago       Up 3 minutes                            bbox1</span><br></pre></td></tr></table></figure><h3 id="镜像的导出"><a href="#镜像的导出" class="headerlink" title="镜像的导出"></a>镜像的导出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">web                 0.2                 87aadc5b53c7        24 minutes ago      1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 hours ago         1.13MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker save -o /root/web:0.2.tar web:0.2      # 导出镜像，-o指定导出的位置；</span><br><span class="line">[root@centos7 ~]# ll -h </span><br><span class="line">total 1.3M</span><br><span class="line">-rw------- 1 root root 1.3M Jan  3 11:07 web:0.2.tar</span><br></pre></td></tr></table></figure><h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# scp ./web\:0.2.tar  192.168.8.12:     # 将镜像复制到192.168.8.12这台主机；</span><br><span class="line">The authenticity of host &apos;192.168.8.12 (192.168.8.12)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is b2:9b:a5:92:1a:0a:1f:ee:0d:e4:b8:15:03<img class="github-emoji" title="de" alt="de" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8" height="20" width="20">13:b4.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;192.168.8.12&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.8.12&apos;s password: </span><br><span class="line">web:0.2.tar                                                                                                                        100% 1324KB   1.3MB/s   00:00    </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/centos    latest              3fa822599e10        4 weeks ago         203.5 MB</span><br><span class="line">docker.io/busybox   1.27.2              6ad733544a63        8 weeks ago         1.129 MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker load  -i web\:0.2.tar      # 导入镜像；</span><br><span class="line">d0e09d960c2a: Loading layer [==================================================&gt;] 4.608 kB/4.608 kB</span><br><span class="line">Loaded image: web:0.2 layer [=====&gt;                                             ]    512 B/4.608 kB</span><br><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">web                 0.2                 87aadc5b53c7        36 minutes ago      1.129 MB</span><br><span class="line">docker.io/centos    latest              3fa822599e10        4 weeks ago         203.5 MB</span><br><span class="line">docker.io/busybox   1.27.2              6ad733544a63        8 weeks ago         1.129 MB</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker run -d --name web web:0.2      # 运行容器；</span><br><span class="line">61e6335a5d3fd325a8158da027c8fd043340ff9ef2c73909f58978e04449b943</span><br><span class="line">[root@centos7 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">61e6335a5d3f        web:0.2             &quot;/bin/httpd -f&quot;     3 seconds ago       Up 2 seconds                            web</span><br></pre></td></tr></table></figure><h3 id="查看镜像历史"><a href="#查看镜像历史" class="headerlink" title="查看镜像历史"></a>查看镜像历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">web                 0.2                 87aadc5b53c7        44 minutes ago      1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        2 hours ago         1.13MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker history web:0.2 </span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">87aadc5b53c7        44 minutes ago      sh                                              133B                web server</span><br><span class="line">6ad733544a63        2 months ago        /bin/sh -c #(nop)  CMD [&quot;sh&quot;]                   0B                  </span><br><span class="line">&lt;missing&gt;           2 months ago        /bin/sh -c #(nop) ADD file:264af0c48e23e8b8f…   1.13MB</span><br></pre></td></tr></table></figure><h3 id="显示容器状态"><a href="#显示容器状态" class="headerlink" title="显示容器状态"></a>显示容器状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker stats web2     # 显示web2的状态；</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker stats -a       # 显示所有容器的状态；</span><br></pre></td></tr></table></figure><h3 id="制作镜像并且打上标签"><a href="#制作镜像并且打上标签" class="headerlink" title="制作镜像并且打上标签"></a>制作镜像并且打上标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">web                 0.2                 87aadc5b53c7        9 hours ago         1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        11 hours ago        1.13MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">98490a0fa139        busybox:1.27.2      &quot;sh&quot;                13 minutes ago      Up 13 minutes                           b1</span><br><span class="line">[root@centos7 ~]# docker commit -a &quot;houhaiyun &lt;hou_haiyun@weitac.com&gt;&quot; -m &quot;test page&quot; -p b1 testbox:v0.1</span><br><span class="line">sha256:da2444a15176b3fc764d5093b19d1a40ab2d7c2ccc193a55f1ab62aa727bf4f3</span><br><span class="line">[root@centos7 ~]# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testbox             v0.1                da2444a15176        7 seconds ago       1.13MB</span><br><span class="line">web                 0.2                 87aadc5b53c7        9 hours ago         1.13MB</span><br><span class="line">web                 0.1                 fcd0885091c8        11 hours ago        1.13MB</span><br><span class="line">centos              latest              3fa822599e10        4 weeks ago         204MB</span><br><span class="line">busybox             1.27.2              6ad733544a63        2 months ago        1.13MB</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> 通过commit方式制作Docker镜像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker镜像管理及容器管理</title>
      <link href="/2018/07/21/Docker-manage-1/"/>
      <url>/2018/07/21/Docker-manage-1/</url>
      <content type="html"><![CDATA[<h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# systemctl start docker</span><br><span class="line">[root@centos7 ~]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:         1.12.6</span><br><span class="line"> API version:     1.24</span><br><span class="line"> Package version: docker-1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line"> Go version:      go1.8.3</span><br><span class="line"> Git commit:      ec8512b/1.12.6</span><br><span class="line"> Built:           Mon Dec 11 16:08:42 2017</span><br><span class="line"> OS/Arch:         linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:         1.12.6</span><br><span class="line"> API version:     1.24</span><br><span class="line"> Package version: docker-1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line"> Go version:      go1.8.3</span><br><span class="line"> Git commit:      ec8512b/1.12.6</span><br><span class="line"> Built:           Mon Dec 11 16:08:42 2017</span><br><span class="line"> OS/Arch:         linux/amd64</span><br></pre></td></tr></table></figure><h3 id="阿里云镜像仓库"><a href="#阿里云镜像仓库" class="headerlink" title="阿里云镜像仓库"></a>阿里云镜像仓库</h3><p><a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p><h3 id="搜索一个镜像"><a href="#搜索一个镜像" class="headerlink" title="搜索一个镜像"></a>搜索一个镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker search busybox</span><br><span class="line">INDEX       NAME                                  DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/busybox                     Busybox base image.                             1169      [OK]       </span><br><span class="line">docker.io   docker.io/progrium/busybox                                                            66                   [OK]</span><br><span class="line">docker.io   docker.io/hypriot/rpi-busybox-httpd   Raspberry Pi compatible Docker Image with ...   39                   </span><br><span class="line">docker.io   docker.io/radial/busyboxplus          Full-chain, Internet enabled, busybox made...   17                   [OK]</span><br><span class="line">docker.io   docker.io/hypriot/armhf-busybox       Busybox base image for ARM.                     8                    </span><br><span class="line">docker.io   docker.io/armhf/busybox               Busybox base image.                             4                    </span><br><span class="line">docker.io   docker.io/arm32v7/busybox             Busybox base image.                             3                    </span><br><span class="line">docker.io   docker.io/aarch64/busybox             Busybox base image.                             2                    </span><br><span class="line">docker.io   docker.io/armel/busybox               Busybox base image.                             2                    </span><br><span class="line">docker.io   docker.io/onsi/grace-busybox</span><br></pre></td></tr></table></figure><h3 id="显示docker相关信息"><a href="#显示docker相关信息" class="headerlink" title="显示docker相关信息"></a>显示docker相关信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker info</span><br></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker pull --help        # 帮助信息；</span><br><span class="line"></span><br><span class="line">Usage:docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line"></span><br><span class="line">Pull an image or a repository from a registry</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all-tags                Download all tagged images in the repository</span><br><span class="line">      --disable-content-trust   Skip image verification (default true)</span><br><span class="line">      --help                    Print usage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker pull busybox:1.27.2        # 下载镜像，仓库名:标签；</span><br><span class="line">Trying to pull repository docker.io/library/busybox ... </span><br><span class="line">1.27.2: Pulling from docker.io/library/busybox</span><br><span class="line">0ffadd58f2a6: Pull complete </span><br><span class="line">Digest: sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0</span><br></pre></td></tr></table></figure><h3 id="显示本地镜像"><a href="#显示本地镜像" class="headerlink" title="显示本地镜像"></a>显示本地镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/busybox   1.27.2              6ad733544a63        8 weeks ago         1.129 MB</span><br></pre></td></tr></table></figure><h3 id="运行一个容器"><a href="#运行一个容器" class="headerlink" title="运行一个容器"></a>运行一个容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run -it --name bbox2 busybox:1.27.2</span><br></pre></td></tr></table></figure><h3 id="查看容器或镜像的详细信息"><a href="#查看容器或镜像的详细信息" class="headerlink" title="查看容器或镜像的详细信息"></a>查看容器或镜像的详细信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker inspect bbox2 | less</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;6ca1b36a7c46e686a207e5785ae18da43fc3db5a2d10f9a46233f1b93541fed6&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-01-01T07:07:05.280249718Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">。。。省略部分内容</span><br></pre></td></tr></table></figure><h3 id="查看某个容器内运行的进程"><a href="#查看某个容器内运行的进程" class="headerlink" title="查看某个容器内运行的进程"></a>查看某个容器内运行的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker top bbox2 </span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                13992               13981               0                   15:07               pts/0               00:00:00            sh</span><br></pre></td></tr></table></figure><h3 id="查看docker的所有容器"><a href="#查看docker的所有容器" class="headerlink" title="查看docker的所有容器"></a>查看docker的所有容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker ps -a      # 查看docker所有的容器；</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                          PORTS               NAMES</span><br><span class="line">6ca1b36a7c46        busybox:1.27.2      &quot;sh&quot;                24 seconds ago       Up 24 seconds                                       bbox2</span><br><span class="line">76bdc882e9f8        busybox:1.27.2      &quot;sh&quot;                About a minute ago   Exited (0) About a minute ago                       bbox1      </span><br><span class="line">[root@centos7 ~]# docker ps         # 查看docker运行的所有容器；</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6ca1b36a7c46        busybox:1.27.2      &quot;sh&quot;                3 minutes ago       Up 3 minutes                            bbox2</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker ps -a      # 查看所有容器；</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">6ca1b36a7c46        busybox:1.27.2      &quot;sh&quot;                5 minutes ago       Up 5 minutes                                   bbox2</span><br><span class="line">76bdc882e9f8        busybox:1.27.2      &quot;sh&quot;                6 minutes ago       Exited (0) 6 minutes ago                       bbox1</span><br><span class="line">[root@centos7 ~]# docker rm bbox1       # 删除bbox1；</span><br><span class="line">bbox1</span><br><span class="line">[root@centos7 ~]# docker ps -a      # 查看已经被删除；</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">6ca1b36a7c46        busybox:1.27.2      &quot;sh&quot;                5 minutes ago       Up 5 minutes                            bbox2</span><br></pre></td></tr></table></figure><h3 id="容器运行完成后立即删除"><a href="#容器运行完成后立即删除" class="headerlink" title="容器运行完成后立即删除"></a>容器运行完成后立即删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run --name b2 --rm  busybox:1.27.2 ifconfig -a</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:90 (90.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                          PORTS               NAMES</span><br><span class="line">e4ac4e7dd478        busybox:1.27.2      &quot;ifconfig&quot;          About a minute ago   Exited (0) About a minute ago                       b1</span><br><span class="line">6ca1b36a7c46        busybox:1.27.2      &quot;sh&quot;                22 minutes ago       Exited (0) About a minute ago                       bbox2</span><br></pre></td></tr></table></figure><h3 id="运行httpd服务"><a href="#运行httpd服务" class="headerlink" title="运行httpd服务"></a>运行httpd服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker run --name web1 -d  busybox:1.27.2 httpd -f        # 以守护模式运行httpd；</span><br><span class="line">f2a8ef08dc6fd4947d271fdb1d55d8bd9a1fd1094fb25b0364263f607d74f1fd</span><br><span class="line">[root@centos7 ~]# docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          5 seconds ago       Up 5 seconds                            web1</span><br><span class="line">37ec70dbca7b        busybox:1.27.2      &quot;sh&quot;                19 minutes ago      Up 19 minutes                           b2</span><br></pre></td></tr></table></figure><h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><p>在容器内运行一个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker exec web1 ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03  </span><br><span class="line">          inet addr:172.17.0.3  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><h3 id="访问测试在容器内运行的httpd"><a href="#访问测试在容器内运行的httpd" class="headerlink" title="访问测试在容器内运行的httpd"></a>访问测试在容器内运行的httpd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# curl 172.17.0.3       # 访问错误，因为我们还没有提供默认网页；</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H1&gt;404 Not Found&lt;/H1&gt;</span><br><span class="line">The requested URL was not found</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><h3 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          16 minutes ago      Exited (137) 38 seconds ago                       web1</span><br><span class="line">[root@centos7 ~]# docker start web1         # 启动容器web1；</span><br><span class="line">web1</span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          16 minutes ago      Up 8 seconds                            web1</span><br></pre></td></tr></table></figure><h3 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# docker stop web1      # 停止一个容器；</span><br><span class="line">web1</span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          17 minutes ago      Exited (137) 22 seconds ago                       web1</span><br></pre></td></tr></table></figure><h3 id="kill一个容器"><a href="#kill一个容器" class="headerlink" title="kill一个容器"></a>kill一个容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                            PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          18 minutes ago      Exited (137) About a minute ago                       web1</span><br><span class="line">[root@centos7 ~]# docker start web1 </span><br><span class="line">web1</span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          18 minutes ago      Up 3 seconds                            web1</span><br><span class="line">[root@centos7 ~]# docker kill web1 </span><br><span class="line">web1</span><br><span class="line">[root@centos7 ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">f2a8ef08dc6f        busybox:1.27.2      &quot;httpd -f&quot;          18 minutes ago      Exited (137) 5 seconds ago                       web1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker镜像管理及容器管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker安装</title>
      <link href="/2018/07/21/Docker-Install/"/>
      <url>/2018/07/21/Docker-Install/</url>
      <content type="html"><![CDATA[<h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><p>安装所需的软件包 yum-utils提供了yum-config-manager 效用，并device-mapper-persistent-data和lvm2由需要 devicemapper存储驱动程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><p>使用以下命令来设置稳定的存储库。即使您想从边缘或测试存储库安装构建，也总是需要稳定的存储 库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="启用edge源"><a href="#启用edge源" class="headerlink" title="启用edge源"></a>启用edge源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --enable docker-ce-edge      # 启用</span><br><span class="line">yum-config-manager --disable docker-ce-edge     # 禁用</span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install docker-ce</span><br></pre></td></tr></table></figure><p>注意：安装docker时，可能会用到centos6的默认yum源</p><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IaaS, PaaS, SaaS的区别</title>
      <link href="/2018/07/21/IaaS-PaaS-SaaS/"/>
      <url>/2018/07/21/IaaS-PaaS-SaaS/</url>
      <content type="html"><![CDATA[<h3 id="IaaS-PaaS-SaaS简介"><a href="#IaaS-PaaS-SaaS简介" class="headerlink" title="IaaS, PaaS, SaaS简介"></a>IaaS, PaaS, SaaS简介</h3><p>越来越多的软件，开始采用云服务。</p><p>云服务只是一个统称，可以分成三大类。</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-1.jpg" title="云服务分类"></center><ul><li>IaaS：基础设施服务，Infrastructure-as-a-service</li><li>Paas：平台服务，Platform-as-a-service</li><li>SaaS：软件服务，Software-as-a-service</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>IBM的软件架构师Albert Barron曾经使用披萨作为比喻，解释这个问题。David Ng进一步引申，让它变得更准确易懂。</p><p>假设想你是一个餐饮业者，打算做披萨生意。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-2.jpg" title="披萨"></center><p>你可以从头到尾，自己生产披萨，但是这样比较麻烦，需要准备的东西很多，因此你决定外包一部分工作，采用他人的服务。你有三个方案。</p><h4 id="方案一：IaaS"><a href="#方案一：IaaS" class="headerlink" title="方案一：IaaS"></a>方案一：IaaS</h4><p>他人提供厨房、炉子、煤气，你是用这些基础设施，来烤你的披萨。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-3.jpg" title="方案一"></center><h4 id="方案二：PaaS"><a href="#方案二：PaaS" class="headerlink" title="方案二：PaaS"></a>方案二：PaaS</h4><p>除了基础设施，他人还提供披萨饼皮。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-4.jpg" title="方案二"></center><p>你只要把自己的配料洒在饼皮上，让他帮你烤出来就行了。也就是说，你要做的就是设计披萨的味道（海鲜披萨或者鸡肉披萨），他人提供平台服务，让你把自己的设计实现。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-5.jpg" title="方案二"></center><h4 id="方案三：SaaS"><a href="#方案三：SaaS" class="headerlink" title="方案三：SaaS"></a>方案三：SaaS</h4><p>他人直接做好了披萨，不用你的介入，到手的就是一个成品。你要做的就是把它卖出去，最多再包装一下，印上你自己的Logo。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-6.jpg" title="方案三"></center><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面三种方案，可以总结成下面这张图。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-7.png" title="云平台"></center><p>从左到右，自己承担的工作量（上面蓝色部分）越来越少，IaaS &gt; PaaS &gt; SaaS。</p><p>对应软件开发，则是下面这张图。</p><center><img src="https://houhaiyun.github.io/img/images/IaaS-PaaS-SaaS-8.jpg" title="云平台"></center><p><strong>SaaS是软件的开发、管理、部署都交给第三方，不需要关心技术问题，可以拿来即用。</strong> 普通用户接触到的互联网服务，几乎都是SaaS，下面是一些例子。</p><ul><li>客户管理服务 Salesforce</li><li>团队协同服务 Google Apps</li><li>储存服务 Box</li><li>储存服务 Dropbox</li><li>社交服务 Facebook / Twitter / Instagram</li></ul><p><strong>PaaS提供软件部署平台（runtime），抽象掉了硬件和操作系统的细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。</strong> 下面这些都属于PssS。</p><ul><li>Heroku</li><li>Google App Engine</li><li>OpenShift</li></ul><p><strong>IaaS是云服务的最底层，主要提供一些基础资源。</strong> 它与PaaS的区别是，用户需要自己控制底层，实现基础设施的使用逻辑。下面这些都属于IaaS。</p><ul><li>Amazon EC2</li><li>Digital Ocean</li><li>RackSpace Cloud</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>本文转自：<a href="http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html" target="_blank" rel="noopener">阮一峰的网络日志：IaaS，PaaS，SaaS 的区别</a></p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> IaaS, PaaS, SaaS的区别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络带宽监控工具 iftop</title>
      <link href="/2018/07/09/Linux-iftop/"/>
      <url>/2018/07/09/Linux-iftop/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>iftop是Linux下的流量监控工具，可以用来观察实时的网络连接和网络流量情况。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install -y epel-release       # 安装epel源</span><br><span class="line">[root@centos7 ~]# yum install -y iftop</span><br></pre></td></tr></table></figure><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>直接执行iftop命令会有如下输出，下面我们来解释一下：</p><center><img src="https://houhaiyun.github.io/img/images/iftop-1.png" title="输出"></center><p><strong>iftop的输出从整体上可以分为三大部分：</strong></p><p><strong>第一部分</strong>。是iftop输出中最上上面的一行，此行信息是流量刻度，用于显示网卡带宽流量。</p><p><strong>第二部分</strong>。是iftop输出中最大的一个部分，此部分有分为左、中、右三列，左列和中列记录哪些IP或主机正在和本机的网络进行连接。其中，中列的“=&gt;”代表发送数据，“&lt;=”代表接收数据，通过这个指示箭头可以很清晰地知道两个IP之间的通信情况。最右列又分为三小列，这些实时参数分别表示外部IP连接到本机2秒内、10秒内和40秒内的平均流量值。另外，这个部分还有一个流量图形条，流量图形条是对流量大小的动态展示，以第一部分中的流量刻度为基准。通过这个流量图形条可以很方便地看出哪个IP的流量最大，进而迅速定位网络中可能出现的流量问题。</p><p><strong>第三部分</strong>位于iftop输出的最下面，可以分为三行，其中，“TX”表示发送数据，“RX”表示接收数据，“TOTAL”表示发送和接收全部流量。与这三行对应的有三列，其中“cum”列表示从运行iftop到目前的发送、接收和总数据流量。“peak”列表示发送、接收以及总的流量峰值。“rates”列表示过去2s、10s、40s的平均流量值。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><code>-i</code>：指定需要监测的网卡<code>iftop –i em1</code></li><li><code>-n</code>：将输出的主机信息都通过IP显示，不进行DNS反向解析<code>iftop -n</code></li><li><code>-B</code>：将输出以bytes为单位显示网卡流量，默认是<code>bitsiftop –B</code></li><li><code>-p</code>：以混杂模式运行iftop，此时iftop可以作为网络嗅探器使用<code>iftop –p</code></li><li><code>-N</code>：只显示连接端口号，不显示端口对应的服务名称<code>iftop –N</code></li><li><code>-P</code>：显示主机以及端口信息，这个参数非常有用<code>iftop –P</code></li><li><code>-F</code>：显示特定网段的网卡进出流量<code>iftop –F 192.168.12.0/24</code></li><li><code>-m</code>：设置iftop输出界面中最上面的流量刻度最大值，流量刻度分五个大段显示<code>iftop –m</code></li></ul><h4 id="交互式参数"><a href="#交互式参数" class="headerlink" title="交互式参数"></a>交互式参数</h4><h5 id="1-主机显示"><a href="#1-主机显示" class="headerlink" title="1. 主机显示"></a>1. 主机显示</h5><ul><li><code>n</code>: 切换是否解析主机名，你可以选择显示域名还是 IP 地址；</li><li><code>s/d</code>: 切换是否显示源主机或者目的主机；</li><li><code>t</code>: 切换主机接收和发送显示的模式：两行显示、一行显示、只显示发送流量、只显示发送流量；</li></ul><h5 id="2-端口显示"><a href="#2-端口显示" class="headerlink" title="2. 端口显示"></a>2. 端口显示</h5><ul><li><code>N</code>: 切换显示服务名称还是端口号，例如 ssh 或者 22；</li><li><code>S/D</code>：切换是否显示源主机端口或者目的主机端口；</li><li><code>p</code>：切换是否显示端口号；</li></ul><h5 id="3-排序显示"><a href="#3-排序显示" class="headerlink" title="3. 排序显示"></a>3. 排序显示</h5><ul><li><code>1/2/3</code>：根据最近 2 秒、10 秒、40 秒的平均网络流量排序；</li><li><code>&lt;</code>：根据源主机地址排序；</li><li><code>&gt;</code>：根据目的主机地址排序；</li><li><code>o</code>：固定显示当前连接，用来观察当前连接的流量情况，避免刷新后连接顺序变化；</li></ul><h5 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h5><ul><li><code>P</code>：暂停刷新；</li><li><code>h/?</code>：切换显示帮助；</li><li><code>b</code>：切换是否显示 bar graph；</li><li><code>B</code>：切换 bar graph 显示为最近 2 秒、10 秒、40 秒的平均网络流量；</li><li><code>T</code>: 切换显示每个连接的累计总流量，类似前面提到的 cumm，不过是针对单个连接的；</li><li><code>j/k</code>：垂直滚动显示连接；</li><li><code>q</code>: 退出；</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://kodango.com/using-iftop-to-monitor-network" target="_blank" rel="noopener">团子的小窝： Linux 下的流量监控工具</a></p><p><a href="http://blog.51cto.com/wwdhks/1563829" target="_blank" rel="noopener">51CTO博客：iftop输出详解和命令详解</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 网络带宽监控工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络监控 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>磁盘io监控工具 iotop</title>
      <link href="/2018/07/06/Linux-iotop/"/>
      <url>/2018/07/06/Linux-iotop/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>iotop – simple top-like I/O monitor</strong></p><p>iotop是一个用来监视磁盘I/O使用状况的 top 类工具，可监测到哪一个程序使用的磁盘IO的信息</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y iotop</span><br></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="非交互式"><a href="#非交互式" class="headerlink" title="非交互式"></a>非交互式</h4><ul><li>-o：只显示有 io 操作的进程</li><li>-b：批量显示，无交互，主要用作记录到文件</li><li>-n：显示多少次，主要用于非交互模式</li><li>-d：间隔多少秒进行刷新</li><li>-p PID：监控的进程的PID</li><li>-u USER：监控的进程用户</li></ul><h4 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h4><ul><li>左右箭头：改变排序方式，默认是按 IO 排序</li><li>r：改变排序顺序</li><li>o：只显示有IO输出的进程</li><li>p：进程/线程的显示方式的切换</li><li>a：显示累积使用量</li><li>q：退出</li></ul><h3 id="iotop执行"><a href="#iotop执行" class="headerlink" title="iotop执行"></a>iotop执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Total DISK READ :0.00 B/s | Total DISK WRITE :       0.00 B/s</span><br><span class="line">Actual DISK READ:0.00 B/s | Actual DISK WRITE:       0.00 B/s</span><br><span class="line">   TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND                                                                                                                                   </span><br><span class="line">    26 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.17 % [kworker/0:1]</span><br><span class="line">     1 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % systemd --switched-root --system --deserialize 21</span><br><span class="line">     2 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kthreadd]</span><br><span class="line">     3 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/0]</span><br><span class="line">   516 be/4 dbus        0.00 B/s    0.00 B/s  0.00 %  0.00 % dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</span><br><span class="line">     5 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kworker/0:0H]</span><br><span class="line">     6 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kworker/u256:0]</span><br><span class="line">     7 rt/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [migration/0]</span><br><span class="line">     8 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [rcu_bh]</span><br><span class="line">     9 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [rcu_sched]</span><br><span class="line">    10 rt/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [watchdog/0]</span><br><span class="line">    11 rt/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [watchdog/1]</span><br><span class="line">    12 rt/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [migration/1]</span><br><span class="line">    13 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/1]</span><br><span class="line">    14 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kworker/1:0]</span><br><span class="line">   528 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % crond -n</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://man.linuxde.net/iotop" target="_blank" rel="noopener">Linux 命令大全：iotop命令</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 磁盘io监控工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘监控 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jenkins</title>
      <link href="/2018/07/05/Jenkins/"/>
      <url>/2018/07/05/Jenkins/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Jenkins官网：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a></p><p>Jenkins 是一个可扩展的持续集成引擎。</p><p><strong>主要用于：</strong></p><ul><li>监控、自动地构建、测试软件项目</li><li>监控一些定时执行的任务</li></ul><a id="more"></a><p><strong>Jenkins拥有的特性包括</strong></p><ul><li>易于安装：只要把 jenkins.war 部署到 servlet 容器，不需要数据库支持</li><li>易于配置：所有配置都是通过其提供的 web 界面实现</li><li>集成RSS/E-mail：通过 RSS 发布构建结果或当构建完成时通过 e-mail 通知</li><li>生成 JUnit/TestNG测试报告</li><li>分布式构建支持，Jenkins 能够让多台计算机一起构建/测试</li><li>插件支持：支持扩展插件，你可以开发适合自己团队使用的工具</li></ul><h3 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h3><p><strong>环境：</strong></p><table><thead><tr><th style="text-align:center"><strong>服务器</strong></th><th style="text-align:center"><strong>IP</strong></th><th style="text-align:center"><strong>主机名</strong></th><th style="text-align:center"><strong>系统</strong></th></tr></thead><tbody><tr><td style="text-align:center">Jenkins</td><td style="text-align:center">192.168.8.12</td><td style="text-align:center">Jenkins.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr></tbody></table><h4 id="下载-Jenkins-2-121"><a href="#下载-Jenkins-2-121" class="headerlink" title="下载 Jenkins-2.121"></a>下载 Jenkins-2.121</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.121.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# yum install -y java-1.8.0-openjdk-devel       # 安装 JDK</span><br><span class="line">[root@jenkins ~]# rpm -ivh jenkins-2.121.1-1.1.noarch.rpm</span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# rpm -ql jenkins       # 查看jenkins安装完成后生成的文件</span><br><span class="line">/etc/init.d/jenkins</span><br><span class="line">/etc/logrotate.d/jenkins</span><br><span class="line">/etc/sysconfig/jenkins</span><br><span class="line">/usr/lib/jenkins</span><br><span class="line">/usr/lib/jenkins/jenkins.war</span><br><span class="line">/usr/sbin/rcjenkins</span><br><span class="line">/var/cache/jenkins</span><br><span class="line">/var/lib/jenkins</span><br><span class="line">/var/log/jenkins</span><br></pre></td></tr></table></figure><h4 id="启动jenkins"><a href="#启动jenkins" class="headerlink" title="启动jenkins"></a>启动jenkins</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# systemctl start jenkins.service</span><br><span class="line">[root@jenkins ~]# ss -tnlp | grep java      # 端口已经监听</span><br><span class="line">LISTEN     0      50          :::8080                    :::*                   users:((&quot;java&quot;,pid=2483,fd=162))</span><br></pre></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><center><img src="https://houhaiyun.github.io/img/images/Jenkins-3.png" title="访问测试"></center><p><strong>查看密码并粘贴</strong></p><center><img src="https://houhaiyun.github.io/img/images/Jenkins-4.png" title="填入密码"></center><p><strong>自定义插件安装</strong></p><center><img src="https://houhaiyun.github.io/img/images/Jenkins-5.gif" title="自定义插件安装"></center><p><strong>静静地等待插件安装完成，完成后创建管理员</strong></p><center><img src="https://houhaiyun.github.io/img/images/Jenkins-6.png" title="创建管理员"></center><p><strong>配置URL，此处我们就是默认就可以，大家可以根据需求来自定义</strong></p><center><img src="https://houhaiyun.github.io/img/images/Jenkins-7.png" title="设置URL"></center><center><img src="https://houhaiyun.github.io/img/images/Jenkins-8.gif" title="随便点点"></center><h3 id="Jenkins使用"><a href="#Jenkins使用" class="headerlink" title="Jenkins使用"></a>Jenkins使用</h3><p>关于Jenkins的使用大家可以参考：</p><p><a href="https://jenkins.io/doc/" target="_blank" rel="noopener">官方文档：https://jenkins.io/doc/</a></p><p><a href="https://www.w3cschool.cn/jenkins/" target="_blank" rel="noopener">W3Cschool Jenkins文档：https://www.w3cschool.cn/jenkins/</a></p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.cnblogs.com/zz0412/p/jenkins01.html" target="_blank" rel="noopener">博客园：Jenkins 是什么？</a></p><p><a href="https://jenkins.io/doc/" target="_blank" rel="noopener">官方文档：https://jenkins.io/doc/</a></p>]]></content>
      
      <categories>
          
          <category> 持续集成 </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>持续集成是什么?</title>
      <link href="/2018/07/04/CI/"/>
      <url>/2018/07/04/CI/</url>
      <content type="html"><![CDATA[<p>互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是持续集成（Continuous integration，简称CI）。</p><p>本文简要介绍持续集成的概念和做法。</p><center><img src="https://houhaiyun.github.io/img/images/Jenkins-1.png" title="持续集成"></center><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>持续集成指的是，频繁地（一天多次）将代码集成到主干。</strong></p><p>它的好处主要有两个。</p><ol><li><strong>快速发现错误。</strong>每天完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</li><li><strong>防止分支大幅偏离主干。</strong>如果不是经常集成，主干又在不断更新，会导致以后集成的难度太大，甚至难以集成。</li></ol><p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。</strong>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>Martin Fowler说过，“持续集成并不能消除Bug，而是让它们非常容易发现和改正。”</p><p>与持续集成相关的，还有两个概念，分别是持续交付和持续部署。</p><h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><p><strong>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。</p><p>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p><h3 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h3><p><strong>持续部署（Continuous deployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</strong></p><p>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。它与持续交付的区别，可以参考下图：</p><center><img src="https://houhaiyun.github.io/img/images/Jenkins-2.jpg" title="持续部署和持续交付的区别"></center><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p><h4 id="测试（第一轮）"><a href="#测试（第一轮）" class="headerlink" title="测试（第一轮）"></a>测试（第一轮）</h4><p>代码仓库对 commit 操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><p>测试有好几种。</p><ul><li>单元测试：针对函数或模块的测试</li><li>集成测试：针对整体产品的某个功能的测试，又称功能测试</li><li>端对端测试：从用户界面直达数据的全链路测试</li></ul><p>第一轮至少要跑单元测试。</p><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>通过第一轮测试，代码就可以合并进主干了，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><p>常用的构建工具如下：</p><ul><li><a href="http://jenkins-ci.org/" target="_blank" rel="noopener">Jenkins</a></li><li><a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis</a></li><li><a href="https://www.codeship.io/" target="_blank" rel="noopener">Codeship</a></li><li><a href="http://stridercd.com/" target="_blank" rel="noopener">Strider</a></li></ul><p>Jenkins 和 Strider 是开源软件，Travis 和 Codeship 对于开源项目可以免费使用。它们都会将构建和测试，再一次运行中执行完成。</p><h4 id="测试（第二轮）"><a href="#测试（第二轮）" class="headerlink" title="测试（第二轮）"></a>测试（第二轮）</h4><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><p>第二轮是全面测试，单元测试和集成测试都会跑，有条件的话，也要做端对端测试。所有测试以自动化为主，少数无法自动化的测试用例，就要人工跑。</p><p>需要强调的是，新版本的每一个更新点都必须测试到。如果测试的覆盖率不高，进入后面的部署阶段后，很可能会出现严重的问题。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>通过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar filename.tar *）存档，发到生产服务器。</p><p>生产服务器将打包文件，解包成本地的一个目录，再将运行路径的符号链接（symlink）指向这个目录，然后重新启动应用。这方面的部署工具有<a href="http://www.ansible.com/" target="_blank" rel="noopener">Ansible</a>，<a href="https://www.chef.io/chef/" target="_blank" rel="noopener">Chef</a>，<a href="https://puppetlabs.com/" target="_blank" rel="noopener">Puppet</a>等。</p><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>本文转自：<a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">阮一峰的网络日志：持续集成是什么？</a></p>]]></content>
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>中文技术文档的写作规范</title>
      <link href="/2018/07/03/document-style-guide/"/>
      <url>/2018/07/03/document-style-guide/</url>
      <content type="html"><![CDATA[<p>中文技术文档的写作规范。</p><p><strong>本规范转自 Ruan YiFeng ， GitHub 地址：<a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener">https://github.com/ruanyf/document-style-guide</a></strong></p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/title.md" target="_blank" rel="noopener">标题</a></li><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/text.md" target="_blank" rel="noopener">文本</a></li><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/paragraph.md" target="_blank" rel="noopener">段落</a></li><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/number.md" target="_blank" rel="noopener">数值</a></li><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/marks.md" target="_blank" rel="noopener">标点符号</a></li><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/structure.md" target="_blank" rel="noopener">文档体系</a></li><li><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/reference.md" target="_blank" rel="noopener">参考链接</a></li></ol>]]></content>
      
      <categories>
          
          <category> 相关规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 相关规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ELK 6.3 部署</title>
      <link href="/2018/07/03/ELK-Deploy/"/>
      <url>/2018/07/03/ELK-Deploy/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><table><thead><tr><th style="text-align:center"><strong>服务器</strong></th><th style="text-align:center"><strong>IP</strong></th><th style="text-align:center"><strong>主机名</strong></th><th style="text-align:center"><strong>系统</strong></th></tr></thead><tbody><tr><td style="text-align:center">Elastic search</td><td style="text-align:center">192.168.8.12</td><td style="text-align:center">ES1.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">Elastic search</td><td style="text-align:center">192.168.8.13</td><td style="text-align:center">ES2.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">Elastic search</td><td style="text-align:center">192.168.814</td><td style="text-align:center">ES3.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">Logstash</td><td style="text-align:center">192.168.8.15</td><td style="text-align:center">Logstash.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">Kibana</td><td style="text-align:center">192.168.8.16</td><td style="text-align:center">Kibana.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">nginx应用服务器</td><td style="text-align:center">192.168.8.17</td><td style="text-align:center">app.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr></tbody></table><a id="more"></a><h4 id="软件包版本"><a href="#软件包版本" class="headerlink" title="软件包版本"></a>软件包版本</h4><table><thead><tr><th style="text-align:center">Elasticsearch</th><th style="text-align:center"><a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.0.tar.gz" target="_blank" rel="noopener">官网elasticsearch-6.3.0.tar</a></th><th style="text-align:center"><a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">elasticsearch官方文档</a></th></tr></thead><tbody><tr><td style="text-align:center">Kibana</td><td style="text-align:center"><a href="https://artifacts.elastic.co/downloads/kibana/kibana-6.3.0-linux-x86_64.tar.gz" target="_blank" rel="noopener">官网kibana-6.3.0下载 linux64位</a></td><td style="text-align:center"><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">kibana官方文档</a></td></tr><tr><td style="text-align:center">Logstash</td><td style="text-align:center"><a href="https://artifacts.elastic.co/downloads/logstash/logstash-6.3.0.tar.gz" target="_blank" rel="noopener">官网logstash-6.3.0.tar</a></td><td style="text-align:center"><a href="https://www.elastic.co/cn/products/logstash" target="_blank" rel="noopener">logstash官方文档</a></td></tr><tr><td style="text-align:center">Filebeat</td><td style="text-align:center"><a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.0-linux-x86_64.tar.gz" target="_blank" rel="noopener">官网filebeat-6.3.0 linux64位</a></td><td style="text-align:center"><a href="https://www.elastic.co/cn/products/beats" target="_blank" rel="noopener">beats官方文档</a></td></tr></tbody></table><h4 id="配置时间同步"><a href="#配置时间同步" class="headerlink" title="配置时间同步"></a>配置时间同步</h4><p>所有 server 都需同步时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate cn.ntp.org.cn</span><br></pre></td></tr></table></figure><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ES集群：</span><br><span class="line">hostnamectl set-hostname ES1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">hostnamectl set-hostname ES2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">hostnamectl set-hostname ES3.haiyun.com &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Logstash：</span><br><span class="line">hostnamectl set-hostname Logstash.haiyun.com &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Kibana：</span><br><span class="line">hostnamectl set-hostname Kibana.haiyun.com &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx应用服务器：</span><br><span class="line">hostnamectl set-hostname app.haiyun.com &amp;&amp; exec bash</span><br></pre></td></tr></table></figure><h4 id="写入-hosts-文件"><a href="#写入-hosts-文件" class="headerlink" title="写入 hosts 文件"></a>写入 hosts 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# vim /etc/hosts    # 将此hosts 复制到每一台 server </span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.12es1.haiyun.comes1</span><br><span class="line">192.168.8.13es2.haiyun.com  es2</span><br><span class="line">192.168.8.14es3.haiyun.com  es3</span><br><span class="line">192.168.8.15Logstash.haiyun.com </span><br><span class="line">192.168.8.16Kibana.haiyun.com  </span><br><span class="line">192.168.8.17app.haiyun.com</span><br></pre></td></tr></table></figure><h3 id="elasticsearch-集群部署"><a href="#elasticsearch-集群部署" class="headerlink" title="elasticsearch 集群部署"></a>elasticsearch 集群部署</h3><h4 id="准备-JDK-环境"><a href="#准备-JDK-环境" class="headerlink" title="准备 JDK 环境"></a>准备 JDK 环境</h4><p>ES 集群内的所有Server都需要进行相同的安装，仅以一台server 作为示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# yum install -y java-1.8.0-openjdk-devel        # 我们安装1.8的devel包，这条命令会安装java-1.8.0、java-1.8.0-poenjdk-devel、java-1.8.0-openjdk-headless以及其他相关依赖</span><br></pre></td></tr></table></figure><h4 id="安装-elasticsearch-6-3"><a href="#安装-elasticsearch-6-3" class="headerlink" title="安装 elasticsearch 6.3"></a>安装 elasticsearch 6.3</h4><p>ES 集群内的所有Server都需要进行相同的安装，仅以一台server 作为示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]#  rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">[root@es1 ~]# vim /etc/yum.repos.d/elastic.repo     # 配置yum源</span><br><span class="line">[elasticsearch-6.x]</span><br><span class="line">name=Elasticsearch repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"></span><br><span class="line">[root@es1 ~]# yum install -y elasticsearch</span><br></pre></td></tr></table></figure><blockquote><p>注意：官方rpm安装 elasticsearch 6.3 文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/rpm.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.3/rpm.html</a></p></blockquote><h4 id="修改-elasticsearch-集群配置文件"><a href="#修改-elasticsearch-集群配置文件" class="headerlink" title="修改 elasticsearch 集群配置文件"></a>修改 elasticsearch 集群配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# grep -v &quot;^#&quot; /etc/elasticsearch/elasticsearch.yml     # 修改如下配置</span><br><span class="line">cluster.name: elasticsearch     # 集群名称，同一集群内 node 集群名称应保持一致</span><br><span class="line">node.name: es1      # 当前 node 名称，建议和主机名保持一致</span><br><span class="line">node.master: true   # 当前节点是否为主节点，true代表是</span><br><span class="line">path.data: /var/lib/elasticsearch   # 数据存放路径</span><br><span class="line">path.logs: /var/log/elasticsearch   # 日志路径</span><br><span class="line">network.host: 0.0.0.0   # 网络</span><br><span class="line">http.port: 9200         # 监听http端口</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;es1&quot;, &quot;es2&quot;,&quot;es3&quot;]      # 配置自动发现</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@es1 ~]# systemctl start elasticsearch     # 启动服务</span><br><span class="line">[root@es1 ~]# systemctl status elasticsearch    # 查看 elasticsearch服务状态，已经正常启动</span><br><span class="line">● elasticsearch.service - Elasticsearch</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-07-02 11:19:43 CST; 3s ago</span><br><span class="line">     Docs: http://www.elastic.co</span><br><span class="line"> Main PID: 2400 (java)</span><br><span class="line">   CGroup: /system.slice/elasticsearch.service</span><br><span class="line">           └─2400 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.e...</span><br><span class="line"></span><br><span class="line">Jul 02 11:19:43 es1.haiyun.com systemd[1]: Started Elasticsearch.</span><br><span class="line">Jul 02 11:19:43 es1.haiyun.com systemd[1]: Starting Elasticsearch...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@es1 ~]# ss -tnlpa | grep java     # 查看监听端口，9200和9300已经监听，注意：9300端口是集群通信用的，9200则是数据传输时用的</span><br><span class="line">LISTEN     0      128         :::9200                    :::*                   users:((&quot;java&quot;,pid=2718,fd=208))</span><br><span class="line">LISTEN     0      128         :::9300                    :::*                   users:((&quot;java&quot;,pid=2718,fd=194))</span><br></pre></td></tr></table></figure><p><strong>http访问测试：</strong></p><center><img src="https://houhaiyun.github.io/img/images/ELK-Deploy-1.png" title="访问测试"></center><h5 id="es2和es3配置文件"><a href="#es2和es3配置文件" class="headerlink" title="es2和es3配置文件"></a>es2和es3配置文件</h5><blockquote><p>建议：大家可以把es1的配置文件复制到es2和es3，然后修改主机名即可，记得要启动服务，并访问测试，认真一点还是好的，哈哈</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># es2配置文件</span><br><span class="line">[root@es2 ~]# grep -v &quot;^#&quot; /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: es2</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;es1&quot;, &quot;es2&quot;,&quot;es3&quot;] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># es3配置文件</span><br><span class="line">[root@es3 ~]# grep -v &quot;^#&quot; /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: es3</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;es1&quot;, &quot;es2&quot;,&quot;es3&quot;]</span><br></pre></td></tr></table></figure><h5 id="访问测试-es2-和-es3"><a href="#访问测试-es2-和-es3" class="headerlink" title="访问测试 es2 和 es3"></a>访问测试 es2 和 es3</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 服务启动完成后，可以进行测试了</span><br><span class="line">[root@es1 ~]# curl es2:9200     # 测试es2，OK</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;es2&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;ul2qy4nCQjKg3SFDDbhJFw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.3.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;rpm&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;424e937&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-06-11T23:38:03.357887Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.3.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@es1 ~]# curl es3:9200     # 测试es3，OK</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;es3&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;CsvzJ5p6TIKoO-lmnIr_Sw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.3.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;rpm&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;424e937&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-06-11T23:38:03.357887Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.3.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看-es-集群情况"><a href="#查看-es-集群情况" class="headerlink" title="查看 es 集群情况"></a>查看 es 集群情况</h5><p><strong>集群的健康检查：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# curl es1:9200/_cluster/health?pretty      </span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;status&quot; : &quot;green&quot;,       # green代表集群健康没有问题，如果为yellow  或者是 red 则代表集群出现问题</span><br><span class="line">  &quot;timed_out&quot; : false,      # 是否有超时</span><br><span class="line">  &quot;number_of_nodes&quot; : 3,    # 集群节点数量</span><br><span class="line">  &quot;number_of_data_nodes&quot; : 3,   # 集群 data 节点数量</span><br><span class="line">  &quot;active_primary_shards&quot; : 0,</span><br><span class="line">  &quot;active_shards&quot; : 0,</span><br><span class="line">  &quot;relocating_shards&quot; : 0,</span><br><span class="line">  &quot;initializing_shards&quot; : 0,</span><br><span class="line">  &quot;unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;delayed_unassigned_shards&quot; : 0,</span><br><span class="line">  &quot;number_of_pending_tasks&quot; : 0,</span><br><span class="line">  &quot;number_of_in_flight_fetch&quot; : 0,</span><br><span class="line">  &quot;task_max_waiting_in_queue_millis&quot; : 0,</span><br><span class="line">  &quot;active_shards_percent_as_number&quot; : 100.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看集群的详细信息：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# curl es2:9200/_cluster/state?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;compressed_size_in_bytes&quot; : 9405,</span><br><span class="line">  &quot;version&quot; : 28,</span><br><span class="line">  &quot;state_uuid&quot; : &quot;F-VRnuSNTk2TevwGPGIXhA&quot;,</span><br><span class="line">  &quot;master_node&quot; : &quot;pVvCmv4jTjuv66dxP0noHg&quot;,</span><br><span class="line">  &quot;blocks&quot; : &#123; &#125;,</span><br><span class="line">  &quot;nodes&quot; : &#123;</span><br><span class="line">    &quot;RLQFFZK_SCGOVrTYcmyJQQ&quot; : &#123;</span><br><span class="line">      &quot;name&quot; : &quot;es3&quot;,</span><br><span class="line">      &quot;ephemeral_id&quot; : &quot;sXzVDbmASu6UgntixeoKmA&quot;,</span><br><span class="line">      &quot;transport_address&quot; : &quot;192.168.8.14:9300&quot;,</span><br><span class="line">      &quot;attributes&quot; : &#123;</span><br><span class="line">        &quot;ml.machine_memory&quot; : &quot;1912107008&quot;,</span><br><span class="line">        &quot;ml.max_open_jobs&quot; : &quot;20&quot;,</span><br><span class="line">        &quot;xpack.installed&quot; : &quot;true&quot;,</span><br><span class="line">        &quot;ml.enabled&quot; : &quot;true&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;pVvCmv4jTjuv66dxP0noHg&quot; : &#123;</span><br><span class="line">      &quot;name&quot; : &quot;es1&quot;,</span><br><span class="line">      &quot;ephemeral_id&quot; : &quot;mvRJTck7TnOOHI9sdq-c8w&quot;,</span><br><span class="line">      &quot;transport_address&quot; : &quot;192.168.8.12:9300&quot;,</span><br><span class="line">      &quot;attributes&quot; : &#123;</span><br><span class="line">        &quot;ml.machine_memory&quot; : &quot;1912107008&quot;,</span><br><span class="line">        &quot;xpack.installed&quot; : &quot;true&quot;,</span><br><span class="line">        &quot;ml.max_open_jobs&quot; : &quot;20&quot;,</span><br><span class="line">        &quot;ml.enabled&quot; : &quot;true&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;UV4ehgYWTMqD3Tc2XoofQQ&quot; : &#123;</span><br><span class="line">      &quot;name&quot; : &quot;es2&quot;,</span><br><span class="line">      &quot;ephemeral_id&quot; : &quot;2jHD-i2oR8ayi6xYXQR79g&quot;,</span><br><span class="line">      &quot;transport_address&quot; : &quot;192.168.8.13:9300&quot;,</span><br><span class="line">      &quot;attributes&quot; : &#123;</span><br><span class="line">        &quot;ml.machine_memory&quot; : &quot;1912107008&quot;,</span><br><span class="line">        &quot;ml.max_open_jobs&quot; : &quot;20&quot;,</span><br><span class="line">        &quot;xpack.installed&quot; : &quot;true&quot;,</span><br><span class="line">        &quot;ml.enabled&quot; : &quot;true&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">内容太多已省略。。。</span><br></pre></td></tr></table></figure><h4 id="配置-elastic-search-开启自启动"><a href="#配置-elastic-search-开启自启动" class="headerlink" title="配置 elastic search 开启自启动"></a>配置 elastic search 开启自启动</h4><blockquote><p>仅以 es1 作为示例，其他 node 执行相同操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# systemctl enable elasticsearch </span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/elasticsearch.service to /usr/lib/systemd/system/elasticsearch.service.</span><br></pre></td></tr></table></figure><h4 id="head插件安装"><a href="#head插件安装" class="headerlink" title="head插件安装"></a>head插件安装</h4><p>直接查看文本是不是很不美观，下面我们安装 elasticsearch-head 插件解决这个问题。</p><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">head 插件 github 项目地址：https://github.com/mobz/elasticsearch-head</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 1. 安装 nodejs</span><br><span class="line">curl -sL -o /etc/yum.repos.d/khara-nodejs.repo https://copr.fedoraproject.org/coprs/khara/nodejs/repo/epel-7/khara-nodejs-epel-7.repo     </span><br><span class="line">yum install -y nodejs nodejs-npm      # 安装 nodejs</span><br><span class="line">[root@es2 ~]# yum -y update openssl # 升级 openssl，如果不升级安装 head 时会报错</span><br><span class="line">[root@es2 ~]# npm --version     # 查看 npm 版本号</span><br><span class="line">3.10.10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 安装 git </span><br><span class="line">[root@es2 ~]# yum install -y git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3. 克隆插件 elasticsearch-head</span><br><span class="line">[root@es2 ~]# git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"></span><br><span class="line"># 4. 安装 head</span><br><span class="line">[root@es2 ~]# cd elasticsearch-head/</span><br><span class="line">[root@es2 ~]# npm install </span><br><span class="line"></span><br><span class="line"># 5. 修改 elasticsearch 配置文件</span><br><span class="line">[root@es2 elasticsearch-head]# vim /etc/elasticsearch/elasticsearch.yml     # 增加如下两行</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">## 解释：</span><br><span class="line">## http.cors.enabled: true  代表允许跨站 http 请求(Corss-site HTTP request)</span><br><span class="line">## http.cors.allow-origin: &quot;*&quot;  表示允许宽展的请求为所有，这样是不安全的，因为在实验环境所以关系不大，如果在生产环境中千万不要这么搞</span><br><span class="line">## 关于 http cors 大家如果有不明白的，可以查看此链接：https://www.cnblogs.com/vinozly/p/5178118.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6. 修改 app.js  </span><br><span class="line">编辑 ./elasticsearch-head/_site/app.js，修改 head 连接 elasticsearch 的地址，将 localhosts 修改为 es 的 IP 地址</span><br><span class="line">修改前配置：</span><br><span class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://localhost:9200&quot;;</span><br><span class="line">修改后配置：</span><br><span class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://192.168.8.12:9200&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 7. 启动 head</span><br><span class="line">[root@es2 ~]# cd ./elasticsearch-head/ &amp;&amp; npm run start     # 注意：这样是在前台运行的，可以使用 nohup、&amp;、screen 等方法放到后台运行</span><br></pre></td></tr></table></figure><p>上图，测试，哈哈</p><center><img src="https://houhaiyun.github.io/img/images/ELK-Deploy-2.gif" title="访问测试"></center><h3 id="Logstash-部署"><a href="#Logstash-部署" class="headerlink" title="Logstash 部署"></a>Logstash 部署</h3><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure><h4 id="下载-Logstash6-3"><a href="#下载-Logstash6-3" class="headerlink" title="下载 Logstash6.3"></a>下载 Logstash6.3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.3.0.rpm</span><br></pre></td></tr></table></figure><h4 id="安装-logstash"><a href="#安装-logstash" class="headerlink" title="安装 logstash"></a>安装 logstash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ./logstash-6.3.0.rpm</span><br></pre></td></tr></table></figure><h4 id="数据测试"><a href="#数据测试" class="headerlink" title="数据测试"></a>数据测试</h4><h5 id="基本的输入输出"><a href="#基本的输入输出" class="headerlink" title="基本的输入输出"></a>基本的输入输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash logstash]# /usr/share/logstash/bin/logstash   -e &apos;input &#123; stdin&#123;&#125; &#125; output &#123; stdout&#123;&#125; &#125;&apos;</span><br><span class="line">        # 注意此处输入了空行，输出如下信息</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;logstash.haiyun.com&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2018-07-02T09:59:42.239Z,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">hello       # 输入hello，输出如下信息</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;logstash.haiyun.com&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2018-07-02T09:59:48.290Z,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;hello &quot;</span><br><span class="line">&#125;</span><br><span class="line">houhaiyun       # 输入 houhaiyun ，输出如下信息</span><br><span class="line">&#123;</span><br><span class="line">          &quot;host&quot; =&gt; &quot;logstash.haiyun.com&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2018-07-02T09:59:53.031Z,</span><br><span class="line">       &quot;message&quot; =&gt; &quot;houhaiyun&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="把内容写到-elasticsearch-中"><a href="#把内容写到-elasticsearch-中" class="headerlink" title="把内容写到 elasticsearch 中"></a>把内容写到 elasticsearch 中</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash logstash]# /usr/share/logstash/bin/logstash   -e &apos;input &#123; stdin&#123;&#125; &#125; output &#123; elasticsearch &#123; hosts =&gt; [&quot;192.168.8.12:9200&quot;]&#125; &#125;&apos;</span><br><span class="line"></span><br><span class="line">[root@logstash logstash]# /usr/share/logstash/bin/logstash   -e &apos;input &#123; stdin&#123;&#125; &#125; output &#123; elasticsearch &#123; hosts =&gt; [&quot;192.168.8.12:9200&quot;]&#125; &#125;&apos;</span><br><span class="line">。。。省略部分信息</span><br><span class="line">[INFO ] 2018-07-02 17:49:54.039 [Api Webserver] agent - Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;     # 输入以下测试数据</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">hello</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line">hahaha </span><br><span class="line">hehehe</span><br></pre></td></tr></table></figure><p>我们再次查看已经输入到 elasticsearch 集群中了，如下图：</p><center><img src="https://houhaiyun.github.io/img/images/ELK-Deploy-3.png" title="访问测试"></center><blockquote><p>注意：es1(就是 es 集群中的 master 节点)收集到日志后，会把一部分数据碎片分散到 salve 上(随机的一部分数据)，master 和 slave 又都会各自做副本，并把副本放到对方机器上，这样就保证了数据不会丢失。<br><strong>上图中的 master 把数据收集并分散完成后，大家注意所有的数据都是两份都是有备份的</strong></p></blockquote><h4 id="收集系统日志"><a href="#收集系统日志" class="headerlink" title="收集系统日志"></a>收集系统日志</h4><p>这次我们编写配置文件来收集系统日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash logstash]# vim /etc/logstash/conf.d/file.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">      path =&gt; &quot;/var/log/messages&quot;</span><br><span class="line">      type =&gt; &quot;system&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">       hosts =&gt; [&quot;es1:9200&quot;]</span><br><span class="line">       index =&gt; &quot;system-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动服务：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash logstash]# /usr/share/logstash/bin/logstash  -f /etc/logstash/conf.d/file.conf</span><br></pre></td></tr></table></figure><p>登录界面查看 elasticsearch web界面，查看本机的系统日志：</p><center><img src="https://houhaiyun.github.io/img/images/ELK-Deploy-4.gif" title="访问测试"></center><h4 id="收集-Nginx-日志"><a href="#收集-Nginx-日志" class="headerlink" title="收集 Nginx 日志"></a>收集 Nginx 日志</h4><p>如下为 nginx/1.12.2 的默认日志格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">access_log  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure><p>logstash 配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash ~]# vim /etc/logstash/conf.d/nginx.conf</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; &quot;/var/log/nginx/*access*.log&quot;</span><br><span class="line">        start_position =&gt; beginning</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125; %&#123;QS:x_forwarded_for&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">    geoip &#123;</span><br><span class="line">        source =&gt; &quot;clientip&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123; </span><br><span class="line">    hosts =&gt; &quot;es1:9200&quot; </span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动服务：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/logstash/bin/logstash  -f /etc/logstash/conf.d/nginx.conf</span><br></pre></td></tr></table></figure><p>登录界面查看 elasticsearch web界面，查看 Nginx 日志：</p><center><img src="https://houhaiyun.github.io/img/images/ELK-Deploy-5.gif" title="访问测试"></center><h3 id="Kibana-部署"><a href="#Kibana-部署" class="headerlink" title="Kibana 部署"></a>Kibana 部署</h3><h4 id="下载Kibana-6-3"><a href="#下载Kibana-6-3" class="headerlink" title="下载Kibana 6.3"></a>下载Kibana 6.3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.3.0-x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kibana ~]# yum install -y ./kibana-6.3.0-x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kibana ~]# grep  &quot;^[a-z]&quot; /etc/kibana/kibana.yml </span><br><span class="line">server.port: 5601           # 端口</span><br><span class="line">server.host: &quot;0.0.0.0&quot;         # 配置主机ip</span><br><span class="line">elasticsearch.url: &quot;http://es1:9200&quot;    # 配置 es 集群 url</span><br></pre></td></tr></table></figure><h4 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h4><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kibana ~]# /usr/share/kibana/bin/kibana       # 如此启动是在前台运行的，可以使用 nohup、&amp;、screen 等方法放到后台运行</span><br><span class="line"></span><br><span class="line">[root@kibana ~]# ss -tnlp | grep 5601       # 端口已经监听</span><br><span class="line">LISTEN     0      128          *:5601                     *:*                   users:((&quot;node&quot;,pid=12418,fd=12))</span><br></pre></td></tr></table></figure><p>测试访问，看图~~~</p><center><img src="https://houhaiyun.github.io/img/images/ELK-Deploy-6.gif" title="访问测试"></center><p><strong>关于更多的 Kibana 使用请参见官网使用手册：</strong></p><ul><li>中文：<a href="https://www.elastic.co/guide/cn/kibana/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/kibana/current/index.html</a></li><li>英文：<a href="https://www.elastic.co/guide/en/kibana/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/current/index.html</a></li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><ul><li><a href="https://www.cnblogs.com/kevingrace/p/5919021.html" target="_blank" rel="noopener">博客园：散尽浮华</a></li><li><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">elastic官方文档</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">Elasticsearch官方文档</a></li><li><a href="https://www.elastic.co/guide/en/logstash/current/index.html" target="_blank" rel="noopener">Logstash官方文档</a></li></ul>]]></content>
      
      <categories>
          
          <category> ELK </category>
          
          <category> ELK部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开源日志实时分析平台ELK</title>
      <link href="/2018/06/28/ELK/"/>
      <url>/2018/06/28/ELK/</url>
      <content type="html"><![CDATA[<h3 id="为什么要用到-ELK？"><a href="#为什么要用到-ELK？" class="headerlink" title="为什么要用到 ELK？"></a>为什么要用到 ELK？</h3><p>一般我们需要进行日志分析场景：直接在日志文件中 grep、awk 就可以获得自己想要的信息。但在规模较大的场景中，此方法效率低下，面临问题包括日志量太大如何归档、文本搜索太慢怎么办、如何多维度查询。需要集中化的日志管理，所有服务器上的日志收集汇总。常见解决思路是建立集中式日志收集系统，将所有节点上的日志统一收集，管理，访问。</p><p>一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。</p><a id="more"></a><p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p><ul><li>收集：能够采集多种来源的日志数据</li><li>传输：能够稳定的把日志数据传输到中央系统</li><li>存储：如何存储日志数据</li><li>分析：可以支持 UI 分析</li><li>警告：能够提供错误报告，监控机制</li></ul><h3 id="ELK-简介"><a href="#ELK-简介" class="headerlink" title="ELK 简介"></a>ELK 简介</h3><p>ELK 是三个开源软件的缩写，分别表示：Elasticsearch、Logstash、Kibana，它们都是开源软件。新增了一个 FileBeat，它是一个轻量级的日志收集工具（Agent），Filebeat 占用资源少，适合于在各个服务器上搜索日志后传输给 Logstash，官方也推荐此工具。</p><p>Elasticsearch 是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式、零配置、自动发现、索引自动分片、索引副本机制、restful 风格接口、多数据源、自动搜索负载等。</p><p>Logstash 主要是用来日志的收集、分析、过滤日志的工具，支持大量的数据获取和输出方式。一般工作方式为 C/S 架构，Client 端安装在需要收集日志的主机上，Server 端负责将收到的各节点日志进行过滤、修改等操作后发往 Elasticsearch。</p><p>Kibana 也是一个开源和免费的工具，Kibana 可以为 Logstash 和 ElasticSearch 提供友好的日志分析 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p><p>Filebeat 隶属于 Beats。目前 Beats 包含六种工具：</p><ol><li>Filebeat（日志文件）</li><li>Metricbeat（指标）</li><li>Packetbeat（网络数据）</li><li>Winlogbeat（Windows 事件日志）</li><li>Auditbeat（审计数据）</li><li>Heartbeat（运行时间监控）</li></ol><h3 id="ELK-架构图"><a href="#ELK-架构图" class="headerlink" title="ELK 架构图"></a>ELK 架构图</h3><h4 id="架构图一"><a href="#架构图一" class="headerlink" title="架构图一"></a>架构图一</h4><center><img src="https://houhaiyun.github.io/img/images/ELK-1.png" title="ELK架构一"></center><p>这是最简单的一种 ELK 架构方式。优点是搭建简单，易于上手。缺点是 Logstash 耗资源较大，运行占用 CPU 和 内存高。另外没有消息队列缓存，存在数据丢失隐患。</p><p>此架构由 Logstash 分布于各个节点上搜集日志、数据，并经过分析、过滤后发送给 Elasticsearch 进行存储。Elasticsearch 将数据以分片的形式压缩存储并提供多种 API 供用户查询，操作。用户可以更直观的通过配置 kibana Web 方便的对日志查询，并根据数据生成报表。</p><h4 id="架构图二"><a href="#架构图二" class="headerlink" title="架构图二"></a>架构图二</h4><center><img src="https://houhaiyun.github.io/img/images/ELK-2.png" title="ELK架构二"></center><p>此种架构引入了消息队列机制，位于各个节点上的 Logstash Agent 先将数据/日志传递给 Kafka（或者Redis），并将消息队列中消息或数据间接传递给 Logstash，Logstash 过滤、分析后将数据传递给 Elasticsearch 存储。最后由 Kibana 将日志和数据呈现给用户。因为引入了 Kafka（或者Redis），所以即使远端 Logstash server 因故障停止运行，数据将会先被存储下来，从而避免数据丢失。</p><h4 id="架构图三"><a href="#架构图三" class="headerlink" title="架构图三"></a>架构图三</h4><center><img src="https://houhaiyun.github.io/img/images/ELK-3.png" title="ELK架构三"></center><p>此种架构将收集端 Logstash 替换为 beats，更灵活，消耗资源更少，扩展性更强。同时可配置 Logstash 和 Elasticsearch 集群用于支持大集群系统的运维日志数据监控和查询。</p><h3 id="Filebeat-工作原理"><a href="#Filebeat-工作原理" class="headerlink" title="Filebeat 工作原理"></a>Filebeat 工作原理</h3><p>Filebeat 由两个主要组件组成：Prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。</p><center><img src="https://houhaiyun.github.io/img/images/ELK-4.png" title="Filebeat工作原理"></center><p><strong>Harvester（收割机）</strong>：负责读取单个文件内容。每个文件会启动一个 Harvester，每个 Harvester 会逐行读取各个文件，并将文件内容发送到指定输出中。Harvester 负责打开和关闭文件，意味在 Harvester 运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat 会继续读取此文件。所以在 Harvester 关闭之前，磁盘不会被释放。默认情况 filebeat 会褒词文件打开的状态，知道达到 <code>close inactive</code> （如果此选项开启，filebeat 会在指定时间内将不再更新的文件句柄关闭，时间从 harvester 读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的 harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由 scan_frequency 参数决定，默认10s。Harvester 使用内部时间戳来记录文件文件最后被收集的时间。例如：设置5m，则在 Harvester 读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄，默认5m）。</p><p><strong>Prospector（勘探者）</strong>：负责管理 Harvester 并找到所有读取源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: log</span><br><span class="line">  paths:</span><br><span class="line">    - /apps/logs/*/info.log</span><br></pre></td></tr></table></figure><p>Prospector 会找到 /app/log/* 目录下的所有 info.log 文件，并为每个文件启动一个 Harvester。<br>Prospector 会检查每个文件，看 Harvester 是否已经启动，是否需要启动，或者文件是否可以忽略。若 Harvester 关闭，只有在文件大小发生变化时 Prospector 才会检查，只能检测笨的文件。</p><p><strong>Filebeat 如何记录文件状态</strong>：</p><p>将文件状态记录在文件中（默认在 /var/lib/filebeat/registry）。此状态可以记住 Harvester 收集文件的偏移量。若连接不上输出设备，如 ES 等，filebeat 会记录发送前的最后一行，并在可以连接的时候继续发送。Filebeat 在运行的时候，Prospector 状态会被记录在内存中。Filebeat 重启的时候，利用 registry 记录的装填来进行重建，用来还原到重启之前的状态。每个 Prospector 会为每个找到的文件记录一个状态，对于每个文件，Filebeat 存储唯一标识符以检测文件是否先前被收集。</p><p>Filebeat 如何保证时间至少被输出一次：</p><p>Filebeat 之所以能保证事件至少被传到配置的输出一次，没有数据丢失，是因为 filebeat 将每个时间的传递状态保存在文件中。在未得到输出方确认时，filebeat 会一直尝试发送，直到得到回应。若 filebeat 在传输过程中被关闭，则不会再关闭之前确认的所有事件。任何在 filebeat 关闭之前为确认的时间，都会在 filebeat 重启之前的状态。每个 Prospector 会为每个找到的文件记录一个状态，对于每个文件，Filebeat 存储唯一标识符以检测文件是否先前被收集。</p><h3 id="Logstash-工作原理"><a href="#Logstash-工作原理" class="headerlink" title="Logstash 工作原理"></a>Logstash 工作原理</h3><p>Logstash 事件处理有三个阶段：inputs -&gt; fileters -&gt; outpus。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。</p><center><img src="https://houhaiyun.github.io/img/images/ELK-5.png" title="Logstash 工作原理"></center><h4 id="Input-输入数据到-Logstash"><a href="#Input-输入数据到-Logstash" class="headerlink" title="Input 输入数据到 Logstash"></a>Input 输入数据到 Logstash</h4><p>一些常用的输入为：</p><ul><li>file：从文件系统的文件中读取，类似于 tail -f 命令</li><li>syslog：在 514 端口上监听系统日志消息，并根据 RFC3164 标准进行解析</li><li>redis：从 redis service 中读取</li><li>beats：从 filebeat 中读取</li><li>Fileters：数据中间处理，对数据进行操作</li></ul><p>一些常用的过滤器为：</p><ul><li>grok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。<ul><li>官方提供的grok表达式：<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a></li><li>grok在线调试：<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="noopener">https://grokdebug.herokuapp.com/</a></li></ul></li><li>mutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。</li><li>drop：丢弃一部分events不进行处理。</li><li>clone：拷贝 event，这个过程中也可以添加或移除字段。</li><li>geoip：添加地理信息(为前台kibana图形化展示使用)</li><li>Outputs：outputs是logstash处理管道的最末端组件。一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。</li></ul><p>一些常见的Outputs为：</p><ul><li>elasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。</li><li>file：将event数据保存到文件中。</li><li>graphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。</li><li>Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。<ul><li>一些常见的 codes：<ul><li>json：使用json格式对数据进行编码/解码。</li><li>multiline：将汇多个事件中数据汇总为一个单一的行。比如：java异常信息和堆栈信息。</li></ul></li></ul></li></ul><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><strong>Filebeat：</strong></p><p><a href="https://www.elastic.co/cn/products/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/cn/products/beats/filebeat</a><br><a href="https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html</a></p><p><strong>Logstash：</strong><br><a href="https://www.elastic.co/cn/products/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/products/logstash</a><br><a href="https://www.elastic.co/guide/en/logstash/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/5.6/index.html</a></p><p><strong>Kibana:</strong></p><p><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/products/kibana</a></p><p><a href="https://www.elastic.co/guide/en/kibana/5.5/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/5.5/index.html</a></p><p><strong>Elasticsearch：</strong><br><a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html</a></p><p><strong>elasticsearch中文社区：</strong><br><a href="https://elasticsearch.cn/" target="_blank" rel="noopener">https://elasticsearch.cn/</a></p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>本文中大部分内容来自：<a href="https://www.cnblogs.com/aresxin/p/8035137.html" target="_blank" rel="noopener">博客园：ELK原理与介绍</a></p>]]></content>
      
      <categories>
          
          <category> ELK </category>
          
          <category> 开源日志实时分析平台ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 运维技能树</title>
      <link href="/2018/06/26/Linux-opt-map/"/>
      <url>/2018/06/26/Linux-opt-map/</url>
      <content type="html"><![CDATA[<h3 id="Linux-运维-技能树"><a href="#Linux-运维-技能树" class="headerlink" title="Linux 运维 技能树"></a>Linux 运维 技能树</h3><p>Linux 运维知识导图，作者为：Edward_Elric ，Processon主页：<a href="https://www.processon.com/u/5a41c7ece4b0ce9ffeae1561" target="_blank" rel="noopener">https://www.processon.com/u/5a41c7ece4b0ce9ffeae1561</a></p><a id="more"></a><p>原图地址：<a href="https://www.processon.com/view/5a476a9be4b0ee0fb8c3c3fb" target="_blank" rel="noopener">https://www.processon.com/view/5a476a9be4b0ee0fb8c3c3fb</a></p><center><img src="https://houhaiyun.github.io/img/images/Linux_opt_map.png" title="Linux 运维技能树"></center>]]></content>
      
      <categories>
          
          <category> Linux 运维 </category>
          
          <category> Linux 运维知识导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维技能树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ansible CMDB</title>
      <link href="/2018/06/24/Ansible-CMDB/"/>
      <url>/2018/06/24/Ansible-CMDB/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/fboender/ansible-cmdb" target="_blank" rel="noopener">github项目地址：https://github.com/fboender/ansible-cmdb</a></p><p><a href="http://ansible-cmdb.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档：http://ansible-cmdb.readthedocs.io/en/latest/</a></p><p>Ansible-cmdb将Ansible 实际收集的输出信息 转换为包含系统配置信息的静态HTML概述页面（以及其他内容）。</p><p>它支持多种类型的输出（html，csv，sql等），并将由Ansible收集的信息与自定义数据进行扩展。对于每个主机，它还显示组，主机变量，自定义变量和机器本地事实。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>本实验使用环境如下：</p><table><thead><tr><th style="text-align:center">IP</th><th style="text-align:center">系统版本</th><th style="text-align:center">软件版本</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">192.168.8.12/24</td><td style="text-align:center">CentOS Linux release 7.3.1611 (Core)</td><td style="text-align:center">ansible 2.4.2.0  ansible-cmdb.py v1.27</td><td style="text-align:center">ansible-cmdb</td></tr><tr><td style="text-align:center">192.168.8.14/24</td><td style="text-align:center">CentOS Linux release 7.3.1611 (Core)</td><td style="text-align:center"></td><td style="text-align:center">应用服务</td></tr></tbody></table><h4 id="1-安装-ansible"><a href="#1-安装-ansible" class="headerlink" title="1. 安装 ansible"></a>1. 安装 ansible</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure><h4 id="2-下载并安装-ansible-cmdb"><a href="#2-下载并安装-ansible-cmdb" class="headerlink" title="2. 下载并安装 ansible-cmdb"></a>2. 下载并安装 ansible-cmdb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fboender/ansible-cmdb/releases/download/1.27/ansible-cmdb-1.27-2.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y ./ansible-cmdb-1.27-2.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="使用-ansible-cmdb"><a href="#使用-ansible-cmdb" class="headerlink" title="使用 ansible-cmdb"></a>使用 ansible-cmdb</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><p>首先，为你的主机生成 Asible 输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir out</span><br><span class="line"></span><br><span class="line">ansible -m setup --tree out/ all</span><br></pre></td></tr></table></figure><p>接下来，再生成的 out/ 目录调用 ansible CMDB 以生成 CMDB概览界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb out/ &gt; overview.html</span><br></pre></td></tr></table></figure><p>默认模板是 html_fancy，它使用 jQuery。</p><p>访问效果：</p><center><img src="https://houhaiyun.github.io/img/images/Ansible-CMDB-1.gif" title="Ansible-CMDB"></center><h4 id="完全使用"><a href="#完全使用" class="headerlink" title="完全使用"></a>完全使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Usage: ansible-cmdb.py [option] &lt;dir&gt; &gt; output.html</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&apos;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -t TEMPLATE, --template=TEMPLATE</span><br><span class="line">                        Template to use. Default is &apos;html_fancy&apos;</span><br><span class="line">  -i INVENTORY, --inventory=INVENTORY</span><br><span class="line">                        Inventory to read extra info from</span><br><span class="line">  -f, --fact-cache      &lt;dir&gt; contains fact-cache files</span><br><span class="line">  -p PARAMS, --params=PARAMS</span><br><span class="line">                        Params to send to template</span><br><span class="line">  -d, --debug           Show debug output</span><br><span class="line">  -q, --quiet           Don&apos;t report warnings</span><br><span class="line">  -c COLUMNS, --columns=COLUMNS</span><br><span class="line">                        Show only given columns</span><br><span class="line">  --exclude-cols=EXCLUDE_COLUMNS</span><br><span class="line">                        Exclude cols from output</span><br></pre></td></tr></table></figure><h4 id="库存扫描"><a href="#库存扫描" class="headerlink" title="库存扫描"></a>库存扫描</h4><p>ansible cmdb 可以读取库存文件（hosts，默认情况下），库存目录或者动态库存，并从中提取有用的信息，例如：</p><ul><li>主机所属的所有组</li><li>主机变量：每个主机都可以选择的键/值对，可以再剧本中使用。通过 ansible cmdb 扫描它们并将它添加到 ‘hostvars’ 部分下发县的 facts。</li></ul><p>读取清单是使用 -i switch 来实现 cmdb 的。它需要一个参数：包含主机文件或者动态库存脚本路径的主机文件目录。可以通过将多个清单文件与逗号（不包含空格）分开来指定多个清单文件。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -i ./hosts out/ &gt; overview.html</span><br></pre></td></tr></table></figure><p>如果在该位置存在 host_vars 和 / 或者 group_vars 目录，也将读取它们。</p><p>“html_fancy” 模板使用四个额外的字段：</p><ul><li>groups：主机所属的 Ansible 组的列表</li><li>dtap：主机是否是开发、测试、验收或者生产系统</li><li>comment：主机的注释</li><li>ext_id：主机的外部唯一标识符</li></ul><p>假设我们有如下 hosts file：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[cmdb]</span><br><span class="line">192.168.8.12    dtap=test comment=&quot;New database server&quot;</span><br><span class="line">192.168.8.14    dtap=dev comment=&quot;Old database server&quot;</span><br></pre></td></tr></table></figure><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><h5 id="指定模板"><a href="#指定模板" class="headerlink" title="指定模板"></a>指定模板</h5><p>ansible-cmdb 提供多个模板你可以使用 -t 或者 –template 参数选择你的模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -t html_fancy_split out/ overview.html</span><br></pre></td></tr></table></figure><p>‘html_fancy’ 模板是默认模板</p><p>模板可以由 NAME 引用，也可以由 .tpl 文件的相对/绝对路径引用。这允许你实现自己的模板。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -t/home/fboender/my_template out/&gt; my_template.html</span><br></pre></td></tr></table></figure><h5 id="模板参数"><a href="#模板参数" class="headerlink" title="模板参数"></a>模板参数</h5><p>某些模板支持影响它的输出的参数。蚕食使用 -p 或者 –parameter 选项指定为 ansible-cmdb。可以通过逗号分隔多个参数来指定参数，参数中必须有空格。</p><p>例如：要指定带有不呢地 Javascript 库和关闭数的 html_fancy 模板，请执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -t html_fancy -p local_js=1,collapsed=1 out&gt; overview.html</span><br></pre></td></tr></table></figure><h5 id="标准可用模板"><a href="#标准可用模板" class="headerlink" title="标准可用模板"></a>标准可用模板</h5><p>ansible cmdb 目前提供了以下模板：</p><ul><li>html_fancy：一个办好所有主机的动态的现代 HTML 页面</li><li>html_fancy_split：一个动态的现代 HTML 页面，每个细节都包含在一个单独的文件中</li><li>txt_table：一个快速文件 table 摘要，其中包含一些最少的信息</li><li>json：转储所有包括组、变量、自定义信息（JSON格式）的主机</li><li>csv：CSV 模板输出主机的 CSV 文件</li><li>markdown：Markdown 模板以 Markdown 格式生成主机信息</li><li>收费：SQL 模板生成一个可以加载到 SQLite 或者 MySQL 数据库的 .sql 文件</li></ul><h6 id="html-fancy"><a href="#html-fancy" class="headerlink" title="html_fancy"></a>html_fancy</h6><p>一个奇妙的 HTML 页面，使用 jQuery 和数据表给你一个可以搜索的和可以排序的 table 概述。</p><p>它采用可选参数：</p><ul><li>local_js=0|1：从本地磁盘（default=0）加载资源。如果设置，将从本地磁盘加载资源，而不是通过网络加载资源。</li><li>collapsed=0|1：控制默认情况下是否折叠主机信息。值为1，将通过 defaultcontrols 对所有主机进行 collapse 处理。默认情况下，1的值将 collapse 所有主机信息。（default=’0’）</li><li>host_details=0|1：渲染主机详细信。（default=1）</li><li>skip_empty=0|1：跳过没有收集事实的主机（无法接通等）。（default=0）</li></ul><h6 id="html-fancy-split"><a href="#html-fancy-split" class="headerlink" title="html_fancy_split"></a>html_fancy_split</h6><p>这个模板与 html_fancy 模板基本相同，但是它生成带有一个 index.html 文件的 cmdb/ 目录，并为每一个主机生成一个独立的 html 文件</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -t html_fancy_split out/</span><br></pre></td></tr></table></figure><p>它接受与 html_fancy 模板相同的参数</p><h6 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h6><p>sql 模板生成一个 .sql 文件，可以加载到 SQLite 或者 MySQL 数据库中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -t sql  out/ &gt; cmdb.sql</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# head cmdb.sql </span><br><span class="line">DROP TABLE IF EXISTS hosts;</span><br><span class="line">CREATE TABLE hosts (</span><br><span class="line">    name VARCHAR(255),</span><br><span class="line">    fqdn VARCHAR(255),</span><br><span class="line">    main_ip VARCHAR(15),</span><br><span class="line">    os_name VARCHAR(80),</span><br><span class="line">    os_version VARCHAR(40),</span><br><span class="line">    system VARCHAR(40),</span><br><span class="line">    kernel VARCHAR(40),</span><br><span class="line">    arch_hardware VARCHAR(12),</span><br><span class="line"></span><br><span class="line">echo&quot;CREATE DATABASE ansiblecmdb&quot; | mysql </span><br><span class="line"></span><br><span class="line">mysql ansiblecmdb &lt;cmdb.sql</span><br></pre></td></tr></table></figure><h6 id="事实缓存"><a href="#事实缓存" class="headerlink" title="事实缓存"></a>事实缓存</h6><p>Ansible 可以在运行剧本时从主机缓存事实，这中配置在 Ansible 配置文件中修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">fact_caching=jsonfile</span><br><span class="line">fact_caching_connection =/path/to/facts/dir</span><br></pre></td></tr></table></figure><p>通过指定 -f(–fact-cache) 选项，你可以将这些缓存的事实用作 facts cmdb 的事实目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-cmdb -f/path/to/facts/dir&gt; overview.html</span><br></pre></td></tr></table></figure><p>请注意，–fact-cache 选项将应用于你指定的所有事实目录。这意味着不能混合事实缓存事实目录的普通 setup 事实目录。另外，如果希望手动扩展（查看 Extending 章节），必须省略 ansible_facts 键并将项目放在 JSON 的 root 中。</p><h6 id="列"><a href="#列" class="headerlink" title="列"></a>列</h6><p>一些模板，如 txt_table 和 html_fancy，支持列。如果支持列，则可以使用 –columns/-c 命令行选项指定要显示的列。</p><p>–columns 采用一个逗号分隔列的列表。列必须由它们的 id 字段指定。有关模板支持那些 id 字段的信息，请在模板中查看。通常是列标题，但在 lowercase 中，也有用下划线替换的空格。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ansible-cmdb -t txt_table --columns name,os,ip,mem,cpus out/</span><br><span class="line">Name          OS               IP               Mem  CPUs  </span><br><span class="line">------------  ---------------  ---------------  ---  ----  </span><br><span class="line">192.168.8.14  CentOS 7.3.1611  192.168.139.151  2g   2     </span><br><span class="line">192.168.8.12  CentOS 7.3.1611  192.168.139.129  2g   2</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://ansible-cmdb.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档：http://ansible-cmdb.readthedocs.io/en/latest/</a></p><p><a href="https://www.helplib.com/GitHub/article_127990" target="_blank" rel="noopener">帮酷：ansible-cmdb</a></p>]]></content>
      
      <categories>
          
          <category> CMDB </category>
          
          <category> Ansible-CMDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GlusterFS 部署</title>
      <link href="/2018/06/18/GlusterFS-Deploy/"/>
      <url>/2018/06/18/GlusterFS-Deploy/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><table><thead><tr><th style="text-align:center"><strong>服务器</strong></th><th style="text-align:center"><strong>IP</strong></th><th style="text-align:center"><strong>主机名</strong></th><th style="text-align:center"><strong>系统</strong></th></tr></thead><tbody><tr><td style="text-align:center">server 1</td><td style="text-align:center">192.168.2.12</td><td style="text-align:center">node1.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">server 2</td><td style="text-align:center">192.168.2.13</td><td style="text-align:center">node2.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr><tr><td style="text-align:center">server 3</td><td style="text-align:center">192.168.2.14</td><td style="text-align:center">node3.haiyun.com</td><td style="text-align:center">CentOS 7.3</td></tr></tbody></table><ol><li>所有服务器都已关闭防火墙和SELinux</li><li>每台服务器都有两块硬盘，一块用于安装系统，一块用于GlusterFS</li></ol><a id="more"></a><h4 id="1-修改主机名并写入hosts文件"><a href="#1-修改主机名并写入hosts文件" class="headerlink" title="1. 修改主机名并写入hosts文件"></a>1. 修改主机名并写入hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 仅已一台服务器做示例，其它服务器的配置也类似</span><br><span class="line">[root@centos7 ~]# hostnamectl set-hostname node1.haiyun.com &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.12node1.haiyun.com node1</span><br><span class="line">192.168.8.13node2.haiyun.com node2</span><br><span class="line">192.168.8.14node3.haiyun.com node3</span><br></pre></td></tr></table></figure><h4 id="2-时间同步"><a href="#2-时间同步" class="headerlink" title="2. 时间同步"></a>2. 时间同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 仅已一台服务器做示例，其它服务器的配置相同</span><br><span class="line">[root@node1 ~]# ntpdate cn.ntp.org.cn</span><br></pre></td></tr></table></figure><h4 id="3-安装-GlusterFS-仓库"><a href="#3-安装-GlusterFS-仓库" class="headerlink" title="3. 安装 GlusterFS 仓库"></a>3. 安装 GlusterFS 仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 仅已一台服务器做示例，其它服务器的配置相同</span><br><span class="line">[root@node1 ~]# yum  -y install centos-release-gluster</span><br></pre></td></tr></table></figure><h4 id="4-配置新增磁盘"><a href="#4-配置新增磁盘" class="headerlink" title="4. 配置新增磁盘"></a>4. 配置新增磁盘</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># 以下为node1的磁盘配置，其它服务器相同</span><br><span class="line"></span><br><span class="line"># 分区</span><br><span class="line">[root@node1 ~]# parted -s /dev/sdb mklabel msdos</span><br><span class="line">[root@node1 ~]# parted /dev/sdb mkpart primary 1 100%</span><br><span class="line"></span><br><span class="line"># 格式化文件系统</span><br><span class="line">[root@node1 ~]# mkfs.xfs /dev/sdb1</span><br><span class="line"></span><br><span class="line"># 创建挂载目录</span><br><span class="line">[root@node1 ~]# mkdir -p /gluster/brick1</span><br><span class="line"></span><br><span class="line"># 添加到/etc/fstab文件</span><br><span class="line">[root@node1 ~]# echo &quot;/dev/sdb1  /gluster/brick1 xfs defaults 1 2&quot; &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line"># 挂载</span><br><span class="line">[root@node1 ~]# mount -a</span><br><span class="line"></span><br><span class="line">磁盘分区脚本，大家可以在此实验中后直接使用：</span><br><span class="line">[root@node2 ~]# cat parted_disk.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line"># *********************************************</span><br><span class="line"># File name: parted_disk.sh</span><br><span class="line"># Revision: 2.0</span><br><span class="line"># Date: 2018-06-18 19:09:08</span><br><span class="line"># Author: houhaiyun</span><br><span class="line"># Email: houhaiyun18@163.com</span><br><span class="line"># Website: https://houhaiyun.github.io/</span><br><span class="line"># Copyright: @2018 haiyun</span><br><span class="line"># License: LGPL v3</span><br><span class="line"># Description:  </span><br><span class="line"># *********************************************</span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">DISK=&apos;/dev/sdb&apos;</span><br><span class="line">DISK_NUMBER=&apos;/dev/sdb1&apos;</span><br><span class="line">NULL=&apos;/dev/null&apos;</span><br><span class="line">MOUNT_DIR=&apos;/gluster/brick1&apos;</span><br><span class="line">FILE_SYSTEM=&apos;xfs&apos;</span><br><span class="line"></span><br><span class="line">CHK () &#123;</span><br><span class="line">        if [ $? -eq 0 ] ; then</span><br><span class="line">                action &quot;$1&quot;  /bin/true</span><br><span class="line">        else</span><br><span class="line">                action &quot;$1&quot;     /bin/false</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分区</span><br><span class="line">parted -s $DISK mklabel msdos    &amp;&gt; $NULL</span><br><span class="line">parted $DISK mkpart primary 1 100%    &amp;&gt; $NULL</span><br><span class="line">CHK &quot;Parted $DISK &quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 格式化文件系统</span><br><span class="line">mkfs -t $FILE_SYSTEM  $DISK_NUMBER    &amp;&gt; $NULL</span><br><span class="line">CHK &quot;mkfs $FILE_SYSTEM $DISK_NUMBER&quot;</span><br><span class="line"></span><br><span class="line"># 创建挂载目录</span><br><span class="line">mkdir -p $MOUNT_DIR    &amp;&gt; $NULL</span><br><span class="line">CHK &quot;mkdir mount dir $MOUNT_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 添加到/etc/fstab文件</span><br><span class="line">echo &quot;$DISK_NUMBER  /gluster/brick1 xfs defaults 1 2&quot; &gt;&gt; /etc/fstab    </span><br><span class="line">CHK &quot;add mount info to /etc/fstab&quot;</span><br><span class="line"></span><br><span class="line"># 挂载</span><br><span class="line">mount -a    &amp;&gt; $NULL</span><br><span class="line">CHK &quot;mount $DISK_NUMBER $MOUNT_DIR&quot;</span><br></pre></td></tr></table></figure><h3 id="安装和配置-GlusterFS"><a href="#安装和配置-GlusterFS" class="headerlink" title="安装和配置 GlusterFS"></a>安装和配置 GlusterFS</h3><h4 id="安装-GlusterFS"><a href="#安装-GlusterFS" class="headerlink" title="安装 GlusterFS"></a>安装 GlusterFS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 以 node1 为例，其它服务器相同操作</span><br><span class="line">[root@node1 ~]# yum -y  --enablerepo=centos-gluster*-test install glusterfs-server</span><br><span class="line"></span><br><span class="line"># 添加开机启动和启动服务</span><br><span class="line">systemctl enable glusterd</span><br><span class="line">systemctl start glusterd</span><br></pre></td></tr></table></figure><h4 id="配置服务和集群"><a href="#配置服务和集群" class="headerlink" title="配置服务和集群"></a>配置服务和集群</h4><h5 id="配置-trusted-pool"><a href="#配置-trusted-pool" class="headerlink" title="配置 trusted pool"></a>配置 trusted pool</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 只需在某一台node peer即可</span><br><span class="line">[root@node1 ~]# gluster peer probe node2</span><br><span class="line">peer probe: success. </span><br><span class="line">[root@node1 ~]# gluster peer probe node3</span><br><span class="line">peer probe: success. </span><br><span class="line"></span><br><span class="line"># 查看集群状态</span><br><span class="line">[root@node1 ~]# gluster peer status</span><br><span class="line">Number of Peers: 2</span><br><span class="line"></span><br><span class="line">Hostname: node2</span><br><span class="line">Uuid: 9c625438-8d53-4d2c-98e0-ca7dc7520be7</span><br><span class="line">State: Peer in Cluster (Connected)</span><br><span class="line"></span><br><span class="line">Hostname: node3</span><br><span class="line">Uuid: 0d565737-5d84-41fe-96f5-3d3443aaf6c8</span><br><span class="line">State: Peer in Cluster (Connected)</span><br></pre></td></tr></table></figure><h5 id="创建复制卷"><a href="#创建复制卷" class="headerlink" title="创建复制卷"></a>创建复制卷</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 需要 3 台server都执行以下操作：</span><br><span class="line">mkdir /gluster/brick1/gv0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在任何一台 server 上执行以下操作即可，创建一个复制卷</span><br><span class="line">gluster volume create gv0 replica 3 node1:/gluster/brick1/gv0 node2:/gluster/brick1/gv0 node3:/gluster/brick1/gv0</span><br><span class="line">gluster volume start gv0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 确保已经启动，在任何一台 server 查看即可</span><br><span class="line">[root@node1 ~]# gluster volume info</span><br><span class="line"> </span><br><span class="line">Volume Name: gv0</span><br><span class="line">Type: Replicate</span><br><span class="line">Volume ID: f5396c34-23d5-47de-abb9-1fad512080e7</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 1 x 3 = 3</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: node1:/gluster/brick1/gv0</span><br><span class="line">Brick2: node2:/gluster/brick1/gv0</span><br><span class="line">Brick3: node3:/gluster/brick1/gv0</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line">performance.client-io-threads: off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 挂载卷</span><br><span class="line">[root@server ~]# mount -t glusterfs node1:/gv0 /mnt</span><br><span class="line">[root@server ~]# ls /mnt</span><br><span class="line">[root@server ~]# cd /mnt/</span><br><span class="line">[root@server mnt]# ls</span><br><span class="line">[root@server mnt]# touch file1 file2 </span><br><span class="line">[root@server mnt]# ls</span><br><span class="line">file1  file2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">## node1</span><br><span class="line">[root@node1 ~]# ls /gluster/brick1/gv0/</span><br><span class="line">file1  file2</span><br><span class="line"></span><br><span class="line">## node2</span><br><span class="line">[root@node2 mnt]# ls /gluster/brick1/gv0/</span><br><span class="line">file1  file2</span><br><span class="line"></span><br><span class="line">## node3</span><br><span class="line">[root@node3 ~]# ls /gluster/brick1/gv0/</span><br><span class="line">file1  file2</span><br></pre></td></tr></table></figure><h5 id="创建分布式卷"><a href="#创建分布式卷" class="headerlink" title="创建分布式卷"></a>创建分布式卷</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 需要 3 台server都执行以下操作：</span><br><span class="line">mkdir /gluster/brick1/gv1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在任何一台 server 上执行以下操作即可，创建一个分布式卷</span><br><span class="line">gluster volume create gv1 node1:/gluster/brick1/gv1 node2:/gluster/brick1/gv1 node3:/gluster/brick1/gv1</span><br><span class="line">gluster volume start gv1</span><br><span class="line"></span><br><span class="line"># 确保已经启动，在任何一台 server 查看即可</span><br><span class="line">[root@node2 mnt]# gluster volume info</span><br><span class="line"> </span><br><span class="line">Volume Name: gv1</span><br><span class="line">Type: Distribute</span><br><span class="line">Volume ID: e16cfec5-de78-4eac-a466-6df06d8c4532</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 3</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: node1:/gluster/brick1/gv1</span><br><span class="line">Brick2: node2:/gluster/brick1/gv1</span><br><span class="line">Brick3: node3:/gluster/brick1/gv1</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 挂载卷</span><br><span class="line">[root@node ~]# mount -t glusterfs node2:/gv1 /mnt</span><br><span class="line">[root@node ~]# cd /mnt</span><br><span class="line">[root@node mnt]# ls</span><br><span class="line">[root@node mnt]# for i in &#123;1..10&#125;; do touch file$i ; done</span><br><span class="line">[root@node mnt]# ls</span><br><span class="line">file1  file10  file2  file3  file4  file5  file6  file7  file8  file9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">## node1：</span><br><span class="line">[root@node1 ~]# ls /gluster/brick1/gv1</span><br><span class="line">file5  file6  file8</span><br><span class="line"></span><br><span class="line">## node2：</span><br><span class="line">[root@node2 mnt]# ls /gluster/brick1/gv1</span><br><span class="line">file10  file3  file4  file7  file9</span><br><span class="line"></span><br><span class="line">## node3：</span><br><span class="line">[root@node3 mnt]# ls /gluster/brick1/gv1</span><br><span class="line">file1  file2</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 分布式存储系统 </category>
          
          <category> GlusterFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GlusterFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GlusterFS 存储结构原理介绍</title>
      <link href="/2018/06/18/GlusterFS/"/>
      <url>/2018/06/18/GlusterFS/</url>
      <content type="html"><![CDATA[<center><img src="https://www.ihaiyun.cc/img/images/gluster-ant.png" title="Gluster"></center><a id="more"></a><h3 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><p>分布式文件系统 （Distributed File System）是指文件系统管理的物理存储资源并不直接与本地节点相连，而是分布于计算机网络中的一个或多个节点的计算机上。目前意义上的分布式文件系统大多数是由多个节点计算机构成，结构上是典型的客户机/服务器模式。流行的模式是当客户机需要存储数据时，服务器将指引其将数据分散存储到多个存储节点上，以提供更快的速度，更大的容量及更好的冗余特性。</p><p>目前流行的分布式文件系统有许多，如 MooseFS、OpenAFS、GoogleFS、Ceph，具体实现原理这里就不再介绍。</p><h3 id="GlusterFS-概述"><a href="#GlusterFS-概述" class="headerlink" title="GlusterFS 概述"></a>GlusterFS 概述</h3><p>GlusterFS 系统是一个可扩展的网络文件系统，相比其他分布式文件系统，GlusterFS具有高扩展性、高可用性、高性能、可横向扩展等特点，并且没有元数据服务器的设计，让整个服务没有单点故障的隐患。</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><ul><li><strong>Brick</strong>：GFS 中的存储单元，通过一个受信任存储池中的服务器的一个导出目录。可以通过主机名和目录名来标识，如 ‘SERVER:EXPORT’</li><li><strong>Client</strong>：挂载了 GFS 卷的设备</li><li><strong>Extended Attributes</strong>：sattr 是一个文件系统的特性，其支持用户或程序关联文件/目录和元数据</li><li><strong>FUSE</strong>：Filesystem Userspace 是一个可加载的内核模块，其支持非特权用户创建自己的文件系统而不需要修改内核代码。通过在用户空间运行文件系统（FUSSE）的代码与内核进行对接</li><li><strong>Geo-Replication</strong>：通过局域网（LAN），广域网（WAN）和Internet上提供从一个站点到另一个站点的连续，异步和增量复制服务。</li><li><strong>GFID</strong>：GFS 卷中的每个文件或目录都有一个唯一的128的数据相关联，其用于模拟 inode</li><li><strong>Namespace</strong>：每个 Gluster 卷都导出单个 ns 作为 POSIX 的挂载点</li><li><strong>Node</strong>：一个拥有若干 brick 的设备</li><li><strong>RDMA</strong>：远程直接内存访问，支持不通过双方的 OS 进行直接内存访问</li><li><strong>RRDNS</strong>：round robin DNS 是一种通过 DNS 轮转返回不同的设备以进行负载均衡的方法</li><li><strong>Self-heal</strong>：用于后台运行检测副本卷中文件和目录的不一致性并解决这些不一致</li><li><strong>Split-brain</strong>：这是一种情况，即复制卷中的两个或更多砖块的数据在内容或元数据方面开始发散。在这种状态下，人们无法确定哪一组数据是“正确的”，哪一组是“错误的”</li><li><strong>Translator</strong>：翻译者（也称为xlator）是可堆叠的模块，其中每个模块都有非常特定的用途</li><li><strong>Volfile</strong>：Glusterfs 进程的配置文件</li><li><strong>Volume</strong>：一组 Bricks 的逻辑集合</li></ul><blockquote><p>更多术语请参见官方文档：<a href="http://staged-gluster-docs.readthedocs.io/en/release3.7.0beta1/Administrator%20Guide/glossary/" target="_blank" rel="noopener">http://staged-gluster-docs.readthedocs.io/en/release3.7.0beta1/Administrator%20Guide/glossary/</a></p></blockquote><h3 id="Gluster-特性"><a href="#Gluster-特性" class="headerlink" title="Gluster 特性"></a>Gluster 特性</h3><ul><li><strong>无元数据设计</strong><ul><li>元数据是用来描述一个文件或给定区块在分布式文件系统中的位置，简而言之就是某个文件或某个区块存储的位置。传统分布式文件系统大多会设置元数据服务器或者功能相近的管理服务器，主要作用就是用来管理文件与数据区块之间的存储位置关系。相较其他分布式文件系统而言，GlusterFS 并没有集中或者分布式的元数据的概念，取而代之的是弹性哈希算法。集群中的任何服务器和客户端都可以利用哈希算法、路径及文件名进行计算，就可以对数据进行定位，并执行读写访问操作。</li><li>这种设计带来的好处是极大的提高了扩展性，同时也提供了系统的性能和可靠性；另一显著的特点是如果给定确定的文件名，查找文件位置会非常快。但是如果要列出文件或者目录，性能会大幅下降，因为列出文件或目录时，需要查询所在节点并对个节点中的信息进行聚合。此时有元数据服务的分布式文件系统的查询效率反而会提高很多。</li></ul></li><li><strong>服务期间的部署</strong><ul><li>在之前的版本中服务器的关系是对等的，也就是说每个节点服务器都掌握了集群的配置信息，这样做的好处是每个节点都拥有节点的配置信息，高度自治，所有信息都可以在本地查询。每个节点的信息更新都会向其他节点通告，保证节点间信息的一致性。但如果集群规模较大，节点众多时，信息同步的效率就会下降，节点信息的非一致性概率就会大大提高。因此 GlusterFS 未来版本有向集中式管理变化的趋势。</li></ul></li></ul><h4 id="客户端访问流程"><a href="#客户端访问流程" class="headerlink" title="客户端访问流程"></a>客户端访问流程</h4><center><img src="https://www.ihaiyun.cc/img/images/Gluster-1.jpg" title="客户端访问流程"></center><p>当客户端访问 Gluster 存储时，首先程序通过访问挂载点的形式读写数据，对于用户和程序而言，集群文件系统是透明的，用户和程序根本感觉不到文件系统是本地还是在远程服务器上。读写操作将会被交给 VFS(Virtual File System)来处理，VFS 会将请求交给 FUSE 内核模块，而 FUSE 又会通过设备 /dev/fuse 将数据交给 GlusterFS Client。最后经过 GlusterFS Client 的计算，并最终经过网络请求或数据发送到 GlusterFS Server。</p><h3 id="GlusterFS-集群的模式"><a href="#GlusterFS-集群的模式" class="headerlink" title="GlusterFS 集群的模式"></a>GlusterFS 集群的模式</h3><p>GlusterFS 集群的模式指数据在集群中存放的结构，类似于磁盘阵列中的级别。</p><h4 id="1-分布式卷（Distributed-Volume）"><a href="#1-分布式卷（Distributed-Volume）" class="headerlink" title="1. 分布式卷（Distributed Volume）"></a>1. 分布式卷（Distributed Volume）</h4><p>又称哈希卷，近似于 RAID0，文件没有分片，文件根据 hash 算法写入各个节点的硬盘上，优点是容量大，缺点是没冗余。</p><center><img src="https://www.ihaiyun.cc/img/images/Gluster-2.png" title="分布式卷"></center><p>创建卷指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create test-volume server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4</span><br></pre></td></tr></table></figure><h4 id="2-复制卷（Replicated-Volume）"><a href="#2-复制卷（Replicated-Volume）" class="headerlink" title="2. 复制卷（Replicated Volume）"></a>2. 复制卷（Replicated Volume）</h4><p>相当于 raid1，复制的份数，决定集群的大小，通常与分布试卷或者条带卷组合使用，解决前两种存储卷的冗余缺陷。缺点是磁盘利用率低。</p><p>副本卷在创建时可指定副本的数量，通常为2或者3，副本在存储时会在卷的不同 brick 上，因此有几个副本就必须提供至少多个 brick，当其中一台服务器失效后，可以从另一台服务器中读取数据，因此复制 GlusterFS 卷提高了数据可靠性的同时还提供了数据冗余功能。</p><center><img src="https://www.ihaiyun.cc/img/images/Gluster-3.png" title="复制卷"></center><p>创建卷指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2</span><br></pre></td></tr></table></figure><h4 id="3-分布式复制卷（Distributed-Replicated-Volume）"><a href="#3-分布式复制卷（Distributed-Replicated-Volume）" class="headerlink" title="3. 分布式复制卷（Distributed Replicated Volume）"></a>3. 分布式复制卷（Distributed Replicated Volume）</h4><p>分布式复制卷 GlusterFS 卷结合了分布式和复制 Gluster 卷的特点，看起来类似 RAID10，其实是不同的，RAID10 其实质是条带化，但分布式复制 GlusterFS 卷则没有。</p><center><img src="https://www.ihaiyun.cc/img/images/Gluster-4.png" title="分布式复制卷"></center><p>创建卷指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create test-volume replica 2 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4</span><br></pre></td></tr></table></figure><h4 id="4-条带卷（Striped-Volume）"><a href="#4-条带卷（Striped-Volume）" class="headerlink" title="4. 条带卷（Striped Volume）"></a>4. 条带卷（Striped Volume）</h4><p>相当于 raid0,文件是分片均匀写在各个节点的硬盘上的，有点事分布式读写，性能整体好。缺点是没有冗余，分片随即读写可能会导致硬盘 IOPS 饱和。</p><center><img src="https://www.ihaiyun.cc/img/images/Gluster-5.png" title="条带卷"></center><p>创建卷指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create test-volume stripe 2 transport tcp server1:/exp1 server2:/exp2</span><br></pre></td></tr></table></figure><h4 id="5-分布式条带卷（Distributed-Striped-Volume）"><a href="#5-分布式条带卷（Distributed-Striped-Volume）" class="headerlink" title="5. 分布式条带卷（Distributed Striped Volume）"></a>5. 分布式条带卷（Distributed Striped Volume）</h4><p>当单个文件的体型十分巨大，客户端数量更多时，条带卷已经无法满足需求，此时将分布式与条带结合起来是一个比较好的选择。其性能与服务器数量有关。</p><center><img src="https://www.ihaiyun.cc/img/images/Gluster-6.png" title="分布式条带卷"></center><p>创建卷指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create test-volume stripe 4 transport tcp server1:/exp1 server2:/exp2 server3:/exp3 server4:/exp4 server5:/exp5 server6:/exp6 server7:/exp7 server8:/exp8</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://gluster.readthedocs.io/en/latest/Quick-Start-Guide/Architecture/" target="_blank" rel="noopener">官网文档</a></p>]]></content>
      
      <categories>
          
          <category> 分布式存储系统 </category>
          
          <category> GlusterFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GlusterFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>top 命令</title>
      <link href="/2018/06/16/Linux-top/"/>
      <url>/2018/06/16/Linux-top/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Tep 程序对运行的系统提供一个动态的实时的监控。它能够显示系统的总体信息和一些正被 Linux 内核管理的任务。它所显示的系统总体系统的样式以及任务信息显示的样式，顺序和大小都是由用户配置，而且配置信息可以重启后永久生效。top 能够对京城提供一个有限的交互式界面，对个性化配置提供更多扩展性的界面。</p><a id="more"></a><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><p><code>top [参数]</code></p><h4 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h4><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存使用率、CPU占用率等</p><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><ul><li>-h：显示简短的帮助信息</li><li>-v：显示库版本</li><li>-b：以批处理模式操作</li><li>-c：显示完整的命令运行格式</li><li>-d：指定屏幕刷新间隔时间，默认每 3 秒刷新一次</li><li>-H：线程开关 <ul><li>在终端输入 top -H 后，top 将以上一次系统的的 “H” 状态的相反的状态运行。如上次 top 的状态是 off，则这次运行时 H 状态就变成 on 了，H 状态是 on 时，所有的单独的线程都会被显示出来，但是，top 是显示一个进程的所有线程的总和。如下为 H 为 on 和 off 的区别：</li></ul></li></ul><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># H 为 on</span><br><span class="line">[root@node1 ~]# top -H -n 1 -b | grep docker | wc -l</span><br><span class="line">333</span><br><span class="line"></span><br><span class="line"># H 为 off</span><br><span class="line">[root@node1 ~]# top -n 1 -b | grep docker | wc -l</span><br><span class="line">72</span><br></pre></td></tr></table></figure></li></ul><ul><li>-i：空闲进程开关<ul><li>以系统记得的 “i“ 状态的相相反状态启动 top。当开关是 off 时，空闲的或僵死的任务将不被显示。如下为 i 为 on 和 off 的区别：</li></ul></li></ul><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# top -n 1 -i | wc -l</span><br><span class="line">9</span><br><span class="line">[root@node1 ~]# top -n 1 | wc -l</span><br><span class="line">52</span><br></pre></td></tr></table></figure></li></ul><ul><li>-n： 设置重复次数，如 <code>top -n 3</code>则将屏幕刷新5次后 top 退出</li><li>-p：监视指定 PID 的进程<ul><li>可以以 -p1 -p12 -p 123 的格式最多跟 20 个 PID。如果想恢复正常显示，即显示所有进程，不必终止或重启 top。按住 “=” 就可以切换了。</li></ul></li><li>-u： 显示指定的UID或用户名所运行的进程</li><li>-U：和 -u 差不多，但是 -U 可以跟真实的、有效的、保存的和文件系统的 UID</li><li>-s：以安全模式操作</li></ul><h3 id="top-命令输出"><a href="#top-命令输出" class="headerlink" title="top 命令输出"></a>top 命令输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">top - 17:18:23 up 6 days,  1:33,  3 users,  load average: 0.01, 0.04, 0.05</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1641184 free, 14314392 used, 16872176 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17782584 avail Mem </span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                             </span><br><span class="line">137515 root      20   0  158400   2888   1520 R  11.1  0.0   0:00.03 top                                                                                                                                 </span><br><span class="line">  1338 root       0 -20       0      0      0 S   5.6  0.0   8:21.62 loop0                                                                                                                               </span><br><span class="line">  3668 polkitd   20   0  279816  22796   9404 S   5.6  0.1   6:04.05 zabbix_server                                                                                                                       </span><br><span class="line">  3807 chrony    20   0   39592  10196   1568 S   5.6  0.0  15:13.59 redis-server                                                                                                                        </span><br><span class="line">     1 root      20   0  192360   5436   2436 S   0.0  0.0   0:10.76 systemd                                                                                                                             </span><br><span class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:00.06 kthreadd                                                                                                                            </span><br><span class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:00.28 ksoftirqd/0                                                                                                                         </span><br><span class="line">     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                                                                                        </span><br><span class="line">     8 root      rt   0       0      0      0 S   0.0  0.0   0:00.13 migration/0                                                                                                                         </span><br><span class="line">     9 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh                                                                                                                              </span><br><span class="line">    10 root      20   0       0      0      0 S   0.0  0.0  17:39.95 rcu_sched                                                                                                                           </span><br><span class="line">    11 root      rt   0       0      0      0 S   0.0  0.0   0:01.42 watchdog/0                                                                                                                          </span><br><span class="line">    12 root      rt   0       0      0      0 S   0.0  0.0   0:01.36 watchdog/1                                                                                                                          </span><br><span class="line">    13 root      rt   0       0      0      0 S   0.0  0.0   0:00.08 migration/1                                                                                                                         </span><br><span class="line">    14 root      20   0       0      0      0 S   0.0  0.0   0:02.05 ksoftirqd/1                                                                                                                         </span><br><span class="line">    16 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H</span><br></pre></td></tr></table></figure><h4 id="第一行：系统运行时间和平均负载"><a href="#第一行：系统运行时间和平均负载" class="headerlink" title="第一行：系统运行时间和平均负载"></a>第一行：系统运行时间和平均负载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top - 17:18:23 up 6 days,  1:33,  3 users,  load average: 0.01, 0.04, 0.05</span><br></pre></td></tr></table></figure><p>top 命令的顶部显示与 uptime 命令相似的输出。</p><p>致谢字段显示：</p><ul><li>当前时间</li><li>系统已经运行时间</li><li>当前登录用户的数量</li><li>相应最近5、10和 15 分钟内的平均负载</li></ul><p>load average 表示时间段内活动的进程数，这些值越大就说明你的服务器压力越大。一般情况下这个值只要不超过服务器的 CPU 数量就没有关系。如果长时间超出了 CPU 数量那就需要关注一下了</p><p>可以使用 l 命令控制 第一行是否显示</p><h4 id="第二行：任务"><a href="#第二行：任务" class="headerlink" title="第二行：任务"></a>第二行：任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><ul><li>Tasks：任务</li><li>804 total：共有进程数</li><li>1 running：正在运行的进程数</li><li>803 sleeping：休眠状态下的进程数</li><li>0 stopped：停止状态的进程数</li><li>0 zombie：僵尸进程数</li></ul><p>可以使用 t 命令控制 进程状态信息是否显示</p><h4 id="第三行：CPU-状态"><a href="#第三行：CPU-状态" class="headerlink" title="第三行：CPU 状态"></a>第三行：CPU 状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br></pre></td></tr></table></figure><ul><li>%Cpu(s)：cpu状态</li><li>us，user：运行（未调整优先级的）用户进程的 CPU 时间百分比</li><li>sy，system：运行内核进程的 CPU 时间百分比</li><li>ni，niced：运行已调整优先级的用户进程的 CPU 时间百分比</li><li>id，idle：CPU 处于空闲状态的时间百分比</li><li>wa，IO wait：I/O 等待所占用的 CPU 时间百分比</li><li>hi，Hardware IRQ：处理硬件中断的 CPU 时间百分比</li><li>si，Software Interrupts：处理软件中断的 CPU 时间百分比</li><li>st：这个虚拟机被hypervisor偷去的CPU时间（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）</li></ul><p>可以使用 t 命令控制 CPU 状态信息是否显示</p><h4 id="第四、五行：内存使用"><a href="#第四、五行：内存使用" class="headerlink" title="第四、五行：内存使用"></a>第四、五行：内存使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KiB Mem : 32827752 total,  1635552 free, 14315080 used, 16877120 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17782140 avail Mem</span><br></pre></td></tr></table></figure><p>接下来两行显示内存使用率，有点像 free 命令。第一行是物理内存使用，第二行是虚拟内存使用（交换空间）</p><p><strong>物理内存使用</strong></p><ul><li>32827752 total：物理内存总量</li><li>1635552 free：空闲的内存</li><li>14315080 used：已使用的内存</li><li>16877120 buff/cache：缓存大小（即将写入磁盘的）</li></ul><ol><li><p>Cache：缓存区，是高速缓存，是位于CPU和主内存之间的容量较小但速度很快的存储器，因为CPU的速度远远高于主内存的速度，CPU从内存中读取数据需等待很长的时间，而  Cache保存着CPU刚用过的数据或循环使用的部分数据，这时从Cache中读取数据会更快，减少了CPU等待的时间，提高了系统的性能。</p><p>​    1.1 Cache并不是缓存文件的，而是缓存块的(块是I/O读写最小的单元)；Cache一般会用在I/O请求上，如果多个进程要访问某个文件，可以把此文件读入Cache中，这样下一个进程获取CPU控制权并访问此文件直接从Cache读取，提高系统性能。</p></li><li><p>Buffer：缓冲区，用于存储速度不同步的设备或优先级不同的设备之间传输数据；通过buffer可以减少进程间通信需要等待的时间，当存储速度快的设备与存储速度慢的设备进行通信时，存储慢的数据先把数据存放到buffer，达到一定程度存储快的设备再读取buffer的数据，在此期间存储快的设备CPU可以干其他的事情。</p><p>2.2 Buffer：一般是用在写入磁盘的，例如：某个进程要求多个字段被读入，当所有要求的字段被读入之前已经读入的字段会先放到buffer中。</p></li></ol><p><strong>交换分区</strong></p><ul><li>33554428 total：交换分区的总量</li><li>33554428 free：空间的大小</li><li>0 used：已使用的大小</li><li>17782140 avail Mem：已经利用的内存</li></ul><h4 id="第六行-空"><a href="#第六行-空" class="headerlink" title="第六行 空"></a>第六行 空</h4><p>第六行 空 省略</p><h4 id="第七行：字段-列"><a href="#第七行：字段-列" class="headerlink" title="第七行：字段 / 列"></a>第七行：字段 / 列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br></pre></td></tr></table></figure><ul><li>PID：进程 ID</li><li>USER：进程所属的用户</li><li>PR：进程优先级<ul><li>PR 为进程的实时优先级（跟内核有关），范围 0-99，数字越小优先级越低</li></ul></li><li>NI：进程有限值（nice 值）<ul><li>nice 值的范围为 -20 到 19 ，这个值越小，那么对应的进程优先级越高，在 top 里，PR - NI = 20，默认启动一个进程，nice是0 ；</li></ul></li><li>VIRT：进程使用的虚拟内存，单位为 KB</li><li>RES：驻留内存大小，驻留内存是任务使用的非交换物理内存大小</li><li>SHR：进程使用的共享内存</li><li>S：这个是进程的状态。它有一下不同的值<ul><li>D：不可中断的睡眠态</li><li>R：运行态</li><li>S：睡眠态</li><li>T：被跟踪或已停止</li><li>Z：僵尸态</li></ul></li><li>%CPU：上次更新到现在的 CPU 时间占用百分比</li><li>%MEM：进程使用的物理内存百分比</li><li>TIME+：任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。</li><li>COMMAND：进程名称（命令名/命令行）</li></ul><h3 id="top-交互命令"><a href="#top-交互命令" class="headerlink" title="top 交互命令"></a>top 交互命令</h3><h4 id="h：帮助"><a href="#h：帮助" class="headerlink" title="h：帮助"></a>h：帮助</h4><p>首先，我们可以用 h 或 ? 显示交互命令的帮助菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Help for Interactive Commands - procps-ng version 3.3.10</span><br><span class="line">Window 1:Def: Cumulative mode Off.  System: Delay 3.0 secs; Secure mode Off.</span><br><span class="line"></span><br><span class="line">  Z,B,E,e   Global: &apos;Z&apos; colors; &apos;B&apos; bold; &apos;E&apos;/&apos;e&apos; summary/task memory scale</span><br><span class="line">  l,t,m     Toggle Summary: &apos;l&apos; load avg; &apos;t&apos; task/cpu stats; &apos;m&apos; memory info</span><br><span class="line">  0,1,2,3,I Toggle: &apos;0&apos; zeros; &apos;1/2/3&apos; cpus or numa node views; &apos;I&apos; Irix mode</span><br><span class="line">  f,F,X     Fields: &apos;f&apos;/&apos;F&apos; add/remove/order/sort; &apos;X&apos; increase fixed-width</span><br><span class="line"></span><br><span class="line">  L,&amp;,&lt;,&gt; . Locate: &apos;L&apos;/&apos;&amp;&apos; find/again; Move sort column: &apos;&lt;&apos;/&apos;&gt;&apos; left/right</span><br><span class="line">  R,H,V,J . Toggle: &apos;R&apos; Sort; &apos;H&apos; Threads; &apos;V&apos; Forest view; &apos;J&apos; Num justify</span><br><span class="line">  c,i,S,j . Toggle: &apos;c&apos; Cmd name/line; &apos;i&apos; Idle; &apos;S&apos; Time; &apos;j&apos; Str justify</span><br><span class="line">  x,y     . Toggle highlights: &apos;x&apos; sort field; &apos;y&apos; running tasks</span><br><span class="line">  z,b     . Toggle: &apos;z&apos; color/mono; &apos;b&apos; bold/reverse (only if &apos;x&apos; or &apos;y&apos;)</span><br><span class="line">  u,U,o,O . Filter by: &apos;u&apos;/&apos;U&apos; effective/any user; &apos;o&apos;/&apos;O&apos; other criteria</span><br><span class="line">  n,#,^O  . Set: &apos;n&apos;/&apos;#&apos; max tasks displayed; Show: Ctrl+&apos;O&apos; other filter(s)</span><br><span class="line">  C,...   . Toggle scroll coordinates msg for: up,down,left,right,home,end</span><br><span class="line"></span><br><span class="line">  k,r       Manipulate tasks: &apos;k&apos; kill; &apos;r&apos; renice</span><br><span class="line">  d or s    Set update interval</span><br><span class="line">  W,Y       Write configuration file &apos;W&apos;; Inspect other output &apos;Y&apos;</span><br><span class="line">  q         Quit</span><br><span class="line">          ( commands shown with &apos;.&apos; require a visible task display window ) </span><br><span class="line">Press &apos;h&apos; or &apos;?&apos; for help with Windows,</span><br><span class="line">Type &apos;q&apos; or &lt;Esc&gt; to continue</span><br></pre></td></tr></table></figure><h4 id="刷新显示"><a href="#刷新显示" class="headerlink" title="刷新显示"></a>刷新显示</h4><p>top 命令默认在一个特定间隔（3秒）后刷新显示。要手动刷新，用户可以输入回车或者空格</p><h4 id="A：切换交替显示模式"><a href="#A：切换交替显示模式" class="headerlink" title="A：切换交替显示模式"></a>A：切换交替显示模式</h4><p>这个命令在全屏和交替模式间切换。在交替模式下回显示4个窗口（分别关注不同的字段）：</p><ol><li>Def 默认字段组</li><li>Job 任务字段组</li><li>Mem 内存字段组</li><li>Usr 用户字段组</li></ol><p>这四个字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方。（只有当前窗口才会接收你键盘交互命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1:Def - 18:34:21 up 6 days,  2:49,  3 users,  load average: 0.07, 0.04, 0.05</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1629432 free, 14315368 used, 16882952 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17781652 avail Mem </span><br><span class="line"></span><br><span class="line">1   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                            </span><br><span class="line">   3659 polkitd   20   0  255732   6716   4532 S   0.3  0.0   7:04.48 zabbix_server                                                                                                                      </span><br><span class="line">   3668 polkitd   20   0  279816  22796   9404 S   0.3  0.1   6:10.40 zabbix_server                                                                                                                      </span><br><span class="line">   3684 polkitd   20   0  276376  41128  18308 S   0.3  0.1   4:19.76 zabbix_server                                                                                                                      </span><br><span class="line">   3695 polkitd   20   0  255836   7512   5180 S   0.3  0.0   3:45.96 zabbix_server                                                                                                                      </span><br><span class="line">   3725 chrony    20   0   39592  10648   1568 S   0.3  0.0  14:53.49 redis-server                                                                                                                       </span><br><span class="line">   3758 systemd+  20   0   46096   5456    580 S   0.3  0.0   0:27.56 nginx                                                                                                                              </span><br><span class="line">                                                                                                                       </span><br><span class="line">2   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND                                                                                                                               </span><br><span class="line"> 194790      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/14:1                                                                                                                          </span><br><span class="line"> 191693   2604   0:43.15   0.0  0.1  20   0 S  407208  20848    48 httpd                                                                                                                                 </span><br><span class="line"> 191452   2604   0:31.34   0.0  0.1  20   0 S  406924  20700    48 httpd                                                                                                                                 </span><br><span class="line"> 191212   2604   0:41.78   0.0  0.1  20   0 S  404108  17872    48 httpd                                                                                                                                 </span><br><span class="line"> 190973   2604   0:54.05   0.0  0.1  20   0 S  407692  21464    48 httpd                                                                                                                                 </span><br><span class="line"> 190492   2604   0:29.45   0.0  0.1  20   0 S  406156  19960    48 httpd                                                                                                                                 </span><br><span class="line">                                                                                                                      </span><br><span class="line">3   PID %MEM    VIRT    RES   CODE    DATA    SHR nMaj nDRT  %CPU COMMAND                                                                                                                                </span><br><span class="line"> 124124  6.8 14.239g 2.130g      4 14.166g  28820    2    0   0.3 java                                                                                                                                   </span><br><span class="line">   3848  2.4 2932128 775012      4 2511468  12416   58    0   0.3 ruby                                                                                                                                   </span><br><span class="line">   2549  1.8 2801380 594540  11688 2727660   8304  101    0   0.7 mysqld                                                                                                                                 </span><br><span class="line">   3730  1.3 2504944 421788      4 2312184   8140   55    0   0.7 ruby                                                                                                                                   </span><br><span class="line">   4202  1.1 1010240 370384      4  442812   5972    0    0   0.0 ruby                                                                                                                                   </span><br><span class="line">   3858  1.1 2506604 355460      4 2313844   8140   44    0   0.3 ruby                                                                                                                                                                                                                                                   </span><br><span class="line">4   PID   PPID   UID USER     RUSER    TTY          TIME+  %CPU %MEM S COMMAND                                                                                                                           </span><br><span class="line">  20541      1   995 zabbix   zabbix   ?          0:00.00   0.0  0.0 S zabbix_agentd                                                                                                                     </span><br><span class="line">  20542  20541   995 zabbix   zabbix   ?          7:34.24   0.0  0.0 S zabbix_agentd                                                                                                                     </span><br><span class="line">  20543  20541   995 zabbix   zabbix   ?          3:06.93   0.0  0.0 S zabbix_agentd                                                                                                                     </span><br><span class="line">  20544  20541   995 zabbix   zabbix   ?          3:08.71   0.0  0.0 S zabbix_agentd                                                                                                                     </span><br><span class="line">  20545  20541   995 zabbix   zabbix   ?          3:13.43   0.0  0.0 S zabbix_agentd                                                                                                                     </span><br><span class="line">  20546  20541   995 zabbix   zabbix   ?          0:19.06   0.0  0.0 S zabbix_agentd</span><br></pre></td></tr></table></figure><p>我们可以用 a 和 w 在 4 个窗口间切换。a 移动到后一个窗口，w 移动到前一个窗口。用 g 命令你可以出入一个数字来选择当前的窗口。</p><h4 id="B：触发粗体显示"><a href="#B：触发粗体显示" class="headerlink" title="B：触发粗体显示"></a>B：触发粗体显示</h4><p>一些重要信息会以加粗字体显示，这个命令可以切换粗体显示</p><h4 id="设置显示的刷新间隔"><a href="#设置显示的刷新间隔" class="headerlink" title="设置显示的刷新间隔"></a>设置显示的刷新间隔</h4><p>当你按下 d 或 s 时，你将被提示输入一个值（以秒为单位），它会以设置的值作为刷新间隔。如果你这里输入了 1，top 将会每秒刷新</p><h4 id="c-显示完成的命令和程序名"><a href="#c-显示完成的命令和程序名" class="headerlink" title="c 显示完成的命令和程序名"></a>c 显示完成的命令和程序名</h4><p>切换是否显示进程启动时的完整路径和程序名</p><h4 id="i-空闲任务"><a href="#i-空闲任务" class="headerlink" title="i 空闲任务"></a>i 空闲任务</h4><p>切换是否显示空闲任务</p><h4 id="V-树视图"><a href="#V-树视图" class="headerlink" title="V  树视图"></a>V  树视图</h4><p>切换显示树视图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">top - 18:48:21 up 6 days,  3:03,  3 users,  load average: 0.05, 0.07, 0.05</span><br><span class="line">Tasks: 805 total,   1 running, 804 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1624112 free, 14315432 used, 16888208 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17781280 avail Mem </span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                             </span><br><span class="line">     1 root      20   0  192360   5436   2436 S   0.0  0.0   0:10.79 systemd                                                                                                                             </span><br><span class="line">   573 root      20   0  143372  87300  86904 S   0.0  0.3   0:26.09  `- systemd-journal                                                                                                                 </span><br><span class="line">   601 root      20   0  127032   1304    968 S   0.0  0.0   0:00.00  `- lvmetad                                                                                                                         </span><br><span class="line">   604 root      20   0   43800   2112   1288 S   0.0  0.0   0:00.68  `- systemd-udevd                                                                                                                   </span><br><span class="line">   764 root      16  -4   55440    880    476 S   0.0  0.0   0:00.41  `- auditd                                                                                                                          </span><br><span class="line">   787 root      20   0   19296   1356    964 S   0.0  0.0   1:39.28  `- irqbalance                                                                                                                      </span><br><span class="line">   788 root      20   0   24192   1720   1408 S   0.0  0.0   0:01.02  `- systemd-logind                                                                                                                  </span><br><span class="line">   789 polkitd   20   0  527516  13004   4588 S   0.0  0.0   0:00.49  `- polkitd                                                                                                                         </span><br><span class="line">   792 dbus      20   0   24724   1932   1360 S   0.0  0.0   0:01.72  `- dbus-daemon                                                                                                                     </span><br><span class="line">   796 chrony    20   0  115848   1884   1492 S   0.0  0.0   0:00.94  `- chronyd                                                                                                                         </span><br><span class="line">   811 root      20   0  438900   9216   6332 S   0.0  0.0   0:01.58  `- NetworkManager                                                                                                                  </span><br><span class="line">   817 root      20   0  126216   1600    988 S   0.0  0.0   0:00.52  `- crond                                                                                                                           </span><br><span class="line">  1154 root      20   0  328892  45140  44280 S   0.0  0.1   0:12.74  `- rsyslogd                                                                                                                        </span><br><span class="line">  1155 root      20   0  553652  16648   5852 S   0.0  0.1   0:41.69  `- tuned                                                                                                                           </span><br><span class="line">  1156 root      20   0 3883032  67292  16088 S   0.0  0.2   8:22.97  `- dockerd-current                                                                                                                 </span><br><span class="line">  1241 root      20   0 2616756  25748   4660 S   0.0  0.1   0:59.12      `- docker-containe                                                                                                             </span><br><span class="line">  1552 root      20   0  413268   4240   1428 S   0.0  0.0   0:02.70          `- docker-containe                                                                                                         </span><br><span class="line">  1581 root      20   0   18036   1584   1328 S   0.0  0.0   0:00.05              `- wrapper                                                                                                             </span><br><span class="line">  2516 root      20   0    4388    520    428 S   0.0  0.0   0:04.22                  `- runsvdir                                                                                                        </span><br><span class="line">  2599 root      20   0    4236    372    300 S   0.0  0.0   0:00.02                      `- runsv                                                                                                       </span><br><span class="line">  2619 root      20   0    4380    376    300 S   0.0  0.0   0:00.02                          `- svlogd                                                                                                  </span><br><span class="line">  2620 root      20   0   65604   3460   2756 S   0.0  0.0   0:00.03                          `- sshd                                                                                                    </span><br><span class="line">  3799 root      20   0    4236    376    300 S   0.0  0.0   0:00.03                      `- runsv                                                                                                       </span><br><span class="line">  3839 root      20   0    4380    612    508 S   0.0  0.0   0:00.53                          `- svlogd                                                                                                  </span><br><span class="line">  3841 chrony    20   0   39592  11572   1568 S   0.0  0.0  14:50.14                          `- redis-server                                                                                            </span><br><span class="line">  3800 root      20   0    4236    372    300 S   0.0  0.0   0:00.02                      `- runsv                                                                                                       </span><br><span class="line">  3847 root      20   0    4380    376    300 S   0.0  0.0   0:00.02                          `- svlogd                                                                                                  </span><br><span class="line">  3851 dockerr+  20   0   37932   9008   8424 S   0.0  0.0   0:08.08                          `- postgres                                                                                                </span><br><span class="line">  3932 dockerr+  20   0   37932   1484    876 S   0.0  0.0   0:00.13                              `- postgres                                                                                            </span><br><span class="line">  3933 dockerr+  20   0   37932   1236    644 S   0.0  0.0   0:08.69                              `- postgres                                                                                            </span><br><span class="line">  3934 dockerr+  20   0   37932    996    408 S   0.0  0.0   0:02.86                              `- postgres                                                                                            </span><br><span class="line">  3935 dockerr+  20   0   38880   2496   1148 S   0.0  0.0   0:12.52                              `- postgres                                                                                            </span><br><span class="line">  3936 dockerr+  20   0   26804   1300    536 S   0.0  0.0   0:21.37                              `- postgres                                                                                            </span><br><span class="line">  3960 dockerr+  20   0   47964   6824   4416 S   0.0  0.0   0:00.05                              `- postgres                                                                                            </span><br><span class="line">  3967 dockerr+  20   0   48020   6548   4260 S   0.0  0.0   0:00.01                              `- postgres                                                                                            </span><br><span class="line">  5240 dockerr+  20   0   54884  14180   4704 S   0.0  0.0   0:00.40                              `- postgres                                                                                            </span><br><span class="line"> 24413 dockerr+  20   0   48100   6888   4456 S   0.0  0.0   0:00.01                              `- postgres                                                                                            </span><br><span class="line">  3801 root      20   0    4236    372    300 S   0.0  0.0   0:00.02                      `- runsv                                                                                                       </span><br><span class="line">  3812 root      20   0    4380    604    504 S   0.0  0.0   0:00.02                          `- svlogd                                                                                                  </span><br><span class="line">  3813 polkitd   20   0   24212   7780   1344 S   0.3  0.0  11:48.86                          `- gitlab-unicorn-                                                                                         </span><br><span class="line">158416 polkitd   20   0    4372    376    304 S   0.0  0.0   0:00.00                              `- sleep                                                                                               </span><br><span class="line">  3802 root      20   0    4236    368    300 S   0.0  0.0   0:00.02                      `- runsv                                                                                                       </span><br><span class="line">  3854 root      20   0    4380    608    508 S   0.0  0.0   0:00.14                          `- svlogd                                                                                                  </span><br><span class="line">  3858 polkitd   20   0 2506604 355460   8140 S   0.3  1.1  54:29.35                          `- ruby</span><br></pre></td></tr></table></figure><h4 id="Z-改变配色"><a href="#Z-改变配色" class="headerlink" title="Z 改变配色"></a>Z 改变配色</h4><p>按下 Z 向用户显示一个改变 top 命令输出颜色的屏幕。可以为任务区域选择颜色</p><h4 id="z-切换彩色显示"><a href="#z-切换彩色显示" class="headerlink" title="z 切换彩色显示"></a>z 切换彩色显示</h4><p>切换彩色，即打开或关闭彩色显示</p><h4 id="x-和-y"><a href="#x-和-y" class="headerlink" title="x 和 y"></a>x 和 y</h4><p>切换高亮信息：’x’将排序字段高亮显示（纵列）；’y’将运行进程高亮显示（横行）。依赖于你的显示设置，你可能需要让输出彩色来看到这些高亮</p><h4 id="u-特定用户的进程"><a href="#u-特定用户的进程" class="headerlink" title="u 特定用户的进程"></a>u 特定用户的进程</h4><p>显示特定用户的进程，你会被提示输入用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">top - 18:54:42 up 6 days,  3:09,  3 users,  load average: 0.03, 0.03, 0.05</span><br><span class="line">Tasks: 805 total,   1 running, 804 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1617504 free, 14321704 used, 16888544 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17775356 avail Mem </span><br><span class="line">Which user (blank for all) test</span><br><span class="line">   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND                                                                                                                                </span><br><span class="line">194790      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/14:1                                                                                                                           </span><br><span class="line">184077      2   0:00.80   0.0  0.0  20   0 S       0      0     0 kworker/20:2                                                                                                                           </span><br><span class="line">182598      2   0:00.00   0.0  0.0   0 -20 S       0      0     0 kworker/23:1H                                                                                                                          </span><br><span class="line">163470      2   0:07.62   0.0  0.0  20   0 S       0      0     0 kworker/1:2</span><br></pre></td></tr></table></figure><h4 id="n-或-任务的数量"><a href="#n-或-任务的数量" class="headerlink" title="n 或 # 任务的数量"></a>n 或 # 任务的数量</h4><p>设置最大显示的任务数量,你会被提示输入最大显示任务数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">top - 18:55:54 up 6 days,  3:10,  3 users,  load average: 0.01, 0.03, 0.05</span><br><span class="line">Tasks: 805 total,   1 running, 804 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1618168 free, 14319828 used, 16889756 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17776316 avail Mem </span><br><span class="line">Maximum tasks = 9, change to (0 is unlimited) 12</span><br><span class="line">   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND                                                                                                                                </span><br><span class="line">194790      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/14:1                                                                                                                           </span><br><span class="line">184077      2   0:00.80   0.0  0.0  20   0 S       0      0     0 kworker/20:2                                                                                                                           </span><br><span class="line">182598      2   0:00.00   0.0  0.0   0 -20 S       0      0     0 kworker/23:1H                                                                                                                          </span><br><span class="line">163470      2   0:07.62   0.0  0.0  20   0 S       0      0     0 kworker/1:2                                                                                                                            </span><br><span class="line">160134 157830   0:00.00   0.0  0.0  20   0 S    4372    376     0 sleep                                                                                                                                  </span><br><span class="line">160133 157829   0:00.00   0.0  0.0  20   0 S    4372    380     0 sleep                                                                                                                                  </span><br><span class="line">160124 157818   0:00.00   0.0  0.0  20   0 S    4372    376     0 sleep                                                                                                                                  </span><br><span class="line">159310      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/17:1                                                                                                                           </span><br><span class="line">158655 132660   0:02.53   0.9  0.0  20   0 R  158404   3044     0 top</span><br></pre></td></tr></table></figure><h3 id="top-交互命令重要"><a href="#top-交互命令重要" class="headerlink" title="top 交互命令重要"></a>top 交互命令重要</h3><h4 id="k-结束任务"><a href="#k-结束任务" class="headerlink" title="k 结束任务"></a>k 结束任务</h4><p>top 命令中最重要的一个命令之一。用于发送信号给任务（通常是结束任务），系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">top - 18:57:54 up 6 days,  3:12,  3 users,  load average: 0.02, 0.03, 0.05</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1617564 free, 14319780 used, 16890408 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17776340 avail Mem </span><br><span class="line">PID to signal/kill [default pid = 194790] 123</span><br><span class="line">   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND                                                                                                                                </span><br><span class="line">194790      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/14:1                                                                                                                           </span><br><span class="line">184077      2   0:00.81   0.0  0.0  20   0 S       0      0     0 kworker/20:2                                                                                                                           </span><br><span class="line">182598      2   0:00.00   0.0  0.0   0 -20 S       0      0     0 kworker/23:1H                                                                                                                          </span><br><span class="line">163470      2   0:07.62   0.0  0.0  20   0 S       0      0     0 kworker/1:2                                                                                                                            </span><br><span class="line">160134 157830   0:00.00   0.0  0.0  20   0 S    4372    376     0 sleep                                                                                                                                  </span><br><span class="line">160133 157829   0:00.00   0.0  0.0  20   0 S    4372    380     0 sleep                                                                                                                                  </span><br><span class="line">160124 157818   0:00.00   0.0  0.0  20   0 S    4372    376     0 sleep                                                                                                                                  </span><br><span class="line">159310      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/17:1                                                                                                                           </span><br><span class="line">158655 132660   0:02.56   0.5  0.0  20   0 R  158404   3044     0 top                                                                                                                                    </span><br><span class="line">157856      2   0:00.02   0.0  0.0  20   0 S       0      0     0 kworker/u386:2                                                                                                                         </span><br><span class="line">157830   3798   0:00.00   0.0  0.0  20   0 S    4500    660     0 gitlab-logrotat                                                                                                                        </span><br><span class="line">157829   3805   0:00.00   0.0  0.0  20   0 S    4500    660     0 gitlab-logrotat</span><br></pre></td></tr></table></figure><h4 id="1-监控每个逻辑-CPU-的状况"><a href="#1-监控每个逻辑-CPU-的状况" class="headerlink" title="1 监控每个逻辑 CPU 的状况"></a>1 监控每个逻辑 CPU 的状况</h4><p>在 top 状态下，按键盘数字 1，可监控每个逻辑CPU 的状况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">top - 18:58:51 up 6 days,  3:13,  3 users,  load average: 0.18, 0.07, 0.06</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu1  :  0.7 us,  0.0 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu3  :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu4  :  3.7 us,  0.0 sy,  0.0 ni, 96.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu5  :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu6  :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu7  :  0.7 us,  0.3 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu8  :  1.7 us,  0.3 sy,  0.0 ni, 98.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu9  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu10 :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu11 :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu12 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu13 :  0.3 us,  0.7 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu14 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu15 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu16 :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu17 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu18 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu19 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu20 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu21 :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu22 :  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu23 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1617816 free, 14319604 used, 16890332 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17776600 avail Mem </span><br><span class="line"></span><br><span class="line">   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND                                                                                                                                </span><br><span class="line">194790      2   0:00.00   0.0  0.0  20   0 S       0      0     0 kworker/14:1                                                                                                                           </span><br><span class="line">184077      2   0:00.81   0.0  0.0  20   0 S       0      0     0 kworker/20:2                                                                                                                           </span><br><span class="line">182598      2   0:00.00   0.0  0.0   0 -20 S       0      0     0 kworker/23:1H                                                                                                                          </span><br><span class="line">163470      2   0:07.62   0.0  0.0  20   0 S       0      0     0 kworker/1:2                                                                                                                            </span><br><span class="line">160134 157830   0:00.00   0.0  0.0  20   0 S    4372    376     0 sleep                                                                                                                                  </span><br><span class="line">160133 157829   0:00.00   0.0  0.0  20   0 S    4372    380     0 sleep</span><br></pre></td></tr></table></figure><h4 id="内存使用大小排序"><a href="#内存使用大小排序" class="headerlink" title="内存使用大小排序"></a>内存使用大小排序</h4><p>在 top 状态下，按 “shift + m”或 M 可以按照内存使用大小排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">top - 19:00:43 up 6 days,  3:15,  3 users,  load average: 0.09, 0.08, 0.06</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1618852 free, 14318584 used, 16890316 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17777856 avail Mem </span><br><span class="line"></span><br><span class="line">   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND                                                                                                                                </span><br><span class="line">124124      1  20:33.30   0.0  6.8  20   0 S 14.239g 2.128g     0 java                                                                                                                                   </span><br><span class="line">   573      1   0:26.14   0.0  0.3  20   0 S  143372  87424     0 systemd-journal                                                                                                                        </span><br><span class="line">  1156      1   8:23.52   0.0  0.2  20   0 S 3883032  67648     0 dockerd-current                                                                                                                        </span><br><span class="line">  1154      1   0:12.76   0.0  0.1  20   0 S  328892  45216     0 rsyslogd                                                                                                                               </span><br><span class="line">  1241   1156   0:59.20   0.0  0.1  20   0 S 2616756  25748     0 docker-containe                                                                                                                        </span><br><span class="line"> 27095  27078   0:58.97   0.0  0.1  20   0 S   97680  17440     0 python                                                                                                                                 </span><br><span class="line">  1155      1   0:41.75   0.0  0.1  20   0 S  553652  16648     0 tuned                                                                                                                                  </span><br><span class="line">  2604   2194   0:18.08   0.0  0.0  20   0 S  393816  15416     0 httpd                                                                                                                                  </span><br><span class="line"> 26799  26783   0:48.12   0.0  0.0  20   0 S   56072  11976     0 registry                                                                                                                               </span><br><span class="line">  3638   3635   0:00.07   0.0  0.0  20   0 S   57000   9236     0 omnibus-ctl                                                                                                                            </span><br><span class="line">  3637   3636   0:00.06   0.0  0.0  20   0 S   56952   9224     0 omnibus-ctl                                                                                                                            </span><br><span class="line">  3627   3625   0:00.05   0.0  0.0  20   0 S   56940   9220     0 omnibus-ctl</span><br></pre></td></tr></table></figure><h4 id="CPU-使用百分比大小进行排序"><a href="#CPU-使用百分比大小进行排序" class="headerlink" title="CPU 使用百分比大小进行排序"></a>CPU 使用百分比大小进行排序</h4><p>P 根据 CPU 使用百分比大小进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">top - 19:03:40 up 6 days,  3:18,  3 users,  load average: 0.07, 0.06, 0.05</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1615812 free, 14321340 used, 16890600 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17775304 avail Mem </span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                             </span><br><span class="line">  3858 polkitd   20   0 2506604 355460   8140 S   2.0  1.1  54:35.32 ruby                                                                                                                                </span><br><span class="line">  2894 27        20   0 3208312 302588  10160 S   1.7  0.9 154:57.39 mysqld                                                                                                                              </span><br><span class="line">161936 root      20   0  158404   2992   1572 R   1.0  0.0   0:00.12 top                                                                                                                                 </span><br><span class="line">  3730 polkitd   20   0 2504944 421788   8140 S   0.7  1.3  53:59.99 ruby                                                                                                                                </span><br><span class="line">  3848 polkitd   20   0 2932128 775012  12416 S   0.7  2.4  55:13.78 ruby                                                                                                                                </span><br><span class="line">    10 root      20   0       0      0      0 S   0.3  0.0  17:53.44 rcu_sched                                                                                                                           </span><br><span class="line">  2549 dockerr+  20   0 2801380 596372   8304 S   0.3  1.8  31:54.11 mysqld                                                                                                                              </span><br><span class="line">  2852 polkitd   20   0   81740   2936   2132 S   0.3  0.0   7:58.54 zabbix_agentd                                                                                                                       </span><br><span class="line">  3684 polkitd   20   0  276376  41128  18308 S   0.3  0.1   4:20.61 zabbix_server                                                                                                                       </span><br><span class="line">  3725 chrony    20   0   39592  10648   1568 S   0.3  0.0  14:56.47 redis-server                                                                                                                        </span><br><span class="line">  3752 systemd+  20   0   46096   5456    580 S   0.3  0.0   0:28.02 nginx                                                                                                                               </span><br><span class="line">  3811 polkitd   20   0   24208   7780   1344 S   0.3  0.0  11:04.31 gitlab-unicorn-                                                                                                                     </span><br><span class="line">  3841 chrony    20   0   39592  11572   1568 S   0.3  0.0  14:51.71 redis-server                                                                                                                        </span><br><span class="line">  3919 systemd+  20   0   46096   5452    580 S   0.3  0.0   0:27.66 nginx                                                                                                                               </span><br><span class="line"> 20542 zabbix    20   0   84308   2992   2172 S   0.3  0.0   7:35.70 zabbix_agentd                                                                                                                       </span><br><span class="line">124124 root      20   0 14.239g 2.128g  28820 S   0.3  6.8  20:33.53 java                                                                                                                                </span><br><span class="line">     1 root      20   0  192360   5436   2436 S   0.0  0.0   0:10.79 systemd                                                                                                                             </span><br><span class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:00.06 kthreadd                                                                                                                            </span><br><span class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:00.28 ksoftirqd/0                                                                                                                         </span><br><span class="line">     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                                                                                        </span><br><span class="line">     8 root      rt   0       0      0      0 S   0.0  0.0   0:00.13 migration/0</span><br></pre></td></tr></table></figure><h4 id="进程运行时间进行排序"><a href="#进程运行时间进行排序" class="headerlink" title="进程运行时间进行排序"></a>进程运行时间进行排序</h4><p>T 根据 进程运行时间进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">top - 19:04:44 up 6 days,  3:19,  3 users,  load average: 0.02, 0.05, 0.05</span><br><span class="line">Tasks: 804 total,   1 running, 803 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1617084 free, 14319604 used, 16891064 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17776984 avail Mem </span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                             </span><br><span class="line">  2894 27        20   0 3208312 302588  10160 S   0.3  0.9 154:58.34 mysqld                                                                                                                              </span><br><span class="line">  3848 polkitd   20   0 2932128 775012  12416 S   1.0  2.4  55:14.22 ruby                                                                                                                                </span><br><span class="line">  3858 polkitd   20   0 2506604 355460   8140 S   1.3  1.1  54:35.71 ruby                                                                                                                                </span><br><span class="line">  3730 polkitd   20   0 2504944 421788   8140 S   1.0  1.3  54:00.37 ruby                                                                                                                                </span><br><span class="line">  2549 dockerr+  20   0 2801380 596372   8304 S   0.3  1.8  31:54.33 mysqld                                                                                                                              </span><br><span class="line">124124 root      20   0 14.239g 2.128g  28820 S   0.0  6.8  20:33.60 java                                                                                                                                </span><br><span class="line">    10 root      20   0       0      0      0 S   0.0  0.0  17:53.57 rcu_sched                                                                                                                           </span><br><span class="line">  3807 chrony    20   0   39592  10196   1568 S   0.7  0.0  15:25.02 redis-server                                                                                                                        </span><br><span class="line">  3725 chrony    20   0   39592  10648   1568 S   0.0  0.0  14:56.57 redis-server                                                                                                                        </span><br><span class="line">  3841 chrony    20   0   39592  11572   1568 S   0.3  0.0  14:51.82 redis-server                                                                                                                        </span><br><span class="line">  3718 polkitd   20   0   24208   7780   1344 S   0.0  0.0  11:55.40 gitlab-unicorn-                                                                                                                     </span><br><span class="line">  3813 polkitd   20   0   24212   7780   1344 S   0.0  0.0  11:50.31 gitlab-unicorn-                                                                                                                     </span><br><span class="line">  3811 polkitd   20   0   24208   7780   1344 S   0.7  0.0  11:04.39 gitlab-unicorn-                                                                                                                     </span><br><span class="line">  1338 root       0 -20       0      0      0 S   0.0  0.0   8:28.10 loop0                                                                                                                               </span><br><span class="line">  3671 polkitd   20   0  279816  22588   9196 S   0.0  0.1   8:26.20 zabbix_server                                                                                                                       </span><br><span class="line">  1156 root      20   0 3883032  67648  16088 S   0.0  0.2   8:23.69 dockerd-current                                                                                                                     </span><br><span class="line">  2852 polkitd   20   0   81740   2936   2132 S   0.0  0.0   7:58.60 zabbix_agentd                                                                                                                       </span><br><span class="line">  3670 polkitd   20   0  274844  18312   9804 S   0.0  0.1   7:49.99 zabbix_server                                                                                                                       </span><br><span class="line"> 20542 zabbix    20   0   84308   2992   2172 S   0.3  0.0   7:35.76 zabbix_agentd                                                                                                                       </span><br><span class="line">  3659 polkitd   20   0  255732   6716   4532 S   0.0  0.0   7:05.92 zabbix_server</span><br></pre></td></tr></table></figure><h4 id="q-退出程序"><a href="#q-退出程序" class="headerlink" title="q 退出程序"></a>q 退出程序</h4><p>q 退出程序</p><h4 id="保存当前配置到配置文件"><a href="#保存当前配置到配置文件" class="headerlink" title="保存当前配置到配置文件"></a>保存当前配置到配置文件</h4><p>W 将当前设置写入到配置文件，下次启动 top 时将和当前设置一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">top - 19:08:01 up 6 days,  3:23,  3 users,  load average: 0.13, 0.07, 0.05</span><br><span class="line">Tasks: 805 total,   1 running, 804 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 32827752 total,  1615392 free, 14320940 used, 16891420 buff/cache</span><br><span class="line">KiB Swap: 33554428 total, 33554428 free,        0 used. 17775468 avail Mem </span><br><span class="line"> Wrote configuration to &apos;/root/.toprc&apos; </span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                             </span><br><span class="line">  2894 27        20   0 3208312 302588  10160 S   0.5  0.9 155:00.93 mysqld                                                                                                                              </span><br><span class="line">  3848 polkitd   20   0 2932128 775012  12416 S   0.5  2.4  55:15.40 ruby                                                                                                                                </span><br><span class="line">  3858 polkitd   20   0 2506604 355460   8140 S   0.0  1.1  54:36.91 ruby                                                                                                                                </span><br><span class="line">  3730 polkitd   20   0 2504944 421788   8140 S   0.5  1.3  54:01.61 ruby                                                                                                                                </span><br><span class="line">  2549 dockerr+  20   0 2801380 596372   8304 S   0.5  1.8  31:55.06 mysqld                                                                                                                              </span><br><span class="line">124124 root      20   0 14.239g 2.128g  28820 S   0.0  6.8  20:33.84 java                                                                                                                                </span><br><span class="line">    10 root      20   0       0      0      0 S   0.0  0.0  17:53.99 rcu_sched                                                                                                                           </span><br><span class="line">  3807 chrony    20   0   39592  10196   1568 S   0.0  0.0  15:25.35 redis-server</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux 系统管理 </category>
          
          <category> top </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础 之 if语句</title>
      <link href="/2018/05/10/Python-if/"/>
      <url>/2018/05/10/Python-if/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-if.png" title="Python基础 之 if语句"></center><a id="more"></a><h3 id="if语句示例"><a href="#if语句示例" class="headerlink" title="if语句示例"></a>if语句示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">languages = [&quot;python&quot;,&quot;java&quot;,&quot;c&quot;,&quot;c++&quot;,&quot;php&quot;,&quot;perl&quot;]</span><br><span class="line"></span><br><span class="line">for i in languages:</span><br><span class="line">    if i == &apos;python&apos;:</span><br><span class="line">        print(i.upper())</span><br><span class="line">    else:</span><br><span class="line">        print(i.title())</span><br><span class="line"></span><br><span class="line"># 运行后结果</span><br><span class="line">PYTHON</span><br><span class="line">Java</span><br><span class="line">C</span><br><span class="line">C++</span><br><span class="line">Php</span><br><span class="line">Perl</span><br></pre></td></tr></table></figure><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。</p><h4 id="检查是否相等"><a href="#检查是否相等" class="headerlink" title="检查是否相等"></a>检查是否相等</h4><p>大多数测试条件都将一个变量的当前值同特定值进行比较。最简单的条件测试检查变量的值是否与特定的值相等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; car = &apos;bmw&apos;</span><br><span class="line">&gt;&gt;&gt; car == &apos;bmw&apos;</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>在这个示例中，两边的值相等，因此Python返回True</p><p>如果变量car的值不是’bmw’，上述测试将返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; car = &apos;audi&apos;</span><br><span class="line">&gt;&gt;&gt; car == &apos;bmw&apos;</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="检查是否相等时不考虑大小写"><a href="#检查是否相等时不考虑大小写" class="headerlink" title="检查是否相等时不考虑大小写"></a>检查是否相等时不考虑大小写</h4><p>在Python中检查是否相等时区分大小写，例如，两个大小写不同的值会被视为不相等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; car = &apos;audi&apos;</span><br><span class="line">&gt;&gt;&gt; car == &apos;Audi&apos;</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>如果大小写很重要，这种行为有其优点。但如果大小写无关紧要，而只是想检查变量的值，可将变量的值转换为小写，在进行比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; car = &apos;Audi&apos;</span><br><span class="line">&gt;&gt;&gt; car.lower() == &apos;audi&apos;</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="检查是否不相等"><a href="#检查是否不相等" class="headerlink" title="检查是否不相等"></a>检查是否不相等</h4><p>要判断两个值是否不等，可结合使用惊叹号和等号(!=)，其中的惊叹号表示不，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1 = &apos;test1&apos;</span><br><span class="line"></span><br><span class="line">if var1 != &apos;test&apos;:</span><br><span class="line">    print(var1)</span><br></pre></td></tr></table></figure><h4 id="比较数字"><a href="#比较数字" class="headerlink" title="比较数字"></a>比较数字</h4><p>检查数字非常简单，例如，下面的的代码检查一个人是否是18岁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age = 18</span><br><span class="line">&gt;&gt;&gt; age == 18</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>你还可以检查两个数字是否不等，例如，下面的代码在提供的答案不正确时打印一条消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">answer = 22</span><br><span class="line"></span><br><span class="line">if answer != 12:</span><br><span class="line">    print(&quot;answer != 12&quot;)</span><br><span class="line"></span><br><span class="line"># 代码执行结果：</span><br><span class="line">answer != 12</span><br></pre></td></tr></table></figure><p>条件语句中可包含各种数字比较，如小于、小于等于、大于、大于等于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age = 19 </span><br><span class="line">&gt;&gt;&gt; age &lt; 22</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; age &gt; 22</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; age &gt;= 19</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; age &lt;= 23</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h4><p>你可能想同时检查多个条件，例如，有时候你需要在两个条件都为True时才能执行相应的操作，而有时你只要求一个条件为True时就执行相应的操作。在这些情况下，关键字and和or可助你一臂之力。</p><h5 id="1-使用and检查多个条件"><a href="#1-使用and检查多个条件" class="headerlink" title="1. 使用and检查多个条件"></a>1. 使用and检查多个条件</h5><p>要检查是否两个条件都为True，可使用关键字and将两个条件测试合二为一；如果每个测试都通过了，整个表达式就为True；如果至少有一个没有通过，整个表达式就为False。</p><p>例如，要检查是否两个人都不小于21岁，可使用下面的测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age_0 = 22</span><br><span class="line">&gt;&gt;&gt; age_1 = 12</span><br><span class="line">&gt;&gt;&gt; age_0 &gt;= 22 and age_1 &gt;=22</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>为改善可读性，可将每个测试都分别放在一对括号内，但并非必须这样做。如果你使用括号，测试将类似于下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age_0 = 22</span><br><span class="line">&gt;&gt;&gt; age_1 = 12</span><br><span class="line">&gt;&gt;&gt; (age_0 &gt;= 22) and (age_1 &gt;= 22)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h5 id="2-使用or检查多个条件"><a href="#2-使用or检查多个条件" class="headerlink" title="2. 使用or检查多个条件"></a>2. 使用or检查多个条件</h5><p>关键字or也能够让你检查多个条件，但只要至少有一个条件满足，就能通过整个测试。仅当两个测试都没有通过时，使用or的表达式才为False：</p><p>下面再次检查两个人的年龄，但检查的条件是至少有一个人不小于22：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age_1 = 12</span><br><span class="line">&gt;&gt;&gt; age_0 = 22</span><br><span class="line">&gt;&gt;&gt; (age_0 &gt;= 22) or (age_1 &gt;= 22)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="检查特定值是否包含在列表中"><a href="#检查特定值是否包含在列表中" class="headerlink" title="检查特定值是否包含在列表中"></a>检查特定值是否包含在列表中</h4><p>有时候，执行操作前必须检查列表是否包含特定的值。例如，结束用户的注册过程前，可能需要检查他提供的用户名是否已包含在用户名列表中。在地图程序中，可能需要检查用户提交的位置是否包含在已知位置列表中。</p><p>要判断特定的值是否已经包含在列表中，可使用关键字in。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;python&quot;,&quot;java&quot;,&quot;c&quot;,&quot;c++&quot;,&quot;php&quot;,&quot;perl&quot;]</span><br><span class="line">&gt;&gt;&gt; &apos;c&apos; in languages</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &apos;asdf&apos; in languages</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="检查特定的值是否不包含在列表中"><a href="#检查特定的值是否不包含在列表中" class="headerlink" title="检查特定的值是否不包含在列表中"></a>检查特定的值是否不包含在列表中</h4><p>还有些时候，确定特定的值未包含在列表中很重要；在这种情况下，可使用关键字not in。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;python&quot;,&quot;java&quot;,&quot;c&quot;,&quot;c++&quot;,&quot;php&quot;,&quot;perl&quot;]</span><br><span class="line">&gt;&gt;&gt; &apos;asdfasdf&apos; not in languages</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &apos;c&apos; not in languages</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h4><p>随着你对编程的了解越来越深入，将遇到术语布尔表达式，它不过是条件测试的别名。与条件表达式一样，布尔表达式的结果要么为True，要么为False。</p><p>布尔值通常用于记录条件，如游戏是否正在运行，或用户是否可以编辑网站的特定内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; game_active = True</span><br><span class="line">&gt;&gt;&gt; can_edit = False</span><br></pre></td></tr></table></figure><p>在跟踪程序状态或程序中重要的条件方面，布尔值提供了一种高效的方式。</p><h3 id="if语句格式"><a href="#if语句格式" class="headerlink" title="if语句格式"></a>if语句格式</h3><p>Python中if语句的一般形式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line">elif condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line">else:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure><ul><li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句</li></ul><p><strong>注意：</strong></p><ul><li>1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。</li><li>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li><li>3、在Python中没有switch – case语句。</li></ul><h4 id="简单的if语句"><a href="#简单的if语句" class="headerlink" title="简单的if语句"></a>简单的if语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 22</span><br><span class="line"></span><br><span class="line">if age &gt; 18:</span><br><span class="line">    print(&quot;you are old&quot;)</span><br><span class="line"></span><br><span class="line"># 代码执行结果</span><br><span class="line">you are old</span><br></pre></td></tr></table></figure><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><p>经常需要在条件测试通过了时，执行一个操作，并在没有通过时执行另一个操作；在这种情况下，可使用Python提供的if-else语句。if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = 11</span><br><span class="line"></span><br><span class="line">if age &gt; 18:</span><br><span class="line">    print(&quot;you are old&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;you are young&quot;)</span><br><span class="line"></span><br><span class="line"># 代码执行结果</span><br><span class="line">you are young</span><br></pre></td></tr></table></figure><h4 id="if-elif-else结构"><a href="#if-elif-else结构" class="headerlink" title="if-elif-else结构"></a>if-elif-else结构</h4><p>经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。python只执行if-elif-else结构中的一个代码块，它依次检查每个条件测试，知道遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p><p>在生活中，很多情况下需要考虑的情形都超过两个。例如根据年龄段收费的公园：</p><ul><li style="list-style: none"><input type="checkbox"> 4岁以下免费</li><li style="list-style: none"><input type="checkbox"> 4-10岁收费5元</li><li style="list-style: none"><input type="checkbox"> 10-18岁收费10元</li><li style="list-style: none"><input type="checkbox"> 18岁（含以上）收费15元</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">age = 15</span><br><span class="line"></span><br><span class="line">if age &lt; 4:</span><br><span class="line">    print(&quot;RMB: ￥ 0&quot;)</span><br><span class="line">elif age &gt;= 4 and age &lt; 10:</span><br><span class="line">    print(&quot;RMB: ￥ 5&quot;)</span><br><span class="line">elif age &gt;= 10 and age &lt; 18:</span><br><span class="line">    print(&quot;RMB: ￥ 10&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;RMB: ￥ 15&quot;)</span><br><span class="line"></span><br><span class="line"># 代码执行结果</span><br><span class="line">RMB: ￥ 10</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python基础 之 if语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Open vSwitch</title>
      <link href="/2018/05/09/OpenvSwitch-Install/"/>
      <url>/2018/05/09/OpenvSwitch-Install/</url>
      <content type="html"><![CDATA[<h3 id="获取Open-vSwitch来源"><a href="#获取Open-vSwitch来源" class="headerlink" title="获取Open vSwitch来源"></a>获取Open vSwitch来源</h3><p>Open vSwitch源代码的规范位置是其Git存储库，您可以使用以下命令将其克隆到名为“ovs”的目录中：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode OpenvSwitch]# git clone https://github.com/openvswitch/ovs.git</span><br><span class="line">Cloning into &apos;ovs&apos;...</span><br><span class="line">remote: Counting objects: 129519, done.</span><br><span class="line">remote: Compressing objects: 100% (45/45), done.</span><br><span class="line">remote: Total 129519 (delta 25), reused 6 (delta 2), pack-reused 129472</span><br><span class="line">Receiving objects: 100% (129519/129519), 66.68 MiB | 16.38 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (103380/103380), done.</span><br></pre></td></tr></table></figure><p>克隆版本库会最初检出“主”分支。这是一般发展的正确分支。另一方面，如果你想构建一个特定的发布版本，你可以通过在“ovs”目录下运行如下命令来检查它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# git checkout v2.7.0</span><br></pre></td></tr></table></figure><p>该存储库还为每个发行版系列提供了一个分支。例如，要获得Open vSwitch 2.7.x发行版系列中的最新修复程序（可能包含尚未发布的任何版本的修补程序），可以使用以下命令从“ovs”目录检出它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# git checkout origin/branch-2.7</span><br></pre></td></tr></table></figure><p>如果您不想使用Git，还可以通过<a href="http://openvswitch.org/download/" target="_blank" rel="noopener">http://openvswitch.org/download/</a>获取Open vSwitch发行版本的tarball ，或者从<a href="https://github.com/openvswitch/ovs" target="_blank" rel="noopener">https：// github上</a>的Web界面下载任何快照的ZIP文件 <a href="https://github.com/openvswitch/ovs" target="_blank" rel="noopener">https://github.com/openvswitch/ovs</a></p><h3 id="编译安装要求"><a href="#编译安装要求" class="headerlink" title="编译安装要求"></a>编译安装要求</h3><p>要构建Open vSwitch发行版中的用户空间程序，需要以下软件：</p><ul><li>GNU make</li><li>A C compiler, such as:<ul><li>GCC 4.6 or later.</li><li>Clang 3.4 or later.</li><li>MSVC 2013. Refer to <a href="http://docs.openvswitch.org/en/latest/intro/install/windows/" target="_blank" rel="noopener">Open vSwitch on Windows</a> for additional Windows build instructions.</li></ul></li><li>来自OpenSSL的libssl是可选的，但建议如果您打算将Open vSwitch连接到OpenFlow控制器。libssl需要在从Open vSwitch到OpenFlow控制器的连接中建立机密性和真实性。如果安装了libssl，则Open vSwitch将自动构建并支持它。</li><li>由Steve Grubb编写的libcap-ng是可选的，但建议使用。需要以具有删除的root权限的非root用户身份运行OVS守护程序。如果安装了libcap-ng，则Open vSwitch将自动构建并支持它。</li><li>Python 2.7。您还必须具有Python <code>six</code>库版本1.4.0或更高版本。</li></ul><p><a href="http://docs.openvswitch.org/en/latest/intro/install/general/#obtaining-open-vswitch-sources" target="_blank" rel="noopener">其他要求请参见：http://docs.openvswitch.org/en/latest/intro/install/general/#obtaining-open-vswitch-sources</a></p><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>您构建Open vSwitch的机器可能不是您运行它的机器。要简单地安装并运行Open vSwitch，您需要以下软件：</p><ul><li>与用于构建的共享库兼容。</li><li>在Linux上，如果您想使用基于内核的数据路径（这是最常见的用例），那么使用兼容内核模块的内核。这可以是使用Open vSwitch构建的内核模块（例如上一步），也可以是Linux 3.3及更高版本附带的内核模块。Open vSwitch的功能和性能可能因模块和内核而异。有关更多信息，请参阅<a href="http://docs.openvswitch.org/en/latest/faq/releases/" target="_blank" rel="noopener">发行版</a>。</li><li>为了可选地支持Linux上的入口管制，iproute2的“tc”程序（所有主要发行版的一部分，可在<a href="https://wiki.linuxfoundation.org/networking/iproute2" target="_blank" rel="noopener">https://wiki.linuxfoundation.org/networking/iproute2上获得</a>）。</li><li>Python 2.7。您还必须拥有Python 6库1.4.0或更高版本。</li></ul><p>在Linux上，你应该确保<code>/dev/urandom</code>存在。要支持TAP设备，您还必须确保<code>/dev/net/tun</code>存在。</p><h3 id="编译安装Open-vSwitch"><a href="#编译安装Open-vSwitch" class="headerlink" title="编译安装Open vSwitch"></a>编译安装Open vSwitch</h3><h4 id="生成configure脚本"><a href="#生成configure脚本" class="headerlink" title="生成configure脚本"></a>生成configure脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# ./boot.sh</span><br></pre></td></tr></table></figure><h4 id="运行configure"><a href="#运行configure" class="headerlink" title="运行configure"></a>运行configure</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# ./configure</span><br></pre></td></tr></table></figure><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# make</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>将可执行文件和联机帮助页安装到正在运行的系统中，默认情况下位于：/usr/local</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# make install</span><br></pre></td></tr></table></figure><h4 id="加载openvswitch模块"><a href="#加载openvswitch模块" class="headerlink" title="加载openvswitch模块"></a>加载openvswitch模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# modprobe openvswitch</span><br><span class="line"># 验证模块是否加载</span><br><span class="line">[root@namenode ovs]# lsmod | grep openvswitch       # 已经加载</span><br><span class="line">openvswitch           106996  0 </span><br><span class="line">nf_nat_ipv6            14131  1 openvswitch</span><br><span class="line">nf_defrag_ipv6         35104  2 openvswitch,nf_conntrack_ipv6</span><br><span class="line">nf_nat_ipv4            14115  2 openvswitch,iptable_nat</span><br><span class="line">nf_nat                 26787  4 openvswitch,nf_nat_ipv4,nf_nat_ipv6,nf_nat_masquerade_ipv4</span><br><span class="line">nf_conntrack          133387  8 openvswitch,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_ipv4,nf_conntrack_ipv6</span><br><span class="line">libcrc32c              12644  5 xfs,dm_persistent_data,openvswitch,nf_nat,nf_conntrack</span><br></pre></td></tr></table></figure><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>安装完成后还有一个shell脚本和ovs-ctl工具，它可以执行启动和停止ovsdb-server以及ovs-vswitchd的大部分任务。安装后，可以使用ovs-ctl来启动守护进程。这将会设置初始条件，并以正确的顺序启动守护进程。ovs-ctl位置在<code>$(pkgdatadir)/ scripts</code>中，默认为/usr/local/share/openvswitch/scripts。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# export PATH=$PATH:/usr/local/share/openvswitch/scripts</span><br><span class="line">[root@namenode ovs]# ovs-ctl start</span><br><span class="line">/usr/local/etc/openvswitch/conf.db does not exist ... (warning).</span><br><span class="line">Creating empty database /usr/local/etc/openvswitch/conf.db [  OK  ]</span><br><span class="line">Starting ovsdb-server                                      [  OK  ]</span><br><span class="line">system ID not configured, please use --system-id ... failed!</span><br><span class="line">Configuring Open vSwitch system IDs                        [  OK  ]</span><br><span class="line">Starting ovs-vswitchd                                      [  OK  ]</span><br><span class="line">Enabling remote OVSDB managers                             [  OK  ]</span><br></pre></td></tr></table></figure><p>此外，ovs-ctl脚本允许使用特定的选项单独启动/停止守护进程。例如：启动ovsdb-server：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# ovs-ctl --no-ovs-vswitchd start</span><br><span class="line">ovsdb-server is already running.</span><br><span class="line">Enabling remote OVSDB managers                             [  OK  ]</span><br></pre></td></tr></table></figure><p>同样，要开始ovs-switchd：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# ovs-ctl --no-ovsdb-server start</span><br><span class="line">ovs-vswitchd is already running.</span><br><span class="line">Enabling remote OVSDB managers                             [  OK  ]</span><br></pre></td></tr></table></figure><p>使用ovs-ctl初始化数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode ovs]# ovs-vsctl --no-wait init</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://docs.openvswitch.org/en/latest/intro/install/general/" target="_blank" rel="noopener">OpenvSwitch 官网安装文档</a></p>]]></content>
      
      <categories>
          
          <category> Open vSwitch </category>
          
          <category> 安装Open vSwitch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么要用Open vSwitch？</title>
      <link href="/2018/05/09/Why-Use-OpenvSwitch/"/>
      <url>/2018/05/09/Why-Use-OpenvSwitch/</url>
      <content type="html"><![CDATA[<h3 id="为什么要用Open-vSwitch？"><a href="#为什么要用Open-vSwitch？" class="headerlink" title="为什么要用Open vSwitch？"></a>为什么要用Open vSwitch？</h3><p>虚拟机管理程序需要能够跨越虚拟机和外部世界之间的流量。在基于Linux的管理程序中，这常常意味着使用内置的L2交换机（Linux网桥），该交换机快速可靠。因此，有必要问为什么使用Open vSwitch。</p><p><strong>答案</strong>是Open vSwitch面向多服务器虚拟化部署，这是前一个堆栈不太适合的一个环境。这些环境通常以高度动态的端点，逻辑抽象的维护以及（有时）与专用交换硬件的集成或卸载为特征。</p><p>以下特征和设计注意事项有助于Open vSwitch应对上述要求。</p><a id="more"></a><h4 id="The-mobility-of-state"><a href="#The-mobility-of-state" class="headerlink" title="The mobility of state"></a>The mobility of state</h4><p>与网络实体（如虚拟机）关联的所有网络状态都应该易于在不同主机之间进行识别和迁移。这可以包括传统的“软状态”（例如L2学习表中的条目），L3转发状态，策略路由状态，ACL，QoS策略，监控配置（例如NetFlow，IPFIX，sFlow）等。</p><p>Open vSwitch支持在实例之间配置和迁移缓慢（配置）和快速网络状态。例如，如果VM在终端主机之间迁移，则不仅可以迁移相关配置（SPAN规则，ACL，QoS），而且还可以迁移任何实时网络状态（包括可能难以重建的现有状态）。此外，打开vSwitch状态是由一个真实的数据模型打印和支持的，允许开发结构化自动化系统。</p><h4 id="Responding-to-network-dynamics"><a href="#Responding-to-network-dynamics" class="headerlink" title="Responding to network dynamics"></a>Responding to network dynamics</h4><p>虚拟环境通常具有高速变化的特点。来来往往的虚拟机，及时向前和向后移动的虚拟机，逻辑网络环境的变化等等。</p><p>Open vSwitch支持许多功能，允许网络控制系统在环境发生变化时作出响应和调整。这包括简单的会计和可视性支持，如NetFlow，IPFIX和sFlow。但也许更有用，Open vSwitch支持支持远程触发器的网络状态数据库（OVSDB）。因此，一个编排软件可以“监视”网络的各个方面，并在其发生变化时作出响应。例如，这在今天被大量使用来响应和跟踪VM迁移。</p><p>Open vSwitch还支持OpenFlow作为导出远程访问以控制流量的方法。通过检查发现或链路状态的流量（例如LLDP，CDP，OSPF等），这有很多用途，包括全局网络发现。</p><h4 id="Maintenance-of-logical-tags"><a href="#Maintenance-of-logical-tags" class="headerlink" title="Maintenance of logical tags"></a>Maintenance of logical tags</h4><p>分布式虚拟交换机（例如VMware vDS和Cisco Nexus 1000V）通常通过附加或操纵网络数据包中的标签来维护网络内的逻辑上下文。这可以用来唯一标识虚拟机（以抵制硬件欺骗的方式），或者用于保存仅与逻辑域相关的其他上下文。构建分布式虚拟交换机的大部分问题都是为了高效并正确地管理这些标签。</p><p>Open vSwitch包含多种用于指定和维护标记规则的方法，所有这些方法都可供远程进程访问以供编排。此外，在许多情况下，这些标记规则以优化形式存储，因此它们不必与重量级网络设备耦合。例如，这允许配置，更改和迁移数千个标记或地址重新映射规则。</p><p>同样，Open vSwitch支持GRE实现，可以处理数千个并发GRE隧道，并支持远程配置隧道创建，配置和拆除。例如，这可以用于连接不同数据中心中的私有VM网络。</p><h4 id="Hardware-integration"><a href="#Hardware-integration" class="headerlink" title="Hardware integration"></a>Hardware integration</h4><p>Open vSwitch的转发路径（内核数据路径）旨在将分组处理“卸载”到硬件芯片组，无论是安装在经典的硬件交换机机箱还是位于终端主机NIC中。这允许Open vSwitch控制路径能够控制纯粹的软件实现或硬件开关。</p><p>目前有许多努力将Open vSwitch移植到硬件芯片组上。这些包括多个商家硅芯片组（Broadcom和Marvell）以及许多供应商特定的平台。</p><p>硬件集成的优势不仅在于虚拟化环境中的性能。如果物理交换机也暴露Open vSwitch控制抽象，则可以使用相同的机制来管理裸机和虚拟化主机环境，以实现自动网络控制。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在许多方面，Open vSwitch在设计空间中的目标位置与以前的虚拟机管理程序网络堆栈不同，主要关注在基于Linux的大型虚拟化环境中对自动化和动态网络控制的需求。</p><p>Open vSwitch的目标是保持内核代码尽可能小（如性能所需），并在适用时重用现有子系统（例如Open vSwitch使用现有的QoS堆栈）。从Linux 3.3开始，Open vSwitch作为内核的一部分包含在内，用户空间实用程序的打包在大多数流行的发行版上都可用。</p>]]></content>
      
      <categories>
          
          <category> Open vSwitch </category>
          
          <category> 为什么要用Open vSwitch？ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>What Is Open vSwitch</title>
      <link href="/2018/05/08/OVS/"/>
      <url>/2018/05/08/OVS/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/OVS-1.png" title="Open vSwitch"></center><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="http://www.openvswitch.org/" target="_blank" rel="noopener">官网：www.openvswitch.org</a></p><p><a href="http://docs.openvswitch.org" target="_blank" rel="noopener">官网文档：docs.openvswitch.org</a></p><p>Open vSwitch是一种多层软件开关，以开源Apache 2许可证授权。我们的目标是实施一个支持标准管理界面的生产质量转换平台，并打开转发功能以实现程序化扩展和控制。</p><p>Open vSwitch非常适合在VM环境中充当虚拟交换机。除了向虚拟网络层公开标准控制和可见性接口之外，它还设计用于支持跨多个物理服务器进行分发。Open vSwitch支持多种基于Linux的虚拟化技术，包括Xen/XenServer，KVM和VIrtualBox。</p><p>大部分代码都是用独立于平台的C语言编写的，可以轻松移植到其他环境中。Open vSwitch的当前版本支持以下功能：</p><ul><li>具有中继和接入端口的标准802.1Q VLAN模型</li><li>在上游交换机上使用或不使用LACP的NIC绑定</li><li>NetFlow，sFlow（R）和镜像以提高可视性</li><li>QoS（服务质量）配置，加上监管</li><li>Geneve，GRE，VXLAN，STT和LISP隧道</li><li>802.1ag连接故障管理</li><li>OpenFlow 1.0加上许多扩展</li><li>具有C和Python绑定的事务配置数据库</li><li>使用Linux内核模块进行高性能转发</li></ul><p>包含的Linux内核模块支持Linux 3.10及更高的版本。</p><p>Open vSwitch也可以完全在用户空间中运行，无需内核模块的帮助。这个空间实现应该比基于内核的交换机更容易移植。用户空间中的OVS可以访问Linux或DPDK设备。注意打开带有用户空间数据路径和非DPDF设备的vSwitch被认为是实验性的，并且性能成本较高。</p><h3 id="这里有什么？"><a href="#这里有什么？" class="headerlink" title="这里有什么？"></a>这里有什么？</h3><p>这种分配的主要组成部分是：</p><ul><li>ovs-vswitchd，一个实现交换机的守护进程，以及一个用于基于流的交换的配套Linux内核模块。</li><li>ovsdb-server，一种轻量级数据库服务器，用于ovs-vswitchd查询以获取其配置。</li><li>ovs-dpctl，一款用于配置交换机内核模块的工具。</li><li>用于为Citrix XenServer和Red Hat Enterprise Linux构建RPM的脚本和规范。XenServer RPM允许将Open vSwitch安装在Citrix XenServer主机上，作为其交换机的直接替代品，并具有其他功能。</li><li>ovs-vsctl，用于查询和更新ovs-vswitchd配置的实用程序。</li><li>ovs-appctl，一种将命令发送到运行Open vSwitch守护程序的实用程序。</li></ul><p>Open vSwitch还提供了一些工具：</p><ul><li>ovs-ofctl，用于查询和控制OpenFlow交换机和控制器的实用工具。</li><li>ovs-pki，一种用于创建和管理公钥基础设施的工具</li></ul>]]></content>
      
      <categories>
          
          <category> SDN </category>
          
          <category> What Is Open vSwitch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Open vSwitch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常用数据类型-元组</title>
      <link href="/2018/05/07/Python-tuple/"/>
      <url>/2018/05/07/Python-tuple/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-tuple.png" title="Python常用数据类型-元组"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><p>元组使用小括号，列表使用方括号。</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><h3 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = (&quot;Python&quot;,&quot;C&quot;,&quot;Java&quot;,&quot;Ruby&quot;,&quot;PHP&quot;)</span><br><span class="line">&gt;&gt;&gt; language[0]</span><br><span class="line">&apos;Python&apos;</span><br><span class="line">&gt;&gt;&gt; language[1]</span><br><span class="line">&apos;C&apos;</span><br></pre></td></tr></table></figure><h3 id="尝试修改元组的值"><a href="#尝试修改元组的值" class="headerlink" title="尝试修改元组的值"></a>尝试修改元组的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = (&quot;Python&quot;,&quot;C&quot;,&quot;Java&quot;,&quot;Ruby&quot;,&quot;PHP&quot;)</span><br><span class="line">&gt;&gt;&gt; language[0] = &quot;C++&quot;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &apos;tuple&apos; object does not support item assignment</span><br><span class="line">&gt;&gt;&gt; language</span><br><span class="line">(&apos;Python&apos;, &apos;C&apos;, &apos;Java&apos;, &apos;Ruby&apos;, &apos;PHP&apos;)</span><br></pre></td></tr></table></figure><p>尝试修改元组中第一个元素的值，导致Python返回类型错误消息。由于试图修改元组的操作是被禁止的，因此Python指出不能给元组的元素复制</p><h3 id="遍历元组中的所有值"><a href="#遍历元组中的所有值" class="headerlink" title="遍历元组中的所有值"></a>遍历元组中的所有值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = (&quot;Python&quot;,&quot;C&quot;,&quot;Java&quot;,&quot;Ruby&quot;,&quot;PHP&quot;)</span><br><span class="line">&gt;&gt;&gt; for i in language:</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Java</span><br><span class="line">Ruby</span><br><span class="line">PHP</span><br></pre></td></tr></table></figure><h3 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h3><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len((1, 2, 3))</td><td>3</td><td>计算元素个数</td></tr><tr><td>(1, 2, 3) + (4, 5, 6)</td><td>(1, 2, 3, 4, 5, 6)</td><td>连接</td></tr><tr><td>(‘Hi!’,) * 4</td><td>(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td>复制</td></tr><tr><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td></tr><tr><td>for x in (1, 2, 3): print (x,)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h3><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = (&quot;Python&quot;,&quot;C&quot;,&quot;Java&quot;,&quot;Ruby&quot;,&quot;PHP&quot;)</span><br><span class="line">&gt;&gt;&gt; language  </span><br><span class="line">(&apos;Python&apos;, &apos;C&apos;, &apos;Java&apos;, &apos;Ruby&apos;, &apos;PHP&apos;)</span><br><span class="line">&gt;&gt;&gt; del language</span><br><span class="line">&gt;&gt;&gt; print(language)     # 元组已经被删除，所以会有报错信息</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;language&apos; is not defined</span><br></pre></td></tr></table></figure><h3 id="元组索引，截取"><a href="#元组索引，截取" class="headerlink" title="元组索引，截取"></a>元组索引，截取</h3><p>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = (&quot;Python&quot;,&quot;C&quot;,&quot;Java&quot;,&quot;Ruby&quot;,&quot;PHP&quot;)</span><br><span class="line">&gt;&gt;&gt; language[:]     # 所有索引</span><br><span class="line">(&apos;Python&apos;, &apos;C&apos;, &apos;Java&apos;, &apos;Ruby&apos;, &apos;PHP&apos;)</span><br><span class="line">&gt;&gt;&gt; language[0:2]   # 第0个索引到第1个索引</span><br><span class="line">(&apos;Python&apos;, &apos;C&apos;)</span><br><span class="line">&gt;&gt;&gt; language[1:3]   # 第1个索引到第2个索引</span><br><span class="line">(&apos;C&apos;, &apos;Java&apos;)   </span><br><span class="line">&gt;&gt;&gt; language[:3]    # 第0个索引到第2个索引</span><br><span class="line">(&apos;Python&apos;, &apos;C&apos;, &apos;Java&apos;)</span><br><span class="line">&gt;&gt;&gt; language[:-3]   # 第0个索引到倒数第3个索引</span><br><span class="line">(&apos;Python&apos;, &apos;C&apos;)</span><br><span class="line">&gt;&gt;&gt; language[-3:]   # 倒数第3个索引到最后一个索引</span><br><span class="line">(&apos;Java&apos;, &apos;Ruby&apos;, &apos;PHP&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python常用数据类型-元组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常用数据类型-列表2</title>
      <link href="/2018/05/07/Python-list2/"/>
      <url>/2018/05/07/Python-list2/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-list2.png" title="Python常用数据类型-列表2"></center><a id="more"></a><h3 id="对数字列表执行简单的统计计算"><a href="#对数字列表执行简单的统计计算" class="headerlink" title="对数字列表执行简单的统计计算"></a>对数字列表执行简单的统计计算</h3><p>有几个专门用于处理数字列表的Python函数。例如，你可以轻松地找出数字列表的最大值、最小值和总和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; digits = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">&gt;&gt;&gt; min(digits)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; max(digits)</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; sum(digits)</span><br><span class="line">55</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>要创建切片，可指定要使用的第一个元素的索引和最后一个元素的索引加1。与函数range()一样，Python在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引0~3，这将输出分别为0、1和2的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; print(languages[0:3])</span><br><span class="line">[&apos;C&apos;, &apos;C++&apos;, &apos;Python&apos;]</span><br></pre></td></tr></table></figure><p>你可以生成列表的任何子集，例如，如果你要提取列表的第2~4个元素，可将起始索引指定为1，并将终止索引指定为4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; print(languages[1:4])</span><br><span class="line">[&apos;C++&apos;, &apos;Python&apos;, &apos;Java&apos;]</span><br></pre></td></tr></table></figure><p>如果你没有指定第一个索引，Python将自动从列表开头开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; print(languages[:3])</span><br><span class="line">[&apos;C&apos;, &apos;C++&apos;, &apos;Python&apos;]</span><br></pre></td></tr></table></figure><p>要让切片终止于列表末尾，也可使用类似的语法。例如，如果要提取从第三个元素到列表末尾的所有元素，可将起始索引指定为2，并省略终止索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; print(languages[2:])</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;PHP&apos;]</span><br></pre></td></tr></table></figure><p>负数索引会返回离列表末尾相应距离的元素，因此你可以输出列表末尾的任何切片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; print(languages[-4:])</span><br><span class="line">[&apos;C++&apos;, &apos;Python&apos;, &apos;Java&apos;, &apos;PHP&apos;]</span><br></pre></td></tr></table></figure><h3 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h3><p>如果要遍历列表中的部分元素，可在for循环中使用切片，入下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">languages = [&quot;python&quot;,&quot;java&quot;,&quot;c&quot;,&quot;c++&quot;,&quot;php&quot;,&quot;perl&quot;]</span><br><span class="line"></span><br><span class="line">print(&quot;Languages:&quot;)</span><br><span class="line">for i in languages[-3:]:</span><br><span class="line">    print(i.title())</span><br></pre></td></tr></table></figure><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始和终止索引<code>([:])</code>。这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; languages_copy = languages[:]</span><br><span class="line">&gt;&gt;&gt; languages_copy</span><br><span class="line">[&apos;C&apos;, &apos;C++&apos;, &apos;Python&apos;, &apos;Java&apos;, &apos;PHP&apos;]</span><br></pre></td></tr></table></figure><h3 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a>Python列表脚本操作符</h3><p>列表对<code>+</code>和<code>*</code>的操作符与字符串相似。<code>+</code>号用于组合列表，<code>*</code>号用于重复列表。</p><table><thead><tr><th>Python 表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td>3</td><td>长度</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td>[1, 2, 3, 4, 5, 6]</td><td>组合</td></tr><tr><td>[‘Hi!’] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td></tr><tr><td>3 in [1, 2, 3]</td><td>True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print(x, end=” “)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="Python列表函数-amp-方法"><a href="#Python列表函数-amp-方法" class="headerlink" title="Python列表函数&amp;方法"></a>Python列表函数&amp;方法</h3><p>Python包含以下函数：</p><table><thead><tr><th>序号</th><th>函数</th></tr></thead><tbody><tr><td>1</td><td>len(list)列表元素个数</td></tr><tr><td>2</td><td>max(list)返回列表元素最大值</td></tr><tr><td>3</td><td>min(list)返回列表元素最小值</td></tr><tr><td>4</td><td>list(seq)将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法：</p><table><thead><tr><th>序号</th><th>方法</th></tr></thead><tbody><tr><td>1</td><td>list.append(obj)在列表末尾添加新的对象</td></tr><tr><td>2</td><td>list.count(obj)统计某个元素在列表中出现的次数</td></tr><tr><td>3</td><td>list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>4</td><td>list.index(obj)从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>5</td><td>list.insert(index, obj)将对象插入列表</td></tr><tr><td>6</td><td>list.pop(obj=list[-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>7</td><td>list.remove(obj)移除列表中某个值的第一个匹配项</td></tr><tr><td>8</td><td>list.reverse()反向列表中元素</td></tr><tr><td>9</td><td>list.sort([func])对原列表进行排序</td></tr><tr><td>10</td><td>list.clear()清空列表</td></tr><tr><td>11</td><td>list.copy()复制列表</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python常用数据类型-列表2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 之 for循环和range()函数</title>
      <link href="/2018/05/07/Python-for-range/"/>
      <url>/2018/05/07/Python-for-range/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-for-range.png" title="Python 之 for循环和range()函数"></center><a id="more"></a><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p><p>for循环的一般格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for &lt;variable&gt; in &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><h4 id="for循环实例："><a href="#for循环实例：" class="headerlink" title="for循环实例："></a>for循环实例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 遍历列表</span><br><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;C&apos;, &apos;C++&apos;, &apos;Python&apos;, &apos;Java&apos;, &apos;PHP&apos;]</span><br><span class="line">&gt;&gt;&gt; for i in languages:</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">C</span><br><span class="line">C++</span><br><span class="line">Python</span><br><span class="line">Java</span><br><span class="line">PHP</span><br></pre></td></tr></table></figure><h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(5):</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>注意：循环开始的值是0</p></blockquote><p>你也可以使用range指定区间的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(1,6):</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>在这个示例中，range()只是打印数字1~4，这是你在编程语言中经常看到的差一行行为的结果。函数range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出不包含第二个值（这里指6）</p><p>也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做 <strong>‘步长’</strong> ):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(0,10,2):</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p><strong>负数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(-1,-10,-3):</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">-1</span><br><span class="line">-4</span><br><span class="line">-7</span><br></pre></td></tr></table></figure><p>你可以结合range()和len()函数以遍历一个序列的索引，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&quot;C&quot;,&quot;C++&quot;,&quot;Python&quot;,&quot;Java&quot;,&quot;PHP&quot;]</span><br><span class="line">&gt;&gt;&gt; for i in range(len(languages)):</span><br><span class="line">...     print(i,&quot;is&quot;,languages[i])</span><br><span class="line">... </span><br><span class="line">0 is C</span><br><span class="line">1 is C++</span><br><span class="line">2 is Python</span><br><span class="line">3 is Java</span><br><span class="line">4 is PHP</span><br></pre></td></tr></table></figure><p>还可以使用range()函数来创建一个列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(5))</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python 之 for循环和range()函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jira</title>
      <link href="/2018/05/07/Jira/"/>
      <url>/2018/05/07/Jira/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Jira-1.png" title="项目管理工具 JIRA"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://www.atlassian.com/" target="_blank" rel="noopener">官网：www.atlassian.com</a></p><p><strong>JIRA</strong>是一个缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件，开发者是澳大利亚的Atlassian。</p><p>JIRA 用 Java 语言编写，使用 Pico 容器，Apache OFBiz，以及 WebWork 1 technology stack。Jira 支持 SOAP，XML-RPC 以及 REST。</p><p>JIRA 与 SVN，CVS，Git，Clearcase，Visual SourceSafe，Mercurial 和 Perforce 等 版本控制 程序集成。可以使用多种语言，包括英语、日语、德语、法语、西班牙语、中文等。</p><p>JIRA是一个商业软件，按照活动用户数进行授权，价格随活动用户数量递增。JIRA可以下载安装包后在本地部署，也可以使用Atlassian提供的OnDemand服务进行租用。</p><p>JIRA的代理销售商及服务商被称为Atlassian Expert，目前在中国地区有三家Atlassian Expert，分别为<a href="http://www.tieto.cn/node/10214/tietos-solutions-network-equipment-providers/tietos-solutions-network-equipment-providers-rd-efficiency-excellence/atlassian-fu-wu" target="_blank" rel="noopener">叠拓</a>，<a href="http://www.unlimax.com/" target="_blank" rel="noopener">安迈无限</a>和<a href="http://www.fangwai.net/" target="_blank" rel="noopener">上海方外网络科技</a>。</p><h3 id="部署JIRA"><a href="#部署JIRA" class="headerlink" title="部署JIRA"></a>部署JIRA</h3><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Jira</td><td>10.6.168.31/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>Jira 7.9</td><td>项目管理</td></tr></tbody></table><h4 id="安装Mariadb"><a href="#安装Mariadb" class="headerlink" title="安装Mariadb"></a>安装Mariadb</h4><p>Jira支持MySQL的版本如下：</p><ul><li style="list-style: none"><input type="checkbox" checked> MySQL 5.7</li><li style="list-style: none"><input type="checkbox" checked> MySQL 5.6</li><li style="list-style: none"><input type="checkbox" checked> MySQL 5.5</li></ul><p>所以我们就直接使用yum安装Mariadb就OK了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jira ~]# yum install -y mariadb-server    # 安装版本为5.5.56</span><br><span class="line">[root@jira ~]# systemctl start mariadb</span><br><span class="line">[root@jira ~]# systemctl enable mariadb</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</span><br></pre></td></tr></table></figure><h4 id="配置MySQL数据库"><a href="#配置MySQL数据库" class="headerlink" title="配置MySQL数据库"></a>配置MySQL数据库</h4><h5 id="创建数据库并授权用户"><a href="#创建数据库并授权用户" class="headerlink" title="创建数据库并授权用户"></a>创建数据库并授权用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1. 创建一个供JIRA存储数据，数据库必须用UTF8编码</span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE jiradb CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 2. 创建并授权用户</span><br><span class="line">MariaDB [(none)]&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX on jiradb.* TO &apos;jira&apos;@&apos;%&apos; IDENTIFIED BY &apos;jira&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 对于MySQL5.7.6及更高版本，还需要包含REFERENCES权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,ALTER,INDEX on &lt;JIRADB&gt;.* TO &apos;&lt;USERNAME&gt;&apos;@&apos;&lt;JIRA_SERVER_HOSTNAME&gt;&apos; IDENTIFIED BY &apos;&lt;PASSWORD&gt;&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="修改MySQL配置文件"><a href="#修改MySQL配置文件" class="headerlink" title="修改MySQL配置文件"></a>修改MySQL配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jira ~]# vim /etc/my.cnf      # 新增内容如下</span><br><span class="line">default-storage-engine=INNODB       # 将默认存储引擎设置为InnoDB</span><br><span class="line">max_allowed_packet=256M         # 指定值  max_allowed_packet 至少为256M</span><br><span class="line">innodb_log_file_size=256M       # innodb_log_file_size 为MySQL 5.5及更低版本指定值  至少为256M，注意：对于MySQL 5.6及更高版本，这应该设置为至少2G</span><br><span class="line">sql_mode = NO_AUTO_VALUE_ON_ZERO        # 确保sql_mode参数不指定NO_AUTO_VALUE_ON_ZERO</span><br><span class="line">[root@jira ~]# systemctl restart mariadb    # 重新启动MySQL服务器以使更改生效</span><br></pre></td></tr></table></figure><h4 id="下载JIRA"><a href="#下载JIRA" class="headerlink" title="下载JIRA"></a>下载JIRA</h4><p><a href="https://www.atlassian.com/software/jira/download" target="_blank" rel="noopener">下载地址：https://www.atlassian.com/software/jira/download</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jira ~]# wget https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-7.9.1-x64.bin   </span><br><span class="line">[root@jira ~]# ll atlassian-jira-software-7.9.1-x64.bin </span><br><span class="line">-rw-r--r-- 1 root root 340638033 Apr 24 08:40 atlassian-jira-software-7.9.1-x64.bin</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 下载的JIRA有325M，在国内下载可能会失败，建议翻墙下载</p></blockquote><h4 id="安装JIRA"><a href="#安装JIRA" class="headerlink" title="安装JIRA"></a>安装JIRA</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@jira ~]# chmod +x atlassian-jira-software-7.9.1-x64.bin       # 添加执行权限</span><br><span class="line">[root@jira ~]# ./atlassian-jira-software-7.9.1-x64.bin </span><br><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line">May 07, 2018 6:54:45 AM java.util.prefs.FileSystemPreferences$1 run</span><br><span class="line">INFO: Created user preferences directory.</span><br><span class="line">May 07, 2018 6:54:45 AM java.util.prefs.FileSystemPreferences$2 run</span><br><span class="line">INFO: Created system preferences directory in java.home.</span><br><span class="line"></span><br><span class="line">This will install JIRA Software 7.9.1 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o</span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (use default settings) [1], Custom Install (recommended for advanced users) [2, Enter], Upgrade an existing JIRA installation [3]</span><br><span class="line">1                   # 1代表使用默认配置</span><br><span class="line">Details on where JIRA Software will be installed and the settings that will be used.</span><br><span class="line">Installation Directory: /opt/atlassian/jira </span><br><span class="line">Home Directory: /var/atlassian/application-data/jira </span><br><span class="line">HTTP Port: 8080 </span><br><span class="line">RMI Port: 8005 </span><br><span class="line">Install as service: Yes </span><br><span class="line">Install [i, Enter], Exit [e]</span><br><span class="line">i</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line">                                                                           </span><br><span class="line"></span><br><span class="line">Please wait a few moments while JIRA Software is configured.</span><br><span class="line">Installation of JIRA Software 7.9.1 is complete</span><br><span class="line">Start JIRA Software 7.9.1 now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Please wait a few moments while JIRA Software starts up.</span><br><span class="line">Launching JIRA Software ...</span><br><span class="line">Installation of JIRA Software 7.9.1 is complete</span><br><span class="line">Your installation of JIRA Software 7.9.1 is now ready and can be accessed</span><br><span class="line">via your browser.</span><br><span class="line">JIRA Software 7.9.1 can be accessed at http://localhost:8080</span><br><span class="line">Finishing installation ...</span><br><span class="line"># 安装完成</span><br></pre></td></tr></table></figure><h4 id="添加MySQL-JDBC驱动程序"><a href="#添加MySQL-JDBC驱动程序" class="headerlink" title="添加MySQL JDBC驱动程序"></a>添加MySQL JDBC驱动程序</h4><p><a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">下载地址：https://dev.mysql.com/downloads/connector/j/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jira ~]# wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz      # 下载 </span><br><span class="line">[root@jira ~]# tar xf mysql-connector-java-5.1.46.tar.gz   # 解压缩</span><br><span class="line">[root@jira ~]# cp mysql-connector-java-5.1.46/mysql-connector-java-5.1.46.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/      # 复制驱动文件</span><br><span class="line"># 重启jira使新添加的MySQL驱动程序生效</span><br><span class="line">[root@jira ~]# /opt/atlassian/jira/bin/shutdown.sh      </span><br><span class="line">[root@jira ~]# /opt/atlassian/jira/bin/startup.sh</span><br></pre></td></tr></table></figure><h4 id="访问并测试使用"><a href="#访问并测试使用" class="headerlink" title="访问并测试使用"></a>访问并测试使用</h4><p>访问<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a> 打开JIRA配置向导页面：</p><center><img src="https://houhaiyun.github.io/img/images/Jira-2.gif" title="JIRA-Setup"></center><p>注册一个测试使用的Key，有效期30天</p><center><img src="https://houhaiyun.github.io/img/images/Jira-3.gif" title="JIRA-Setup"></center><center><img src="https://houhaiyun.github.io/img/images/Jira-4.gif" title="JIRA-Setup"></center><p>测试使用：</p><center><img src="https://houhaiyun.github.io/img/images/Jira-5.gif" title="测试使用"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://confluence.atlassian.com/adminjiraserver/installing-jira-applications-on-linux-938846841.html" target="_blank" rel="noopener">Jira官方安装文档</a></p><p><a href="https://zh.wikipedia.org/wiki/JIRA" target="_blank" rel="noopener">维基百科：JIRA</a></p>]]></content>
      
      <categories>
          
          <category> 项目管理工具 </category>
          
          <category> JIRA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JIRA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常用数据类型-列表</title>
      <link href="/2018/05/06/Python-list/"/>
      <url>/2018/05/06/Python-list/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-list.png" title="Python 列表"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>列表是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</p><p>在Python中，用方括号(<code>[]</code>)来表示列表，并用逗号来分割其中的元素。下面是一个简单的列表示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;go&apos;]</span><br><span class="line">&gt;&gt;&gt; print(languages)</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;go&apos;]</span><br></pre></td></tr></table></figure><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><p>列表是有序集合，因此要访问列表中的任何元素，只要将该元素的位置或索引告诉Python即可。要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在放括号内。</p><p>例如，从languages中提取Python，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;go&apos;]</span><br><span class="line">&gt;&gt;&gt; print(languages[0])     # 注意，列表中元素的索引是从0开始的</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><p>你还可以将其转换大小写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;go&apos;]</span><br><span class="line">&gt;&gt;&gt; print(languages[0].upper())</span><br><span class="line">PYTHON</span><br><span class="line">&gt;&gt;&gt; print(languages[1].lower())</span><br><span class="line">java</span><br></pre></td></tr></table></figure><h4 id="访问最后一个列表元素"><a href="#访问最后一个列表元素" class="headerlink" title="访问最后一个列表元素"></a>访问最后一个列表元素</h4><p>Python为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为<code>-1</code>，可让Python返回最后一个列表元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;go&apos;]</span><br><span class="line">&gt;&gt;&gt; print(languages[-1])</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后的元素。这种约定也适用于其他负数索引，例如，索引<code>-2</code>返回倒数第二个列表元素，索引<code>-3</code>返回倒数第三个列表元素，以此类推。</p><h3 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h3><h4 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h4><p>修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。</p><p>例如，将以下列表中的第一个元素，修改为C++：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages[0] = &quot;C++&quot;    </span><br><span class="line">&gt;&gt;&gt; languages       # 修改成功</span><br><span class="line">[&apos;C++&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;go&apos;]</span><br></pre></td></tr></table></figure><h4 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h4><h5 id="1-在列表末尾添加元素"><a href="#1-在列表末尾添加元素" class="headerlink" title="1. 在列表末尾添加元素"></a>1. 在列表末尾添加元素</h5><p>在列表末尾添加元素可以使用方法<code>append</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.append(&quot;C++&quot;)    </span><br><span class="line">&gt;&gt;&gt; languages       # 添加成功</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;, &apos;C++&apos;]</span><br></pre></td></tr></table></figure><p>方法<code>append</code>可以动态地创建列表，例如，你可以先创建一个空列表，再使用一系列的<code>append()</code>语句添加元素。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = []</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; languages.append(&quot;Python&quot;)</span><br><span class="line">&gt;&gt;&gt; languages.append(&quot;Go&quot;)</span><br><span class="line">&gt;&gt;&gt; languages.append(&quot;Java&quot;)</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Go&apos;, &apos;Java&apos;]</span><br></pre></td></tr></table></figure><p>这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪些数据。为控制用户，可首先创建一个空列表，用户存储用户将要输入的值，然后将用户提供的每个新值附加到列表中。</p><h5 id="2-在列表中插入元素"><a href="#2-在列表中插入元素" class="headerlink" title="2. 在列表中插入元素"></a>2. 在列表中插入元素</h5><p>使用方法<code>insert()</code>可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.insert(0,&quot;Go&quot;)    # 在索引0处插入Go</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Go&apos;, &apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.insert(2,&quot;PHP&quot;)       # 在索引2处插入PHP</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Go&apos;, &apos;Python&apos;, &apos;PHP&apos;, &apos;Java&apos;, &apos;C&apos;]</span><br></pre></td></tr></table></figure><p>这种操作将列表中既有的每个元素都会右移一个位置。</p><h4 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h4><h5 id="1-使用del语句删除元素"><a href="#1-使用del语句删除元素" class="headerlink" title="1. 使用del语句删除元素"></a>1. 使用<code>del</code>语句删除元素</h5><p>如果知道要删除的元素在列表中的位置，可使用<code>del</code>语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; del languages[1]        # 删除索引为1的元素</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;C&apos;, &apos;Go&apos;]       # 删除成功</span><br></pre></td></tr></table></figure><h5 id="2-使用方法pop-删除元素"><a href="#2-使用方法pop-删除元素" class="headerlink" title="2. 使用方法pop()删除元素"></a>2. 使用方法<code>pop()</code>删除元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 指定索引删除元素</span><br><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.pop(1)</span><br><span class="line">&apos;Java&apos;</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line"></span><br><span class="line"># 不指定索引，则默认删除最后一个元素</span><br><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.pop()</span><br><span class="line">&apos;Go&apos;</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;]</span><br></pre></td></tr></table></figure><h4 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h4><p>有时候，你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法<code>remove()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 删除值为Java的元素</span><br><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.remove(&quot;Java&quot;)</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;C&apos;, &apos;Go&apos;]</span><br><span class="line"></span><br><span class="line"># 注意：如果删除元素的值在列表中出现多次，方法remove()只删除第一次出现的值，在后续的学习中会解决这个问题</span><br><span class="line">&gt;&gt;&gt; languages = [&apos;Python&apos;,&apos;Java&apos;,&apos;C&apos;,&apos;Go&apos;,&quot;Java&quot;]</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;Java&apos;, &apos;C&apos;, &apos;Go&apos;, &apos;Java&apos;]</span><br><span class="line">&gt;&gt;&gt; languages.remove(&quot;Java&quot;)</span><br><span class="line">&gt;&gt;&gt; languages</span><br><span class="line">[&apos;Python&apos;, &apos;C&apos;, &apos;Go&apos;, &apos;Java&apos;]</span><br></pre></td></tr></table></figure><h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><p>在你创建的列表中，元素的排序方式常常是无法预测的，因此你可能需要以特定的顺序呈现信息。Python提供了很多组织列表的方式，可根据具体情况选用。</p><h4 id="使用方法sort-对列表进行永久性的排序"><a href="#使用方法sort-对列表进行永久性的排序" class="headerlink" title="使用方法sort()对列表进行永久性的排序"></a>使用方法sort()对列表进行永久性的排序</h4><p>Python方法sort()让你能够较为轻松的对列表进行排序，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letter = [&apos;b&apos;,&apos;f&apos;,&apos;e&apos;,&apos;z&apos;,&apos;a&apos;,&apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter.sort()</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;z&apos;]</span><br><span class="line"># 注意：方法sort()是永久性的排序，将会修改列表</span><br></pre></td></tr></table></figure><p>你还可以按与字母顺序相反的顺序排列列表元素，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letter = [&apos;b&apos;,&apos;f&apos;,&apos;e&apos;,&apos;z&apos;,&apos;a&apos;,&apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter.sort(reverse=True)</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;z&apos;, &apos;g&apos;, &apos;f&apos;, &apos;e&apos;, &apos;b&apos;, &apos;a&apos;]</span><br></pre></td></tr></table></figure><h4 id="使用函数sorted-对列表进行临时排序"><a href="#使用函数sorted-对列表进行临时排序" class="headerlink" title="使用函数sorted()对列表进行临时排序"></a>使用函数sorted()对列表进行临时排序</h4><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数<code>sorted()</code>。函数<code>sorted()</code>让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letter = [&apos;b&apos;,&apos;f&apos;,&apos;e&apos;,&apos;z&apos;,&apos;a&apos;,&apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; sorted(letter)      # 排序</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;z&apos;]</span><br><span class="line">&gt;&gt;&gt; letter      # 可以看到列表letter，元素的原始顺序并没有被改变掉</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sorted(letter,reverse=True)     # 倒序排序</span><br><span class="line">[&apos;z&apos;, &apos;g&apos;, &apos;f&apos;, &apos;e&apos;, &apos;b&apos;, &apos;a&apos;]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br></pre></td></tr></table></figure><h4 id="倒着打印列表"><a href="#倒着打印列表" class="headerlink" title="倒着打印列表"></a>倒着打印列表</h4><p>要反转列表元素的排序顺序，可使用方法<code>reverse()</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letter = [&apos;b&apos;,&apos;f&apos;,&apos;e&apos;,&apos;z&apos;,&apos;a&apos;,&apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter.reverse()</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;g&apos;, &apos;a&apos;, &apos;z&apos;, &apos;e&apos;, &apos;f&apos;, &apos;b&apos;]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>reverse()</code>不是指与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序。</p><p>方法<code>reverse()</code>永久性地修改列表元素的排列顺序，但可随时恢复到原来的顺序，为此只需对列表再次调用<code>reverse()</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letter = [&apos;b&apos;,&apos;f&apos;,&apos;e&apos;,&apos;z&apos;,&apos;a&apos;,&apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; letter.reverse()</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">[&apos;g&apos;, &apos;a&apos;, &apos;z&apos;, &apos;e&apos;, &apos;f&apos;, &apos;b&apos;]</span><br><span class="line">&gt;&gt;&gt; letter.reverse()</span><br><span class="line">&gt;&gt;&gt; letter      # 已经恢复</span><br><span class="line">[&apos;b&apos;, &apos;f&apos;, &apos;e&apos;, &apos;z&apos;, &apos;a&apos;, &apos;g&apos;]</span><br></pre></td></tr></table></figure><h4 id="确定列表的长度"><a href="#确定列表的长度" class="headerlink" title="确定列表的长度"></a>确定列表的长度</h4><p>使用函数<code>len()</code>可快速获悉列表的长度。在下面的示例中，列表包含6个元素，因此长度为6：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; letter = [&apos;b&apos;,&apos;f&apos;,&apos;e&apos;,&apos;z&apos;,&apos;a&apos;,&apos;g&apos;]</span><br><span class="line">&gt;&gt;&gt; len(letter)</span><br><span class="line">6</span><br></pre></td></tr></table></figure><blockquote><p>注意：Python计算列表元素时从1开始，因此确定列表长度时，你应该不会遇到误差。</p></blockquote><blockquote><p><strong>小技巧：</strong> 发生索引错误却找不到解决方法时，请尝试将列表或其长度打印出来。列表可能与你以为的截然不同，在程序对其进行了动态处理时尤其如此。通过查看列表或其包含的元素数，可帮助你找出这种逻辑错误。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python常用数据类型-列表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 之 注释</title>
      <link href="/2018/05/06/Python-Notes/"/>
      <url>/2018/05/06/Python-Notes/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-Notes.png" title="Python注释"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在大多数的编程语言中，注释都是一项很有用的功能。</p><p>Python中的注释有单行注释和多行注释。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这是注释</span><br><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释用三个单引号 <code>&#39;&#39;&#39;</code>或者三个双引号 <code>&quot;&quot;&quot;</code> 将注释括起来，例如:</p><p><strong>1. 单引号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">多行注释，使用三个单引号</span><br><span class="line">多行注释，使用三个单引号</span><br><span class="line">多行注释，使用三个单引号</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><p><strong>1. 双引号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">多行注释，使用三个双引号</span><br><span class="line">多行注释，使用三个双引号</span><br><span class="line">多行注释，使用三个双引号</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python 之 注释 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常用数据类型-数字</title>
      <link href="/2018/05/06/Python-data-type-digital/"/>
      <url>/2018/05/06/Python-data-type-digital/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-data-type-digital.png" title="Python常用数据类型-数字"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数字数据类型用于存储数值。</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>在Python中，可对整数执行加(+)、减(-)、乘(*)、除(/) 运算，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1 + 2 </span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 3 - 1</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 2 * 3</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; 9 / 3</span><br><span class="line">3.0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 2 ** 3      # **代表乘方运算</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>在Python中还支持运算次序，因此你可以在同一个表达式中使用多种运算。你还可以使用括号来修改运算次序，让Python按你指定的次序执行运算，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3 + 3*3 </span><br><span class="line">12</span><br><span class="line">&gt;&gt;&gt; (3+1) * 5</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>在这些示例中，空格不影响Python计算表达式的方式，它们的存在旨在让你阅读代码时，能够确定先执行那些运算。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>Python将带小数点的数字都称为浮点数。</p><p>你只需要输入要使用的数字，Python通常都会按照你期望的方式处理它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 0.2 + 0.3</span><br><span class="line">0.5</span><br><span class="line">&gt;&gt;&gt; 0.2 * 0.3</span><br><span class="line">0.06</span><br></pre></td></tr></table></figure><p>但需要注意的是，结果包含的小数位可能是不确定的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 0.2 + 0.1</span><br><span class="line">0.30000000000000004</span><br><span class="line">&gt;&gt;&gt; 0.3 - 0.1</span><br><span class="line">0.19999999999999998</span><br><span class="line">&gt;&gt;&gt; 3 * 0.1</span><br><span class="line">0.30000000000000004</span><br></pre></td></tr></table></figure><p>所有语言都存在这种问题，没有什么可担心的。Python会尽力找到一种方式，以尽可能精确地表示结果，但鉴于计算机内部表示数字的方式，这在有些情况下很难。就现在而言，暂时忽略多余的小数位即可。</p>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python常用数据类型-数字 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常用数据类型-字符串</title>
      <link href="/2018/05/06/Python-data-type-string/"/>
      <url>/2018/05/06/Python-data-type-string/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-data-type-string.png" title="Python常用数据类型-字符串"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>字符串就是一系列字符。在Python中，用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;This is a string!&quot;)</span><br><span class="line">This is a string!</span><br><span class="line">&gt;&gt;&gt; print(&apos;This is a string!&apos;)</span><br><span class="line">This is a string!</span><br></pre></td></tr></table></figure><p>还可以让你能够在字符串中包含引号和撇号，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;My name is &apos;Hou Haiyun&apos;&quot;)</span><br><span class="line">My name is &apos;Hou Haiyun&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&apos;My name is &quot;Hou Haiyun&quot;&apos;)</span><br><span class="line">My name is &quot;Hou Haiyun&quot;</span><br></pre></td></tr></table></figure><h3 id="修改字符串的大小写"><a href="#修改字符串的大小写" class="headerlink" title="修改字符串的大小写"></a>修改字符串的大小写</h3><h4 id="以首字母大写的方式显示每个单词"><a href="#以首字母大写的方式显示每个单词" class="headerlink" title="以首字母大写的方式显示每个单词"></a>以首字母大写的方式显示每个单词</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name = &quot;hou haiyun&quot;</span><br><span class="line">&gt;&gt;&gt; print(name.title())</span><br><span class="line">Hou Haiyun</span><br></pre></td></tr></table></figure><h4 id="将字符串改为全部大写"><a href="#将字符串改为全部大写" class="headerlink" title="将字符串改为全部大写"></a>将字符串改为全部大写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name = &quot;hou haiyun&quot;</span><br><span class="line">&gt;&gt;&gt; print(name.upper())</span><br><span class="line">HOU HAIYUN</span><br></pre></td></tr></table></figure><h4 id="将字符串改为全部小写"><a href="#将字符串改为全部小写" class="headerlink" title="将字符串改为全部小写"></a>将字符串改为全部小写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name = &quot;HOU HAIYUN&quot;</span><br><span class="line">&gt;&gt;&gt; print(name.lower())</span><br><span class="line">hou haiyun</span><br></pre></td></tr></table></figure><h3 id="合并字符串"><a href="#合并字符串" class="headerlink" title="合并字符串"></a>合并字符串</h3><p>很多时候你也许会将两个变量中的字符串和合并为同一个字符串，此时就需要合并字符串了，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; first = &quot;Hou&quot;</span><br><span class="line">&gt;&gt;&gt; last = &quot;Haiyun&quot;</span><br><span class="line">&gt;&gt;&gt; name = first+last</span><br><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">HouHaiyun</span><br></pre></td></tr></table></figure><p>上述合并中name貌似还缺少一个空格，加上后效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name2 = first+&quot; &quot;+last</span><br><span class="line">&gt;&gt;&gt; print(name2)</span><br><span class="line">Hou Haiyun</span><br></pre></td></tr></table></figure><p>还可以再进行优化，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name3 = &quot;Name: &quot;+first+&quot; &quot;+last</span><br><span class="line">&gt;&gt;&gt; print(name3)</span><br><span class="line">Name: Hou Haiyun</span><br></pre></td></tr></table></figure><h3 id="使用制表符或换行符来添加空白"><a href="#使用制表符或换行符来添加空白" class="headerlink" title="使用制表符或换行符来添加空白"></a>使用制表符或换行符来添加空白</h3><p>在编程中，空白泛指任何非打印字符，如空格、制表符和换行符。你可以使用空白来组织输出，以使其更容易读。</p><h4 id="添加制表符"><a href="#添加制表符" class="headerlink" title="添加制表符"></a>添加制表符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;Python&quot;)</span><br><span class="line">Python</span><br><span class="line">&gt;&gt;&gt; print(&quot;\tPython&quot;)</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><h4 id="添加换行符"><a href="#添加换行符" class="headerlink" title="添加换行符"></a>添加换行符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;Python Java C&quot;)</span><br><span class="line">Python Java C</span><br><span class="line">&gt;&gt;&gt; print(&quot;Python\nJava\nC&quot;)</span><br><span class="line">Python</span><br><span class="line">Java</span><br><span class="line">C</span><br></pre></td></tr></table></figure><h4 id="同时添加制表符和换行符"><a href="#同时添加制表符和换行符" class="headerlink" title="同时添加制表符和换行符"></a>同时添加制表符和换行符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;Languages: Python Jaca C&quot;)</span><br><span class="line">Languages: Python Jaca C</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&quot;Languages: \n\tPython\n\tJaca\n\tC&quot;)</span><br><span class="line">Languages: </span><br><span class="line">Python</span><br><span class="line">Jaca</span><br><span class="line">C</span><br></pre></td></tr></table></figure><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><h4 id="删除字符串末尾的空白"><a href="#删除字符串末尾的空白" class="headerlink" title="删除字符串末尾的空白"></a>删除字符串末尾的空白</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = &quot;Python &quot;</span><br><span class="line">&gt;&gt;&gt; language</span><br><span class="line">&apos;Python &apos;</span><br><span class="line">&gt;&gt;&gt; language.rstrip()   # 已经将末尾的空白删除</span><br><span class="line">&apos;Python&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; language    # 但是再次使用变量还是会有末尾的空白</span><br><span class="line">&apos;Python &apos;</span><br><span class="line">&gt;&gt;&gt; language = language.rstrip()    # 将末尾的空白存储到变量language中</span><br><span class="line">&gt;&gt;&gt; language    # 末尾的空白已经不存在了</span><br><span class="line">&apos;Python&apos;</span><br></pre></td></tr></table></figure><h4 id="删除字符串开头的空白"><a href="#删除字符串开头的空白" class="headerlink" title="删除字符串开头的空白"></a>删除字符串开头的空白</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = &quot;   Python&quot;</span><br><span class="line">&gt;&gt;&gt; language</span><br><span class="line">&apos;   Python&apos;</span><br><span class="line">&gt;&gt;&gt; language.lstrip()</span><br><span class="line">&apos;Python&apos;</span><br></pre></td></tr></table></figure><h4 id="同时删除字符串两端的空白"><a href="#同时删除字符串两端的空白" class="headerlink" title="同时删除字符串两端的空白"></a>同时删除字符串两端的空白</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; language = &quot;   Python    &quot;</span><br><span class="line">&gt;&gt;&gt; language</span><br><span class="line">&apos;   Python    &apos;</span><br><span class="line">&gt;&gt;&gt; language.strip()</span><br><span class="line">&apos;Python&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python常用数据类型-字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python变量</title>
      <link href="/2018/05/05/Python-variable/"/>
      <url>/2018/05/05/Python-variable/</url>
      <content type="html"><![CDATA[<h3 id="Python-变量"><a href="#Python-变量" class="headerlink" title="Python 变量"></a>Python 变量</h3><p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。</p><p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p><p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p><a id="more"></a><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>在Python中使用变量时，需要遵守一些规则和指南。如下：</p><ul><li>变量名只能包含字母数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为<code>str_1</code>，但不能命名为<code>1_str</code></li><li>变量名不能包含空格，但可以使用下划线来分割其中的单词。例如，变量名为<code>long_str</code>可行，但变量名为<code>long str</code>会引发错误</li><li>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如input、print等</li><li>变量名应既简短有具有描述性</li><li>慎用小字母l和大写字母O，因为他们可能被别人看错成数字1和0</li></ul><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>Python 中的变量赋值不需要类型声明。</p><p>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</p><p>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>等号（=）用来给变量赋值。</p><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = 123 </span><br><span class="line">&gt;&gt;&gt; miles = 1000.01</span><br><span class="line">&gt;&gt;&gt; name = &quot;houhaiyun&quot;</span><br><span class="line">&gt;&gt;&gt; print(counter)</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; print(miles)</span><br><span class="line">1000.01</span><br><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">houhaiyun</span><br></pre></td></tr></table></figure><h3 id="多个变量"><a href="#多个变量" class="headerlink" title="多个变量"></a>多个变量</h3><p>Python允许你同时为多个变量赋值，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = b = c = 1</span><br><span class="line">&gt;&gt;&gt; print(a,b,c)</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure></p><p>以上实例，创建一个整形对象，值为1，三个变量被分配到相同的内存空间上。</p><p>Python也允许你同时为多个对象指定多个变量，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a,b,c = 1,2,&quot;haiyun&quot;</span><br><span class="line">&gt;&gt;&gt; print(a,b,c)</span><br><span class="line">1 2 haiyun</span><br></pre></td></tr></table></figure></p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.runoob.com/python/python-variable-types.html" target="_blank" rel="noopener">RUNOOB.COM：Python 变量类型</a></p>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3 print函数</title>
      <link href="/2018/05/05/Python3-print/"/>
      <url>/2018/05/05/Python3-print/</url>
      <content type="html"><![CDATA[<h3 id="1-输出字符串和数字"><a href="#1-输出字符串和数字" class="headerlink" title="1. 输出字符串和数字"></a>1. 输出字符串和数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;houhaiyun&quot;)      # 输出字符串</span><br><span class="line"></span><br><span class="line">houhaiyun</span><br><span class="line">&gt;&gt;&gt; print(100)      # 输出数字</span><br><span class="line"></span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; str = &apos;houhaiyun&apos;   # 输出变量</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">houhaiyun</span><br><span class="line">&gt;&gt;&gt; print(&quot;str&quot;)    # 注意：输出变量时不可以加&quot;&quot;，如果加上&quot;&quot;Python解释器会把此认为是字符串</span><br><span class="line">str</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L = [1,2,&apos;a&apos;]   # 列表</span><br><span class="line">&gt;&gt;&gt; print(L)</span><br><span class="line">[1, 2, &apos;a&apos;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t = (1,2,&apos;a&apos;)   # 元组</span><br><span class="line">&gt;&gt;&gt; print(t)</span><br><span class="line">(1, 2, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d = &#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;   # 字典</span><br><span class="line">&gt;&gt;&gt; print(d)</span><br><span class="line">&#123;&apos;b&apos;: 2, &apos;a&apos;: 1&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-格式化输出整数"><a href="#2-格式化输出整数" class="headerlink" title="2. 格式化输出整数"></a>2. 格式化输出整数</h3><p>支持参数格式化，与 C 语言的 printf 类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &quot;The length of (%s) is %d&quot; %(&apos;houhaiyun&apos;,len(&apos;houhaiyun&apos;))</span><br><span class="line">&gt;&gt;&gt; print(str)</span><br><span class="line">The length of (houhaiyun) is 9</span><br></pre></td></tr></table></figure></p><p>Python字符串格式化符号：</p><table><thead><tr><th>符   号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><p>格式化操作符辅助指令:</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号( + )</td></tr><tr><td><sp></sp></td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td>0</td><td>显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td>%</td><td>‘%%’输出一个单一的’%’</td></tr><tr><td>(var)</td><td>映射变量(字典参数)</td></tr><tr><td>m.n.</td><td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h3 id="格式化输出十六进制，十进制，八进制整数"><a href="#格式化输出十六进制，十进制，八进制整数" class="headerlink" title="格式化输出十六进制，十进制，八进制整数"></a>格式化输出十六进制，十进制，八进制整数</h3><pre><code>%x --- hex 十六进制%d --- dec 十进制%o --- oct 八进制</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; nHex = 0xFF</span><br><span class="line">&gt;&gt;&gt; print(&quot;nHex = %x,nDec = %d,nOct = %o&quot; %(nHex,nHex,nHex))</span><br><span class="line">nHex = ff,nDec = 255,nOct = 377</span><br></pre></td></tr></table></figure><h3 id="4-格式化输出浮点数"><a href="#4-格式化输出浮点数" class="headerlink" title="4. 格式化输出浮点数"></a>4. 格式化输出浮点数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pi = 3.141592653</span><br><span class="line">&gt;&gt;&gt; print(&apos;%10.3f&apos; % pi)    # 字段宽10，精度3</span><br><span class="line">     3.142</span><br><span class="line">&gt;&gt;&gt; print(&quot;pi = %.*f&quot; % (3,pi))     # 用*从后面的元组中读取字段宽度或精度</span><br><span class="line">pi = 3.142</span><br><span class="line">&gt;&gt;&gt; print(&apos;%010.3f&apos; % pi)       # 用0填补空白</span><br><span class="line">000003.142</span><br><span class="line">&gt;&gt;&gt; print(&apos;%-10.3f&apos; % pi)       # 左对齐</span><br><span class="line">3.142     </span><br><span class="line">&gt;&gt;&gt; print(&apos;%+f&apos; % pi)       # 显示正负号</span><br><span class="line">+3.141593</span><br></pre></td></tr></table></figure><h3 id="5-print不换行"><a href="#5-print不换行" class="headerlink" title="5. print不换行"></a>5. print不换行</h3><p>在 Python 中 print 默认是换行的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(6):</span><br><span class="line">...    print(i)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p>如果不想换行你应该写成 print(i, end = ‘’ )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(6):</span><br><span class="line">...     print(i,end = &apos;&apos;)</span><br><span class="line">... </span><br><span class="line">012345&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.runoob.com/w3cnote/python3-print-func-b.html" target="_blank" rel="noopener">RUNOOB.COM：Python 3 print 函数用法总结</a></p>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python3 print函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向对象程序设计</title>
      <link href="/2018/05/05/OOP/"/>
      <url>/2018/05/05/OOP/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/OOP-1.jpg" title="面向对象程序设计"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象。</p><p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p><p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p><h3 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h3><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong> 类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong> 类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong> 如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>实例变量：</strong> 定义在方法中的变量，只作用于当前实例的类。</li><li><strong>继承：</strong> 即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong> 创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong> 类中定义的函数。</li><li><strong>对象：</strong> 通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><h3 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a>简单理解</h3><pre><code>给你一个任务，你要思考怎么做。如果你的思维方式是：我先做什么，再做什么……这叫面向过程；如果思维方式是：我先做一个什么东西来做这件事，再做一个什么东西来做那件事，然后它们怎么相互配合……这叫面向对象。</code></pre><p><a href="https://www.zhihu.com/question/31021366" target="_blank" rel="noopener">此内容来自知乎: 什么是面向对象编程思想？</a></p><h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3><p>面向对象是相对于面向过程而言的。面向过程语言是一种基于<strong>功能分析</strong>的、以<strong>算法</strong>为中心的程序设计方法；而面向对象是一种基于<strong>结构分析</strong>的、以<strong>数据</strong>为中心的程序设计思想。早在面向过程语言时代，有一句话说：程序=算法+数据结构。而现在在面向对象语言时代，这句话变为：程序= 对象+消息。对象：万物皆对象； 消息：指对象之间的相互通信。在面向对象语言中有一个有很重要东西，叫做类。从面向过程的角度看，类就是一个特殊的数据结构，它就好像是我们C语言中的结构体;从面向对象的角度看，类就是具有相同属性和方法的对象的集合。</p><p><strong>面向对象有三大特性：封装、继承、多态。</strong></p><p><strong>所谓封装</strong>,就是指隐藏对象的实现细节，给外界提供公共的方法来访问。这一点，我个人认为和面向过程语言有本质的区别。在C语言中，我们必须在乎每一个实现细节，去关注每一个过程； 而自从从在面向对象语言中提出了封装这个概念后，我们就可以不必要去关心每一个对象的实现细节，  我们只要关注我们所要实现的功能就行，然后根据给我们提供好的接口，我们去面向接口编程就行了。面向对象的封装思想，我认为应用的最好、最成功的地方，就是在微软的.NET技术上.微软把很多经常用到的功能都封装在一个控件里，作为我们用户不必去在意到底这个控件是用什么实现的，它内部到底是怎么样的？我们只需要关心我们需要实现的功能就行， 然后根据控件给我们提供的属性和方法去操作这些控件，实现我们想要的功能就行了。</p><p><strong>面向对象第二个特征，继承。</strong> 我认为面向对象的继承和生物学的继承很相似。子类可以继承父类的公共属性和方法，子类永远没法继承到父类的私有属性和方法。这一点还区别于生物学的继承，生物学中子类可以同时继承父亲和母亲。但是在java|C#|C++等面向对象语言中，是不允许多重继承的，但可以多层继承。为了弥补不能多重继承这点，在java和c#语言中都提出了接口这一概念。<strong>接口就是一种规范</strong>。它同样不会有实现细节，而只是给那些要实现这个接口的类一个规范和约束，约束那些实现这些接口的类，要实现我提供的功能，就必须实现我的所有方法， 要不你就声明为抽象类。</p><p><strong>面向对象第三大特征，多态。</strong>多态，就是同一个实现接口，对不同的实例而执行不同的操作。这一点，我记得在上高中生物的时候学过遗传学，我觉得这里的多态就是遗传学的变异。  同一个物种的后代由于基因突变或自然环境等影响，而造成不同的个体差异。而我们这里的多态也一样，同属一个基类的不同派生类也可以有自己不同于其他类的属性和方法。除了这封装、继承、多态这三点基本特征外，面向对象还有一个很重要的概念，叫<strong>抽象</strong>。抽象就是把提取事物的本质东西，而忽视非本质的东西。对应于抽象这一概念，java和c#中都有一个类叫做抽象类。抽象类中可以给出方法的实现细节，同接口一样如果你要实现我这个抽象类就必须实现我的所有方法，要不你就声明你为抽象类。如果不允许抽象类中有方法的实现细节，这就变成了接口。</p><p>   总之，面向对象就是万物皆对象，把客观事物当成一个对象来处理的程序设计思想。是一种区别于POP、SOA、面向组件</p><p>​    等其他程序设计思想，是一种基于结构分析的，以数据为中心的程序设计思想。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><strong>本文所有内容都来自以下站点中：</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">维基百科: 面向对象程序设计</a></p><p><a href="http://www.runoob.com/python/python-object.html" target="_blank" rel="noopener">RUNOOB.COM：Python面向对象</a></p><p><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200385680e8cf932dba9433ea367de9aba2b4784000" target="_blank" rel="noopener">廖雪峰的官方网站：面向对象编程</a></p><p><a href="https://my.oschina.net/shaw1688/blog/601142" target="_blank" rel="noopener">开源中国：谈谈你对面向对象的理解</a></p>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python简介</title>
      <link href="/2018/05/05/Python/"/>
      <url>/2018/05/05/Python/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Python-2.jpg" title="Python"></center><a id="more"></a><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="https://www.python.org/" target="_blank" rel="noopener">官网: https://www.python.org/</a></p><p>Python，是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。</p><p>与Scheme、Ruby、Perl、Tcl等动态类型编程语言一样，Python拥有动态类型系统和垃圾回收功能，能够自动管理内存使用，并且支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。其本身拥有一个巨大而广泛的标准库。</p><p>Python 解释器本身几乎可以在所有的操作系统中运行。Python的正式解释器CPython是用C语言编写的、是一个由社区驱动的自由软件，目前由Python软件基金会管理。</p><h3 id="Python历史"><a href="#Python历史" class="headerlink" title="Python历史"></a>Python历史</h3><p>Python的创始人为吉多·范罗苏姆。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。之所以选中Python作为程序的名字，是因为他是BBC电视剧——蒙提·派森的飞行马戏团的爱好者。ABC是由吉多参加设计的一种教学语言。就吉多本人看来，ABC这种语言非常优美和强大，是专门为非专业程序员设计的。但是ABC语言并没有成功，究其原因，吉多认为是非开放造成的。吉多决心在Python中避免这一错误，并获取了非常好的效果，完美结合了C和其他一些语言。</p><center><img src="https://houhaiyun.github.io/img/images/Python-1.jpg" title="Python创始人 吉多·范罗苏姆"></center><p>就这样，Python在吉多手中诞生了。实际上，第一个实现是在Mac机上。可以说，Python是从ABC发展起来，主要受到了Modula-3（另一种相当优美且强大的语言，为小型团体所设计的）的影响。并且结合了Unix shell和C的习惯。</p><p>目前吉多仍然是Python的主要开发者，决定整个Python语言的发展方向。Python社区经常称呼他是仁慈的独裁者。</p><p>Python 2.0于2000年10月16日发布，增加了实现完整的垃圾回收，并且支持Unicode。同时，整个开发过程更加透明，社区对开发进度的影响逐渐扩大。Python 3.0于2008年12月3日发布，此版不完全兼容之前的Python源代码。不过，很多新特性后来也被移植到旧的Python 2.6/2.7版本。</p><p>Python是完全面向对象的语言。函数、模块、数字、字符串都是对象。并且完全支持继承、重载、派生、多重继承，有益于增强源代码的复用性。Python支持重载运算符，因此Python也支持泛型设计。相对于Lisp这种传统的函数式编程语言，Python对函数式设计只提供了有限的支持。有两个标准库（functools, itertools）提供了与Haskell和Standard ML中类似的函数式程序设计工具。</p><p>虽然Python可能被粗略地分类为“脚本语言”，但实际上一些大规模软件开发项目例如Zope、Mnet及BitTorrent，Google也广泛地使用它。Python的支持者较喜欢称它为一种高阶动态编程语言，原因是“脚本语言”泛指仅作简单程序设计任务的语言，如shell script、VBScript等只能处理简单任务的编程语言，并不能与Python相提并论。</p><p>Python本身被设计为可扩充的。并非所有的特性和功能都集成到语言核心。Python提供了丰富的API和工具，以便程序员能够轻松地使用C、C++、Cython来编写扩充模块。Python编译器本身也可以被集成到其它需要脚本语言的程序内。因此，有很多人把Python作为一种“胶水语言”使用。使用Python将其他语言编写的程序进行集成和封装。在Google内部的很多项目，例如Google应用服务引擎使用C++编写性能要求极高的部分，然后用Python或Java/Go调用相应的模块。《Python技术手册》的作者马特利（Alex Martelli）说：“这很难讲，不过，2004年，Python已在Google内部使用，Google召募许多Python高手，但在这之前就已决定使用Python。他们的目的是尽量使用Python，在不得已时改用C++；在操控硬件的场合使用C++，在快速开发时候使用Python。”</p><h3 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h3><h4 id="Web程序"><a href="#Web程序" class="headerlink" title="Web程序"></a>Web程序</h4><p>Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。使用Python语言编写的Gunicorn作为Web服务器，也能够运行Python语言编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的沟通。一些Web框架，如Django、Pyramid、TurboGears、Tornado、web2py、Zope、Flask等，可以让程序员轻松地开发和管理复杂的Web程序。</p><p>Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步在线编写程序和多数标准的网络协议（包含客户端和服务器），并且提供了多种工具，被广泛用于编写高性能的服务器软件。另有gevent这个流行的第三方库，同样能够支持高性能高并发的网络开发。</p><h4 id="GUI开发"><a href="#GUI开发" class="headerlink" title="GUI开发"></a>GUI开发</h4><p>Python本身包含的Tkinter库能够支持简单的GUI开发。但是越来越多的Python程序员选择wxPython或者PyQt等GUI包来开发跨平台的桌面软件。使用它们开发的桌面软件运行速度快，与用户的桌面环境相契合。通过PyInstaller还能将程序发布为独立的安装程序包。</p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>在很多操作系统里，Python是标准的系统组件。大多数Linux发行版和Mac OS X都集成了Python，可以在终端机下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器、Red Hat Linux和Fedora的Anaconda安装器。在RPM系列Linux发行版中，有一些系统组件就是用Python编写的。Gentoo Linux使用Python来编写它的Portage软件包管理系统。Python标准库包含了多个调用作业系统功能的库。通过pywin32这个第三方软件包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>NumPy、SciPy、Matplotlib可以让Python程序员编写科学计算程序。有些公司会使用Scons代替make构建C++程序。</p><p>很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。很多游戏，如EVE Online使用Python来处理游戏中繁多的逻辑。</p><p>YouTube、Google、Yahoo!、NASA都在内部大量地使用Python。OLPC的作业系统Sugar项目的大多数软件都是使用Python编写。</p><h3 id="使用Python编写的著名应用程序"><a href="#使用Python编写的著名应用程序" class="headerlink" title="使用Python编写的著名应用程序"></a>使用Python编写的著名应用程序</h3><ul><li>Reddit - 社交分享网站</li><li>Dropbox - 文件分享服务</li><li>豆瓣网 - 图书、唱片、电影等文化产品的资料数据库网站</li><li>Django - 鼓励快速开发的Web应用框架</li><li>Pylons - Web应用框架</li><li>Zope - 应用服务器</li><li>Plone - 内容管理系统</li><li>TurboGears - 另一个Web应用快速开发框架</li><li>Twisted - Python的网络应用程序框架</li><li>Fabric - 用于管理成百上千台Linux主机的程序库</li><li>Python Wikipedia Robot Framework - MediaWiki的机器人程序</li><li>MoinMoinWiki - Python写成的Wiki程序</li><li>Trac - 使用Python编写的BUG管理系统</li><li>Mailman - 使用Python编写的邮件列表软件</li><li>Mezzanine - 基于Django编写的内容管理系统</li><li>Flask - Python微Web框架</li><li>Webpy - Python微Web框架</li><li>Bottle - Python微Web框架</li><li>EVE - 网络游戏EVE大量使用Python进行开发</li><li>Blender - 使用Python作为建模工具与GUI语言的开源3D绘图软件</li><li>Inkscape - 一个开源的SVG矢量图形编辑器。</li><li>知乎 - 一个问答网站</li><li>果壳 - 一个泛科技主题网站</li><li>Odoo - 仍在持续发展壮大且最受欢迎的ERP软件</li></ul><h3 id="Python优缺点"><a href="#Python优缺点" class="headerlink" title="Python优缺点"></a>Python优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>python，非常适合人类阅读。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。</li><li>易学。python虽然是用c语言写的，但是它摈弃了c中非常复杂的指针，简化了python的语法。</li><li>Python是FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。Python希望看到一个更加优秀的人创造并经常改进。</li><li>可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！ </li><li>在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。 </li><li>Python既支持面向过程的函数编程也支持面向对象的抽象编程。在面向过程的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在面向对象的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。 </li><li>可扩展性和可嵌入性。如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚本功能。 </li><li>丰富的库。Python标准库确实很庞大。python有可定义的第三方库可以使用。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。 </li><li>Python确实是一种十分精彩又强大的语言。它合理地结合了高性能与使得编写程序简单有趣的特色。</li><li>规范的代码。Python采用强制缩进的方式使得代码具有极佳的可读性。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>运行速度，有速度要求的话，用C++改写关键部分吧。不过对于用户而言，机器上运行速度是可以忽略的。因为用户根本感觉不出来这种速度的差异。</li><li>既是优点也是缺点，python的开源性是的Python语言不能加密，但是目前国内市场纯粹靠编写软件卖给客户的越来越少，网站和移动应用不需要给客户源代码，所以这个问题就是问题了。国随着时间的推移，很多国内软件公司，尤其是游戏公司，也开始规模使用他。</li><li>构架选择太多（没有像C#这样的官方.net构架，也没有像ruby由于历史较短，构架开发的相对集中。Ruby on Rails 构架开发中小型web程序天下无敌）。不过这也从另一个侧面说明，python比较优秀，吸引的人才多，项目也多。</li></ol><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">维基百科：Python</a></p><p><a href="https://www.cnblogs.com/rourou1/p/6039108.html" target="_blank" rel="noopener">博客园：python语言的优点和缺点</a></p>]]></content>
      
      <categories>
          
          <category> Python基础 </category>
          
          <category> Python简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开源WIKI：DokuWIKI</title>
      <link href="/2018/05/04/dokuwiki/"/>
      <url>/2018/05/04/dokuwiki/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/dokuwiki-3.jpg" title="DokuWIKI"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://www.dokuwiki.org/" target="_blank" rel="noopener">dokuwiki官网:https://www.dokuwiki.org/</a></p><p>DokuWiki 是一个使用，用途多样的开源 Wiki 软件，并且不需要数据库。它因简洁易读的语法受到用户的喜爱。而容易维护、备份和整合则使它成为管理员的最爱。内置的访问控制列表和认证连接器使 DokuWiki 在企业环境下特别有用，由充满活力的社区贡献的众多插件则令它拥有比传统维基更广阔的应用范围。</p><h3 id="安装dokuwiki"><a href="#安装dokuwiki" class="headerlink" title="安装dokuwiki"></a>安装dokuwiki</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>10.6.168.31/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>php 1.2</td><td>WIKI</td></tr></tbody></table><h4 id="安装php-fpm、nginx"><a href="#安装php-fpm、nginx" class="headerlink" title="安装php-fpm、nginx"></a>安装php-fpm、nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@dokuwiki ~]# yum install -y  nginx        # 安装nginx</span><br><span class="line"># 安装php72，注意最新版dokuwiki要求php版本不能低于5.4</span><br><span class="line">[root@dokuwiki ~]# yum remove -y php* php-common   </span><br><span class="line">[root@dokuwiki ~]# rpm  -Uvh  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">[root@dokuwiki ~]# rpm  -Uvh  https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">[root@dokuwiki ~]# yum install -y php72w* --skip-broken php72w-mysqlnd-7.2.1-1.w7.x86_64</span><br></pre></td></tr></table></figure><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@dokuwiki ~]# vim /etc/nginx/conf.d/wiki.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80 default_server ;</span><br><span class="line">server_name wiki.zeforce.cn;</span><br><span class="line">root /data/dokuwiki;</span><br><span class="line">index index.html index.php;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">root /data/dokuwiki;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下载dokuwiki并解压dokuwiki"><a href="#下载dokuwiki并解压dokuwiki" class="headerlink" title="下载dokuwiki并解压dokuwiki"></a>下载dokuwiki并解压dokuwiki</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dokuwiki ~]# wget https://download.dokuwiki.org/out/dokuwiki-8a269cc015a64b40e4c918699f1e1142.tgz</span><br><span class="line">[root@dokuwiki ~]# mkdir  /data</span><br><span class="line">[root@dokuwiki ~]# tar xf dokuwiki-8a269cc015a64b40e4c918699f1e1142.tgz -C /data</span><br></pre></td></tr></table></figure><h4 id="赋予访问权限"><a href="#赋予访问权限" class="headerlink" title="赋予访问权限"></a>赋予访问权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dokuwiki ~]# chown -R apache.apache /data/</span><br><span class="line">[root@dokuwiki ~]# chmod 777 -R /data       # 测试环境授权777，在生产环境可不要这么做！</span><br></pre></td></tr></table></figure><h4 id="启动nginx、php-fpm，并配置默认页面，访问测试"><a href="#启动nginx、php-fpm，并配置默认页面，访问测试" class="headerlink" title="启动nginx、php-fpm，并配置默认页面，访问测试"></a>启动nginx、php-fpm，并配置默认页面，访问测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@dokuwiki ~]# systemctl start nginx php-fpm</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/dokuwiki-1.gif" title="测试访问"></center><center><img src="https://houhaiyun.github.io/img/images/dokuwiki-2.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> WIKI </category>
          
          <category> 开源WIKI：DokuWIKI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WIKI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯蓝鲸CMDB</title>
      <link href="/2018/05/04/telnet-lanjin-CMDB/"/>
      <url>/2018/05/04/telnet-lanjin-CMDB/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/telnet-lanjin-CMDB-2.png" title="蓝鲸社区版"></center><a id="more"></a><h2 id="安装蓝鲸CMDB"><a href="#安装蓝鲸CMDB" class="headerlink" title="安装蓝鲸CMDB"></a>安装蓝鲸CMDB</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>10.6.168.86/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>openjdk 1.8 蓝鲸CMDB 4.0  zookeeper 3.4.12 mongodb 3.6</td><td>CMDB</td></tr></tbody></table><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode CMDB]# yum install -y java-1.8.0-openjdk-devel    # 安装1.8的devel包，这条命令会安装java-1.8.0、java-1.8.0-poenjdk-devel、java-1.8.0-openjdk-headless以及其他相关依赖</span><br></pre></td></tr></table></figure><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode CMDB]# wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz       # 下载</span><br><span class="line">[root@namenode CMDB]# tar xf zookeeper-3.4.12.tar.gz -C /opt/app/    # 解压</span><br><span class="line">[root@namenode CMDB]# cd /opt/app/zookeeper-3.4.12/</span><br><span class="line">[root@namenode zookeeper-3.4.12]# mkdir data</span><br><span class="line">[root@namenode zookeeper-3.4.12]# mkdir logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@namenode zookeeper-3.4.12]# cat conf/zoo.cfg      # 添加配置文件，注意此配置文件默认是不存在的；</span><br><span class="line">tickTime=2000</span><br><span class="line">dataDir=/opt/app/zookeeper-3.4.12/data</span><br><span class="line">dataLogDir=/opt/app/zookeeper-3.4.12/logs</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line">[root@namenode zookeeper-3.4.12]# ./bin/zkServer.sh start   # 启动zeookeeper；</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@namenode zookeeper-3.4.12]# ps -ef | grep zoo</span><br><span class="line">root      329785       1  3 17:07 pts/6    00:00:01 java -Dzookeeper.log.dir=. -Dzookeeper.root.logger=INFO,CONSOLE -cp /opt/app/zookeeper-3.4.12/bin/../build/classes:/opt/app/zookeeper-3.4.12/bin/../bu</span><br><span class="line">ild/lib/*.jar:/opt/app/zookeeper-3.4.12/bin/../lib/slf4j-log4j12-1.7.25.jar:/opt/app/zookeeper-3.4.12/bin/../lib/slf4j-api-1.7.25.jar:/opt/app/zookeeper-3.4.12/bin/../lib/netty-3.10.6.Final.jar:/opt/app/zookeeper-3.4.12/bin/../lib/log4j-1.2.17.jar:/opt/app/zookeeper-3.4.12/bin/../lib/jline-0.9.94.jar:/opt/app/zookeeper-3.4.12/bin/../lib/audience-annotations-0.5.0.jar:/opt/app/zookeeper-3.4.12/bin/../zookeeper-3.4.12.jar:/opt/app/zookeeper-3.4.12/bin/../src/java/lib/*.jar:/opt/app/zookeeper-3.4.12/bin/../conf: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false org.apache.zookeeper.server.quorum.QuorumPeerMain /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">[root@namenode zookeeper-3.4.12]# ./bin/zkServer.sh stop    # 停止</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br><span class="line">[root@namenode zookeeper-3.4.12]# ps -ef | grep zook</span><br><span class="line">root      329892  327485  0 17:08 pts/6    00:00:00 grep --color=auto zook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@namenode zookeeper-3.4.12]# ./bin/zkServer.sh restart     # 重启</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... no zookeeper to stop (could not find file /opt/app/zookeeper-3.4.12/data/zookeeper_server.pid)</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@namenode zookeeper-3.4.12]# ps -ef | grep zook</span><br><span class="line">root      329943       1 10 17:08 pts/6    00:00:00 java -Dzookeeper.log.dir=. -Dzookeeper.root.logger=INFO,CONSOLE -cp /opt/app/zookeeper-3.4.12/bin/../build/classes:/opt/app/zookeeper-3.4.12/bin/../bu</span><br><span class="line">ild/lib/*.jar:/opt/app/zookeeper-3.4.12/bin/../lib/slf4j-log4j12-1.7.25.jar:/opt/app/zookeeper-3.4.12/bin/../lib/slf4j-api-1.7.25.jar:/opt/app/zookeeper-3.4.12/bin/../lib/netty-3.10.6.Final.jar:/opt/app/zookeeper-3.4.12/bin/../lib/log4j-1.2.17.jar:/opt/app/zookeeper-3.4.12/bin/../lib/jline-0.9.94.jar:/opt/app/zookeeper-3.4.12/bin/../lib/audience-annotations-0.5.0.jar:/opt/app/zookeeper-3.4.12/bin/../zookeeper-3.4.12.jar:/opt/app/zookeeper-3.4.12/bin/../src/java/lib/*.jar:/opt/app/zookeeper-3.4.12/bin/../conf: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false org.apache.zookeeper.server.quorum.QuorumPeerMain /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfgroot      329978  327485  0 17:08 pts/6    00:00:00 grep --color=auto zook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@namenode zookeeper-3.4.12]# ./bin/zkServer.sh status      # 查看状态</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/app/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode app]# yum install -y redis</span><br><span class="line">[root@namenode app]# systemctl start redis</span><br><span class="line">[root@namenode app]# ps -ef | grep redis</span><br><span class="line">redis     330920       1  0 17:22 ?        00:00:00 /usr/bin/redis-server 127.0.0.1:6379</span><br><span class="line">root      330929  327485  0 17:22 pts/6    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode app]# vim /etc/yum.repos.d/mongodb.repo      # 配置官网yum源</span><br><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br><span class="line"></span><br><span class="line">[root@namenode app]# yum install -y mongodb-org</span><br><span class="line">[root@namenode cmdb]# systemctl start mongod</span><br></pre></td></tr></table></figure><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><h4 id="redis打开auth验证"><a href="#redis打开auth验证" class="headerlink" title="redis打开auth验证"></a>redis打开auth验证</h4><p>打开redis.conf，找到requirepass去掉前面的#后面改成你想要设置的密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode cmdb]# grep "^requirepass"  /etc/redis.conf</span><br><span class="line">requirepass cmdb</span><br><span class="line"></span><br><span class="line">[root@namenode cmdb]# systemctl restart redis   # 配置完成要重启redis，切记</span><br></pre></td></tr></table></figure></p><h4 id="在mongodb中创建数据库cmdb"><a href="#在mongodb中创建数据库cmdb" class="headerlink" title="在mongodb中创建数据库cmdb"></a>在mongodb中创建数据库cmdb</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode cmdb]# mongo 127.0.0.1       # 连接</span><br><span class="line">MongoDB shell version v3.6.4</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/test</span><br><span class="line">MongoDB server version: 3.6.4</span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive help, type "help".</span><br><span class="line">For more comprehensive documentation, see</span><br><span class="line">http://docs.mongodb.org/</span><br><span class="line">Questions? Try the support group</span><br><span class="line">http://groups.google.com/group/mongodb-user</span><br><span class="line">Server has startup warnings: </span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] </span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] </span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] </span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] ** WARNING: You are running on a NUMA machine.</span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] **          We suggest launching mongod like this to avoid performance problems:</span><br><span class="line">2018-05-03T18:12:05.022+0800 I CONTROL  [initandlisten] **              numactl --interleave=all mongod [other options]</span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] </span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.</span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'</span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] </span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'.</span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'</span><br><span class="line">2018-05-03T18:12:05.023+0800 I CONTROL  [initandlisten] </span><br><span class="line"><span class="meta">&gt;</span> use cmdb      # 创建cmdb数据库</span><br><span class="line">switched to db cmdb</span><br><span class="line"><span class="meta">&gt;</span> db.createUser(&#123;user: "cc",pwd: "cc",roles: [ &#123; role: "readWrite", db: "cmdb" &#125; ]&#125;)    # 为新创建的数据库设置用户名和密码</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">"user" : "cc",</span><br><span class="line">"roles" : [</span><br><span class="line">&#123;</span><br><span class="line">"role" : "readWrite",</span><br><span class="line">"db" : "cmdb"</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署CMDB"><a href="#部署CMDB" class="headerlink" title="部署CMDB"></a>部署CMDB</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode CMDB]# wget http://bkopen-10032816.file.myqcloud.com/cmdb3/cmdb-3.0.6.tar.gz        # 下载</span><br><span class="line">[root@namenode CMDB]# tar xf cmdb-3.0.6.tar.gz -C /opt/app/</span><br><span class="line">[root@namenode CMDB]# cd /opt/app/cmdb/</span><br><span class="line"></span><br><span class="line">[root@namenode cmdb]# python init.py --discovery 127.0.0.1:2181 --database cmdb --redis_ip 127.0.0.1 --redis_port 6379 --redis_pass cmdb --mongo_ip 127.0.0.1 --mongo_port 27017 --mongo_user cc --mongo_p</span><br><span class="line">ass cc --blueking_cmdb_url http://127.0.0.1:8083 --listen_port 8083     # 生成配置文件</span><br></pre></td></tr></table></figure><h3 id="修改mongodb配置文件"><a href="#修改mongodb配置文件" class="headerlink" title="修改mongodb配置文件"></a>修改mongodb配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode cmdb]# vim cmdb_adminserver/configures/datacollection.conf</span><br><span class="line"></span><br><span class="line">    [mongodb]</span><br><span class="line">    host = 127.0.0.1</span><br><span class="line">    usr = cc</span><br><span class="line">    pwd = cc</span><br><span class="line">    database = cmdb</span><br><span class="line">    port = 27017</span><br><span class="line">    maxOpenConns = 3000</span><br><span class="line">    maxIdleConns = 1000</span><br><span class="line">    mechanism=SCRAM-SHA-1       # 如果mongodb版本大于3.6需要在配置文件添加此行；</span><br><span class="line"></span><br><span class="line">    [snap-redis]</span><br><span class="line">    host = 127.0.0.1:6379</span><br><span class="line">    usr = cc</span><br><span class="line">    pwd = cmdb</span><br><span class="line">    database = 0</span><br><span class="line">    chan = 3_snapshot</span><br><span class="line"></span><br><span class="line">    [redis]</span><br><span class="line">    host = 127.0.0.1:6379</span><br><span class="line">    usr = cc</span><br><span class="line">    pwd = cmdb</span><br><span class="line">    database = 0</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode cmdb]# ./start.sh </span><br><span class="line">starting: cmdb_adminserver</span><br><span class="line">starting: cmdb_apiserver</span><br><span class="line">starting: cmdb_auditcontroller</span><br><span class="line">starting: cmdb_datacollection</span><br><span class="line">starting: cmdb_eventserver</span><br><span class="line">starting: cmdb_hostcontroller</span><br><span class="line">starting: cmdb_hostserver</span><br><span class="line">starting: cmdb_objectcontroller</span><br><span class="line">starting: cmdb_proccontroller</span><br><span class="line">starting: cmdb_procserver</span><br><span class="line">starting: cmdb_toposerver</span><br><span class="line">starting: cmdb_webserver</span><br><span class="line">root      334229       1  5 18:23 pts/6    00:00:00 ./cmdb_adminserver --addrport=10.6.168.86:60004 --logtostderr=false --log-dir=./logs --v=0 --config=configures/migrate.conf</span><br><span class="line">root      334250       1  3 18:23 pts/6    00:00:00 ./cmdb_apiserver --addrport=10.6.168.86:8080 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334271       1  1 18:23 pts/6    00:00:00 ./cmdb_auditcontroller --addrport=10.6.168.86:50005 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334287       1  1 18:23 pts/6    00:00:00 ./cmdb_datacollection --addrport=10.6.168.86:60005 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334310       1  1 18:23 pts/6    00:00:00 ./cmdb_eventserver --addrport=10.6.168.86:60009 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334331       1  1 18:23 pts/6    00:00:00 ./cmdb_hostcontroller --addrport=10.6.168.86:50002 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334352       1  1 18:23 pts/6    00:00:00 ./cmdb_hostserver --addrport=10.6.168.86:60001 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334373       1  0 18:23 pts/6    00:00:00 ./cmdb_objectcontroller --addrport=10.6.168.86:50001 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334394       1  0 18:23 pts/6    00:00:00 ./cmdb_proccontroller --addrport=10.6.168.86:50003 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334414       1  0 18:23 pts/6    00:00:00 ./cmdb_procserver --addrport=10.6.168.86:60003 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334434       1  0 18:23 pts/6    00:00:00 ./cmdb_toposerver --addrport=10.6.168.86:60002 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">root      334455       1  0 18:23 pts/6    00:00:00 ./cmdb_webserver --addrport=10.6.168.86:8083 --logtostderr=false --log-dir=./logs --v=0 --regdiscv=127.0.0.1:2181</span><br><span class="line">process count should be: 12 , now: 12</span><br></pre></td></tr></table></figure><h3 id="服务启动之后初始化数据库"><a href="#服务启动之后初始化数据库" class="headerlink" title="服务启动之后初始化数据库"></a>服务启动之后初始化数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@namenode cmdb]# bash init_db.sh </span><br><span class="line">&#123;"result":true,"bk_error_code":0,"bk_error_msg":"success","data":"migrate success"&#125;</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><center><img src="https://houhaiyun.github.io/img/images/telnet-lanjin-CMDB-1.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> CMDB </category>
          
          <category> 腾讯蓝鲸CMDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>指令集架构</title>
      <link href="/2018/04/26/ISA/"/>
      <url>/2018/04/26/ISA/</url>
      <content type="html"><![CDATA[<h3 id="指令集架构"><a href="#指令集架构" class="headerlink" title="指令集架构"></a>指令集架构</h3><p>指令集架构（英语：lnstruction Set Architecture，缩写为ISA），又称为指令集或指令集体系，是计算机体系结构中与程序设计有关的部分，包含了基本数据类型，指令集，寄存器，寻址模式，存储体系，中断，异常处理以及外部I/O。指令集架构包含一系列的opcode即操作码（机器语言），以及由特定处理器执行的基本命令。</p><a id="more"></a><h3 id="指令集的分类"><a href="#指令集的分类" class="headerlink" title="指令集的分类"></a>指令集的分类</h3><p><strong>复杂指令集</strong>（英文：Complex Instruction Set Computing；缩写：CISC）是一种微处理器指令集架构，每个指令可执行若干低级操作，诸如从存储器读取、存储、和计算操作，全部集于单一指令之中。与之相对的是精简指令集。</p><p><strong>精简指令集计算</strong>（英语：reduced instruction set computing，缩写：RISC）或简译为精简指令集，是计算机中央处理器的一种设计模式。这种设计思路可以想像成是一家流水线工厂，对指令数目和寻址方式都做了精简，使其实现更容易，指令并行执进程度更好，编译器的效率更高。目前常见的精简指令集微处理器包括DEC Alpha、ARC、ARM、AVR、MIPS、PA-RISC、Power Architecture（包括PowerPC、PowerXCell）和SPARC等。</p><p>复杂指令集计算机包含许多应用程序中很少使用的特定指令，由此产生的缺陷是指令长度不固定。精简指令集计算机通过只执行在程序中经常使用的指令来简化处理器的结构，而特殊操作则以子程序的方式实现，它们的特殊使用通过处理器额外的执行时间来弥补。理论上的重要类型还包括最小指令集计算机与单指令集计算机，但都未用作商业处理器。另外一种派生类型是超长指令字，处理器接受许多经过编码的指令并通过检索提取出一个指令字并执行。</p><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><p>机器语言是由声明和指令所组成的。再处理结构上，一个特定指令指明了以下几个部分：</p><ul><li>用于算数运算，寻址或者控制功能的特定寄存器；</li><li>特定存储空间的地址或偏移量；</li><li>用于解译操作码的特定寻址模式；</li></ul><p>复杂的操作可以借由将简单的指令合并而达成，可以（在冯.诺依曼体系中）连续的运行，也可以藉控制流来运行指令。</p><h3 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h3><p>有效的指令操作须包含：</p><ul><li>数据处理与存储操作<ul><li>将寄存器的值（在中央处理器作为高速缓存的存储空间）设为固定值；</li><li>将数据从存储空间中传送至寄存器，反之亦然。用于将数据取出并执行计算，或者将计算结果予以保存；</li><li>从硬件设备读取或写入数据。</li></ul></li><li>算术逻辑单元<ul><li>对两个存储于寄存器的数字进行add，subtract，multiply，divide,将结果放到一个寄存器内，一个或是更多的状态码可能被设置在状态寄存器中；</li><li>执行位操作，藉对两组数字（为两串的数字，都由零与一构成，分别存储于两个寄存器内）运行逻辑与和逻辑或，或者对寄存器的每一位运行逻辑非操作；</li><li>比较两个寄存器中的数据（例如是大于或者相等）；</li></ul></li><li>控制流<ul><li>分支，跳跃至程序某地址并执行相应指令；</li><li>条件分支，假设某一条件成立，就跳到程序的另一个位置；</li><li>间接分支，在跳到另一个位置之前，将现在所运行的指令的下一个指令的位置存储起来，作为子程序运行完返回的地址；</li></ul></li></ul><h3 id="复杂指令"><a href="#复杂指令" class="headerlink" title="复杂指令"></a>复杂指令</h3><p>一些电脑在他们的指令集架构内包含复杂指令。复杂指令包含：</p><ul><li>将许多寄存器存成堆栈的形式。</li><li>移动存储器内大笔的数据。</li><li>复杂或是浮点数运算（正弦，余弦，平方根等等）</li><li>运行test-and-set指令。</li><li>运行数字存在存储器而非寄存器的运算</li></ul><p>有一种复杂指令单指令流多数据流，英文全名是Single-Instruction Stream Multiple-Data Stream。或是向量指令，这是一种可以在同一时间对多笔数据进行相同运算的操作。SIMD有能力在短时间内将大笔的向量和矩阵计算完成。SIMD指令使并行计算变得简单，各种SIMD指令集被开发出来，例如MMX，3DNow!以及AltiVec。</p><h3 id="指令的组成"><a href="#指令的组成" class="headerlink" title="指令的组成"></a>指令的组成</h3><p>在传统的架构上，一条指令包含opcode，表示运算的方式，以及零个或是更多的运算对象，有些像是运算对象的数字可能指的是寄存器的编号，还有存储器位置，或是文字数据。</p><p>在超长指令字（VLIW）的结构中，包含了许多微指令，借此将复杂的指令分解为简单的指令。</p><h3 id="指令的长度"><a href="#指令的长度" class="headerlink" title="指令的长度"></a>指令的长度</h3><p>指令长度的范围可以说是相当广泛，从微控制器的4 bit，到VLIW系统的数百bit。在个人电脑，大型机，超级电脑内的处理器，其内部的指令长度介于8到64 bits（在x86处理器结构内，最长的指令长达15 bytes，等于120 bits）。在一个指令集架构内，不同的指令可能会有不同长度。在一些结构，特别是大部分的精简指令集（RISC），指令是固定的长度，长度对应到结构内一个字的大小。在其他结构，长度则是byte的整数倍或是一个halfword。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>对微处理器而有两种指令集。第一种是复杂指令集（Complex Instruction Set Computer），拥有许多不同的指令。在1970年代，许多机构，像是IBM，发现有许多指令是不需要的。结果就产生了精简指令集（Reduced Instruction Set Computer），它所包含的指令就比较少。精简的指令集可以提供比较高的速度，使处理器的尺寸缩小，以及较少的电力损耗。然而，比较复杂的指令集较容易使工作更完善，存储器及缓存的效率较高，以及较为简单的代码。</p><p>一些指令集保留了一个或多个的opcode，以运行系统调用或软件中断。</p><h3 id="指令集的实现"><a href="#指令集的实现" class="headerlink" title="指令集的实现"></a>指令集的实现</h3><p>在设计处理器内的微架构时，工程师使用藉电路连接的区块来架构，区块用来表示加法器，乘法器，计数器，寄存器，算术逻辑单元等等，寄存器传递语言通常被用来描述被解码的指令，指令是借由微架构来运行指令。 有两种基本的方法来建构控制单元，藉控制单元，以微架构作为通路来运行指令：</p><ol><li>早期的电脑和采用精简指令集的电脑藉将电路接线（像是微架构剩下的部分）。</li><li>其他的设备使用微程序来达成—像是晶体管ROM或PLA（即使RAM已使用很久）。</li></ol><p>电脑微处理器的指令集架构（Instruction Set Architecture）常见的有三种：</p><ul><li>复杂指令集运算（Complex Instruction Set Computing，CISC）<br>目前x86架构微处理器如Intel的Pentium/Celeron/Xeon与AMD的Athlon/Duron/Sempron；以及其64位扩展系统的x86-64架构的Intel 64的Intel Core/Core2/Pentium/Xeon与AMD64的Phenom II/Phenom/Athlon 64/Opteron/Ryzen/EPYC都属于CISC系列。主要针对的操作系统是微软的Windows和苹果公司的OS X。另外Linux，一些UNIX等，都可以运行在x86（CISC）架构的微处理器。</li><li>精简指令集运算（Reduced Instruction Set Computing，RISC）<br>RISC这种指令集运算包括HP的PA-RISC，IBM的PowerPC，Compaq（被并入HP）的Alpha，MIPS公司的MIPS，SUN公司的SPARC，ARM公司的ARM、Cortex等。目前有UNIX，Linux，MacOS以及包括iOS，Android，WindowsPhone，WindowsRT等在内的大多数移动操作系统运行在RISC处理器上。</li><li>显式并发指令运算（Explicitly Parallel Instruction Computing，EPIC）<br>EPIC乃先进的全新指令集运算，只有Intel的IA-64架构的纯64位微处理器的Itanium/Itanium 2。EPIC指令集运算的IA-64架构主要针对的操作系统是微软64位安腾版的Windows XP以及64位安腾版的Windows Server 2003。另外一些64位的Linux，一些64位的UNIX也可以运行IA-64（EPIC）架构。</li><li>超长指令字指令集运算（VLIW）<br>通过将多条指令放入一个指令字，有效的提高了CPU各个计算功能部件的利用效率，提高了程序的性能</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">维基百科：指令集架构https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 指令集架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker简介</title>
      <link href="/2017/12/23/Docker-Jianjie/"/>
      <url>/2017/12/23/Docker-Jianjie/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Docker-Jianjie-1.png" title="Docker"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://www.docker.com/" target="_blank" rel="noopener">官网：https://www.docker.com/</a></p><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、<a href="http://www.whatis.com.cn/word_5275.htm" target="_blank" rel="noopener">bare metal</a>、OpenStack 集群和其他的基础应用平台。 </p><h4 id="Docker通常用于如下场景："><a href="#Docker通常用于如下场景：" class="headerlink" title="Docker通常用于如下场景："></a>Docker通常用于如下场景：</h4><ul><li>web应用的自动化打包和发布；</li><li>自动化测试和持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</li></ul><p><code>Docker</code>使用<code>google</code>公司推出的<code>go</code>语言进行开发实现，基于<code>Linux</code>内核的<code>cgroup</code>，<code>namespace</code>，以及<code>AUFS</code>类的<code>Union</code> <code>FS</code>等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离进程，因此也称其为容器。最初实现是基于<code>LXC</code>，从0.7版本以后开始取出<code>LXC</code>，转而使用自行研发的<code>licontainer</code>，从1.1开始，则进一步演进为使用<code>runC</code>和<code>containerd</code>。</p><p><code>Docker</code> 最初是 <code>dotCloud</code> 公司创始人 <code>Solomon</code> <code>Hykes</code> 在法国期间发起的一个公司内部项目，它是基于 <code>dotCloud</code> 公司多年云服务技术的一次革新，并于 2013 年 3 月以 <code>Apache</code> 2.0 授权协议开源，主<br>要项目代码在 <code>GitHub</code>上进行维护。<code>Docker</code> 项目后来还加入了 <code>Linux</code> 基金会，并成立推动 开放容器联盟（<code>OCI</code>） 。</p><p><code>Docker</code> 自开源后受到广泛的关注和讨论，至今其 <code>GitHub</code> 项目已经超过 4 万 6 千个星标和一万多个 <code>fork</code>。甚至由于 <code>Docker</code> 项目的火爆，在 2013 年底，<code>dotCloud</code> 公司决定改名为<code>Docker</code>。<code>Docker</code> 最初是在 <code>Ubuntu</code> 12.04上开发实现的；<code>Red</code> <code>Hat</code> 则从 <code>RHEL</code> 6.5 开始对<code>Docker</code> 进行支持；<code>Google</code> 也在其 <code>PaaS</code> 产品中广泛应用 <code>Docker</code>。</p><h3 id="Docker和传统虚拟化的不同之处"><a href="#Docker和传统虚拟化的不同之处" class="headerlink" title="Docker和传统虚拟化的不同之处"></a>Docker和传统虚拟化的不同之处</h3><p><code>Docker</code> 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 <code>Docker</code> 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><h4 id="传统虚拟化"><a href="#传统虚拟化" class="headerlink" title="传统虚拟化"></a><center>传统虚拟化</center></h4><center><img src="https://houhaiyun.github.io/img/images/Docker-Jianjie-2.jpg" title="传统虚拟化"></center><h4 id="Docker"><a href="#Docker" class="headerlink" title=" Docker"></a><center> Docker</center></h4><center><img src="https://houhaiyun.github.io/img/images/Docker-Jianjie-3.jpg" title="Docker"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><strong>《Docker — 从入门到实践》</strong></p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> Docker简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么要用Docker？</title>
      <link href="/2017/12/23/Docker-Why-Use/"/>
      <url>/2017/12/23/Docker-Why-Use/</url>
      <content type="html"><![CDATA[<h3 id="为什么要用Docker？"><a href="#为什么要用Docker？" class="headerlink" title="为什么要用Docker？"></a>为什么要用Docker？</h3><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><a id="more"></a><h4 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h4><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h4 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h4><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大节约了开发、测试、部署的时间。</p><h4 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h4><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 <code>bug</code> 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现「这段代码在我机器上没问题啊」 这类问题。</p><h4 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h4><p>对开发和运维（<code>DevOps</code>） 人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 <code>Docker</code> 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过<code>Dockerfile</code> 来进行镜像构建，并结合 持续集成(<code>Continuous Integration</code>) 系统进行集成测试，而运维人员则可以<br>直接在生产环境中快速部署该镜像，甚至结合 持续部署(<code>ContinuousDelivery</code>/<code>Deployment</code>) 系统进行自动部署。</p><p>而且使用 <code>Dockerfile</code> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h4 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h4><p>由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h4 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h4><p><code>Docker</code> 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h3 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h3><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 MB</td><td>一般为 GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><strong>《Docker — 从入门到实践》</strong></p>]]></content>
      
      <categories>
          
          <category> 容器 </category>
          
          <category> 为什么要用Docker？ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Xen、OpenVZ、KVM、Hyper-V、VMWare虚拟化技术介绍</title>
      <link href="/2017/12/23/Docker-Xunnihua/"/>
      <url>/2017/12/23/Docker-Xunnihua/</url>
      <content type="html"><![CDATA[<h3 id="XEN"><a href="#XEN" class="headerlink" title="XEN"></a>XEN</h3><p><a href="http://xen.org/" target="_blank" rel="noopener">官网：http://xen.org/</a></p><p><code>Xen</code> 由剑桥大学开发，它是基于硬件的完全分割，物理上有多少的资源就只能分配多少资源，因此很难超售。可分为<code>Xen-PV</code>（半虚拟化），和<code>Xen-HVM</code>（全虚拟化）。</p><p><code>Xen</code>是不能超售内存和硬盘的，当母服务器只有16<code>G</code>内存以及100<code>G</code>硬盘时，当开 <code>Xen</code>架构（任意一个虚拟化）的1<code>G</code>内存、25<code>G</code>硬盘的子机时，会直接占用服务器1<code>G</code> 内存，以及25<code>G</code>硬盘，所以<code>Xen</code>的性能，相比<code>OpenVZ</code>在超售的情况下要好。</p><a id="more"></a><ul><li><code>Xen-PV</code>：半虚拟化，所以它仅仅适用于<code>linux</code>系列<code>VPS</code>，但它的性能损失比较少，大概相对于母机的4%-8%左右。</li><li><code>Xen-HVM</code>：全虚拟化，可以安装<code>windows</code>或自由挂载<code>ISO</code>文件安装任意系统，由于是全虚拟化，所以性能损失较大，大概相对于母机性能损失8%-20%左右。</li></ul><ul><li><code>Xen</code>适用人群：预算较为充足，且希望<code>VPS</code>有较高性能的客户</li><li><code>Xen</code>注意事项：注意<code>Xen-PV</code>和<code>Xen-HVM</code>的区别。</li><li><code>Xen</code>可用系统：<code>Xen-PV</code>：纯<code>Linux</code>，<code>Xen-HVM</code>：支持<code>Windows</code>、<code>Linux</code>等。</li><li><code>Xen</code>代表商家：<code>Linode.com</code></li></ul><h3 id="OpenVZ"><a href="#OpenVZ" class="headerlink" title="OpenVZ"></a>OpenVZ</h3><p><a href="http://openvz.org/" target="_blank" rel="noopener">官网：http://openvz.org/</a></p><p><code>OpenVZ</code>（简 称<code>OVZ</code>）采用<code>SWsoft</code>的<code>Virutozzo</code>虚拟化服务器软件产品的内核，是基于<code>Linux</code>平台的操作系统级服务器虚拟化架构。这个架构直接调用母服务器（母机）中的内核，模拟生成出子服务器（<code>VPS</code><br>，小机），所以，它经过虚拟化后相对于母服务器，性能损失大概只有的1-3%。<br>当然 <code>OpenVZ</code>可以超售，意思味着一台服务器总共16<code>G</code>内存，他可以开出配置为1<code>G</code> 内存×17台以上的子服务器。因为他的虚拟架构关系属于：客户用多少，就扣除母服务器多少，所以<code>OpenVZ</code>架构的<code>VPS</code>较为便<br>宜。但由于存在超售因素，如果服务商毫无休止的超售会导致服务器的性能急剧下降。</p><p><code>OpenVZ</code>另一个特点是，它是 <strong>直接调用母服务器的内核</strong> ，所以会导致部分软件无法使用，以及部分内核文件是无法修改。</p><ul><li><code>OpenVZ</code>适用人群：新手、低预算客户</li><li><code>OpenVZ</code>注意事项：资源不是自己独有的，安装<code>VPN</code>服务需要注意检测虚拟网卡支持。</li><li><code>OpenVZ</code>可用系统：<code>Linux</code>（不支持<code>Windows</code>）</li><li><code>OpenVZ</code>代表商家：<code>Buyvm.net</code></li></ul><h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><p><a href="http://www.linux-kvm.org/" target="_blank" rel="noopener">网站：http://www.linux-kvm.org/</a></p><p><code>KVM</code>是<code>Linux</code>下的全功能虚拟化架构，基于<code>KVM</code>架构的<code>VPS</code>，默认是没有系统的，可自己上传<code>ISO</code>或调用服务商自带的<code>ISO</code>手动安装系统。这个非常适合热爱<code>DIY</code>自己 <code>VPS</code>的客户。</p><p>由于<code>KVM</code>架构全功能虚拟化架构，甚至拥有独立的<code>BIOS</code>控制，所以对母服务器性能影响较大，所以基于<code>KVM</code>的<code>VPS</code>较贵，但<code>KVM VPS</code>相对其它架构的<code>VPS</code>较为自由。</p><ul><li><code>KVM</code>适用人群：折腾帝</li><li><code>KVM</code>注意事项：虚拟化性能比<code>Xen</code>略低</li><li><code>KVM</code>可用系统：<code>Windows</code>、<code>Linux</code>系列</li><li><code>KVM</code>代表商家：<code>Hostgation</code>.<code>com</code></li></ul><h3 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h3><p><a href="http://www.microsoft.com/zh-cn/server-cloud/" target="_blank" rel="noopener">网站：http://www.microsoft.com/zh-cn/server-cloud/</a></p><p><code>Hyper-V</code>是微软的一款虚拟化产品，大部分国内的<code>VPS</code>服务商使用这个架构，主要是因为其转为<code>Windows</code>定制，管理起来较为方便。目前的<code>Hyper</code>-<code>V</code>也支持<code>Linux</code>，只不过性能损失比较严重。</p><p><code>Hyper-V</code>完美支持<code>Windows</code>系统，包括32位和64位。如果大家选购<code>Hyper-V</code>架构的 <code>VPS</code>，强烈建议使用<code>Windows</code>。</p><p><code>Hyper-V</code>目前不能超售内存，但可超售硬盘，硬盘是根据客户使用情况扣除。一般来说，服务器的硬盘不会100%用完，这点不用担心。</p><ul><li><code>Hyper-V</code>适用人群：<code>Windows</code>系统爱好者</li><li><code>Hyper-V</code>注意事项：<code>Linux</code>操作系统性能较低</li><li><code>Hyper-V</code>可用系统：<code>Windows</code>、<code>Linux</code></li></ul><h3 id="VMWare"><a href="#VMWare" class="headerlink" title="VMWare"></a>VMWare</h3><p><a href="http://www.vmware.com/" target="_blank" rel="noopener">网站：http://www.vmware.com/</a></p><p><code>vSphere</code> 是<code>VMware</code>公司推出一套服务器虚拟化解决方案，目前的最新版本为5.0 。<code>vSphere</code>5 中的核心组件为 <code>VMware</code> <code>ESXi</code> 5.0.0（取代原<code>ESX</code>）, <code>ESXi</code>是一款可以独立安装和运行在祼机上的系统，因&gt;此与他我们以往见过的<code>VMware</code> <code>Workstation</code> 软件不同的是它不再依存于宿主操作系统之上。在<code>ESXi</code>安装好以后，我们可以通过<code>vSphere</code> <code>Client</code> 远程连接控制，在<code>ESXi</code> 服务器上创建多个<code>VM</code>（虚拟机），在为这些虚拟机安装好<code>Linux</code> /<code>Windows</code> <code>Server</code> 系统使之成为能提供各种网络应用服务的虚拟服务器，<code>ESXi</code> 也是从内核级支持硬件虚拟化，运行于其中的虚拟服务器在性能与稳定性上不亚于普通的硬件服<br>务器，而且更易于管理维护</p><p><code>VMware vSphere</code> 是用于虚拟化的软件组件套件。这些组件包括 <code>ESXi</code>、<code>vCenter Server</code> 以及在 <code>vSphere</code> 环境中实现许多不同功能的其他软件组件。</p><h3 id="KVM、XEN、VMWare的对比"><a href="#KVM、XEN、VMWare的对比" class="headerlink" title="KVM、XEN、VMWare的对比"></a>KVM、XEN、VMWare的对比</h3><center><img src="https://houhaiyun.github.io/img/images/Docker-Xunnihua-1.png" title="KVM、XEN、VMWare的对比"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://wiki.dreamrunner.org/public_html/Misc/Software/virtual-technology.html" target="_blank" rel="noopener">虚拟化技术：http://wiki.dreamrunner.org/public_html/Misc/Software/virtual-technology.html</a></p><p><a href="http://openskill.cn/article/69" target="_blank" rel="noopener">XEN 、 VMware ESXi、Hyper-V 以及 KVM 特点比较：http://openskill.cn/article/69</a></p>]]></content>
      
      <categories>
          
          <category> 虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化技术介绍 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：监控Nginx状态</title>
      <link href="/2017/11/27/Zabbix-Jiankong-Nginx/"/>
      <url>/2017/11/27/Zabbix-Jiankong-Nginx/</url>
      <content type="html"><![CDATA[<h3 id="安装nginx，并修改nginx配置文件，开启status"><a href="#安装nginx，并修改nginx配置文件，开启status" class="headerlink" title="安装nginx，并修改nginx配置文件，开启status"></a>安装nginx，并修改nginx配置文件，开启status</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# yum install nginx</span><br><span class="line"></span><br><span class="line">[root@zabbix-client1 ~]# vim /etc/nginx/nginx.conf      # 在server中添加一下内容；</span><br><span class="line">   server &#123;</span><br><span class="line"></span><br><span class="line">        location ~ /nginx_status &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log off;</span><br><span class="line">            allow 127.0.0.1;</span><br><span class="line">            allow 192.168.8.12;     # 定义允许访问的IP；</span><br><span class="line">            allow 192.168.8.15;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">[root@zabbix-client1 ~]# systemctl start nginx</span><br><span class="line">[root@zabbix-client1 ~]# curl http://127.0.0.1/nginx_status     # 已经有状态信息；</span><br><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 6 6 6 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0 </span><br><span class="line"></span><br><span class="line"># 解释：</span><br><span class="line">## Active connections: 对后端发起的活动连接数</span><br><span class="line">## Server accepts handled requests: Nginx 总共处理了 1 个连接，成功创建了 1 次握手（没有失败次数），总共处理了 1 个请求</span><br><span class="line">## Reading: Nginx 读取到客户端的 Header 信息数</span><br><span class="line">## Writing: Nginx 返回给客户端的 Header 信息数</span><br><span class="line">## Waiting: 开启 keep-alive 的情况下，这个值等于 active - ( reading + writing ), 意思是 Nginx 已经处理完成，正在等待下一次请求指令的驻留连接</span><br><span class="line">## 在访问效率很高，请求很快被处理完毕的情况下，Waiting 数比较多是正常的。如果 reading + writing 数较多，则说明并发访问量很大，正在处理过程中</span><br></pre></td></tr></table></figure><h3 id="编写客户端脚本ngx-status-sh"><a href="#编写客户端脚本ngx-status-sh" class="headerlink" title="编写客户端脚本ngx_status.sh"></a>编写客户端脚本ngx_status.sh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# vim /etc/zabbix/zabbix_agentd.d/ngx_status.sh </span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"># DateTime: 2017-11-26</span><br><span class="line"># AUTHOR：houhaiyun</span><br><span class="line"># WEBSITE: http://www.ihaiyun.cc</span><br><span class="line"># Description：zabbix监控nginx性能以及进程状态</span><br><span class="line"># Note：此脚本需要配置在被监控端，否则ping检测将会得到不符合预期的结果</span><br><span class="line"> </span><br><span class="line">HOST=&quot;127.0.0.1&quot;</span><br><span class="line">PORT=&quot;80&quot;</span><br><span class="line"> </span><br><span class="line"># 检测nginx进程是否存在</span><br><span class="line">function ping &#123;</span><br><span class="line">    /sbin/pidof nginx | wc -l  </span><br><span class="line">&#125;</span><br><span class="line"># 检测nginx性能</span><br><span class="line">function active &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| grep &apos;Active&apos; | awk &apos;&#123;print $NF&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line">function reading &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| grep &apos;Reading&apos; | awk &apos;&#123;print $2&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line">function writing &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| grep &apos;Writing&apos; | awk &apos;&#123;print $4&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line">function waiting &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| grep &apos;Waiting&apos; | awk &apos;&#123;print $6&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line">function accepts &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| awk NR==3 | awk &apos;&#123;print $1&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line">function handled &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| awk NR==3 | awk &apos;&#123;print $2&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line">function requests &#123;</span><br><span class="line">    /usr/bin/curl &quot;http://$HOST:$PORT/ngx_status/&quot; 2&gt;/dev/null| awk NR==3 | awk &apos;&#123;print $3&#125;&apos;</span><br><span class="line">&#125;</span><br><span class="line"># 执行function</span><br><span class="line">$1</span><br><span class="line"></span><br><span class="line">[root@zabbix-client1 ~]# chmod +x /etc/zabbix/zabbix_agentd.d/ngx_status.sh</span><br><span class="line">[root@zabbix-client1 ~]# ll /etc/zabbix/zabbix_agentd.d/ngx_status.sh</span><br><span class="line">-rwxr-xr-x 1 root root 1218 Nov 26 22:06 /etc/zabbix/zabbix_agentd.d/ngx_status.sh</span><br></pre></td></tr></table></figure><h3 id="将自定义的UserParameter加入配置文件"><a href="#将自定义的UserParameter加入配置文件" class="headerlink" title="将自定义的UserParameter加入配置文件"></a>将自定义的UserParameter加入配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# tail -1 /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">UserParameter=nginx.status[*],/etc/zabbix/zabbix_agentd.d/ngx_status.sh $1</span><br><span class="line"></span><br><span class="line">[root@zabbix-client1 ~]# systemctl restart zabbix-agent.service     # 重启zabbix客户端；</span><br></pre></td></tr></table></figure><h3 id="zabbix-get获取数据"><a href="#zabbix-get获取数据" class="headerlink" title="zabbix_get获取数据"></a>zabbix_get获取数据</h3><p>此步骤可以跳过，但是最好是测试一下，因为通过此命令我们可以检测配置是否正确<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.8.15 -k &quot;nginx.status[ping]&quot;</span><br><span class="line">1</span><br><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.8.15 -k &quot;nginx.status[ping]&quot;</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>在<code>zabbix server</code>服务器上执行如上命令</p><h3 id="Zabbix-web端配置"><a href="#Zabbix-web端配置" class="headerlink" title="Zabbix web端配置"></a>Zabbix web端配置</h3><p>模板路径：直接导入即可</p><p><a href="http://pan.baidu.com/s/1slmKKup" target="_blank" rel="noopener">链接：http://pan.baidu.com/s/1slmKKup 密码：evet</a></p><p><strong>注意</strong>：可能模板中的<code>item</code>有些会不支持，这还需要仔细去调了。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-Nginx-1.jpg" title="Zabbix web端配置"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-Nginx-2.gif" title="查看图形"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 监控Nginx状态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：实现新版微信告警</title>
      <link href="/2017/11/27/Zabbix-Wechat-Baojing/"/>
      <url>/2017/11/27/Zabbix-Wechat-Baojing/</url>
      <content type="html"><![CDATA[<h3 id="微信企业号申请"><a href="#微信企业号申请" class="headerlink" title="微信企业号申请"></a>微信企业号申请</h3><p><a href="http://work.weixin.qq.com/" target="_blank" rel="noopener">地址：http://work.weixin.qq.com/</a></p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-1.jpg" title="微信企业号申请"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-2.jpg" title="微信企业号申请"></center><h3 id="配置微信企业号"><a href="#配置微信企业号" class="headerlink" title="配置微信企业号"></a>配置微信企业号</h3><h4 id="记录CorpID"><a href="#记录CorpID" class="headerlink" title="记录CorpID"></a>记录CorpID</h4><p>我们需要记录<code>CorpID</code></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-3.jpg" title="我们需要记录`CorpID`"></center><h4 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-4.jpg" title="创建新应用"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-5.jpg" title="创建新应用"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-6.jpg" title="创建新应用"></center><h4 id="需要得到的信息"><a href="#需要得到的信息" class="headerlink" title="需要得到的信息"></a>需要得到的信息</h4><p>记录用户的账号、<code>CorpID</code>和<code>Secret</code>、<code>Agentld</code></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>企业号已经被部门成员关注</li><li>企业号有一个可以发送消息的应用，一个授权管理员，可以使应用成员发消息</li><li>此处我们并于设置成员、部门，大家可以根据自己的需求来设定</li></ul><h3 id="Zabbix-server配置"><a href="#Zabbix-server配置" class="headerlink" title="Zabbix-server配置"></a>Zabbix-server配置</h3><h4 id="设置Zabbix默认脚本路径"><a href="#设置Zabbix默认脚本路径" class="headerlink" title="设置Zabbix默认脚本路径"></a>设置Zabbix默认脚本路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# grep -i  &quot;AlertScriptsPath&quot; /etc/zabbix/zabbix_server.conf</span><br><span class="line">### Option: AlertScriptsPath</span><br><span class="line"># AlertScriptsPath=$&#123;datadir&#125;/zabbix/alertscripts</span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts       # 脚本默认路径；</span><br></pre></td></tr></table></figure><h4 id="设置脚本"><a href="#设置脚本" class="headerlink" title="设置脚本"></a>设置脚本</h4><h5 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h5><p><a href="https://pan.baidu.com/s/1o7Lg6nC" target="_blank" rel="noopener">链接: https://pan.baidu.com/s/1o7Lg6nC 密码: csqc</a></p><h5 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# cd /usr/lib/zabbix/alertscripts         </span><br><span class="line">[root@zabbix-server alertscripts]# ls       # 已经把脚本上传到/usr/lib/zabbix/alertscripts；</span><br><span class="line">wechat</span><br><span class="line">[root@zabbix-server alertscripts]# chmod +x wechat      # 添加执行权限；</span><br><span class="line">[root@zabbix-server alertscripts]# chown zabbix.zabbix wechat       # 设置属主和属组；</span><br><span class="line">[root@zabbix-server alertscripts]# ll wechat        # 查看权限；</span><br><span class="line">-rwxr-xr-x 1 zabbix zabbix 3579488 Nov 26 11:11 wechat</span><br><span class="line"></span><br><span class="line">[root@zabbix-server alertscripts]# ./wechat --corpid=haiyunabcwwwwwwww --corpsecret=aHHVhGaTDznOTp4xfcck1F4uJixxP_nD4B9N2AyJOt4 --msg=&quot;您好，Zabbix测试&quot; --user=HouHaiYun --agentid=1000002       # 测试；</span><br><span class="line">&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;,&quot;invaliduser&quot;:&quot;&quot;&#125;</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">--corpid= 我们企业里面的id</span><br><span class="line">--corpsecret= 这里就是我们Secret里面的id</span><br><span class="line">-msg= 内容</span><br><span class="line">-user=我们邀请用户的账号</span><br><span class="line">因为脚本是编译过的，无法进行编辑，我们可以使用./wechat -h or --help 查看</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-7.png" title="调试脚本"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-8.png" title="调试脚本"></center><h4 id="Zabbix-界面配置"><a href="#Zabbix-界面配置" class="headerlink" title="Zabbix 界面配置"></a>Zabbix 界面配置</h4><h5 id="创建报警媒介"><a href="#创建报警媒介" class="headerlink" title="创建报警媒介"></a>创建报警媒介</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-9.jpg" title="创建报警媒介"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-10.jpg" title="创建报警媒介"></center><h5 id="创建报警用户"><a href="#创建报警用户" class="headerlink" title="创建报警用户"></a>创建报警用户</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-11.jpg" title="创建报警用户"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-12.jpg" title="创建报警用户"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-13.jpg" title="创建报警用户"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-15.jpg" title="创建报警用户"></center><h5 id="创建报警动作"><a href="#创建报警动作" class="headerlink" title="创建报警动作"></a>创建报警动作</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-14.jpg" title="创建报警动作"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-16.jpg" title="创建报警动作"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-17.jpg" title="创建报警动作"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-18.jpg" title="创建报警动作"></center><blockquote><p><strong>提示： 不要忘记先点小的add–&gt;小的update–&gt;Update</strong></p></blockquote><h3 id="测试报警"><a href="#测试报警" class="headerlink" title="测试报警"></a>测试报警</h3><h4 id="停止Nginx服务"><a href="#停止Nginx服务" class="headerlink" title="停止Nginx服务"></a>停止Nginx服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# systemctl stop nginx</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-19.gif" title="测试报警"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-20.png" title="测试报警"></center><h4 id="恢复Nginx服务"><a href="#恢复Nginx服务" class="headerlink" title="恢复Nginx服务"></a>恢复Nginx服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# systemctl start nginx</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-21.gif" title="测试报警"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Wechat-Baojing-22.png" title="测试报警"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.abcdocker.com/abcdocker/2573" target="_blank" rel="noopener">Zabbix 新版微信告警：https://www.abcdocker.com/abcdocker/2573</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 实现新版微信告警 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：操作Actions</title>
      <link href="/2017/11/27/Zabbix-Caozuo-Action/"/>
      <url>/2017/11/27/Zabbix-Caozuo-Action/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果您希望由于事件而发生某些操作（例如发送通知），则需要配置操作。</p><p>可以根据所有支持的类型的事件来定义操作：</p><ul><li>触发事件 - 当<code>trigger</code>的状态从<code>OK</code> 转到 <code>PROBLEM</code> 或者转回时</li><li>发现事件 - 发生网络发现时</li><li>自动注册事件 -当新的活动代理自动注册</li><li>内部事件 - 当项目不受支持或触发器进入未知状态</li></ul><a id="more"></a><h3 id="配置动作"><a href="#配置动作" class="headerlink" title="配置动作"></a>配置动作</h3><p>要配置操作，请执行以下操作：</p><ul><li>进入 配置 - &gt;操作</li><li>从<code>Event source</code>下拉单中选择所需的来源</li><li>点击 创建 <code>action</code></li><li>一般动作属性</li><li>选择 <code>operations</code> 来执行</li><li>选择<code>recovery operations</code>来执行</li></ul><h4 id="进入-配置-gt-操作-并-点击-创建-action"><a href="#进入-配置-gt-操作-并-点击-创建-action" class="headerlink" title="进入 配置 - &gt;操作 并 点击 创建 action"></a>进入 配置 - &gt;操作 并 点击 创建 action</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-1.jpg" title="进入 配置 - >操作 并 点击 创建 action"></center><h4 id="从Event-source下拉单中选择所需的来源"><a href="#从Event-source下拉单中选择所需的来源" class="headerlink" title="从Event source下拉单中选择所需的来源"></a>从Event source下拉单中选择所需的来源</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-2.jpg" title="从Event source下拉单中选择所需的来源"></center><h4 id="一般动作属性"><a href="#一般动作属性" class="headerlink" title="一般动作属性"></a>一般动作属性</h4><p>因为要执行sudo命令所以需要修改被监控端的sudo配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# visudo</span><br><span class="line">zabbix  ALL=(ALL)   NOPASSWD: ALL</span><br><span class="line">#Defaults   requiretty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@zabbix-client1 ~]# vim /etc/zabbix/zabbix_agentd.conf     # 修改agent配置文件，允许执行远程命令；</span><br><span class="line">EnableRemoteCommands=1</span><br><span class="line"></span><br><span class="line">LogRemoteCommands=1</span><br><span class="line">[root@zabbix-client1 ~]# systemctl restart zabbix-agent.service     # 重启服务使其生效；</span><br></pre></td></tr></table></figure></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-3.jpg" title="一般动作属性"></center><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/operation" target="_blank" rel="noopener">属性信息请参见:https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/operation</a></p><h4 id="选择-operations-来执行"><a href="#选择-operations-来执行" class="headerlink" title="选择 operations 来执行"></a>选择 operations 来执行</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-4.jpg" title="选择 operations 来执行"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-5.jpg" title="operations"></center><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/operation/message" target="_blank" rel="noopener">属性信息请参见:https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/operation/message</a></p><h4 id="选择recovery-operations来执行"><a href="#选择recovery-operations来执行" class="headerlink" title="选择recovery operations来执行"></a>选择recovery operations来执行</h4><p>恢复操作允许在问题解决时通知您。</p><p>恢复操作支持消息和远程命令。恢复操作不支持升级 - 所有操作都分配到一个步骤。</p><p>配置恢复操作：</p><ul><li>进入<code>action</code>配置中的恢复操作标签</li><li>点击操作块中的<code>New</code></li><li>编辑操作详情并且点击 <code>Add</code></li></ul><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-6.jpg" title="配置恢复操作"></center><br><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/recovery_operations" target="_blank" rel="noopener">属性信息请参见:https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/recovery_operations</a><br><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-7.jpg" title="配置恢复操作"></center><h4 id="查看Acknowledgement-operations"><a href="#查看Acknowledgement-operations" class="headerlink" title="查看Acknowledgement operations"></a>查看Acknowledgement operations</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Caozuo-Action-8.jpg" title="查看Acknowledgement operations"></center><p>通过<code>Escalations</code>，您可以创建发送通知或执行远程命令的自定义场景。</p><p>实际应用中，这意味着：</p><ul><li>用户可以立即收到新问题通知</li><li>通知可以重复，直到问题解决</li><li>发送通知可以延时</li><li>通知可以升级到另一个“较高”的用户组</li><li>可以立即执行远程命令，或者长时间不解决问题</li></ul><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/escalations" target="_blank" rel="noopener">关于更多Acknowledgement operations相关内容请参见：https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/action/escalations</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 操作Actions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：幻灯片演示</title>
      <link href="/2017/11/27/Zabbix-Huandengpian/"/>
      <url>/2017/11/27/Zabbix-Huandengpian/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在幻灯片演示中，你可以配置多个聚合图形以设定的间隔逐个显示。</p><p>有时候，你可能想要在一些配置好的聚合图形之间进行切换。虽然这样可以手动完成，但这样做一次两次后就会变得非常乏味。因此，就可以通过幻灯片演示来自动完成此项工作。</p><p>Zabbix 的所有用户（包括非管理员用户）都可以创建幻灯片演示。幻灯片演示拥有所有者 - 这个所有者就是哪个用户创建了它们。</p><a id="more"></a><p>幻灯片演示可以选择公开或私有。公开的幻灯片演示允许所有用户访问，然而，用户必须拥有对幻灯片演示的元素（聚合图形）读取权限才能看到。要向幻灯片演示添加聚合图形，用户仍必须拥有对聚合图形的读取权限。</p><p>私有的幻灯片演示仅对其所有者可见。私有的幻灯片演示可以通过其所有者分享给其他用户或用户组。常规（非超级管理员）用户只能与他们所属的组和用户共享。 只要他们拥有对所有包含的聚合图形的读取权限，其所有者和用户就可以看到私有幻灯片演示。 管理员级别的用户只要拥有对所有包含的聚合图形的读取权限，就可以看到并编辑私人幻灯片演示，无论是所有者还是属于共享用户列表。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>通过以下步骤创建一个幻灯片演示：</p><ul><li>在 Zabbix 前端页面跳转到 监测中→ 聚合图形；</li><li>在右上角的下拉菜单选择幻灯片演示；</li><li>跳转到所有的幻灯片演示；</li><li>点击 创建幻灯片播放。</li></ul><h4 id="在-Zabbix-前端页面跳转到-监测中→-聚合图形-并在右上角的下拉菜单选择幻灯片演示；"><a href="#在-Zabbix-前端页面跳转到-监测中→-聚合图形-并在右上角的下拉菜单选择幻灯片演示；" class="headerlink" title="在 Zabbix 前端页面跳转到 监测中→ 聚合图形 并在右上角的下拉菜单选择幻灯片演示；"></a>在 Zabbix 前端页面跳转到 监测中→ 聚合图形 并在右上角的下拉菜单选择幻灯片演示；</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Huandengpian-1.jpg" title="在 Zabbix 前端页面跳转到 监测中→ 聚合图形 并在右上角的下拉菜单选择幻灯片演示"></center><h4 id="点击-创建幻灯片播放"><a href="#点击-创建幻灯片播放" class="headerlink" title="点击 创建幻灯片播放"></a>点击 创建幻灯片播放</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Huandengpian-2.jpg" title="点击 创建幻灯片播放"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Huandengpian-3.jpg" title="点击 创建幻灯片播放"></center><p><strong>幻灯片”标签也包含常规幻灯片演示属性：</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>所有者</em></td><td>选择幻灯片演示的所有者。指定所有者时强制性的。</td></tr><tr><td><em>名称</em></td><td>幻灯片演示的唯一名称。</td></tr><tr><td><em>默认延迟（秒）</em></td><td>默认情况下多长时间展示一个聚合图形，然后跳转到下一个聚合图形。以秒为单位。</td></tr><tr><td><em>幻灯片</em></td><td>要选择的聚合图形列表。点击<em>添加</em>选择聚合图形。聚合图形上的<em>向上/向下</em>箭头可以按照显示的顺序上下拖动聚合图形。如果在幻灯片上只显示一个聚合图形，那么直接创建包含该图形的聚合图形添加到此即可。</td></tr><tr><td><em>聚合图形</em></td><td>聚合图形名称。</td></tr><tr><td><em>延迟</em></td><td>聚合图形显示多长时间的自定义值，以秒为单位。如果此项设置为 0 ，那么将使用<em>默认延迟</em>。</td></tr><tr><td><em>动作</em></td><td>点击<em>移除</em>从幻灯片演示中移除该聚合图形。</td></tr></tbody></table><p>本示例中的幻灯片演示由以下顺序显示的两个聚合图形组成：</p><p>Zabbix Client1 ⇒ 展示5秒 ⇒ Zabbix sClient2⇒ 展示5秒 ⇒Zabbix Client1 ⇒ 展示5秒 ⇒ Zabbix sClient2⇒ 展示5秒  依次循环。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Huandengpian-4.jpg" title="幻灯片演示"></center><p><strong>分享”标签页包含幻灯片演示的类型以及私有幻灯片的共享选项（用户组和用户）：</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>类型</em></td><td>选择幻灯片演示的类型:<strong>私有</strong> - 幻灯片演示仅对选定的用户组和用户可见。<strong>公开</strong> - 幻灯片演示对所有人可见。</td></tr><tr><td><em>用户组共享的列表</em></td><td>选择幻灯片可访问的用户组。你可以设置只读或读写权限。</td></tr><tr><td><em>用户共享的列表</em></td><td>选择幻灯片可访问的用户。你可以设置只读或读写权限。</td></tr></tbody></table><p>点击添加保存幻灯片演示。</p><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Huandengpian-5.gif" title="测试效果"></center><p>因为只监控了一台主机，Zabbix Client2也是使用Zabbix Client1中的item，能看出效果就OK了，呵呵。</p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 幻灯片演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：自定义图形Graph</title>
      <link href="/2017/11/27/Zabbix-Graph-Zidingyi/"/>
      <url>/2017/11/27/Zabbix-Graph-Zidingyi/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>自定义图形，顾名思义，就是提供定制的功能。</p><p>虽然简单图形对于查看单个监控项的数据很适用，但它们并不提供配置功能。</p><p>因此，如果想要更改图形的样式、线条的显示方式或是比较多个监控项。例如，单个图形中显示接受和发送的流量，就需要自定义图形。</p><p>自定义图形是手动配置的。</p><p>可以为单个主机、多个主机、单个模板创建自定义图形。</p><a id="more"></a><h3 id="配置自定义图形"><a href="#配置自定义图形" class="headerlink" title="配置自定义图形"></a>配置自定义图形</h3><p>按照以下步骤创建自定义图形：</p><ul><li>在前端页面点击<code>Configuration</code> → <code>Hosts</code> (或<code>Templates</code>)；</li><li>点击所要创建图形的主机或模板旁的<code>Graphs</code>；</li><li>在图形屏幕上点击<code>Create graph</code>；</li><li>编辑图形的属性。</li></ul><h4 id="在前端页面点击Configuration-→-Hosts-或Templates-并点击所要创建图形的主机或模板旁的Graphs"><a href="#在前端页面点击Configuration-→-Hosts-或Templates-并点击所要创建图形的主机或模板旁的Graphs" class="headerlink" title="在前端页面点击Configuration → Hosts (或Templates) 并点击所要创建图形的主机或模板旁的Graphs"></a>在前端页面点击Configuration → Hosts (或Templates) 并点击所要创建图形的主机或模板旁的Graphs</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-1.jpg" title="在前端页面点击Configuration → Hosts (或Templates) 并点击所要创建图形的主机或模板旁的Graphs"></center><h4 id="在图形屏幕上点击Create-graph"><a href="#在图形屏幕上点击Create-graph" class="headerlink" title="在图形屏幕上点击Create graph"></a>在图形屏幕上点击Create graph</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-2.jpg" title="在图形屏幕上点击Create graph"></center><h4 id="编辑图形的属性"><a href="#编辑图形的属性" class="headerlink" title="编辑图形的属性"></a>编辑图形的属性</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-3.jpg" title="编辑图形的属性"></center><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/visualisation/graphs/custom" target="_blank" rel="noopener">图形的属性请参见：https://www.zabbix.com/documentation/3.4/zh/manual/config/visualisation/graphs/custom</a></p><h4 id="配置自定义图形-1"><a href="#配置自定义图形-1" class="headerlink" title="配置自定义图形"></a>配置自定义图形</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-4.jpg" title="配置自定义图形"></center><p>添加在图形中展示数据的监控项，在前端的图形页面点击“监控项”的“添加”选项，选择相应的监控项，并设置监控项数据展示的属性。</p><p><strong>监控项展示的属性：</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>排序次序 (0→100)</em></td><td>绘制顺序。将首先处理顺序为0的监控项。可用来绘制线条或区域填充后面（或前面的）另一个。\可以拖动监控项头部的图标上下拖动来设置它们的先后顺序。</td></tr><tr><td><em>名称</em></td><td>监控项的名称, 将其数据用来展示。</td></tr><tr><td><em>类型</em></td><td>类型 (此项只适用于饼图和爆炸饼图)：<strong>简单</strong> - 将监控项的值按照比例显示。<strong>图形总数</strong> - 监控项的值占满整个饼图。请注意：“图形总数” 监控项的着色只有在不被“成比例的”监控项占用的范围内可见。</td></tr><tr><td><em>功能</em></td><td>当一个监控项中有多个值时，将显示为什么值：<strong>所有</strong> - 所有的值（最小、平均值和最大）<strong>最小</strong> - 仅显示最小值<strong>平均</strong> - 仅显示平均值<strong>最大</strong> - 仅显示最大值</td></tr><tr><td><em>绘图风格</em></td><td>绘图风格（此选项只适用于正常图形；对于层积的图形始终显示为填满的区域）：<strong>线条</strong> - 绘制线条<strong>填满的区域</strong> - 绘制为填满的区域<strong>粗线</strong> - 绘制为粗线<strong>点</strong> - 绘制为点<strong>虚线</strong> - 绘制为虚线</td></tr><tr><td><em>Y轴的位置</em></td><td>Y轴将处于左边还是右边。</td></tr><tr><td><em>颜色</em></td><td>RGB颜色显示为十六进制字符。</td></tr></tbody></table><h4 id="图形预览"><a href="#图形预览" class="headerlink" title="图形预览"></a>图形预览</h4><p>在预览的选项卡中，将显示配置图形的预览，以便可以立即查看创建的内容。</p><p>需要注意的是：预览并不会显示任何模板监控项的数据。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-5.jpg" title="图形预览"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-6.jpg" title="图形预览"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-7.jpg" title="图形预览"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Zidingyi-8.jpg" title="图形预览"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 自定义图形Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：简单图形Graph</title>
      <link href="/2017/11/27/Zabbix-Graph-Jiandan/"/>
      <url>/2017/11/27/Zabbix-Graph-Jiandan/</url>
      <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Zabbix提供了简单图形，用来可视化显示监控项采集到的数据。 对于用户而言，并不需要进行配置就可以查看简单图形。这是由Zabbix免费提供的。</p><p>通过<code>Monitoring</code> → <code>Latest data</code>点击各自监控项的图形链接，就可以展示图形。</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Jiandan-1.jpg" title="Overview"></center><h4 id="时间段选择器"><a href="#时间段选择器" class="headerlink" title="时间段选择器"></a>时间段选择器</h4><p>注意图形上方的时间段选择器。它允许你可以轻松选择所需的时间段。</p><p>时间段选择器中的滑动快可以来回拖动，以及缩放，使之更有效地改变展示的时间段。左侧的链接允许选择一些常用的预定义时间段（在滑动区域的上方），并点击时间段的链接来回移动（滑动区域的下方）。通过右侧的时间链接，点击可以弹出日历设置特定的开始/结束时间。</p><p>在时间段选择器下面的<code>fixed</code>/<code>dynamic</code>链接具有以下效果:</p><ul><li>控制在日历弹出窗口中更改开始/结束时间时，是否时间段保持不变；</li><li>当选择<code>fixed</code>时，点击左下方的时间段链接<code>(« 1m 7d 1d 12h 1h 5m | 5m 1h 12h 1d 7d 1m »)</code>将会移动滑块，而不会改变其滑块的尺寸，时间段会随着时间向前或向后移动，并不会改变时间段；当选择<code>dynamic</code>时，点击左下方的时间段链接将会随着向左向右的时间段链接而左右放大滑块。</li><li>当选择<code>fixed</code>时，点击滑块上较大的<code>&lt;</code>和<code>&gt;</code>按钮将将移动滑块，而不会改变其滑块的尺寸；而当选择<code>dynamic</code>时，点击<code>&lt;</code>按钮<code>&gt;</code>将随左右方向而向左或向右放大滑块，每次点击都以1天为单位左右移动。</li><li>控制选择时间段展示的另一种方法就是按住鼠标左键选择图形中想要展示的区域，该区域将高亮显示，当松开鼠标左键时，图形将放大显示到刚才选中的高亮区域。</li></ul><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/visualisation/graphs/simple" target="_blank" rel="noopener">关于简单图形的其它内容请参见官网：https://www.zabbix.com/documentation/3.4/zh/manual/config/visualisation/graphs/simple</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 简单图形Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix常用配置</title>
      <link href="/2017/11/27/Zabbix-Changyong-Peizhi/"/>
      <url>/2017/11/27/Zabbix-Changyong-Peizhi/</url>
      <content type="html"><![CDATA[<h3 id="Zabbix修改主题"><a href="#Zabbix修改主题" class="headerlink" title="Zabbix修改主题"></a>Zabbix修改主题</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Changyong-Peizhi-1.gif" title="Zabbix修改主题"></center><a id="more"></a><h3 id="修改admin用户密码"><a href="#修改admin用户密码" class="headerlink" title="修改admin用户密码"></a>修改admin用户密码</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Changyong-Peizhi-2.gif" title="修改admin用户密码"></center><h3 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Changyong-Peizhi-3.gif" title="修改语言"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> Zabbix常用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix</title>
      <link href="/2017/11/27/Zabbix/"/>
      <url>/2017/11/27/Zabbix/</url>
      <content type="html"><![CDATA[<h3 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h3><h4 id="Zabbix是什么？"><a href="#Zabbix是什么？" class="headerlink" title="Zabbix是什么？"></a>Zabbix是什么？</h4><p>官方手册对<code>Zabbix</code>的介绍</p><ul><li><code>Zabbix</code> 是由<code>Alexei</code> <code>Vladishev</code>创建，目前由<code>ZabbixSIA</code>在持续开发和支持。</li><li><code>Zabbix</code> 是一个企业级的分布式开源监控方案。</li><li><code>Zabbix</code>是一款能够监控各种网络参数以及服务器健康性和完整性的软件。<code>Zabbix</code>使用灵活的通知机制，允许用户为几乎任何事件配置基于邮件的告警。这样可以快速反馈服务器的问题。基于已存储的数据，<code>Zabbix</code>提供了出色的报告和数据可视化功能。这些功能使得<code>Zabbix</code>成为容量规划的理想方案。</li><li><code>Zabbix</code>支持主动轮询和被动捕获。<code>Zabbix</code>所有的报告、统计信息和配置参数都可以通过基于<code>Web</code>的前端页面进行访问。基于<code>Web</code>的前端页面可以确保您从任何方面评估您的网络状态和服务<br>器的健康性。适当的配置后，<code>Zabbix</code>可以在<code>IT</code>基础架构监控方面扮演重要的角色。对于只有少量服务器的小型组织和拥有大量服务器的大型公司也同样如此。</li><li><code>Zabbix</code>是免费的。<code>Zabbix</code>是根据<code>GPL</code>通用公共许可证第2版编写和发行的。这意味着它的源代码都是免费发行的，可供公众任意使用。</li></ul><a id="more"></a><h4 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h4><ul><li><code>agent</code>：使用<code>C</code>语言开发的本地<code>Zabbix</code>代理可以在各种支持的平台（包括<code>Linux</code>，<code>UNIX</code>和<code>Windows</code>）上运行，并从设备收集诸如<code>CPU</code>，内存，磁盘和网络接口等数据。</li><li><code>SNMP</code>：简单网络管理协议（<code>SNMP</code>），由一组网络管理的标准组成，包含一个应用层协议（<code>application layer protocol</code>）、数据库模型（<code>database schema</code>）和一组资源对象。该协议能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。</li><li><code>IPMI</code>：智能平台管理接口<code>IPMI</code>(<code>Intelligent Platform Management Interface</code>) 是一种开放标准的硬件管理接口规格，定义了嵌入式管理子系统进行通信的特定方法。<code>IPMI</code> 信息通过基板管理控制器 (<code>BMC</code>)（位于 <code>IPMI</code> 规格的硬件组件上）进行交流。使用低级硬件智能管理而不使用操作系统进行管理，具有两个主要优点： 首先，此配置允许进行带外服务器管理；其次，操作系统不必负担传输系统状态数据的任务。</li><li><code>JMX</code>：<code>JMX</code>（<code>Java Management Extensions</code>，即<code>Java</code>管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。<code>JMX</code>可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。</li></ul><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><ul><li><code>MySQL</code>是一个关系型数据库管理系统，由瑞典<code>MySQL AB</code> 公司开发，目前属于 <code>Oracle</code> 旗下产品。</li><li><code>PostgreSQL</code>是以加州大学伯克利分校计算机系开发的 <code>POSTGRES</code> 版本 <code>4.2</code> 为基础的对象关系型数据库管理系统（<code>ORDBMS</code>）</li></ul><h4 id="故障告警"><a href="#故障告警" class="headerlink" title="故障告警"></a>故障告警</h4><ul><li>通过电子邮件</li><li>使用自定义<code>script</code>(短信、微信)</li></ul><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><ul><li><code>Zabbix</code>网页前端</li><li>全球仪表板</li><li>图表</li><li>地图</li><li>屏幕和幻灯片放映</li><li>访问原始数据</li><li>活动和通知详情</li></ul><h3 id="Zabbix-Standard和Zabbix-LTS-长期维护版-发布生命周期"><a href="#Zabbix-Standard和Zabbix-LTS-长期维护版-发布生命周期" class="headerlink" title="Zabbix Standard和Zabbix LTS(长期维护版)发布生命周期"></a>Zabbix Standard和Zabbix LTS(长期维护版)发布生命周期</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-1.jpg" title="Zabbix Standard和Zabbix LTS"></center><h3 id="Zabbix-Architecture"><a href="#Zabbix-Architecture" class="headerlink" title="Zabbix Architecture"></a>Zabbix Architecture</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-2.jpg" title="Zabbix Architecture"></center><h4 id="Zabbix架构组件"><a href="#Zabbix架构组件" class="headerlink" title="Zabbix架构组件"></a>Zabbix架构组件</h4><ul><li><code>Zabbix</code> <code>Server</code>：负责接收<code>agent</code>发送的报告信息的核心组件，所有配置、统计数据及操&gt;作数据均由其组织进行</li><li><code>Database</code> <code>Storage</code>：专用于存储所有配置信息，以及由<code>zabbix</code>手机的数据</li><li><code>Web</code> <code>Interface</code>：<code>zabbix</code>的<code>GUI</code>接口，通常与<code>Server</code>运行在同一台主机上</li><li><code>Proxy</code>：可选组间，常用语分布监控环境中，代理<code>Server</code>收集部分被监控端的监控数据并同一发往<code>Server</code>段</li><li><code>Agent</code>：部署在被监控主机上，负责手机本地数据并发往<code>Server</code>段，或<code>Proxu</code>段</li></ul><h3 id="Zabbix常用术语"><a href="#Zabbix常用术语" class="headerlink" title="Zabbix常用术语"></a>Zabbix常用术语</h3><ul><li>主机(<code>host</code>)：要监控的网络设备，IP或DNS名称指定</li><li>主机组(<code>host group</code>)：主机的逻辑容器。可包含主机和模板，同一个组内的主机和模板不能相互链接，一般给用户(组)指派监控权限使用</li><li>监控项(<code>item</code>)：一个特定监控指标的相关数据，这些数据来自于被监控对象；<code>item</code>是<code>zabbix</code>进行数据收集的核心，没有<code>item</code>，将没有数据；相对某监控对象来说，每个<code>item</code>都由“<code>key</code>”进行标识</li><li>触发器(<code>tigger</code>)：一个表达式，用于评估某监控对象的某特定<code>item</code>内所接收到的数据是否在合理范围内，即阈值<br>；接收到的数据量大于阈值时，触发器状态将从“<code>OK</code>”转变为“<code>Problem</code>”，当数据量再次回到合理范围时，其状态将从“<code>Problem</code>”转换回“<code>OK</code>”</li><li>事件(<code>event</code>)：即发生的一个值得关注的事情，例如触发器的状态转变，新的<code>agent</code>或重新上线的<code>agent</code>的自动注册等；</li><li>动作(<code>action</code>)：指定对于特定事件事先定义的处理方法，通过包行操作(如发送通知)和条件(何时执行操作)</li><li>预警升级(<code>escalation</code>)：发送报警或执行远程命令的自定义方案，如每个5分钟发送一次警报，共发送5次等- 媒介(<code>media</code>)：发送通知的手段或通道，如<code>Email</code>、<code>JOBBER</code>、<code>SMS</code>、微信通知 通知(<code>notification</code>)：通过选定的媒介向用户发送的有关某事件的信息</li><li>远程命令(<code>remote</code> <code>command</code>)：预定义的命令，可在被监控主机处于某特定条件下自动执行 </li><li>模板(<code>template</code>)：用于快速定义被监控主机的预设条目集合，通常包含了<code>item</code>、<code>trigger</code>、<code>graph</code>、<code>screen</code>、<code>application</code>、以及<code>low-level</code> <code>discovery</code> <code>rule</code>；模板可以直接链接至单个主机 </li><li>应用(<code>application</code>)：一组<code>item</code>的集合</li><li><code>web</code>场景(<code>web</code> <code>application</code>)：用于检测<code>web</code>站点可用性的一个或多个<code>HTTP</code>请求</li><li>前端(<code>frontend</code>)：<code>Zabbix</code>的<code>web</code>接口</li><li>屏幕(<code>screens</code>)：利用当前的屏幕，来展示多个<code>graph</code> </li><li>图表(<code>graph</code>)：用于图像化显示时间虚拟数据，<code>item</code>指标产生的监控数据</li><li><code>maps</code>：整个系统的拓扑图</li></ul><h3 id="Zabbix逻辑架构"><a href="#Zabbix逻辑架构" class="headerlink" title="Zabbix逻辑架构"></a>Zabbix逻辑架构</h3><ul><li>定义一个<code>template</code>模板，里面包括多个<code>items</code>，<code>trigger</code>，<code>graphs</code>套用给<code>host</code>或者<code>hostgroups</code>。</li><li><code>zabbix</code> <code>poller</code>进程（可以有多个进程实现并发处理）包括<code>snmp</code>，<code>agent</code>协议收集被监控主机信息。</li><li>如果阈值超过<code>triggers</code>触发器规定，就是形成一个<code>events</code>事件，然后<code>actions</code>处理动作（包括运行预先定制的脚本，不成功发送<code>email</code>或<code>SMS</code>）。</li><li>在服务器升级的时候提前设定<code>maintenance</code>维护模式不对服务器产生告警通知。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Zabbix-3.png" title="Zabbix逻辑架构"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开源监控工具</title>
      <link href="/2017/11/27/Zabbix-Open-Source-Tools/"/>
      <url>/2017/11/27/Zabbix-Open-Source-Tools/</url>
      <content type="html"><![CDATA[<h3 id="Cacti"><a href="#Cacti" class="headerlink" title="Cacti"></a>Cacti</h3><p><a href="https://www.cacti.net/" target="_blank" rel="noopener">官网：https://www.cacti.net/</a></p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Open-Source-Tools-1.jpg" title="Cacti"></center><p><code>Cacti</code>是一个开源的，基于网络的网络监控和绘图工具，被设计为开源的行业标准数据记录工具<code>RRDtool</code> 的前端应用程序。<code>Cacti</code>允许用户以预定的时间间隔轮询服务并绘制结果数据。通常用于绘制诸如<code>CPU</code>负载和网络带宽利用率等指标的时间序列数据。常见的用法是通过简单网络管理协议（<code>SNMP</code>）轮询网络交换机或路由器接口来监视网络流量。</p><p>前端可以处理多个用户，每个都有自己的图形集，因此有时通过使用网络托管提供商（尤其是专用服务器， 虚拟专用服务器，并搭配提供商）来显示带宽统计为他们的顾客。它可以用来配置数据收集本身，允许监测某些设置，而无需手动配置<code>RRDtool</code>。<code>Cacti</code>可以扩展到通过<code>shell</code>脚本和可执行文件来监视任何源代码。</p><p><code>Cacti</code>可以使用两个后端中的一个：<code>“cmd.php”</code>，一个适合较小安装的<code>PHP</code>脚本，或<code>“Spine”</code>（以前称为<code>Cactid</code>），一种基于<code>C</code>的轮询器，可以扩展到数千个主机。</p><p><code>Cacti</code> 是一款 <code>LAMP</code> 应用，它能为各类数据绘制出一个完整的图形框架。</p><h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ul><li>无限的图形项目</li><li>自动填充支持图形</li><li>图表数据操作</li><li>灵活的数据源</li><li>数据收集在一个非标准的时间跨度</li><li>自定义数据收集脚本</li><li>内置的SNMP支持</li><li>图表模板</li><li>数据源模板</li><li>主机模板</li><li>树，列表以及图形数据的预览视图</li><li>基于用户的管理和安全</li></ul><h3 id="nagios"><a href="#nagios" class="headerlink" title="nagios"></a>nagios</h3><p><a href="https://www.nagios.org/" target="_blank" rel="noopener">官网：https://www.nagios.org/</a></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Open-Source-Tools-2.jpg" title="nagios"></center><p><code>Nagios</code>是一个流行的电脑系统和网络监控程序，它检测主机和服务，当异常发生和解除时能提醒用户。它是基于<code>GPLv2</code>开发的开源软件，可免费获得及使用。</p><p><code>Nagios</code>原名为<code>NetSaint</code>，由<code>Ethan Galstad</code>开发并维护至今。</p><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ul><li>网络服务监控（<code>SMTP</code>、<code>POP3</code>、<code>HTTP</code>、<code>NNTP</code>、<code>ICMP</code>、<code>SNMP</code>、<code>FTP</code>、<code>SSH</code>）</li><li>主机资源监控（<code>CPU load</code>、<code>disk usage</code>、<code>system logs</code>），也包括<code>Windows</code>主机（使用<code>NSClient++ plugin</code>）</li><li>可以指定自己编写的<code>Plugin</code>通过网络收集数据来监控任何情况（温度、警告……）</li><li>可以通过配置<code>Nagios</code>远程执行插件远程执行脚本</li><li>远程监控支持<code>SSH</code>或<code>SSL</code>加通道方式进行监控</li><li>简单的<code>plugin</code>设计允许用户很容易的开发自己需要的检查服务,支持很多开发语言（<code>shell scripts&gt;</code>、<code>C++</code>、<code>Perl</code>、<code>ruby</code>、<code>Python</code>、<code>PHP</code>、<code>C#</code>等）</li><li>包含很多图形化数据<code>Plugins</code>（<code>Nagiosgraph</code>、<code>Nagiosgrapher</code>、<code>PNP4Nagios</code>等）</li><li>可并行服务检查</li><li>能够定义网络主机的层次, 允许逐级检查, 就是从父主机开始向下检查</li><li>当服务或主机出现问题时发出通告，可通过<code>email</code>, <code>pager</code>, <code>sms</code> 或任意用户自定义的<code>plugin</code>进行通&gt;<br>知</li><li>能够自定义事件处理机制重新激活出问题的服务或主机</li><li>自动日志循环</li><li>支持冗余监控 </li><li>包括<code>Web</code>界面可以查看当前网络状态，通知，问题历史，日志文件等</li></ul><h3 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h3><p><a href="https://www.zabbix.com/" target="_blank" rel="noopener">官网：https://www.zabbix.com/</a></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Open-Source-Tools-3.jpg" title="Zabbix"></center><p><code>Zabbix</code> 是由 <code>Alexei Vladishev</code> 开发的一种网路监视、管理系统，基于 <code>Server-Client</code> 架构。可用于监视各种网路服务、伺服器和网路机器等状态。</p><p>使用各种 <code>Database-end</code> 如 <code>MySQL</code>, <code>PostgreSQL</code>, <code>SQLite</code>, <code>Oracle</code> 或 <code>IBM DB2</code> 储存资料。<code>Server</code> 端基于 <code>C</code>语言、<code>Web</code> 管理端 <code>frontend</code> 则是基于 <code>PHP</code> 所制作的。<code>Zabbix</code> 可以使用多种方式监视。可以只使用 <code>Simple Check</code> 不需要安装 <code>Client</code> 端，亦可基于 <code>SMTP</code> 或 <code>HTTP</code> … 各种协定做死活监视。在客户端如 <code>UNIX</code>, <code>Windows</code> 中安装 <code>Zabbix Agent</code> 之后，可监视 <code>CPU Load</code>、网路使用状况、硬碟容量等各种状态。而就算没有安装 <code>Agent</code> 在监视对象中，<code>Zabbix</code> 也可以经由 <code>SNMP</code>、<code>TCP</code>、<code>ICMP</code>、利用 <code>IPMI</code>、<code>SSH</code>、<code>telnet</code> 对目标进行监视。另外，<code>Zabbix</code> 包含 <code>XMPP</code> 等各种 <code>Item</code> 警示功能。<br><code>Zabbix</code> 的授权是属于 <code>GPLv2</code>。</p><h4 id="主要特点-1"><a href="#主要特点-1" class="headerlink" title="主要特点"></a>主要特点</h4><ul><li>高性能，高容量（能够监视数十万个设备）。- 自动发现服务器和网络设备。</li><li>低级别的发现。</li><li>集中式Web管理的分布式监控。</li><li>支持轮询和陷印机制。</li><li>本地高性能代理（用于<code>Linux</code>，<code>Solaris</code>，<code>HP-UX</code>，<code>AIX</code>，<code>FreeBSD</code>，<code>OpenBSD</code>，<code>OS X</code>，<code>Tru64 / OSF1</code>，<code>Windows 2000</code>，<code>Windows Server 2003</code>，<code>Windows XP</code>，<code>Windows Vista</code>，<code>Windows Server 2008</code>，<code>Windows 7</code>的客户端软件）</li><li>无代理监视。</li><li>JMX监视。</li><li>网络监控。</li><li>安全的用户认证。</li><li>灵活的用户权限。</li><li>基于<code>Web</code>的界面。</li><li><code>SLA</code>和<code>ITIL KPI</code>度量标准。</li><li>灵活的电子邮件通知预定义的事件。</li><li>监视资源的高级（业务）视图，通过用户定义的可视化控制台屏幕和仪表盘。</li><li>审计日志。</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://en.wikipedia.org/wiki/Cacti_(software" target="_blank" rel="noopener">维基百科：Cacti_(software)</a>)</p><p><a href="https://zh.wikipedia.org/wiki/Nagios" target="_blank" rel="noopener">维基百科：Nagios</a></p><p><a href="https://en.wikipedia.org/wiki/Zabbix" target="_blank" rel="noopener">维基百科：ZABBIX</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 开源监控工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：监控MySQL</title>
      <link href="/2017/11/26/Zabbix-Jiankong-MySQL/"/>
      <url>/2017/11/26/Zabbix-Jiankong-MySQL/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>zabbix</code>自带了一个监控<code>mysql</code>的模板，但是真正监控<code>mysql</code>的并不是<code>zabbix</code>自带的模板。而是<code>percona</code>公司的一个监控<code>mysql</code>模板</p><p><a href="www.percona.com">percona官网： www.percona.com</a></p><a id="more"></a><h3 id="Percona组成介绍"><a href="#Percona组成介绍" class="headerlink" title="Percona组成介绍"></a>Percona组成介绍</h3><ul><li>1、<code>php</code>脚本    用来数据采集</li><li>2、<code>shell</code>脚本  用来调用采集信息</li><li>3、<code>zabbix</code>配置文件</li><li>4、<code>zabbix</code>模板文件</li></ul><p><a href="https://www.percona.com/doc/percona-monitoring-plugins/LATEST/zabbix/index.html" target="_blank" rel="noopener">官方安装文档：https://www.percona.com/doc/percona-monitoring-plugins/LATEST/zabbix/index.html</a></p><p><code>percona</code> 利用的是<code>php</code>来获取<code>mysql</code>的相关信息，所以如果我们想使用<code>percona</code>插件监控<code>mysql</code>就需要在<code>agent</code>端安装<code>php</code>。在安装文档上有写哦~</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-1.jpg" title="percona官网"></center><h3 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# yum install mariadb-server </span><br><span class="line">[root@zabbix-client1 ~]# mysql</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 95</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; Bye</span><br></pre></td></tr></table></figure><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>查看上面的官网安装文档也可以进行安装</p><h4 id="安装模板"><a href="#安装模板" class="headerlink" title="安装模板"></a>安装模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# yum -y install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm</span><br><span class="line">[root@zabbix-client1 ~]# yum -y  install percona-zabbix-templates php php-mysql      # percona插件是通过php去获取mysql的参数，所以我们要安装php和php-mysql；</span><br><span class="line">[root@zabbix-client1 ~]# yum -y  install percona-zabbix-templates php php-mysql </span><br><span class="line"></span><br><span class="line">[root@zabbix-client1 ~]# rpm -ql percona-zabbix-templates        # 查看安装后生成的文件；</span><br><span class="line">/var/lib/zabbix/percona</span><br><span class="line">/var/lib/zabbix/percona/scripts</span><br><span class="line">/var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh      # shell脚本；</span><br><span class="line">/var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php          # php获取mysql信息；</span><br><span class="line">/var/lib/zabbix/percona/templates</span><br><span class="line">/var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf      # zabbix配置文件；</span><br><span class="line">/var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.7.xml     # zabbix模板文件；</span><br><span class="line">/var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.7.xml     # zabbix模板文件；</span><br></pre></td></tr></table></figure><h4 id="将模板文件下载到本地"><a href="#将模板文件下载到本地" class="headerlink" title="将模板文件下载到本地"></a>将模板文件下载到本地</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# sz /var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.7.xml</span><br></pre></td></tr></table></figure><h4 id="导入模板文件"><a href="#导入模板文件" class="headerlink" title="导入模板文件"></a>导入模板文件</h4><p>然后我们需要将模板通过<code>web</code>界面导入到<code>zabbix</code>中 </p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-2.jpg" title="导入模板文件"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-3.jpg" title="导入模板文件"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-4.jpg" title="导入模板文件"></center><p><strong>提示</strong>：如果出现错误，可能是<code>zabbix 3.0</code>版本的问题。我们这里提供了一个生产的模板 </p><p><a href="http://pan.baidu.com/s/1qX8RfFQ" target="_blank" rel="noopener">链接：http://pan.baidu.com/s/1qX8RfFQ 密码：z2sj</a></p><p>然后重新上传即可</p><h4 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/</span><br><span class="line">[root@zabbix-client1 ~]# ls /etc/zabbix/zabbix_agentd.d/        # 安装完软件包后会在/var/lib/zabbix/percona/templates/目录下产生一个配置文件，我们将它拷贝，因为在zabbix的配置文件中定义了Include=/etc/zabbix/zabbix_agentd.d/*.conf只有在此路径才能生效；</span><br><span class="line">userparameter_mem.conf  userparameter_mysql.conf  userparameter_percona_mysql.conf</span><br></pre></td></tr></table></figure><h4 id="创建php文件"><a href="#创建php文件" class="headerlink" title="创建php文件"></a>创建php文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]# cat /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php.cnf </span><br><span class="line">&lt;?php</span><br><span class="line">$mysql_user = &apos;root&apos;;</span><br><span class="line">$mysql_pass = &apos;&apos;;</span><br><span class="line">?&gt;</span><br><span class="line"># 用户名密码可以自己创建，有密码写密码，没密码为空就好了；</span><br></pre></td></tr></table></figure><p><strong>提示</strong>： 正常这里的用户我们应该创建一个专门用来监控的，由于我这里是测试环境。就不浪费时间了</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-client1 ~]#  cat /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf    # 选择一个肯定有值的key；</span><br><span class="line">[root@zabbix-client1 ~]# cat /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf|grep gm</span><br><span class="line">UserParameter=MySQL.read-views,/var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh gm</span><br><span class="line"></span><br><span class="line"># 测试结果如下：</span><br><span class="line">[root@zabbix-client1 ~]# cd /var/lib/zabbix/percona/scripts/</span><br><span class="line">[root@zabbix-client1 scripts]# ./get_mysql_stats_wrapper.sh gm</span><br><span class="line">1</span><br><span class="line">[root@zabbix-client1 scripts]# ./get_mysql_stats_wrapper.sh gw</span><br><span class="line">317</span><br></pre></td></tr></table></figure><p><strong>温馨提示</strong>： shell脚本中数据库的路径是localhost，如果我们没有授权localhost会获取不到值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 scripts]# cat get_mysql_stats_wrapper.sh </span><br><span class="line">HOST=localhost</span><br><span class="line">    RES=`HOME=~zabbix mysql -e &apos;SHOW SLAVE STATUS\G&apos; | egrep &apos;(Slave_IO_Running|Slave_SQL_Running):&apos; | awk -F: &apos;&#123;print $2&#125;&apos; | tr &apos;\n&apos; &apos;,&apos;`</span><br><span class="line"># mysql是通过命令来获取的，如果环境变量不一样 也可能造成影响</span><br></pre></td></tr></table></figure><h3 id="Zabbix-Web界面配置"><a href="#Zabbix-Web界面配置" class="headerlink" title="Zabbix-Web界面配置"></a>Zabbix-Web界面配置</h3><p>模板已经上传到<code>zabbix</code>中，这时候我们就需要进行设置了 </p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-5.jpg" title="Zabbix-Web界面配置"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-6.jpg" title="Zabbix-Web界面配置"></center><h4 id="授权-tmp下的一个文件"><a href="#授权-tmp下的一个文件" class="headerlink" title="授权/tmp下的一个文件"></a>授权/tmp下的一个文件</h4><p><strong>提示</strong>： 我们还需要授权/tmp下的一个文件，因为默认情况下 zabbix在文件中获取的值 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.8.15 -k &quot;MySQL.max-connections&quot;       # 直接测试是会失败的；</span><br><span class="line">rm: cannot remove ‘/tmp/localhost-mysql_cacti_stats.txt’: Operation not permitted</span><br><span class="line">151         </span><br><span class="line">[root@zabbix-client1 ~]# ll /tmp/localhost-mysql_cacti_stats.txt</span><br><span class="line">-rw-rw-r-- 1 root root 1228 Nov 26 21:27 /tmp/localhost-mysql_cacti_stats.txt</span><br><span class="line">[root@zabbix-client1 ~]# chown zabbix.zabbix /tmp/localhost-mysql_cacti_stats.txt</span><br><span class="line">[root@zabbix-client1 ~]# ll /tmp/localhost-mysql_cacti_stats.txt</span><br><span class="line">-rw-rw-r-- 1 zabbix zabbix 1228 Nov 26 21:27 /tmp/localhost-mysql_cacti_stats.txt</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.8.15 -k &quot;MySQL.max-connections&quot;       # 再次测试，ok；</span><br><span class="line">151</span><br></pre></td></tr></table></figure><h3 id="查看监控值"><a href="#查看监控值" class="headerlink" title="查看监控值"></a>查看监控值</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-7.jpg" title="查看监控值"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Jiankong-MySQL-8.gif" title="查看监控值"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.abcdocker.com/abcdocker/1498" target="_blank" rel="noopener">Zabbix 3.0 监控MySQL https://www.abcdocker.com/abcdocker/1498</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 监控MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：用户</title>
      <link href="/2017/11/26/Zabbix-User/"/>
      <url>/2017/11/26/Zabbix-User/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>根据以下步骤来配置一个用户：</p><ul><li>在 <code>Zabbix</code> 前端页面跳转到 管理 → 用户；</li><li>在当前页面点击创建用户 （或在用户名中编辑现有的用户）；</li><li>在窗口中编辑用户属性。</li></ul><a id="more"></a><h4 id="常规属性"><a href="#常规属性" class="headerlink" title="常规属性"></a>常规属性</h4><p><strong>在 用户 标签页包含常规用户属性：</strong></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-User-1.jpg" title="常规属性"></center><h4 id="报警媒介"><a href="#报警媒介" class="headerlink" title="报警媒介"></a>报警媒介</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-User-2.jpg" title="报警媒介"></center><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-User-3.jpg" title="权限"></center><p>权限标签页包含以下信息：</p><ul><li>用户类型 （<code>Zabbix User</code>, <code>Zabbix Admin</code>, <code>Zabbix Super Admin</code>）。 用户不能改变自己的用户类型。</li><li>用户可以访问的主机组。默认情况下，“Zabbix User”和“Zabbix <code>Admin</code>”用户无权访问任何的主机组和主机。若要获得访问权限，需要将他们定义到访问相应主机组和主机的用户组中。</li></ul><h5 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h5><p>用户类型定义了对前端管理菜单的访问级别以及对主机组数据的默认访问权限。</p><table><thead><tr><th>用户类型</th><th>描述</th></tr></thead><tbody><tr><td><em>Zabbix 用户</em></td><td>用户可以访问“监测中”菜单页面。 默认情况下，用户无权访问任何资源。 必须明确分配对主机组的任何权限。</td></tr><tr><td><em>Zabbix 管理员</em></td><td>用户可以访问“监测中和配置”菜单页面。 默认情况下，用户无权访问任何主机组。 必须明确给出对主机组的任何权限。</td></tr><tr><td><em>Zabbix 超级管理员</em></td><td>用户可以访问所有内容：监测中、配置和管理菜单页面。 用户对所有主机组具有读写访问权限。 权限不能通过拒绝对特定主机组的访问来撤销。</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 用户 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：宏macro</title>
      <link href="/2017/11/26/Zabbix-Macro/"/>
      <url>/2017/11/26/Zabbix-Macro/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>zabbix</code> 宏变量让 <code>zabbix</code> 变得更灵活，变量可以定义在主机、模板以及全局，变量名称类似： <code>{$MACRO}</code>，宏变量都<br>是大写的。认识了宏变量，你会感叹 <code>zabbix</code> 越发的强大。</p><a id="more"></a><p>变量可以用于如下地方:</p><ul><li><code>item</code> 名称</li><li><code>item key</code> 参数</li><li>触发器名称和描述</li><li>触发器表达式</li><li>其他地方</li></ul><h3 id="宏名称"><a href="#宏名称" class="headerlink" title="宏名称"></a>宏名称</h3><p>宏变量名称定义只允许后面包含后面的字符: <code>A-Z</code> , <code>0-9</code> , <code>_</code> , <code>.</code></p><h3 id="宏变量优先级"><a href="#宏变量优先级" class="headerlink" title="宏变量优先级"></a>宏变量优先级</h3><ul><li>主机宏(<code>checked first</code>)</li><li>主机模板定义的宏,如果有多个模板，那么按照模板越靠前那么宏的优先级越高</li><li>全局宏(<code>checked last</code>)<br>换句话说， <code>zabbix</code> 找一个宏的值，首先检查 <code>hosts</code> 有没有，如果没有那么找当前主机的第一个模板，如果还不在<br>找第二个模板，一直到最后一个模板，如果还是没有找到那将会使用全局宏。如果全局宏也不存在，那么宏变量<br>不会被替换掉。</li></ul><h3 id="自定义宏"><a href="#自定义宏" class="headerlink" title="自定义宏"></a>自定义宏</h3><h4 id="定义全局宏"><a href="#定义全局宏" class="headerlink" title="定义全局宏"></a>定义全局宏</h4><p>定义全局宏， <code>Administration</code> → <code>General</code> → <code>Macros</code>，例如宏名称<code>{$NGINX_PORT}</code>，值 <code>80</code></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Macro-1.jpg" title="定义全局宏"></center><h4 id="定义主机-模板级宏变量"><a href="#定义主机-模板级宏变量" class="headerlink" title="定义主机/模板级宏变量"></a>定义主机/模板级宏变量</h4><p>定义主机/模板级宏变量，编辑主机或者模板，找到 <code>Macros</code> 选项卡，定义宏变量</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Macro-2.jpg" title="定义主机/模板级宏变量"></center><p>宏变量经常用于替代账号、端口、密码等，例如你的某个监控想有用到账号、密码，可以定义为宏，假如下次账<br>号密码有修改，只需要修改宏即可。而不需要每个监控项都去修改账号密码。</p><h3 id="宏变量使用示例"><a href="#宏变量使用示例" class="headerlink" title="宏变量使用示例"></a>宏变量使用示例</h3><h4 id="示例1：定义ssh端口全局宏"><a href="#示例1：定义ssh端口全局宏" class="headerlink" title="示例1：定义ssh端口全局宏"></a>示例1：定义ssh端口全局宏</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Macro-3.jpg" title="定义ssh端口全局宏"></center><p>如果你监控的 <code>ssh</code> 端口可能会有不同，那么你只需要定义 <code>host</code> 级别宏变量 <code>SSH_PORT</code></p><h4 id="示例2：定义数据库用户名和密码全局宏"><a href="#示例2：定义数据库用户名和密码全局宏" class="headerlink" title="示例2：定义数据库用户名和密码全局宏"></a>示例2：定义数据库用户名和密码全局宏</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Macro-4.jpg" title="定义数据库用户名和密码全局宏"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 宏macro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：事件通知 自定义警报提示</title>
      <link href="/2017/11/26/Zabbix-Shijian-Tongzhi-Zidingyi/"/>
      <url>/2017/11/26/Zabbix-Shijian-Tongzhi-Zidingyi/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果您对发送警报的现有媒体类型不满意，则可以使用其他方式来执行此操作。 您可以创建一个将以您的方式处理通知的脚本。</p><p>警报脚本在Zabbix服务器上执行。 这些脚本位于服务器配置文件中定义的目录中AlertScriptsPath(默认路径为/usr/lib/zabbix/alertscripts).</p><a id="more"></a><p>这是一个示例警报脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"> </span><br><span class="line">to=$1</span><br><span class="line">subject=$2</span><br><span class="line">body=$3</span><br><span class="line"> </span><br><span class="line">cat &lt;&lt;EOF | mail -s &quot;$subject&quot; &quot;$to&quot;</span><br><span class="line">$body</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p><strong>从版本3.4开始，Zabbix检查执行的命令和脚本的退出代码。任何与 0 不同的退出代码都被视为命令执行错误. 在这种情况下，Zabbix会尝试重复执行失败。</strong></p></blockquote><p>环境变量不会为脚本保留或创建，因此它们应该被明确处理。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="在server端编写脚本"><a href="#在server端编写脚本" class="headerlink" title="在server端编写脚本"></a>在server端编写脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# cd /usr/lib/zabbix/alertscripts/</span><br><span class="line">[root@zabbix-server alertscripts]# ls</span><br><span class="line">[root@zabbix-server alertscripts]# vim baojin.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line"> </span><br><span class="line">to=$1</span><br><span class="line">subject=$2</span><br><span class="line">body=$3</span><br><span class="line"> </span><br><span class="line">cat &lt;&lt;EOF | mail -s &quot;$subject&quot; &quot;$to&quot;</span><br><span class="line">$body</span><br><span class="line">EOF</span><br><span class="line">[root@zabbix-server alertscripts]# chmod +x baojin.sh </span><br><span class="line">[root@zabbix-server alertscripts]# ll</span><br><span class="line">total 4</span><br><span class="line">-rwxr-xr-x 1 root root 88 Nov 25 16:21 baojin.sh</span><br></pre></td></tr></table></figure><h4 id="创建并指定script为媒介类型"><a href="#创建并指定script为媒介类型" class="headerlink" title="创建并指定script为媒介类型"></a>创建并指定script为媒介类型</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Shijian-Tongzhi-Zidingyi-1.jpg" title="创建并指定script为媒介类型"></center><p><strong>媒介类型属性：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><em>Name</em></td><td>输入媒介类型的名称。</td></tr><tr><td><em>Type</em></td><td>选择 <em>Script</em> 作为媒介类型</td></tr><tr><td><em>Script name</em></td><td>输入脚本的名称。</td></tr><tr><td><em>Script parameters</em></td><td>向脚本添加命令行参数。{ALERT.SENDTO}, {ALERT.SUBJECT} and {ALERT.MESSAGE} <a href="https://www.zabbix.com/documentation/3.4/manual/appendix/macros/supported_by_location" target="_blank" rel="noopener">宏</a> 在脚本参数中是支持的Zabbix 3.0支持自定义脚本参数。</td></tr></tbody></table><h3 id="用户媒介"><a href="#用户媒介" class="headerlink" title="用户媒介"></a>用户媒介</h3><p>要为用户分配自定义警报提示符：</p><ul><li>进入 管理 - &gt;用户</li><li>打开用户属性窗体</li><li>在媒介选项卡中，单击 <code>Add</code></li></ul><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Shijian-Tongzhi-Zidingyi-2.jpg" title="用户媒介"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Shijian-Tongzhi-Zidingyi-3.jpg" title="用户媒介"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Shijian-Tongzhi-Zidingyi-4.jpg" title="用户媒介"></center><p><strong>用户媒介属性：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><em>Type</em></td><td>选择自定义的alertcripts媒介类型.</td></tr><tr><td><em>Send to</em></td><td>指定收件人接收警报。</td></tr><tr><td><em>When active</em></td><td>您可以限制执行警示标记的时间，例如，仅限工作日（1-5,09：00-18：00）。\格式说明参见<a href="https://www.zabbix.com/documentation/3.4/manual/appendix/time_period" target="_blank" rel="noopener">时间段规格</a>页面</td></tr><tr><td><em>Use if severity</em></td><td>标记要激活警示标记的触发严重性的复选框。</td></tr><tr><td><em>Status</em></td><td>用户媒介的状态<strong>Enabled</strong> - 使用中.<strong>Disabled</strong> -禁用.</td></tr></tbody></table><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Shijian-Tongzhi-Zidingyi-5.jpg" title="用户媒介属性"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 事件通知 自定义警报提示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：事件通知 E-mail</title>
      <link href="/2017/11/26/Zabbix-Shijian-Tongzhi-Email/"/>
      <url>/2017/11/26/Zabbix-Shijian-Tongzhi-Email/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>要将电子邮件配置为邮件的传递通道，您需要将电子邮件配置为媒介类型，并为用户分配特定的地址。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><a id="more"></a><p>要将电子邮件配置为媒介类型：</p><ul><li>在 管理 - &gt;媒体类型中设置</li><li>点击创建媒介类型 (或者点击预定义媒介类型的列表中的<code>E-mail</code>).</li></ul><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Shijian-Tongzhi-Email-1.jpg" title="将电子邮件配置为媒介类型"></center><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/media/email" target="_blank" rel="noopener">媒介类型属性：https://www.zabbix.com/documentation/3.4/zh/manual/config/notifications/media/email</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 事件通知 E-mail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：事件通知</title>
      <link href="/2017/11/26/Zabbix-Shijian-Tongzhi/"/>
      <url>/2017/11/26/Zabbix-Shijian-Tongzhi/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>假设我们已经配置了一些项目和触发器，并且由于触发器改变状态，现在正在发生一些事件，之后要考虑的就是actions。</p><p>首先，我们不想一直盯着触发器或事件列表。最好是在发生比较严重的事情（如异常）时，接收到通知。另外，当发生问题时，我们希望看到所有有关的人都知道。</p><a id="more"></a><p>这就是为什么发送通知是Zabbix提供的主要操作之一， 可以定义在特定事件中通知到谁以及什么时间通知。</p><p>为了能够发送和接收<code>Zabbix</code>的通知，您必须：</p><ul><li>定义一些<code>media</code></li><li>配置<code>action</code> 向指定的<code>media</code>发送消息</li></ul><p><code>Actions</code>由<code>conditions</code> 和 <code>operations</code>组成. 基本上，当条件满足时，执行操作。两个主要操<br>作是发送消息（通知）并执行远程命令。</p><p>对于发现和自动注册创建的事件，可以使用一些其他操作。 包括添加或删除主机，链接模板等</p><h3 id="Media类型"><a href="#Media类型" class="headerlink" title="Media类型"></a>Media类型</h3><p>媒介是用于在<code>Zabbix</code>中发送通知和警报的传送通道。</p><p>您可以配置多种媒介类型：</p><ul><li><code>E-mail</code></li><li><code>SMS</code></li><li><code>Jabber</code></li><li><code>Ez Texting</code></li><li>自定义警报提示</li></ul>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 事件通知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：聚合图形Graph</title>
      <link href="/2017/11/26/Zabbix-Graph-Juhe/"/>
      <url>/2017/11/26/Zabbix-Graph-Juhe/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在<code>Zabbix</code>的聚合图形页面上，你可以把从各种来源的信息聚合到一起，以便在单个屏幕上快速查看。基本上聚合图形是一个表格，你选择每个表格中有多少个单元格以及单元格中要显示的元素。 可以显示以下元素：</p><a id="more"></a><ul><li>简单图形；</li><li>简单图形原型；</li><li>用户定义的自定义图形；</li><li>自定义图形原型；</li><li>拓扑图；</li><li>其他聚合图形；</li><li>纯文本信息；</li><li>服务器信息 （概述）；</li><li>主机信息 （概述）；</li><li>触发器信息 （概述）；</li><li>主机/主机组问题 （触发器的状态）；</li><li>系统状态；</li><li>数据概述；</li><li>时钟；</li><li>事件历史；</li><li>最近的动作历史；</li><li>URL （从另一个位置获取的数据）。</li></ul><p>聚合图形在监测中 → 聚合图形中进行管理，可以对其进行配置，管理和查看。它们也可以添加到监测中 → 仪表盘的“收藏夹”部分。</p><p>要配置屏幕，你必须首先通过定义其常规属性来创建它，然后在单元格中添加单个元素。</p><p>Zabbix 的所有用户（包括非管理员用户）都可以创建聚合图形。聚合图形有一个所有者 - 创建它们的用户。</p><p>聚合图形可以被公开或私有。所有用户都可以看到公开的聚合图形。</p><p>私有的聚合图形只对其所有者可见。所有者可以向其他用户和用户组共享私有的聚合图形。常规（非超级管理员）用户只能与他们所属的组和用户共享。只要他们拥有所有聚合图形中元素的读取权限，私有屏幕将对其所有者和聚合图形共享的用户可见。只要管理员级用户对所有聚合图形中的元素都具有读取权限，就可以查看和编辑私有聚合图形，而不管所有者或所有者属于共享用户列表。</p><blockquote><p>对于公开和私有的聚合图形，用户必须至少具有所有聚合图形中元素的读取权限才能看到屏幕。 要向聚合图形中添加元素，用户还必须至少具有对其的读取权限。</p></blockquote><h3 id="创建一个聚合图形"><a href="#创建一个聚合图形" class="headerlink" title="创建一个聚合图形"></a>创建一个聚合图形</h3><ul><li>在 <code>Zabbix</code> 前端跳转到 监测中 → 聚合图形 → Create Screen</li><li>填入属性信息</li><li>添加元素</li></ul><h4 id="在-Zabbix-前端跳转到-监测中-→-聚合图形-→-Create-Screen"><a href="#在-Zabbix-前端跳转到-监测中-→-聚合图形-→-Create-Screen" class="headerlink" title="在 Zabbix 前端跳转到 监测中 → 聚合图形 → Create Screen"></a>在 Zabbix 前端跳转到 监测中 → 聚合图形 → Create Screen</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-1.jpg" title="在 Zabbix 前端跳转到 监测中 → 聚合图形 → Create Screen"></center><h4 id="填入属性信息"><a href="#填入属性信息" class="headerlink" title="填入属性信息"></a>填入属性信息</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-2.jpg" title="填入属性信息"></center><p>给你的屏幕一个唯一的名称，并设置列数（垂直单元格）和行数（水平单元格）。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-3.jpg" title="给你的屏幕一个唯一的名称，并设置列数（垂直单元格）和行数（水平单元格）。"></center><p><strong>分享标签</strong>页包含聚合图形类型以及专用聚合图形的共享选项（用户组，用户）：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>所有者</em></td><td>选择聚合图形的所有者。</td></tr><tr><td><em>类型</em></td><td>选择聚合图形的类型：<strong>私有</strong> - 聚合图形只有对选定的用户组和用户可见。<strong>公开</strong> - 聚合图形对所有人可见。</td></tr><tr><td><em>用户组共享列表</em></td><td>选择可访问聚合图形的用户组。你可以赋予只读或读写权限。</td></tr><tr><td><em>用户共享列表</em></td><td>选择可访问聚合图形的用户。你可以赋予只读或读写权限。</td></tr></tbody></table><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-4.jpg" title="添加元素"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-5.jpg" title="添加元素"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-6.jpg" title="添加元素"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-7.jpg" title="添加元素"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-8.jpg" title="添加元素"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Graph-Juhe-9.jpg" title="添加元素"></center><p><strong>聚合图形元素的属性：</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>资源</em></td><td>在单元格中显示的信息：<strong>动作日志</strong> - 近期的动作日志<strong>时钟</strong> - 数字或模拟时钟显示当前服务器或本地时间。<strong>数据概述</strong> - 一组主机的最新数据<strong>图形</strong> - 单一的自定义图形<strong>图形原型</strong> - 自动发现（LLD）规则的自定义图形。<strong>事件历史</strong> - 最新的事件。<strong>主机组问题</strong> - 由主机组过滤的触发器状态（包括不含事件的触发器x，从Zabbix 2.2开始）<strong>主机信息</strong> - 高级主机的相关信息<strong>主机问题</strong> - 由主机过滤的触发器的状态（包括不含事件的触发器，自Zabbix 2.2起），从Zabbix 2.2开始）<strong>拓扑图</strong> - 单一的拓扑图<strong>纯文本</strong> - 纯文本数据<strong>聚合图形</strong> - 聚合图形（一个聚合图形内可能包含其他聚合图形）<strong>简单图形</strong> - 单一的简单图形<strong>简单图形原型</strong> - 基于自动发现（LLD）生成监控项的简单图形。<strong>Zabbix的状态</strong> - 关于 Zabbix 服务器的高级信息<strong>系统状态</strong> - 展示系统状态（类似于仪表盘） <strong>触发器信息</strong> - 高级触发器的相关信息。<strong>触发器概述</strong> - s主机组的触发器状态。<strong>URL</strong> - 包含来自外部资源的内容。</td></tr><tr><td><em>水平对齐</em></td><td>可能的值：<strong>居中**</strong>左侧<strong>**右侧</strong></td></tr><tr><td><em>垂直对齐</em></td><td>可能的值：<strong>居中**</strong>顶部<strong>**底部</strong></td></tr><tr><td><em>列跨度</em></td><td>将单元格扩展到多个列，与HTML列跨越的方式相同。</td></tr><tr><td><em>行宽度</em></td><td>将单元格扩展到多行，与HTML行跨越的方式相同。</td></tr></tbody></table><p>注意表格两边的“ + ”和“ - ”控件。</p><p>点击表格上方的“ + ”将会添加一列。 点击表格下方的“ - ”将删除一列。</p><p>点击表格左侧的“ + ”将会添加一行。 点击表格右侧的“ - ”将会删除一行。</p><blockquote><p>如果图形高度设置为小于120像素，则在图形中将不会显示任何图例。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 聚合图形Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：拓扑图</title>
      <link href="/2017/11/26/Zabbix-Tuoputu/"/>
      <url>/2017/11/26/Zabbix-Tuoputu/</url>
      <content type="html"><![CDATA[<h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Tuoputu-1.jpg" title="拓扑图"></center><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/visualisation/maps/map" target="_blank" rel="noopener">关于拓扑图请参见：https://www.zabbix.com/documentation/3.4/zh/manual/config/visualisation/maps/map</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 拓扑图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：图形Graph</title>
      <link href="/2017/11/26/Zabbix-Graph/"/>
      <url>/2017/11/26/Zabbix-Graph/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>随着大量的监控数据被采集到Zabbix中，如果用户可以以可视化的表现形式来查看发生了什么事情，那么和仅仅只有数字的表现形式比起来则更加轻松。</p><a id="more"></a><p>以下是进行图形设置的地方。图形可以一目了然地掌握数据的流向并关联问题，发现某件事情开始，或在某件事情可能变成问题事件时进行报告。</p><p>Zabbix为用户提供了如下几种图形：</p><ul><li>监控项数据的内置简单图形<code>simple</code> <code>graphs</code>；</li><li>可能创建更发杂的自定义图形<code>customised</code> <code>graphs</code></li><li>在最新数据中，可以利用特定图形<code>ad</code>-<code>hoc graphs</code>快速访问几个监控项的数据比较</li></ul>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 图形Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：手动关闭事件</title>
      <link href="/2017/11/26/Zabbix-Action-Shoudong-Guanbi/"/>
      <url>/2017/11/26/Zabbix-Action-Shoudong-Guanbi/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当触发器的状态从“问题（<code>Problem</code>）”变成“正常（<code>OK</code>）”时，问题事件通常会自动解决，但是很<br>难判断是通过触发器表达式的方式解决。在这种情况下，就需要手动解决问题。</p><p>例如，<code>syslog</code>可能会报告一些内核参数需要调整以获得最佳性能，在这种情况下，问题报告给<code>Linux</code>管理员，它们会修复它，然后手动关闭此问题。</p><p>只有在触发器选项中启用“允许手动关闭”选项，问题事件才可以被手动关闭。</p><p>当一个问题事件是“手动关闭”时，<code>Zabbix</code>会为<code>Zabbix Server</code>生成了一个新的内部任务，然后<br>任务管理器进程执行这个任务，并生成正常事件。</p><p>手动关闭问题事件并不意味着底层的触发器将永远不会再次进入“问题”状态。当触发器中包含的任何监控项有新数据达到时，将重新评估整个表达式，并可能会再次生成问题。</p><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>需要两步来手动关闭问题事件。</p><h4 id="触发器配置"><a href="#触发器配置" class="headerlink" title="触发器配置"></a>触发器配置</h4><p>在触发器的配置页面上，启用允许手动关闭（<code>Allow manual close</code>）选项。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Action-Shoudong-Guanbi-1.jpg" title="触发器配置"></center><h4 id="事件确认"><a href="#事件确认" class="headerlink" title="事件确认"></a>事件确认</h4><p>如果已启用允许手动关闭的触发器出现问题，你可以进入该触发器的“确认事件”屏幕，并手动关闭该问题。</p><p>要关闭这个问题，可以在确认事件屏幕查看关闭问题（<code>Close problem</code>）选项，并点击确认（<code>Acknowledge</code>）。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Action-Shoudong-Guanbi-2.jpg" title="事件确认"></center><br><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Action-Shoudong-Guanbi-3.jpg" title="事件确认"></center><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>下面的方式可以验证该问题是否被手动关闭：</p><p>通过监测中（<code>Monitoring</code>） → 问题（<code>Problems</code>）页面查看事件的详细信息：</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Action-Shoudong-Guanbi-4.jpg" title="验证"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 手动关闭事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：事件</title>
      <link href="/2017/11/26/Zabbix-Action/"/>
      <url>/2017/11/26/Zabbix-Action/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在<code>Zabbix</code>可以生成以下几种类型的事件：</p><ul><li><code>trigger events</code> - 触发器事件，当触发器改变他的状态时（<code>OK</code>→<code>PROBLEM</code>→<code>OK</code>）；</li><li><code>discovery events</code> - 发现事件，当主机或服务被检测到；</li><li><code>auto registration events</code> - 自动注册事件，当主动的<code>agents</code>被自动注册到<code>server</code>时</li><li><code>internal events</code> - 内部事件，当监控项<code>item</code>/自动发现规则<code>low</code>-<code>level discovery rule</code>变得不受支持或触发器进入了一个未知状态。</li></ul><p>事件是以时间戳的，并可以发送电子邮件等动作得得基础。</p><a id="more"></a><h3 id="查看事件"><a href="#查看事件" class="headerlink" title="查看事件"></a>查看事件</h3><p>要查看前端事件的详细信息，点击<code>Monitoring</code> → <code>Problems</code>。那里你可以点击事件的日期和事件来查看事件的详细信息。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Action-1.jpg" title="查看事件"></center><h3 id="触发器事件生成"><a href="#触发器事件生成" class="headerlink" title="触发器事件生成"></a>触发器事件生成</h3><p>触发器状态的变化是事件最常见和最重要的来源。每次触发器的状态改变时，都会生成一个事件。该事件包含了触发器状态变更的详细信息、发生时间以及信息的状态。</p><p>触发器会创建两种类型的事件：问题（<code>Problem</code>）和正常（<code>OK</code>）。</p><h4 id="问题事件-Problem-event"><a href="#问题事件-Problem-event" class="headerlink" title="问题事件(Problem event)"></a>问题事件(Problem event)</h4><p>在以下情况下，一个问题事件（<code>Problem event</code>）将被创建：</p><ul><li>当触发器状态为正常（<code>OK</code>）时，触发器表达式的计算结果为<code>TRUE</code>.</li><li>如果为触发器启用了多重问题事件生成，那么每次触发器表达式计算结果为<code>TRUE</code>。</li></ul><h4 id="正常-OK-时间"><a href="#正常-OK-时间" class="headerlink" title="正常(OK)时间"></a>正常(OK)时间</h4><p>一个正常事件（<code>OK event</code>）关闭关联的问题事件（<code>Problem event</code>），可由以下三个部分创建：</p><ul><li>触发器 - 基于“正常事件迭代（<code>OK event generation</code>）”和“正常事件关闭（<code>OK event closes</code>）”的设置；</li><li>关联项事件；</li><li>任务管理器 - 当事件被手动关闭。</li></ul><h4 id="发现事件"><a href="#发现事件" class="headerlink" title="发现事件"></a>发现事件</h4><p>Zabbix定期扫描网络发现规则中定义的IP范围，可以为每个规则单独配置检查频率。一旦发现主机或服务，就会生成一个发现事件（或多个事件）。</p><p>Zabbix可以生成以下事件：</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>Service Up</td><td>每当Zabbix检测到活跃的服务。</td></tr><tr><td>Service Down</td><td>每当Zabbix无法检测到服务。</td></tr><tr><td>Host Up</td><td>如果活跃的服务中至少有一个IP。</td></tr><tr><td>Host Down</td><td>如果所有的服务都没有响应。</td></tr><tr><td>Service Discovered</td><td>如果服务在维护时间之后恢复或者第一次被发现。</td></tr><tr><td>Service Lost</td><td>如果服务在运行后丢失。</td></tr><tr><td>Host Discovered</td><td>如果主机在维护时间滞后恢复或者第一次被发现。</td></tr><tr><td>Host Lost</td><td>如果主机在运行后丢失。</td></tr></tbody></table><h4 id="主动式客户端自动发现事件"><a href="#主动式客户端自动发现事件" class="headerlink" title="主动式客户端自动发现事件"></a>主动式客户端自动发现事件</h4><p>主动式客户端自动注册会在<code>Zabbix</code>创建事件。</p><p>如果配置了自动注册，当以前未知的主动式客户端向服务器发起请求时，服务器将会自动注册该主动式客户端。服务器使用主动式客户端请求的<code>IP</code>地址和端口，添加到自动注册的主机里。</p><h4 id="内部事件"><a href="#内部事件" class="headerlink" title="内部事件"></a>内部事件</h4><p>在下面的情境下，就会发生内部事件：</p><ul><li>监控项的状态从“正常”变为“不支持的”；</li><li>监控项的状态从“不支持的”变为“正常”；</li><li>自动发现规则的状态从“正常”变为“不支持的”；</li><li>自动发现规则的状态从“不支持的”变为“正常”；- 触发器的状态从“正常”变为“未知的”；</li><li>触发器的状态从“未知的”变为“正常”。</li></ul>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：触发器trigger严重性</title>
      <link href="/2017/11/23/Zabbix-Tirigger-Yanzhongxin/"/>
      <url>/2017/11/23/Zabbix-Tirigger-Yanzhongxin/</url>
      <content type="html"><![CDATA[<h3 id="触发器trigger严重性"><a href="#触发器trigger严重性" class="headerlink" title="触发器trigger严重性"></a>触发器trigger严重性</h3><p>触发器严重性定义了触发器的重要程度，Zabbix支持以下触发器的严重程度：</p><a id="more"></a><table><thead><tr><th>SEVERITY</th><th>DEFINITION</th><th>COLOUR</th></tr></thead><tbody><tr><td><strong>Not classified</strong></td><td>Unknown severity.</td><td>Grey</td></tr><tr><td><strong>Information</strong></td><td>For information purposes.</td><td>Light blue</td></tr><tr><td><strong>Warning</strong></td><td>Be warned.</td><td>Yellow</td></tr><tr><td><strong>Average</strong></td><td>Average problem.</td><td>Orange</td></tr><tr><td><strong>High</strong></td><td>Something important has happened.</td><td>Light red</td></tr><tr><td><strong>Disaster</strong></td><td>Disaster. Financial losses, etc.</td><td>Red</td></tr></tbody></table><p><strong>中文版</strong></p><table><thead><tr><th>SEVERITY</th><th>DEFINITION</th><th>颜色</th></tr></thead><tbody><tr><td>Not classified</td><td>未知.</td><td>灰色</td></tr><tr><td>Information</td><td>一般信息.</td><td>浅绿</td></tr><tr><td>Warning</td><td>警告</td><td>黄色</td></tr><tr><td>Average</td><td>一般问题.</td><td>橙色</td></tr><tr><td>High</td><td>严重问题.</td><td>红色</td></tr><tr><td>Disaster</td><td>灾难,会带来损失的那种.</td><td>深红</td></tr></tbody></table><p>严重程度的用途为：</p><ul><li>触发器的可视化表现，不同的颜色代表不同的严重程度。</li><li>全局报警音频。不同的音频代表不同的严重程度。</li><li>用户媒介，不同的用户媒介（通知渠道）代表不同的严重程度。例如，<code>SMS</code>表示高严重性， <code>email</code>表示其他严重性。</li><li>根据触发严重程度的情况来限定不同的<code>actions</code>动作。</li></ul>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 触发器trigger严重性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：触发器trigger单位符号</title>
      <link href="/2017/11/23/Zabbix-Tirigger-Danweifuhao/"/>
      <url>/2017/11/23/Zabbix-Tirigger-Danweifuhao/</url>
      <content type="html"><![CDATA[<h3 id="单位符号"><a href="#单位符号" class="headerlink" title="单位符号"></a>单位符号</h3><p>在<code>Zabbix</code>，不得不使用一些较大的数字，例如“<code>86400</code>”秒代表一天，这些数字既然不便又容易出错。所以可以使用一些适当的单位符号（或后缀）来简化<code>Zabbix</code>触发器和监控项的键值。</p><p>上例中，你可以输入“<code>1d</code>”来代替“<code>86400</code>”即可。后缀为乘法函数。</p><a id="more"></a><h4 id="触发器表达式"><a href="#触发器表达式" class="headerlink" title="触发器表达式"></a>触发器表达式</h4><p>触发器<code>expression</code>常量和函数参数支持时间和内存大小的后缀</p><h5 id="你可以使用如下时间单位后缀："><a href="#你可以使用如下时间单位后缀：" class="headerlink" title="你可以使用如下时间单位后缀："></a>你可以使用如下时间单位后缀：</h5><ul><li><code>s</code> - 秒 (通常情况下，不带任何时间单位后缀就表示s)</li><li><code>m</code> - 分钟</li><li><code>h</code> - 小时</li><li><code>d</code> - 天</li><li><code>w</code> - 周</li></ul><p>时间单位后缀也受<code>zabbix[queue,&lt;from&gt;,&lt;to&gt;]</code>的<code>internal item</code>的参数和<code>aggregate checks</code>最后一个参数的支持。</p><h5 id="对于内存大小你可以使用如下单位后缀："><a href="#对于内存大小你可以使用如下单位后缀：" class="headerlink" title="对于内存大小你可以使用如下单位后缀："></a>对于内存大小你可以使用如下单位后缀：</h5><ul><li><code>K</code> - <code>kilobyte</code></li><li><code>M</code> - <code>megabyte</code></li><li><code>G</code> - <code>gigabyte</code></li><li><code>T</code> - <code>terabyte</code></li></ul><h5 id="可以使用的其他单位后缀"><a href="#可以使用的其他单位后缀" class="headerlink" title="可以使用的其他单位后缀"></a>可以使用的其他单位后缀</h5><p>单位符号也用在前端数据的可读表述。</p><p>在<code>Zabbix Server</code>和前端都支持这些符号：</p><ul><li><code>K</code> - <code>kilo</code></li><li><code>M</code> - <code>mega</code></li><li><code>G</code> - <code>giga</code></li><li><code>T</code> - <code>tera</code></li></ul><p>当前端展示的<code>item</code>值为<code>B</code>、<code>Bps</code>时，那么使用<code>base 2</code>（<code>1K=1024</code>）。反之使用<code>base 10</code>（<code>1K=1000</code>） 另外前端也支持如下符号展示：</p><ul><li><code>P</code> - <code>peta</code></li><li><code>E</code> - <code>exa</code></li><li><code>Z</code> - <code>zetta</code></li><li><code>Y</code> - <code>yotta</code></li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><p>通过使用一些适当的后缀，你可以编写易懂和易维护的触发器表达式，例如下面这些表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;host:zabbix[proxy,zabbix_proxy,lastaccess]&#125;&gt;120</span><br><span class="line">&#123;host:system.uptime[].last()&#125;&lt;86400</span><br><span class="line">&#123;host:system.cpu.load.avg(600)&#125;&lt;10</span><br><span class="line">&#123;host:vm.memory.size[available].last()&#125;&lt;20971520</span><br></pre></td></tr></table></figure><p>可以被修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;host:zabbix[proxy,zabbix_proxy,lastaccess]&#125;&gt;2m</span><br><span class="line">&#123;host:system.uptime.last()&#125;&lt;1d</span><br><span class="line">&#123;host:system.cpu.load.avg(10m)&#125;&lt;10</span><br><span class="line">&#123;host:vm.memory.size[available].last()&#125;&lt;20M</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 触发器trigger单位符号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：触发器trigger依赖关系Dependencies</title>
      <link href="/2017/11/23/Zabbix-Tirigger-Dependencies/"/>
      <url>/2017/11/23/Zabbix-Tirigger-Dependencies/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有时候，一台主机的可用性取决于另一台主机。例如，如果一台路由设备宕机，则路由设备后端的服务器全部会变得无法访问。如果这两者都设置了触发器，你可能会收到关于这两者宕机的报警，而事实上只有路由设备是真正存在故障的。</p><p>这就是主机之间某些依赖关系可能有用的地方，依赖关系设置的通知可能会被抑制，而只发送根本问题的通知。</p><a id="more"></a><p>虽然<code>Zabbix</code>不支持主机之间的直接依赖关系，但是它们可以定义另外一种更加灵活的方式——触发器依赖关系。一个触发器可能有多个依赖于它的触发器。</p><p>所以在上面提到的例子中，我们打开服务器的触发器配置的窗口，并设置依赖于路由设备的相应触发器。有了这样的依赖关系，只要它所依赖的触发器处于<code>“PROBLEM”</code>状态，服务器触发器就不会改变状态，因此不会执行依赖的动作，同时也不会发送通知。</p><p>如果路由设备和服务器同时宕机，如果有依赖关系，那么<code>Zabbix</code>将不会执行服务器的触发动作。</p><p>如果当前触发器所依赖的触发器的状态从“PROBLEM”变更为<code>“UNKNOWN”</code>，那么则不会执行这个依赖触发器的动作。</p><p>值得注意的是，如果触发器所依赖的触发器被禁用、监控项，甚至主机被禁用，则依赖触发器的事件/动作将不会被抑制。</p><p>同样的</p><ul><li>触发器依赖可以从任何主机触发器添加到另一个主机触发器，只要它不会导致循环的依赖即可。</li><li>触发器依赖可以从模板添加到另一个模板，如果模板A的触发器依赖于模板<code>B</code>的触发器，一个主机要链接到模板A的话，那么它同时要链接到模板<code>B</code>（因为模板A的触发器依赖于模板B的触发器），但是主机却可以单独链接到模板<code>B</code>，因为模板B是被依赖的。</li><li>触发器依赖可以从模板的触发器添加到主机触发器。在这种情况下，如果主机链接这样的模板，那么主机也会创建链接到的模板所依赖的主机触发器。例如，如果模板的某些触发器依赖路由器（或主机）的触发器，那么但凡链接了这个模板的，都会依赖于路由器（或主机）的触发器。</li><li>可能不会添加从主机触发器到模板触发器的触发器依赖。</li><li>触发器依赖可以从一个触发器原型添加到另一个触发器原型（在同一个<code>Low-level discovery</code>规则中）或一个真实的触发器。触发器原型可能不依赖于从不同LLD规则的触发器原型或从触发器原型中创建的一个触发器。主机触发器原型不会依赖于来自模板的触发器。</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>要定义触发器依赖，在<code>“Dependencies”</code>选项卡点击<code>Add</code>进行添加，并选择所依赖的一个或多个触发器。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Tirigger-Dependencies-1.jpg" title="定义触发器依赖"></center><p>点击<code>Update</code>更新，就可以看到所依赖的触发器列表。</p><h4 id="几个依赖关系的示例"><a href="#几个依赖关系的示例" class="headerlink" title="几个依赖关系的示例"></a>几个依赖关系的示例</h4><p>例如， 主机的前面有<code>Router1</code>，<code>Router2</code>的前面有<code>Router1</code>。</p><blockquote><p>Zabbix - Router1 - Router2 - Host</p></blockquote><p>如果<code>Router1</code>宕掉，那么很明细那<code>Host</code>和<code>Router2</code>就不可达了，但我们并不想收到关于<code>Host</code>、<code>Router1</code>和<code>Router2</code>宕掉的这三个通知。</p><p>于是我们定义了如下两个依赖关系：</p><blockquote><p>‘Host is down’ trigger depends on ‘Router2 is down’ trigger<br>‘Router2 is down’ trigger depends on ‘Router1 is down’ trigger</p></blockquote><p>在改变“<code>Host is down</code>”触发器的状态之前，Zabbix将会检查相应触发器的依赖关系，如果找到，并且一个触发器处于“<code>Problem</code>”状态，则触发器状态将不会发生改变，因此不会执行<code>actions</code>动作，也不会发出相应的通知。</p><p><code>Zabbix</code>递归执行此检查，如果<code>Router1</code>或<code>Router2</code>是不可达的状态，那么<code>Host</code>触发器则不会更新。</p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 触发器trigger依赖关系Dependencies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：配置触发器trigger</title>
      <link href="/2017/11/23/Zabbix-Tirigger-Peizhi/"/>
      <url>/2017/11/23/Zabbix-Tirigger-Peizhi/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>触发器是“评估”由项目采集的数据并表示当前系统状况的逻辑表达式。</p><p>当监控项用于采集系统的数据时，始终遵循这些数据是非常不切合实际的，因为这些数据始终在等待一个令人担忧或者值得关注的状态。然而这个“评估”数据的工作可以留给触发器表达式。</p><p>触发器表达式允许定义一个什么状况的数据是“可接受”的阈值。因此，如果接收的数据超过了可接受的状态，则触发器会被触发 - 或将状态更改为<code>PROBLEM</code>.</p><a id="more"></a><p>一个触发器可以拥有下面几种状态：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>OK</td><td>这是一个正常的触发器状态，在旧版本的Zabbix中称为FALSE。</td></tr><tr><td>PROBLEM</td><td>通常意味着触发了某些事情。例如，处理器的负载较高。在旧版本的Zabbix中称为TRUE。</td></tr></tbody></table><p>每当<code>Zabbix server</code>接收到作为表达式一部分的新值时，都会重新计算触发器状态（表达式）。</p><p>如果在表达式中使用基于时间的函数(<code>nodata()</code>, <code>date()</code>, <code>dayofmonth()</code>, <code>dayofweek()</code>, <code>time()</code>, <code>now()</code>)，触发器就会由<code>Zabbix timer</code>进程每30秒重新计算一次。如果在表达式中同时使用基于时间和非基于时间的函数，当接收到一个新值和每隔30秒都会重新计算触发器的状态。</p><h3 id="配置一个触发器"><a href="#配置一个触发器" class="headerlink" title="配置一个触发器"></a>配置一个触发器</h3><p>配置一个触发器，请执行以下操作：</p><ul><li>点击上方菜单栏的<code>Configuration</code> → <code>Hosts</code></li><li>在<code>Host</code>那一行点击<code>Triggers</code></li><li>在右上角点击<code>Create Trigger</code>（或者在触发器名称上编辑一个现有的触发器）</li><li>在打开的页面输入触发器的参数</li></ul><h4 id="点击上方菜单栏的Configuration-→-Hosts-并在Host那一行点击Triggers"><a href="#点击上方菜单栏的Configuration-→-Hosts-并在Host那一行点击Triggers" class="headerlink" title="点击上方菜单栏的Configuration → Hosts 并在Host那一行点击Triggers"></a>点击上方菜单栏的Configuration → Hosts 并在Host那一行点击Triggers</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Tirigger-Peizhi-1.jpg" title="点击上方菜单栏的Configuration → Hosts 并在Host那一行点击Triggers"></center><h4 id="在右上角点击Create-Trigger"><a href="#在右上角点击Create-Trigger" class="headerlink" title="在右上角点击Create Trigger"></a>在右上角点击Create Trigger</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Tirigger-Peizhi-2.jpg" title="在右上角点击Create Trigger"></center><h4 id="在打开的页面输入触发器的参数"><a href="#在打开的页面输入触发器的参数" class="headerlink" title="在打开的页面输入触发器的参数"></a>在打开的页面输入触发器的参数</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Tirigger-Peizhi-3.jpg" title="在打开的页面输入触发器的参数"></center><p><code>Trigger</code>标签页包含了所有必需的触发器属性。</p><h4 id="依赖关系标签"><a href="#依赖关系标签" class="headerlink" title="依赖关系标签"></a>依赖关系标签</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Tirigger-Peizhi-4.jpg" title="依赖关系标签"></center><p>依赖关系标签页包含触发器的所有依赖关系。</p><p>点击<code>Add</code>来添加一个新的依赖关系。</p><blockquote><p>你也可以打开一个现有的触发器，点击Clone按钮，以一个不同的名称保存为新的触发器。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 配置触发器trigger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：监控项item中自定义key</title>
      <link href="/2017/11/23/Zabbix-Item-Zidingyi-Keys/"/>
      <url>/2017/11/23/Zabbix-Item-Zidingyi-Keys/</url>
      <content type="html"><![CDATA[<h3 id="用户自定义参数"><a href="#用户自定义参数" class="headerlink" title="用户自定义参数"></a>用户自定义参数</h3><p>有时你可能想要运行一个代理检查，它不是用<code>Zabbix</code>预定义的，这时你会用到用户参数来帮忙。</p><p>我们可以在客户端配置文件 zabbix_angentd.conf 编写一个命令来检索所需的数据，并将其包含在用户参数代理配置文件中 (‘<code>UserParameter</code>‘ 配置参数)。</p><p>用户参数具有以下语法：</p><blockquote><p>UserParameter=<key>,<command></key></p></blockquote><a id="more"></a><p>如你看到的，用户参数还包含一个<code>Key</code>。 一个用户参数包含一个<code>Key</code>。输入你选择的<code>Key</code>，这将很容易引用（它在主机中必须是唯一的）。重新启动代理。</p><p>然后，当 配置一个监控项时, 输入要从执行的用户参数中引用该命令的<code>Key</code>。</p><p>用户参数是由<code>Zabbix</code>代理执行的命令。最多可以返回<code>512KB</code>的数据。 <code>/bin/sh</code> 在<code>UNIX</code>操作系统下用于命令行解释器。用户参数满足代理检查超时，如果达到超时，则分支用户参数进程终止。</p><h4 id="用户参数示例"><a href="#用户参数示例" class="headerlink" title="用户参数示例"></a>用户参数示例</h4><p><strong>简单的命令:</strong></p><blockquote><p>UserParameter=ping,echo 1</p></blockquote><p>代理将始终使用<code>&#39;ping&#39;</code>键为一个监控项返回<code>&#39;1&#39;</code>。</p><p><strong>一个更复杂的例子:</strong></p><blockquote><p>UserParameter=mysql.ping,mysqladmin -uroot ping | grep -c alive</p></blockquote><p>如果MySQL服务器是活动状态，代理将返回’1’，否则为0。</p><h4 id="灵活的用户参数"><a href="#灵活的用户参数" class="headerlink" title="灵活的用户参数"></a>灵活的用户参数</h4><p>灵活的用户参数使用<code>Key</code>接受参数。这样一个灵活的用户参数可以作为创建几个监控项的基础。</p><p>灵活的用户参数具有以下语法：</p><blockquote><p>UserParameter=key[*],command</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>Key</strong></td><td>唯一的监控项Key。[*]定义该Key接收括号内的参数。在配置监控项时给出参数。</td></tr><tr><td><strong>Command</strong></td><td>执行命令以评估Key的值。<em>仅适用于灵活的用户参数</em>:你可以使用命令中的位置引用$ 1 … $ 9来引用监控项Key中的相应参数。Zabbix解析监控项Key的[]中包含的参数，并相应地替换$ 1，…，$ 9。$ 0将由原始命令（在扩展$ 0，…，$ 9之前）替换为运行。不管它们是用双引号(“)还是单引号(‘)括起来，都会解析位置引用。要使用位置引用不变，请指定双美元符号 - 例如，awk’{print $$2}’。 在这种情况下，执行命令时，“$$2”实际上会变成“$2”。</td></tr></tbody></table><blockquote><p>使用$符号的位置引用仅由灵活的用户参数搜索并由Zabbix代理替代。对于简单的用户参数，跳过此类引用处理，因此任何$号引用都不是必需的。</p></blockquote><blockquote><p>默认情况下，用户参数中不允许使用某些符号。</p></blockquote><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>有些事情很简单：</p><blockquote><p>UserParameter=ping[*],echo $1</p></blockquote><p>我们可以定义无限数量的监控项，用于监视所有具有格式<code>ping [something]</code>的设置。</p><ul><li><code>ping[0]</code> - 总是返回 <code>&#39;0&#39;</code></li><li><code>ping[aaa]</code> - 总是返回 <code>&#39;aaa&#39;</code></li></ul><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>让我们增添更多的意义！</p><blockquote><p>UserParameter=mysql.ping[*],mysqladmin -u$1 -p$2 ping | grep -c alive</p></blockquote><p>此参数可用于监视<code>MySQL</code>数据库的可用性。我们可以传递用户名和密码：</p><blockquote><p>mysql.ping[zabbix,our_password]</p></blockquote><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><p>有多少行匹配文件中的正则表达式？</p><blockquote><p>UserParameter=wc[*],grep -c “$2” $1</p></blockquote><p>此参数可用于计算文件中的行数。</p><blockquote><p>wc[/etc/passwd,root]<br>wc[/etc/services,zabbix]</p></blockquote><h4 id="命令结果"><a href="#命令结果" class="headerlink" title="命令结果"></a>命令结果</h4><p>命令的返回值与标准错误一起按照标准输出。</p><blockquote><p>在标准错误输出的情况下，文本（字符、日志或文本信息类型）监控项将被支持。</p></blockquote><p>返回文本（字符、日志、文本信息类型）的用户参数可以返回空格。 在无效结果的情况下，或执行退出代码不匹配0（零）的监控项将不被支持。</p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 监控项item中自定义key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：监控项item中所有agent key</title>
      <link href="/2017/11/23/Zabbix-Item-All-Keys/"/>
      <url>/2017/11/23/Zabbix-Item-All-Keys/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这些检查与<code>Zabbix</code>代理进行通信实现数据的采集。</p><p>一共有被动和主动 两种<code>agent</code>模式. 在配置监控项时，你可以选择所需的类型：</p><ul><li><code>Zabbix agent</code> - 被动模式，<code>Zabbix Server</code>向<code>Agent</code>索要数据</li><li><code>Zabbix agent</code> (<code>active</code>) - 主动模式，<code>Agent</code>主动上报数据给<code>Zabbix Server</code></li></ul><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/itemtypes/zabbix_agent" target="_blank" rel="noopener">所有agent key请参见：https://www.zabbix.com/documentation/3.4/zh/manual/config/items/itemtypes/zabbix_agent</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 监控项item中所有agent key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：监控项item自定义间隔</title>
      <link href="/2017/11/23/Zabbix-Item-Time-Jiange/"/>
      <url>/2017/11/23/Zabbix-Item-Time-Jiange/</url>
      <content type="html"><![CDATA[<h3 id="自定义间隔"><a href="#自定义间隔" class="headerlink" title="自定义间隔"></a>自定义间隔</h3><p>可以创建关于选中监控项的自定义时间规则。这两种方式是灵活的时间间隔：允许重新定义默认的更新间隔和调度，从而可以在特定时间或次序执行监控项的检查。</p><a id="more"></a><h4 id="灵活的间隔"><a href="#灵活的间隔" class="headerlink" title="灵活的间隔"></a>灵活的间隔</h4><p>灵活的间隔允许重定义特定时间段的默认更新间隔。灵活的间隔被定义为间隔和周期，其中：</p><ul><li>间隔 – 指定时间段的更新间隔</li><li>周期 – 灵活间隔有效的时间段</li></ul><p>可以定义多达七个灵活的时间间隔。如果多个灵活间隔设置有冲突，则在冲突周期中使用最小的间隔值。请注意，如果灵活间隔的最小值为“0”，则不会进行轮询。在灵活间隔之外，使用默认更新间隔。</p><p>请注意，如果灵活间隔等于周期的长度，则该监控项将被精确检查一次。如果灵活间隔大于周期，则可能会检查该监控项一次，或者完全不检查该监控项（因此不建议这样配置）。如果灵活间隔小于周期，监控项将至少被检查一次。</p><p>如果灵活间隔设置为“0”，则在灵活间隔期间不轮询监控项，并在周期结束后根据默认更新间隔恢复轮询。示例：</p><table><thead><tr><th>间隔</th><th>周期</th><th>描述</th></tr></thead><tbody><tr><td>10</td><td>1-5,09:00-18:00</td><td>监控项将在工作时间内每10秒检查一次。</td></tr><tr><td>0</td><td>1-7,00:00-7:00</td><td>监控项不会在夜间检查。</td></tr><tr><td>0</td><td>7-7,00:00-24:00</td><td>监控项在星期日不会被检查。</td></tr><tr><td>60</td><td>1-7,12:00-12:01</td><td>监控项将在每天12:00点检查。请注意，这种被用作计划检查的一般性方法从Zabbix 3.0开始建议使用调度间隔来实现。</td></tr></tbody></table><h4 id="调度间隔"><a href="#调度间隔" class="headerlink" title="调度间隔"></a>调度间隔</h4><p>调度间隔用于在特定时间检查监控项。虽然灵活间隔被设计为重新定义默认监控项的更新间隔，但是调度间隔用于指定独立执行的检查计划。</p><p>调度间隔定义为: <code>md&lt;filter&gt;wd&lt;filter&gt;h&lt;filter&gt;m&lt;filter&gt;s&lt;filter&gt;</code>其中:</p><ul><li><code>md - month days</code></li><li><code>wd - week days</code></li><li><code>h - hours</code></li><li><code>m - minutes</code></li><li><code>s – seconds</code></li></ul><p><code>&lt;filter&gt;</code> 用于指定其前缀的值(<code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>) 并被定义为: <code>[&lt;from&gt;[-&lt;to&gt;]][/&lt;step&gt;][,&lt;filter&gt;]</code> 其中:</p><ul><li><code>&lt;from&gt;</code>和<code>&lt;to&gt;</code>定义匹配值的范围（包括）。 如果忽略<code>&lt;to&gt;</code>，则过滤器匹配<code>&lt;from&gt;</code> - <code>&lt;from&gt;</code>范围。 如果<code>&lt;from&gt;</code>也被省略，则过滤器匹配所有可能的值。</li><li><code>&lt;step&gt;</code>通过该范围定义数字值的跳过。默认情况下，<code>&lt;step&gt;</code>的值为1，这意味着所有定义范围的值都匹配。</li></ul><p>虽然过滤器定义是可选的，但必须至少使用一个过滤器。过滤器必须有一个范围或定义的<code>&lt;step&gt;</code>值。</p><p>如果没有定义低级过滤器，则一个空的<code>filter</code>既与“0”匹配，又匹配所有可能的值。例如，如果省略小时过滤器，仅当分钟和秒的过滤器也被省略则只有“0”小时将匹配，否则空的小时过滤器将匹配所有小时值。</p><p>它们各自的过滤器前缀的有效<code>&lt;from&gt;</code>和<code>&lt;to&gt;</code>值分别为：</p><table><thead><tr><th>前缀</th><th>描述</th><th><em><from></from></em></th><th><em><to></to></em></th></tr></thead><tbody><tr><td>md</td><td>Month days</td><td>1-31</td><td>1-31</td></tr><tr><td>wd</td><td>Week days</td><td>1-7</td><td>1-7</td></tr><tr><td>h</td><td>Hours</td><td>0-23</td><td>0-23</td></tr><tr><td>m</td><td>Minutes</td><td>0-59</td><td>0-59</td></tr><tr><td>s</td><td>Seconds</td><td>0-59</td><td>0-59</td></tr></tbody></table><p><code>&lt;from&gt;</code>值必须小于或等于<code>&lt;to&gt;</code>值。 <code>&lt;step&gt;</code>值必须大于或等于1且小于或等于<code>&lt;to&gt;</code> - <code>&lt;from&gt;</code>。</p><p>单个数字月份、小时、分钟和秒值可以前缀为0.例如<code>md01-31</code>和<code>h/02</code>是有效间隔，但<code>md01-031</code>和<code>wd01-07</code>不是。</p><p>在<code>Zabbix</code>管理<code>Web</code>端，多个调度间隔以单独的行输入。在<code>Zabbix API</code>中，它们以分号“；”连接成单个字符串作为分隔符。</p><p>如果时间匹配了几个间隔，则只执行一次。例如，<code>wd1h9</code>; <code>h9</code>将在星期一上午9点执行一次。</p><p><strong>实例</strong></p><table><thead><tr><th>间隔</th><th>描述</th></tr></thead><tbody><tr><td>m0-59</td><td>每分钟执行一次</td></tr><tr><td>h9-17/2</td><td>从9:00开始每2小时执行一次（9:00，11:00 …）</td></tr><tr><td>m0,30 or m/30</td><td>在每小时的hh:00 和 hh:30执行</td></tr><tr><td>m0,5,10,15,20,25,30,35,40,45,50,55 or m/5</td><td>每5分钟执行</td></tr><tr><td>wd1-5h9</td><td>每周一至周五9:00</td></tr><tr><td>wd1-5h9-18</td><td>每个星期一到星期五在9：00,10：00，…，18:00</td></tr><tr><td>h9,10,11 or h9-11</td><td>每天上午9:00，10:00和11:00</td></tr><tr><td>md1h9m30</td><td>每个月的第一天在9:30</td></tr><tr><td>md1wd1h9m30</td><td>如果是星期一，每个月的第一天在9:30执行</td></tr><tr><td>h9m/30</td><td>在9:00，9:30执行</td></tr><tr><td>h9m0-59/30</td><td>在9:00，9:30执行</td></tr><tr><td>h9,10m/30</td><td>在9:00，9:30，10:00，10:30执行</td></tr><tr><td>h9-10m30</td><td>在9:30，10:30执行</td></tr><tr><td>h9m10-40/30</td><td>在9:10，9:40执行</td></tr><tr><td>h9,10m10-40/30</td><td>在9:10，9:40，10:10，10:40执行</td></tr><tr><td>h9-10m10-40/30</td><td>在9:10，9:40，10:10，10:40执行</td></tr><tr><td>h9m10-40</td><td>在9:10，9:11，9:12，… 9:40执行</td></tr><tr><td>h9m10-40/1</td><td>在9:10，9:11，9:12，… 9:40执行</td></tr><tr><td>h9-12,15</td><td>在9:00，10:00，11:00，12:00，15:00执行</td></tr><tr><td>h9-12,15m0</td><td>在9:00，10:00，11:00，12:00，15:00执行</td></tr><tr><td>h9-12,15m0s30</td><td>在上午9时30分，上午10时30分，11时30分，12时30分，15时30分执行</td></tr><tr><td>h9-12s30</td><td>在9:00:30，9:01:30，9:02:30 … 12:58:30，12:59:30执行</td></tr><tr><td>h9m/30;h10</td><td>在9:00，9:30，10:00执行</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 监控项item自定义间隔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：监控项item的key</title>
      <link href="/2017/11/23/Zabbix-Item-Key/"/>
      <url>/2017/11/23/Zabbix-Item-Key/</url>
      <content type="html"><![CDATA[<h3 id="监控项的Key"><a href="#监控项的Key" class="headerlink" title="监控项的Key"></a>监控项的Key</h3><h4 id="灵活和非灵活的参数"><a href="#灵活和非灵活的参数" class="headerlink" title="灵活和非灵活的参数"></a>灵活和非灵活的参数</h4><p>一个灵活的参数是一个接受参数的参数。 例如，在<code>vfs.fs.size [*]</code>中，星号符号<code>&#39;*&#39;</code>表示一个灵活的参数。<code>&#39;*&#39;</code>是作为参数传递给其它属性的任何字符串。范例如下：</p><a id="more"></a><ul><li><code>vfs.fs.size[/]</code></li><li><code>vfs.fs.size[/opt]</code></li></ul><h4 id="key的格式"><a href="#key的格式" class="headerlink" title="key的格式"></a>key的格式</h4><p>监控项<code>key</code>的格式，包括关键参数，必须遵循语法规则。 以下插图描述了支持的语法。 每个点<br>的允许元素和字符可以通过跟随箭头来确定 - 如果有一些块可以通过线路到达，则允许，如果不<br>是，则不允许。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-1.png" title="监控项item的key"></center><p>要构建一个有效的监控项的<code>Key</code>，首先指定<code>Key</code>的名称，然后选择是否具有参数，如果都两个都满足则被执行。</p><h4 id="key名称"><a href="#key名称" class="headerlink" title="key名称"></a>key名称</h4><p><code>Key</code>名本身具有有限的允许字符范围，允许的字符是：</p><blockquote><p>0-9a-zA-Z_-.</p></blockquote><p><strong>即：</strong></p><ul><li>所有的数字;</li><li>所有的小写字母;</li><li>所有大写字母;</li><li>下划线;</li><li>减号;</li><li>点.</li></ul><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-2.png" title="监控项item的key"></center><h4 id="key参数"><a href="#key参数" class="headerlink" title="key参数"></a>key参数</h4><p>监控项的<code>key</code>可以有多个逗号分隔的参数。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-3.png" title="监控项item的key"></center><p>每个<code>key</code>参数可以是带引号、无引号的字符串或数组。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-4.png" title="监控项item的key"></center><p>参数也可以为空，此时使用默认值。在这种情况下，如果指定了其它参数，则必须添加对应数量的逗号。例如，<code>key icmpping [,, 200，，500]</code>将指定每<code>ping</code>一次的时间间隔为<code>200毫秒</code>，超时时间为<code>500毫秒</code>，所有其它参数为默认值。</p><h4 id="参数-带引号"><a href="#参数-带引号" class="headerlink" title="参数 带引号"></a>参数 带引号</h4><p>如果<code>key</code>参数带引号，则允许任何<code>Unicode</code>字符，如果包含双引号则需要被反斜杠转义。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-5.png" title="监控项item的key"></center><blockquote><p>要引用监控项Key参数，请仅使用双引号，不支持单引号。</p></blockquote><h4 id="参数-不带引号"><a href="#参数-不带引号" class="headerlink" title="参数  不带引号"></a>参数  不带引号</h4><p>如果<code>key</code>参数是一个不带引号的字符串，除逗号和右方括号<code>（]）</code>之外，允许任何<code>Unicode</code>字符。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-6.png" title="监控项item的key"></center><h4 id="参数-数组"><a href="#参数-数组" class="headerlink" title="参数 数组"></a>参数 数组</h4><p>如果<code>key</code>参数是一个数组，它需要包含在方括号中，其中各个参数需要符合多个参数的规则和语法。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Item-Key-7.png" title="监控项item的key"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 监控项item的key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：创建监控项items</title>
      <link href="/2017/11/23/Zabbix-Create-Item/"/>
      <url>/2017/11/23/Zabbix-Create-Item/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>要在<code>Zabbix</code>管理页面创建一个监控项，请执行以下操作：</p><ul><li>进入到: <code>Configuration</code> → <code>Hosts</code></li><li>在主机所在的行单击 <code>Items</code></li><li>点击屏幕右上角的<code>Create item</code></li><li>输入表单中监控项的参数</li></ul><a id="more"></a><p>你也可以通过打开一个监控项，按<code>Clone</code> 按钮，然后以不同的名称保存。</p><h4 id="进入到-Configuration-→-Hosts"><a href="#进入到-Configuration-→-Hosts" class="headerlink" title="进入到: Configuration → Hosts"></a>进入到: Configuration → Hosts</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Create-Item-1.jpg" title="Configuration → Hosts"></center><h4 id="点击屏幕右上角的Create-item"><a href="#点击屏幕右上角的Create-item" class="headerlink" title="点击屏幕右上角的Create item"></a>点击屏幕右上角的Create item</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Create-Item-2.jpg" title="点击屏幕右上角的Create item"></center><h4 id="输入表单中监控项的参数"><a href="#输入表单中监控项的参数" class="headerlink" title="输入表单中监控项的参数"></a>输入表单中监控项的参数</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Create-Item-3.jpg" title="输入表单中监控项的参数"></center><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>Name</em></td><td>这里命名监控项名称。可以使用以下宏：<strong>$1, $2…$9</strong> - 指的是监控项的第1、2…9个参数例如：$1上的可用磁盘空间如果监控项的key是 “vfs.fs.size[/,free]”, 说明将自动更改为 “Free disk space on /”</td></tr><tr><td><em>Type</em></td><td>监控项类型。参考单个 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/itemtypes" target="_blank" rel="noopener">监控项类型</a> 章节.</td></tr><tr><td><em>Key</em></td><td>监控项key.可支持的<a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/itemtypes" target="_blank" rel="noopener">监控项的key</a> 能够在各个监控项类型中找到。这个key在单个主机中必须是唯一的。如果key的类型是’Zabbix agent’、’Zabbix agent (active)’, ‘Simple check’ 或者 ‘Zabbix aggregate’, 则此key必须被 Zabbix agent 或者 Zabbix server支持。也可以查看: 正确的 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/item/key" target="_blank" rel="noopener">key的格式</a>.</td></tr><tr><td><em>Host interface</em></td><td>选择主机接口。编辑主机级别的监控项时，此字段可用。</td></tr><tr><td><em>Type of information</em></td><td>执行转换后存储在数据库中的数据类型（如果有）。<strong>Numeric (unsigned)</strong> - 64位无符号整数<strong>Numeric (float)</strong> - 浮点数可以存储负值。允许范围: -999999999999.9999 到 999999999999.9999.从Zabbix 2.2开始，也支持科学计数值。例如。 1e+7,1e-4。<strong>Character</strong> - 短文本数据<strong>Log</strong> - 具有可选日志相关属性的长文本数据(timestamp, source, severity, logeventid)<strong>Text</strong> - 长文本数据<em>下表表格列出了文本数据的限制。</em></td></tr><tr><td><em>Units</em></td><td>如果设置了单位符号，Zabbix将在收到数据后再加工处理，并使用设置单位后缀进行显示。默认情况下，如果原始值超过1000，则除以1000，并相应显示。 例如，如果设置 <em>bps</em> 并接收到值为881764，则将显示为881.76 Kbps。特殊处理用于B（字节），Bps（每秒字节数）单位，除以1024.因此，如果单位设置为B或Bps，Zabbix将显示：1 为 1B/1Bps1024 为 1KB/1KBps1536 为 1.5KB/1.5KBps如果使用以下与时间相关的单位，则使用特殊处理：<strong>unixtime</strong> - 转换成“yyyy.mm.dd hh：mm：ss”。 要正确转换，接收的值必须是数字（无符号）类型的信息。<strong>uptime</strong> - 转换为 “hh:mm:ss” 或者 “N days, hh:mm:ss”例如，如果你收到的值为881764（秒），则显示为“10天，04:56:04”<strong>s</strong> - 转换成“yyy mmm ddd hhh mmm sss ms”; 参数被视为秒数。例如，如果您收到的值为881764（秒），则显示为“10d 4h 56m”只显示3个主要单位，如“1m 15d 5h”或“2h 4m 46s”。 如果没有显示天数，则仅显示两个级别 - “1m 5h”（不显示分钟，秒或毫秒）。 如果该值小于0.001，将被转换成“&lt;1 ms”。请参阅 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/item#unit_blacklist" target="_blank" rel="noopener">单位黑名单</a>.</td></tr><tr><td><em>Update interval (in sec)</em></td><td>每N秒钟检索一次这个项目的新值。<em>注意</em>：如果设置为“0”，则不会轮询该项。 但是，如果自定义间隔（灵活/调度）也存在非零值，则会在自定义间隔持续时间期间轮询该项。</td></tr><tr><td><em>Custom intervals</em></td><td>你可以创建用于检查监控项的自定义规则：<strong>Flexible</strong> - 创建更新间隔的异常（间隔不同的频率）<strong>Scheduling</strong> - 创建自定义轮询时间表。详细信息请查看 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/item/custom_intervals" target="_blank" rel="noopener">自定义间隔</a>. 从Zabix 3.0.0开始支持时间表。<em>注意</em>: 不适用于Zabbix Agent的活动监控项。</td></tr><tr><td><em>History storage period(in days)</em></td><td>在数据库中保留详细历史记录的天数，housekeeper将删除较旧的数据。 从Zabbix 2.2开始，在Administration → General → <a href="https://www.zabbix.com/documentation/3.4/manual/web_interface/frontend_sections/administration/general#housekeeper" target="_blank" rel="noopener">Housekeeper</a> 中可以覆盖该值。 如果存在全局设置，将显示一条警告消息： <a href="https://www.zabbix.com/documentation/3.4/_detail/manual/config/override_item.png?id=zh%3Amanual%3Aconfig%3Aitems%3Aitem" target="_blank" rel="noopener"><img src="https://www.zabbix.com/documentation/3.4/_media/manual/config/override_item.png" alt="img"></a>建议保留最小可能天数的记录值，以减少数据库中的历史记录的大小。你可以保留较长的趋势数据，而不是保存长期的历史数据。参见历史和趋势。 请参考 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/history_and_trends" target="_blank" rel="noopener">历史与趋势</a>.</td></tr><tr><td><em>Trend storage period(in days)</em></td><td>在数据库中保留N天的详细历史记录（小时最小，最大，平均值，计数）。 housekeeper将删除较旧的数据。从Zabbix 2.2开始，在Administration → General → <a href="https://www.zabbix.com/documentation/3.4/zh/manual/web_interface/frontend_sections/administration/general#housekeeper" target="_blank" rel="noopener">Housekeeper</a>中可以覆盖该值。如果存在全局设置，将显示一条警告消息：<a href="https://www.zabbix.com/documentation/3.4/_detail/manual/config/override_trends.png?id=zh%3Amanual%3Aconfig%3Aitems%3Aitem" target="_blank" rel="noopener"><img src="https://www.zabbix.com/documentation/3.4/_media/manual/config/override_trends.png" alt="img"></a><em>注意:</em> 保持趋势不适用于非数字数据 - 字符，日志和文本。参考 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/items/history_and_trends" target="_blank" rel="noopener">历史与趋势</a>.</td></tr><tr><td><em>Show value</em></td><td>将值映射应用于此监控项。值映射不会改变收到的值，仅用于显示数据。它只适用于整数项。例如, “Windows service states”.</td></tr><tr><td><em>Log time format</em></td><td>仅适用于<strong>日志</strong>类型的监控项。 支持的占位符:<em> <strong>y</strong>: </em>Year (1970-2038)<strong> </strong>M<strong>: *Month (01-12)</strong> <strong>d</strong>: <em>Day (01-31)<strong> </strong>h**: </em>Hour (00-23)<strong> </strong>m<strong>: *Minute (00-59)</strong> <strong>s</strong>: <em>Second (00-59)</em>如果留空，则不会解析时间戳。例如，从Zabbix Agent日志文件中考虑以下几行：“23480：20100328：154718.045 Zabbix代理启动。 Zabbix 1.8.2（修订11211）。“它以PID的六个字符位置开始，后跟日期，时间和行的其余部分。该行的日志时间格式为“pppppp：yyyyMMdd：hhmmss”。请注意，“p”和“：”字符只是占位符，只能是“yMdhms”。</td></tr><tr><td><em>New application</em></td><td>输入监控项的新应用程序的名称。</td></tr><tr><td><em>Applications</em></td><td>将监控项链接到一个或多个现有应用程序。</td></tr><tr><td><em>Populates host inventory field</em></td><td>你可以选择项目的值将填充的主机资产字段，如果你为主机启用了自动发现模式 <a href="https://www.zabbix.com/documentation/3.4/zh/manual/config/hosts/inventory" target="_blank" rel="noopener">资产管理</a>，这将会起作用。</td></tr><tr><td><em>Description</em></td><td>输入监控项描述。</td></tr><tr><td><em>Enabled</em></td><td>选中该复选框以启用该项目。</td></tr></tbody></table><p>当编辑主机级别上的现有模板级别的监控项时，多个字段是只读的。你可以使用表单标题中的链接并转到模板级别并在其中进行编辑，但请记住，模板级别上的更改将更改模板链接到的所有主机的项目。</p><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Create-Item-4.jpg" title="数据预处理"></center><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Create-Item-5.jpg" title="数据预处理"></center><p><code>Preprocessing</code> 选项卡允许为接收的值定义转换规则。在将值保存到数据库之前，可以进行一次或多次转换。 转换按照定义的顺序执行。 所有预处理都由<code>Zabbix</code>服务器完成。</p><table><thead><tr><th>转换</th><th>描述</th></tr></thead><tbody><tr><td><em>Custom multiplier</em></td><td>将值乘以指定的整数或浮点值。使用此选项将以KB，MBps等接收的值转换为B，Bps，否则Zabbix无法正确设置前缀（K，M，G等）。从Zabbix 2.2开始，也支持使用科学符号。 例如。 1e + 70。</td></tr><tr><td><em>Right trim</em></td><td>从值的末尾删除指定的字符。</td></tr><tr><td><em>Left trim</em></td><td>从值的起始处删除指定的字符。</td></tr><tr><td><em>Trim</em></td><td>从值的起始和结尾删除指定的字符。</td></tr><tr><td><em>Regular expression</em></td><td>将值与<pattern>正则表达式匹配，并用<output>替换值。 正则表达式支持用\N序列提取最多10个捕获的组。\ 参数:<strong>pattern</strong> - 正则表达式<strong>output</strong> - 输出格式化模板。一个\N（其中N = 1 … 9）转义序列被替换为第N个匹配组。</output></pattern></td></tr><tr><td><em>Boolean to decimal</em></td><td>将值从布尔格式转换为十进制。文本表示被转换为0或1.因此，“TRUE”存储为1，“FALSE”存储为0.所有值都以不区分大小写的方式进行匹配。当前被认为的布尔值值如下：<em>TRUE</em> - true, t, yes, y, on, up, running, enabled, available<em>FALSE</em> - false, f, no, n, off, down, unused, disabled, unavailable此外，任何非零数值都被认为是TRUE，0被认为是FALSE。</td></tr><tr><td><em>Octal to decimal</em></td><td>将八进制格式的值转换为十进制。</td></tr><tr><td><em>Hexadecimal to decimal</em></td><td>将值从十六进制格式转换为十进制。</td></tr><tr><td><em>Delta</em></td><td>计算当前值和上一个值之间的差值。评估为<strong>value-prev_value</strong>，其中 value - current value; prev_value - 以前收到的值每个项目只允许一个delta操作。</td></tr><tr><td><em>Delta per second</em></td><td>计算每秒速度的值变化（当前值和上一个值的差值）。计算为（value-prev_value）/（time-prev_time），其中 value - 当前值; prev_value - 当前收到的值; time - 当前时间戳，prev_time - 以前值的时间戳。这个设置是非常有用的，以获得每秒不断增长的速度值。 如果当前值小于上一个值，Zabbix将丢弃该差异（不存储）并等待另一个值。这有助于正常工作，例如，32位SNMP计数器的包装（溢出）。<em>注意</em>: 由于此计算可能产生浮点数，建议将’Type of information’ 设置为 <em>Numeric (float)</em>，即使传入的原始值是整数。 这对于小数部分尤其重要。 如果浮点值很大并且可能超过’float’字段长度，在这种情况下，整个值可能会丢失，实际上建议使用Numeric（无符号），因此只会修剪小数部分。每个监控项只允许一个delta操作。</td></tr></tbody></table><blockquote><p>如果将信息类型设置为数字（无符号），将使用自定义乘数或存储值作为<code>Delta</code>（每秒速度），并且生成的计算值实际为浮点数，则计算值仍被接受为正确的值，通过修剪小数部分并将该值存储为整数。</p></blockquote><p>创建 <code>item</code> 快捷方法，编辑一个 <code>item</code>，然后克隆这个 <code>item</code>，修改 <code>name</code> 等等其它数据即可</p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 创建监控项items </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：批量更新主机信息</title>
      <link href="/2017/11/23/Zabbix-Piliang-Host/"/>
      <url>/2017/11/23/Zabbix-Piliang-Host/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>有时你可能想要一次更改多个主机的某些属性，那么你可以使用批量更新功能来代替打开每个主机进行编辑。</p><a id="more"></a><h3 id="使用批量更新"><a href="#使用批量更新" class="headerlink" title="使用批量更新"></a>使用批量更新</h3><p>要批量更新某些主机，请执行以下操作:</p><ul><li>在主机中，在要更新的主机之前选中复选框</li><li>点击下方的 <code>Mass update</code> 按钮</li><li>跳转到属性对应所需的选项卡(<code>Host</code>, <code>Templates</code>, <code>IPMI</code> 或者 <code>Inventory</code>)</li><li>标记要更新的任何属性的复选框，并为其输入新值</li></ul><h4 id="在主机中，在要更新的主机之前选中复选框并点击下方的Mass-update按钮"><a href="#在主机中，在要更新的主机之前选中复选框并点击下方的Mass-update按钮" class="headerlink" title="在主机中，在要更新的主机之前选中复选框并点击下方的Mass update按钮"></a>在主机中，在要更新的主机之前选中复选框并点击下方的Mass update按钮</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Piliang-Host-1.jpg" title="在主机中，在要更新的主机之前选中复选框并点击下方的Mass update按钮"></center><h4 id="跳转到属性对应所需的选项卡-Host-Templates-IPMI-或者-Inventory"><a href="#跳转到属性对应所需的选项卡-Host-Templates-IPMI-或者-Inventory" class="headerlink" title="跳转到属性对应所需的选项卡(Host, Templates, IPMI 或者 Inventory)"></a>跳转到属性对应所需的选项卡(Host, Templates, IPMI 或者 Inventory)</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Piliang-Host-2.jpg" title="跳转到属性对应所需的选项卡(Host, Templates, IPMI 或者 Inventory)"></center><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Piliang-Host-3.jpg" title="跳转到属性对应所需的选项卡(Host, Templates, IPMI 或者 Inventory)"></center><p><code>Replace</code> <code>host</code> <code>groups</code> 将从任何现有主机组中删除主机，并将其替换为该字段中指定的主&gt;机。</p><p><code>Add new or existing host groups</code> 允许从现有主机组指定其它主机组，或为主机输入全新的主机组。</p><p>这两个字段都是自动完成的 - 开始输入它们提供了匹配的主机组的下拉列表。 </p><p>如果主机组是新的，它也会出现在下拉列表中，并在字符串后用(<code>new</code>)表示。 只需向下滚动即可选择。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Piliang-Host-4.jpg" title="如果主机组是新的，它也会出现在下拉列表中，并在字符串后用(`new`)表示。 只需向下滚动即可选择。"></center><p><code>tes</code>选项卡中更新模板链接，请选择<code>Link</code> <code>templates</code>，并在自动填充字段中开始输入模板名称，直到出现一个提供匹配模板的下拉列表。 只需向下滚动即可选择要链接的模板。</p><p><code>Replace</code>选项将允许链接新模板，同时取消链接到之前与主机链接的任何模板。 <code>Clear when unlinking</code>选项将不仅可以取消链接任何以前链接的模板，还可以删除所有继承自它们的元素<br>（监控项、触发器等）。</p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Piliang-Host-5.jpg" title="`Replace`选项将允许链接新模板，同时取消链接到之前与主机链接的任何模板。"></center><p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Piliang-Host-6.jpg" title="Replace`选项将允许链接新模板，同时取消链接到之前与主机链接的任何模板。"></center><br>完成所有必需的更改后，单击<code>Update</code>，所有选定主机的属性将相应更新。</p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 批量更新主机信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix：配置主机hosts和主机组</title>
      <link href="/2017/11/23/Zabbix-Add-Host/"/>
      <url>/2017/11/23/Zabbix-Add-Host/</url>
      <content type="html"><![CDATA[<h3 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>按照以下步骤在<code>Zabbix</code>前端创建一台主机：</p><ul><li>定位到：<code>Configuration</code> → <code>Hosts</code></li><li>在右侧点击 <code>Create host</code> (或者在主机名上编辑一台已有的主机)</li><li>在表单中输入主机的相关参数</li></ul><a id="more"></a><p>你可以在已经存在的主机上使用 <code>Clone</code> 和 <code>Full</code> <code>clone</code> 按钮的形式创建一个新的主机，点击 <code>Clone</code> 将保留所有的主机参数和模板链接（保留所有的模板入口），<code>Full clone</code> 将额外保留直属实体（应用集、监控项、触发器、视图、底层自动发现规则和<code>Web</code>定制的场景）。</p><p><strong>注意</strong>: 当主机被克隆时，它将保留原来在模板上的所有模板实体. 在现有主机级别上（例如更改的监控间隔、修改正则表达式或添加原型到底层发现规则）所做的任何实体修改将不会克隆到新主机，而是与模板一致。</p><h4 id="创建一台主机"><a href="#创建一台主机" class="headerlink" title="创建一台主机"></a>创建一台主机</h4><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-1.jpg" title="创建一台主机"></center><h4 id="在表单中输入主机的相关参数"><a href="#在表单中输入主机的相关参数" class="headerlink" title="在表单中输入主机的相关参数"></a>在表单中输入主机的相关参数</h4><h5 id="Host-标签页包含了通用的主机属性"><a href="#Host-标签页包含了通用的主机属性" class="headerlink" title="Host 标签页包含了通用的主机属性"></a>Host 标签页包含了通用的主机属性</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-2.jpg" title="Host 标签页包含了通用的主机属性"></center><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><em>Host name</em></td><td>输入一个唯一的主机名。允许有字母、空格、圆点、破折号和下划线。<em>注意：</em> 由于 Zabbix agent 运行在你所配置的那台主机上，所以此 agent 配置文件的参数 <em>Hostname</em> 必须和这里输入的主机名是一致的。 在配置 主动代理检查 的过程中参数中的主机名也是需要的。</td></tr><tr><td><em>Visible name</em></td><td>显示名称。如果你设置了这个名称，它将会在列表、拓扑图等地方显示。此属性支持 UTF-8 。</td></tr><tr><td><em>Groups</em></td><td>选择主机所属主机组。一个主机必须至少属于一个主机组。</td></tr><tr><td><em>New host group</em></td><td>可以创建一个新的组并和主机关联。如果为空表示忽略。</td></tr><tr><td><em>Interfaces</em></td><td>支持这几种主机接口类型: <em>Agent</em>, <em>SNMP</em>, <em>JMX</em> 和 <em>IPMI</em>.要增加一个新接口，在 <em>Interfaces</em> 区域点击 <em>Add</em> ，输入 <em>IP/DNS</em>, <em>Connect to</em> 和 <em>Port</em> 信息。<em>注意:</em> 用在任何监控项的接口都不能被删除，并且<em>Remove</em>链接是灰色的。在 SNMP 接口使用 <em>Use bulk requests</em> 选项来为每个接口启用和禁用SNMP请求的 批量处理。</td></tr><tr><td><em>IP address</em></td><td>主机的IP地址（可选）。</td></tr><tr><td><em>DNS name</em></td><td>主机的DNS名称（可选）。</td></tr><tr><td><em>Connect to</em></td><td>点击对应的按钮告诉Zabbix服务器采用哪种模式从代理端获取数据:<strong>IP</strong> - 连接到主机的IP地址（推荐）<strong>DNS</strong> - 连接到主机的DNS名称</td></tr><tr><td><em>Port</em></td><td>TCP/UDP 端口. 默认端口：Zabbix agent 10050, SNMP agent 161 , JMX 12345 ， IPMI 623.</td></tr><tr><td><em>Default</em></td><td>选择单选按钮设置默认接口.</td></tr><tr><td><em>Description</em></td><td>填写主机描述。</td></tr><tr><td><em>Monitored by proxy</em></td><td>主机可以被Zabbix服务器或者Zabbix代理服务器监控:<strong>(no proxy)</strong> - Zabbix服务器监控主机<strong>Proxy name</strong> - Zabbix代理服务器“代理服务器名称”监控主机</td></tr><tr><td><em>Enabled</em></td><td>选中此项激活主机，准备接受监控。如果没选中，表示主机未激活，不能被监控。</td></tr></tbody></table><h5 id="Templates标签页"><a href="#Templates标签页" class="headerlink" title="Templates标签页"></a>Templates标签页</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-3.jpg" title="Templates标签页"></center><p><code>Templates</code> 选项卡允许你将<code>templates</code> 链接到主机。所有实体（监控项, 触发器, 图表和应&gt;用集）将从模板继承。</p><p>要链接一个新模板，请开始在<code>Link</code> <code>new</code> <code>templates</code> 区域键入，直到匹配键入的模板列表出<br>现。向下滚动选择你希望链接的模板。当所有的模板链接完成后，单击<code>Add</code>.<br>要取消链接模板，请使用<code>Linked</code> <code>templates</code>区域的两个选项之一:</p><ul><li><code>Unlink</code> - 取消链接模板，但保留它的监控项、触发器和图表</li><li><code>Unlink</code> <code>and</code> <code>clear</code> - 取消链接模板并删除所有它的监控项、触发器和图表</li></ul><p>列出的模板名可以点击跳转到模板配置表单。</p><h5 id="IPMI标签页"><a href="#IPMI标签页" class="headerlink" title="IPMI标签页"></a>IPMI标签页</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-4.jpg" title="IPMI标签页"></center><p>IPMI标签页包含<code>IPMI</code>管理属性</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>Authentication algorithm</em></td><td>选择认证算法。</td></tr><tr><td><em>Privilege level</em></td><td>选择权限级别。</td></tr><tr><td><em>Username</em></td><td>认证用户名.</td></tr><tr><td><em>Password</em></td><td>认证用户密码.</td></tr></tbody></table><h5 id="Macros标签页"><a href="#Macros标签页" class="headerlink" title="Macros标签页"></a>Macros标签页</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-5.jpg" title="Macros标签页"></center><p><code>Macros</code> 选项卡允许你定义主机级别的 用户宏. 如果你选择了 <code>Inherited</code> 和 <code>host macros</code> 选项，你也可以在这里查看模板级的宏以及全局宏。那里是为主机定义全部用户宏的地方，用户宏显示解析的值以及来源。</p><p>为方便考虑，提供了相应模板和全局宏配置的链接。还可以在主机级别编辑一个模板/全局宏，有效地创建主机上宏的副本。</p><h5 id="Host-inventory标签页"><a href="#Host-inventory标签页" class="headerlink" title="Host inventory标签页"></a>Host inventory标签页</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-6.jpg" title="Host inventory标签页"></center><p><code>Host inventory</code> 选项卡允许你为主机手工输入 库存 信息。你还可以选择启用 自动 库存量,或者禁用此主机的库存量。</p><h5 id="Encryption标签页"><a href="#Encryption标签页" class="headerlink" title="Encryption标签页"></a>Encryption标签页</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-7.jpg" title="Encryption标签页"></center><p><code>Encryption</code> 选项卡允许你请求与主机 加密的 链接。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>Connections to host</em></td><td>Zabbix服务器或Zabbix代理服务器如何连接到主机上的Zabbix Agent：无加密（默认）；使用PSK（预共享密钥）或者证书。</td></tr><tr><td><em>Connections from host</em></td><td>从主机选择允许的连接类型（例如Zabbix agent和Zabbix Sender）。可以同时选择多种连接类型（对于测试及切换至其他连接类型时有帮助）。默认是“No encryption”。</td></tr><tr><td><em>Issuer</em></td><td>允许颁发证书。证书首先会通过CA（认证机构）认证。如果是有效的，则由CA签名，然后可以使用Issuer字段来进一步限制允许的CA。如果你的Zabbix安装使用多个CA证书，则该字段可以被重复使用。如果这个字段为空，那么任何CA都是可以被接受的。</td></tr><tr><td><em>Subject</em></td><td>允许的证书主题。证书首先通过CA验证。如果它是有效的，由CA签名，则Subject字段可以用于仅允许一个Subject字符串值。如果此字段为空，则接受由配置的CA签名的任何有效证书。</td></tr><tr><td><em>PSK identity</em></td><td>预共享密钥身份字符串.</td></tr><tr><td><em>PSK</em></td><td>预共享密钥（hex-string）。如果Zabbix使用GnuTLS或者OpenSSL库，最大长度：512位十六进制数，如果Zabbix使用mbed（PolarSSL）库，则是64位十六进制（32字节PSK）。示例: 1f87b595725ac58dd977beef14b97461a7c1045b9a1c963065002c5473194952</td></tr></tbody></table><h3 id="配置主机组"><a href="#配置主机组" class="headerlink" title="配置主机组"></a>配置主机组</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>要在<code>Zabbix</code>页面配置主机组，请执行以下步骤:</p><ul><li>进入: <code>Configuration</code> → <code>Host groups</code></li><li>在页面右上方单击 <code>Create Group</code></li><li>在表单中输入参数</li></ul><h5 id="创建主机组"><a href="#创建主机组" class="headerlink" title="创建主机组"></a>创建主机组</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-8.jpg" title="创建主机组"></center><h5 id="在表单中输入参数"><a href="#在表单中输入参数" class="headerlink" title="在表单中输入参数"></a>在表单中输入参数</h5><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Add-Host-9.jpg" title="在表单中输入参数"></center><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>Group name</em></td><td>输入唯一的主机组名称。要创建一个嵌套的主机组，请使用 ‘/‘ 正斜杠分隔符，例如<code>Europe/Latvia/Riga/Zabbix servers</code>. 即使不存在这3个父主机组(<code>Europe/Latvia/Riga</code>) ，你也可以创建该组。在这种情况下，创建父主机组取决于使用者；它们不会自动创建。不允许有正反斜杠，不支持反斜杠转义’/‘。Zabbix 3.2.0支持主机组的嵌套。</td></tr><tr><td><em>Hosts</em></td><td>选择主机、组成员。主机组可能有0个、1个或多个主机。</td></tr></tbody></table><p><strong>嵌套主机组的权限：</strong></p><ul><li>当将子主机组创建到现有的父主机组时，对该子进程的用户组 权限将从父级继承, (例如,如果<code>Riga</code> 已经存在，创建 <code>Riga</code>/<code>Zabbix</code> <code>servers</code>)</li><li>将父主机组创建到现有的子主机组时，不会设置父级的权限 (例如, 如果<code>Riga</code>/<code>Zabbix servers</code>已经存在，创建<code>Riga</code>)</li></ul>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 配置主机hosts和主机组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix系统所需磁盘空间计算公式</title>
      <link href="/2017/11/23/Zabbix-Disk/"/>
      <url>/2017/11/23/Zabbix-Disk/</url>
      <content type="html"><![CDATA[<h3 id="Zabbix系统所需磁盘空间计算公式"><a href="#Zabbix系统所需磁盘空间计算公式" class="headerlink" title="Zabbix系统所需磁盘空间计算公式"></a>Zabbix系统所需磁盘空间计算公式</h3><a id="more"></a><table><thead><tr><th>范围</th><th>所需磁盘空间的计算公式 (单位：字节)</th></tr></thead><tbody><tr><td><em>Zabbix配置文件</em></td><td>固定大小。一般10MB或更少。</td></tr><tr><td><em>历史（History）</em></td><td>days<em>(items/refresh rate)</em>24<em>3600</em>bytesitems : 监控项数量days : 保留历史数据的天数refresh rate : 监控项平均轮询时间bytes : 保留单个值所需要占用的字节数，依赖于数据库引擎，一般大约90字节。</td></tr><tr><td><em>趋势（Trends）</em></td><td>days<em>(items/3600)</em>24<em>3600</em>bytesitems : 监控项数量days : 保留趋势数据的天数bytes : 保留单个趋势数据所需要占用的字节数，依赖于数据库引擎，一般大约90字节。</td></tr><tr><td><em>事件（Events）</em></td><td>days<em>events</em>24<em>3600</em>bytesevents : 每秒事件数。最糟糕的情况下，每秒一（1）个事件。days : 保留事件数据的天数bytes : 保留单个事件所需要占用的字节数，依赖于数据库引擎，一般大约90字节。</td></tr></tbody></table><blockquote><p>根据现实环境中使用的<code>MySQL</code>后端数据库的统计，数值型（<code>Numeric</code>）监控项的值平均占用约90个字节，事件（<code>Events</code>）平均占用约170个字节。</p></blockquote><p><strong>因此，所需要的磁盘总空间按下列方法计算：</strong></p><p>配置（<code>Configuration</code>） + 历史（<code>History</code>） + 趋势（<code>Trends</code>） + 事件（<code>Events</code>）<br>安装完<code>Zabbix</code>，磁盘空间不会立即被分配。数据库大小根据回收清理（<code>housekeeper</code>）设置，<br>在某些时间点增长或停止增长。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/installation/requirements" target="_blank" rel="noopener">以上内容来自官方帮助书册：https://www.zabbix.com/documentation/3.4/zh/manual/installation</a></p>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> Zabbix系统所需磁盘空间计算公式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Zabbix</title>
      <link href="/2017/11/23/Zabbix-Install/"/>
      <url>/2017/11/23/Zabbix-Install/</url>
      <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Zabbix-server</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>zabbix-server-3.4.4</td><td>监控server</td></tr><tr><td>Nginx</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>nginx-1.10.2</td><td>被监控server</td></tr></tbody></table><a id="more"></a><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Zabbix-server配置</span><br><span class="line">[root@centos7 ~]# hostnamectl set-hostname Zabbix-server.haiyun.com</span><br><span class="line">[root@centos7 ~]# exec bash</span><br><span class="line"></span><br><span class="line"># Zabbix-client1配置</span><br><span class="line">[root@centos7 ~]# hostnamectl set-hostname Zabbix-client1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@zabbix-client1 ~]# </span><br><span class="line"></span><br><span class="line"># Zabbix-client2配置</span><br><span class="line">[root@centos7 ~]# hostnamectl set-hostname Zabbix-client2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@zabbix-client2 ~]#</span><br></pre></td></tr></table></figure><h4 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Zabbix-server配置</span><br><span class="line">[root@zabbix-server ~]# ntpdate 172.18.0.1</span><br><span class="line">21 Nov 17:58:10 ntpdate[2160]: step time server 172.18.0.1 offset -2.293672 sec</span><br><span class="line">[root@zabbix-server ~]# date</span><br><span class="line">Tue Nov 21 17:58:14 CST 2017</span><br><span class="line">[root@zabbix-server ~]#</span><br><span class="line"></span><br><span class="line"># Zabbix-client1配置</span><br><span class="line">[root@zabbix-client1 ~]# ntpdate 172.18.0.1</span><br><span class="line">21 Nov 17:58:10 ntpdate[2177]: step time server 172.18.0.1 offset -2.263705 sec</span><br><span class="line">[root@zabbix-client1 ~]# date</span><br><span class="line">Tue Nov 21 17:58:14 CST 2017</span><br><span class="line"></span><br><span class="line"># Zabbix-client2配置</span><br><span class="line">[root@zabbix-client2 ~]# ntpdate 172.18.0.1</span><br><span class="line">21 Nov 17:58:10 ntpdate[2127]: step time server 172.18.0.1 offset -1.696126 sec</span><br><span class="line">[root@zabbix-client2 ~]# date</span><br><span class="line">Tue Nov 21 17:58:14 CST 2017</span><br></pre></td></tr></table></figure><h3 id="下载并安装yum源"><a href="#下载并安装yum源" class="headerlink" title="下载并安装yum源"></a>下载并安装yum源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# wget http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm         # 从官网下载yum源包</span><br><span class="line">--2017-11-21 19:34:01--  http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br><span class="line">Resolving repo.zabbix.com (repo.zabbix.com)... 162.243.159.138</span><br><span class="line">Connecting to repo.zabbix.com (repo.zabbix.com)|162.243.159.138|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 13572 (13K) [application/x-redhat-package-manager]</span><br><span class="line">Saving to: ‘zabbix-release-3.4-2.el7.noarch.rpm’</span><br><span class="line"></span><br><span class="line">100%[===========================================&gt;] 13,572      --.-K/s   in 0s      </span><br><span class="line"></span><br><span class="line">2017-11-21 19:34:01 (155 MB/s) - ‘zabbix-release-3.4-2.el7.noarch.rpm’ saved [13572/13572]</span><br><span class="line">[root@zabbix-server ~]# rpm -ivh zabbix-release-3.4-2.el7.noarch.rpm </span><br><span class="line">warning: zabbix-release-3.4-2.el7.noarch.rpm: Header V4 RSA/SHA512 Signature, key ID a14fe591: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:zabbix-release-3.4-2.el7         ################################# [100%]</span><br><span class="line">[root@zabbix-server ~]# rpm -ql zabbix-release</span><br><span class="line">/etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX</span><br><span class="line">/etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591</span><br><span class="line">/etc/yum.repos.d/zabbix.repo</span><br><span class="line">/usr/share/doc/zabbix-release-3.4</span><br><span class="line">/usr/share/doc/zabbix-release-3.4/GPL</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">file://misc/cd/repodata/repomd.xml: [Errno 14] curl#37 - &quot;Couldn&apos;t open file /cd/repodata/repomd.xml&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line">epel                                                          | 4.3 kB  00:00:00     </span><br><span class="line">zabbix                                                        | 2.9 kB  00:00:00     </span><br><span class="line">zabbix-non-supported                                          |  951 B  00:00:00     </span><br><span class="line">zabbix/x86_64/primary_db                                      |  44 kB  00:00:00     </span><br><span class="line">zabbix-non-supported/x86_64/primary                           | 1.6 kB  00:00:00     </span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">zabbix-non-supported                                                             4/4</span><br><span class="line">repo id                     repo name                                          status</span><br><span class="line">!base                       base                                                9,363</span><br><span class="line">epel                        epel                                               11,349</span><br><span class="line">zabbix/x86_64               Zabbix Official Repository - x86_64                    80</span><br><span class="line">zabbix-non-supported/x86_64 Zabbix Official Repository non-supported - x86_64       4</span><br><span class="line">repolist: 20,796</span><br></pre></td></tr></table></figure><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# yum install mariadb-server      # 安装mariadb</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# vim /etc/my.cnf.d/server.cnf        # 修改配置文件</span><br><span class="line">[server]</span><br><span class="line">skip_name_resolve = ON</span><br><span class="line">innodb_file_per_table = ON</span><br><span class="line">innodb_buffer_pool_size = 256M</span><br><span class="line">max_connections = 2000</span><br><span class="line"></span><br><span class="line">log-bin = master-log</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# systemctl start mariadb.service     # 启动mariadb</span><br><span class="line">[root@zabbix-server ~]# mysql_secure_installation       # 执行安全优化脚本</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&apos;ll need the current</span><br><span class="line">password for the root user.  If you&apos;ve just installed MariaDB, and</span><br><span class="line">you haven&apos;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none): </span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password: </span><br><span class="line">Re-enter new password: </span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &apos;test&apos; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&apos;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# mysql -phaiyun      </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 6</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server       # 连接成功；</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; \q</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h3 id="安装zabbix"><a href="#安装zabbix" class="headerlink" title="安装zabbix"></a>安装zabbix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# yum install zabbix-server zabbix-web-mysql zabbix-agent zabbix-get zabbix-sender zabbix-web</span><br></pre></td></tr></table></figure><h3 id="为zabbix创建数据库"><a href="#为zabbix创建数据库" class="headerlink" title="为zabbix创建数据库"></a>为zabbix创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# mysql -phaiyun</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 7</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE zbxdb CHARACTER SET &quot;utf8&quot;;       # 为Zabbix创建数据库，注意：创建数据库需要指定字符集为utf8，如果不指定，显示中文界面的zabbix时可能会出问题</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL ON zbxdb.* TO &apos;zbxuser&apos;@&apos;192.168.8.12&apos; IDENTIFIED BY &apos;zbxpass&apos;;     # 授权用户；</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="导入zabbix的sql脚本"><a href="#导入zabbix的sql脚本" class="headerlink" title="导入zabbix的sql脚本"></a>导入zabbix的sql脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# rpm -ql zabbix-server-mysql         </span><br><span class="line">/etc/logrotate.d/zabbix-server</span><br><span class="line">/etc/zabbix/zabbix_server.conf</span><br><span class="line">/usr/lib/systemd/system/zabbix-server.service</span><br><span class="line">/usr/lib/tmpfiles.d/zabbix-server.conf</span><br><span class="line">/usr/lib/zabbix/alertscripts</span><br><span class="line">/usr/lib/zabbix/externalscripts</span><br><span class="line">/usr/sbin/zabbix_server_mysql</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4/AUTHORS</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4/COPYING</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4/ChangeLog</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4/NEWS</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4/README</span><br><span class="line">/usr/share/doc/zabbix-server-mysql-3.4.4/create.sql.gz</span><br><span class="line">/usr/share/man/man8/zabbix_server.8.gz</span><br><span class="line">/var/log/zabbix</span><br><span class="line">/var/run/zabbix</span><br><span class="line">[root@zabbix-server ~]# cp /usr/share/doc/zabbix-server-mysql-3.4.4/create.sql.gz ./</span><br><span class="line">[root@zabbix-server ~]# ls</span><br><span class="line">create.sql.gz</span><br><span class="line">[root@zabbix-server ~]# gzip -d create.sql.gz </span><br><span class="line">[root@zabbix-server ~]# ls</span><br><span class="line">create.sql</span><br><span class="line">[root@zabbix-server ~]# head -20 create.sql </span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">`userid`                 bigint unsigned                           NOT NULL,</span><br><span class="line">`alias`                  varchar(100)    DEFAULT &apos;&apos;                NOT NULL,</span><br><span class="line">`name`                   varchar(100)    DEFAULT &apos;&apos;                NOT NULL,</span><br><span class="line">`surname`                varchar(100)    DEFAULT &apos;&apos;                NOT NULL,</span><br><span class="line">`passwd`                 char(32)        DEFAULT &apos;&apos;                NOT NULL,</span><br><span class="line">`url`                    varchar(255)    DEFAULT &apos;&apos;                NOT NULL,</span><br><span class="line">`autologin`              integer         DEFAULT &apos;0&apos;               NOT NULL,</span><br><span class="line">`autologout`             varchar(32)     DEFAULT &apos;15m&apos;             NOT NULL,</span><br><span class="line">`lang`                   varchar(5)      DEFAULT &apos;en_GB&apos;           NOT NULL,</span><br><span class="line">`refresh`                varchar(32)     DEFAULT &apos;30s&apos;             NOT NULL,</span><br><span class="line">`type`                   integer         DEFAULT &apos;1&apos;               NOT NULL,</span><br><span class="line">`theme`                  varchar(128)    DEFAULT &apos;default&apos;         NOT NULL,</span><br><span class="line">`attempt_failed`         integer         DEFAULT 0                 NOT NULL,</span><br><span class="line">`attempt_ip`             varchar(39)     DEFAULT &apos;&apos;                NOT NULL,</span><br><span class="line">`attempt_clock`          integer         DEFAULT 0                 NOT NULL,</span><br><span class="line">`rows_per_page`          integer         DEFAULT 50                NOT NULL,</span><br><span class="line">PRIMARY KEY (userid)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line">CREATE UNIQUE INDEX `users_1` ON `users` (`alias`);</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# mysql -uzbxuser -pzbxpass -h192.168.8.12 zbxdb &lt; create.sql     # 导入zabbix提供创建表的sql脚本；</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# mysql -uzbxuser -pzbxpass -h192.168.8.12 </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 20</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; USE zbxdb</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [zbxdb]&gt; SHOW TABLES;       # 表已经创建成功；</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_zbxdb            |</span><br><span class="line">+----------------------------+</span><br><span class="line">| acknowledges               |</span><br><span class="line">| actions                    |</span><br><span class="line">| alerts                     |</span><br><span class="line">| 。。。省略部分内容         |</span><br><span class="line">| timeperiods                |</span><br><span class="line">| trends                     |</span><br><span class="line">| trends_uint                |</span><br><span class="line">| trigger_depends            |</span><br><span class="line">| trigger_discovery          |</span><br><span class="line">| trigger_tag                |</span><br><span class="line">| triggers                   |</span><br><span class="line">| users                      |</span><br><span class="line">| users_groups               |</span><br><span class="line">| usrgrp                     |</span><br><span class="line">| valuemaps                  |</span><br><span class="line">| widget                     |</span><br><span class="line">| widget_field               |</span><br><span class="line">+----------------------------+</span><br><span class="line">140 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改zabbix-server配置文件"><a href="#修改zabbix-server配置文件" class="headerlink" title="修改zabbix-server配置文件"></a>修改zabbix-server配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server zabbix]# grep -i &quot;^[^#]&quot; zabbix_server.conf     # 过滤已经修改的配置；</span><br><span class="line">ListenPort=10051</span><br><span class="line">SourceIP=192.168.8.12</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_server.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">DebugLevel=3</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line">SocketDir=/var/run/zabbix</span><br><span class="line">DBHost=192.168.8.12</span><br><span class="line">DBName=zbxdb</span><br><span class="line">DBUser=zbxuser</span><br><span class="line">DBPassword=zbxpass</span><br><span class="line">DBPort=3306</span><br><span class="line">SNMPTrapperFile=/var/log/snmptrap/snmptrap.log</span><br><span class="line">Timeout=4</span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br><span class="line">ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@zabbix-server zabbix]# systemctl start zabbix-server.service          # 启动zabbix-server服务</span><br></pre></td></tr></table></figure><h3 id="修改php配置文件"><a href="#修改php配置文件" class="headerlink" title="修改php配置文件"></a>修改php配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server conf.d]# vim /etc/php.ini       # 修改php时区，此项必须设置；</span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">[root@zabbix-server ~]# systemctl start httpd       # 启动httpd；</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Install-1.gif" title="测试访问"></center><h3 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h3><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Install-2.gif" title="初始化设置"></center><h3 id="登陆zabbix"><a href="#登陆zabbix" class="headerlink" title="登陆zabbix"></a>登陆zabbix</h3><p>默认登陆用户名为<code>admin</code>，密码为<code>zabbix</code></p><center><img src="https://houhaiyun.github.io/img/images/Zabbix-Install-3.gif" title="登陆zabbix"></center>]]></content>
      
      <categories>
          
          <category> 监控 </category>
          
          <category> 安装Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarraiDB安装-yum方式</title>
      <link href="/2017/11/11/MySQL-MariaDB-Install-Yum/"/>
      <url>/2017/11/11/MySQL-MariaDB-Install-Yum/</url>
      <content type="html"><![CDATA[<h3 id="官方yum仓库获取方式"><a href="#官方yum仓库获取方式" class="headerlink" title="官方yum仓库获取方式"></a>官方yum仓库获取方式</h3><p><a href="https://downloads.mariadb.org/mariadb/repositories/" target="_blank" rel="noopener">项目官方：https://downloads.mariadb.org/mariadb/repositories/</a></p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/MySQL-MariaDB-Install-Yum-1.gif" title="官方yum仓库获取方式"></center><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>如果使用<code>yum</code>安装时，有两个<code>yum</code>源，都有<code>mysql</code>包，那么安装时<code>yum</code>会使用版本较高的安装。也可以配置<code>MariaDB</code>官方<code>yum</code>源进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# yum install -y mysql mysql-server     &lt;==安装mysql客户端和服务器端</span><br><span class="line">[root@centos6 ~]# service mysqld start</span><br><span class="line">Starting mysqld:                                           [  OK  ]     &lt;==启动mysql</span><br><span class="line"> [root@centos6 ~]# mysql            &lt;==安装完成后默认root是没有密码的，默认连接用户为root，不安全。</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT USER()            &lt;==查看当前登陆用户</span><br><span class="line">    -&gt; ;</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="提高安全性"><a href="#提高安全性" class="headerlink" title="提高安全性"></a>提高安全性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# mysql_secure_installation         &lt;==此脚本为安装完成mysql，MySQL提供的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In order to log into MySQL to secure it, we&apos;ll need the current</span><br><span class="line">password for the root user.  If you&apos;ve just installed MySQL, and</span><br><span class="line">you haven&apos;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):       &lt;==输入当前root的密码，因为默认root是没有密码的所以直接回车就ok了</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MySQL</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y      &lt;==是否设置root密码</span><br><span class="line">New password:                   &lt;==输入密码</span><br><span class="line">Re-enter new password:          &lt;==再次输入密码</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MySQL installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MySQL without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y     &lt;==是否移除匿名用户</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n       &lt;==是否禁止root用户远程登陆</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named &apos;test&apos; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] n      &lt;==是否移除test数据库</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y            &lt;==是否加载特权表，就是是否生效</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">All done!  If you&apos;ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MySQL!</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# mysql         &lt;==现在我们已经无法使用匿名用户连接了</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br><span class="line">[root@centos6 ~]# mysql -u root -p      &lt;==必须要指定用户和密码才可以登陆</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT USER();</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">[root@centos6 ~]# </span><br><span class="line">[root@centos6 ~]# mysql -uroot -pmagedu         &lt;==也可以使用-p后面直接跟密码</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 12</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br></pre></td></tr></table></figure><h3 id="查看msyql-user表"><a href="#查看msyql-user表" class="headerlink" title="查看msyql.user表"></a>查看msyql.user表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user,host,password FROM mysql.user;</span><br><span class="line">+------+--------------------+-------------------------------------------+</span><br><span class="line">| user | host               | password                                  |</span><br><span class="line">+------+--------------------+-------------------------------------------+</span><br><span class="line">| root | localhost          | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">| root | centos6.haiyun.com | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">| root | 127.0.0.1          | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">+------+--------------------+-------------------------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="mysql-配置"><a href="#mysql-配置" class="headerlink" title="mysql 配置"></a>mysql 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">侦听3306/tcp端口可以在绑定有一个或全部接口IP上</span><br><span class="line">- Vim /etc/my.cnf</span><br><span class="line">    - [mysqld]加一行：</span><br><span class="line">    - skip-networking=1 跳过域名解析，和sshd服务的useDNS相似</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MarraiDB安装-yum方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarraiDB安装-通用二进制方式</title>
      <link href="/2017/11/11/MySQL-MariaDB-Install-Binary/"/>
      <url>/2017/11/11/MySQL-MariaDB-Install-Binary/</url>
      <content type="html"><![CDATA[<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p><code>MariaDB</code>的安装方法大致有以下四种，本例是关于通用二进制（俗称绿色包）格式的压缩文件进行安装。</p><ul><li>系统自带<code>RPM</code>包安装</li><li><code>MariaDB</code>官方自带的<code>rpm</code>包</li><li>通用二进制格式</li><li>源码编译</li></ul><a id="more"></a><h3 id="mariadb下载"><a href="#mariadb下载" class="headerlink" title="mariadb下载"></a>mariadb下载</h3><p><a href="http://mariadb.org/" target="_blank" rel="noopener">官网：http://mariadb.org/</a></p><p>目前最新版本为：10.3.1，稳定版本为：10.2.8</p><p>本次实验使用的版本为：稳定版10.2.8</p><h3 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0. 环境准备"></a>0. 环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# rpm -qa libaio        &lt;==判断系统安装这两个lib包，如果不安装给你这两个lib包在初始化是会报错的</span><br><span class="line">libaio-0.3.109-13.el7.x86_64</span><br><span class="line">libaio-0.3.109-13.el7.i686</span><br><span class="line">[root@centos7 dbdata]# yum install -y libaio.so.1</span><br><span class="line">[root@centos7 mysql]# yum install -y libaio.x86_64 libaio-devel.x86_64</span><br></pre></td></tr></table></figure><h3 id="1-准备用户"><a href="#1-准备用户" class="headerlink" title="1. 准备用户"></a>1. 准备用户</h3><p>mariadb和mysql运行使用的用户都是mysql，所以需要创建mysql用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# getent passwd mysql       &lt;==mysql用户不存在</span><br><span class="line">[root@centos7 ~]# useradd -r -m -d /app/dbdata -s /sbin/nologin mysql       &lt;==创建mysql用户，指定家目录为/app/dbdata，且为系统用户，默认shell为/sbin/nologin无法登陆</span><br><span class="line">[root@centos7 ~]# getent passwd mysql           &lt;==确认用户mysql信息    </span><br><span class="line">mysql: x:997:995::/app/dbdata:/sbin/nologin</span><br><span class="line">[root@centos7 ~]# ll /app/dbdata/ -d            &lt;==查看mysql家目录</span><br><span class="line">drwx------. 2 mysql mysql 62 Sep 25 09:43 /app/dbdata/</span><br></pre></td></tr></table></figure></p><h3 id="2-准备二进制程序"><a href="#2-准备二进制程序" class="headerlink" title="2. 准备二进制程序"></a>2. 准备二进制程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# tar xf mariadb-10.2.8-linux-x86_64.tar.gz -C /usr/local/         &lt;==解压mariadb到/usr/local目录下</span><br><span class="line">[root@centos7 app]# cd /usr/local/      &lt;==切换到/usr/local目录</span><br><span class="line">[root@centos7 local]# ls</span><br><span class="line">bin  games    lib    libexec                      sbin   src</span><br><span class="line">etc  include  lib64  mariadb-10.2.8-linux-x86_64  share</span><br><span class="line">[root@centos7 local]# ln -sv mariadb-10.2.8-linux-x86_64/ mysql     &lt;==创建软链接，名字必须叫mysql</span><br><span class="line">‘mysql’ -&gt; ‘mariadb-10.2.8-linux-x86_64/’</span><br><span class="line">[root@centos7 local]# ls        &lt;==确认软链接已经别创建</span><br><span class="line">bin  games    lib    libexec                      mysql  share</span><br><span class="line">etc  include  lib64  mariadb-10.2.8-linux-x86_64  sbin   src</span><br></pre></td></tr></table></figure><h3 id="3-准备配置文件"><a href="#3-准备配置文件" class="headerlink" title="3. 准备配置文件"></a>3. 准备配置文件</h3><ul><li>配置格式：类<code>ini</code>格式，各程序由单个配置文件提供配<code>[prog_name]</code></li><li>配置文件查找次序：后面覆盖前面的配置文件</li><li><code>/etc/my.cnf</code> –&gt; <code>/etc/mysql/my.cnf</code> –&gt; <code>--default-extrafile=/PATH/TO/CONF_FILE</code> –&gt; <code>~/.my.cnf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 local]# mkdir /etc/mysql      &lt;==创建mysql目录</span><br><span class="line">[root@centos7 mysql]# cp /usr/local/mariadb-10.2.8-linux-x86_64/support-files/my-huge.cnf /etc/mysql/my.cnf           &lt;==cpmysql配置文件</span><br><span class="line">[root@centos7 mysql]# vim /etc/mysql/my.cnf     &lt;==编辑配置文件，添加一下三行，在[mysqld]后面</span><br><span class="line">[mysqld]            </span><br><span class="line">datadir = /app/dbdata       &lt;==指定数据库文件路径，必须指定为/app/dbdata</span><br><span class="line">innodb_file_per_table = on  &lt;==使用innodb引擎，每个表都是一个独立的文件</span><br><span class="line">skip_name_resolve = on      &lt;==禁止主机名解析</span><br></pre></td></tr></table></figure><h3 id="4-创建数据库文件"><a href="#4-创建数据库文件" class="headerlink" title="4. 创建数据库文件"></a>4. 创建数据库文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ls /app/dbdata/           &lt;==没有文件</span><br><span class="line">[root@centos7 mysql]# ./scripts/mysql_install_db --help     &lt;==查看此脚本的帮助信息，此脚本是用于创建数据库文件的脚本，创建数据库文件相当于初始化</span><br><span class="line">Usage: ./scripts/mysql_install_db [OPTIONS]</span><br><span class="line">  --auth-root-authentication-method=normal|socket</span><br><span class="line">                       Chooses the authentication method for the created initial</span><br><span class="line">                       root user. The default is &apos;normal&apos; to creates a root user</span><br><span class="line">                       that can login without password, which can be insecure.</span><br><span class="line">                       The alternative &apos;socket&apos; allows only the system root user</span><br><span class="line">                       to login as MariaDB root; this requires the unix socket</span><br><span class="line">                       authentication plugin.</span><br><span class="line">  --auth-root-socket-user=user</span><br><span class="line">                       Used with --auth-root-authentication-method=socket. It</span><br><span class="line">                       specifies the name of the MariaDB root account, as well</span><br><span class="line">                       as of the system account allowed to access it. Defaults</span><br><span class="line">                       to &apos;root&apos;.</span><br><span class="line">  --basedir=path       The path to the MariaDB installation directory.</span><br><span class="line">  --builddir=path      If using --srcdir with out-of-directory builds, you</span><br><span class="line">                       will need to set this to the location of the build</span><br><span class="line">                       directory where built files reside.</span><br><span class="line">  --cross-bootstrap    For internal use.  Used when building the MariaDB system</span><br><span class="line">                       tables on a different host than the target.</span><br><span class="line">  --datadir=path       The path to the MariaDB data directory.</span><br><span class="line">  --defaults-extra-file=name</span><br><span class="line">                       Read this file after the global files are read.</span><br><span class="line">  --defaults-file=name Only read default options from the given file name.</span><br><span class="line">  --force              Causes mysql_install_db to run even if DNS does not</span><br><span class="line">                       work.  In that case, grant table entries that</span><br><span class="line">                       normally use hostnames will use IP addresses.</span><br><span class="line">  --help               Display this help and exit.                     </span><br><span class="line">  --ldata=path         The path to the MariaDB data directory. Same as</span><br><span class="line">                       --datadir.</span><br><span class="line">  --no-defaults        Don&apos;t read default options from any option file.</span><br><span class="line">  --defaults-file=path Read only this configuration file.</span><br><span class="line">  --rpm                For internal use.  This option is used by RPM files</span><br><span class="line">                       during the MariaDB installation process.</span><br><span class="line">  --skip-auth-anonymous-user</span><br><span class="line">                       Do not install an unprivileged anonymous user.</span><br><span class="line">  --skip-name-resolve  Use IP addresses rather than hostnames when creating</span><br><span class="line">                       grant table entries.  This option can be useful if</span><br><span class="line">                       your DNS does not work.</span><br><span class="line">  --srcdir=path        The path to the MariaDB source directory.  This option</span><br><span class="line">                       uses the compiled binaries and support files within the</span><br><span class="line">                       source tree, useful for if you don&apos;t want to install</span><br><span class="line">                       MariaDB yet and just want to create the system tables.</span><br><span class="line">  --user=user_name     The login username to use for running mysqld.  Files</span><br><span class="line">                       and directories created by mysqld will be owned by this</span><br><span class="line">                       user.  You must be root to use this option.  By default</span><br><span class="line">                       mysqld runs using your current login name and files and</span><br><span class="line">                       directories that it creates will be owned by you.</span><br><span class="line"></span><br><span class="line">All other options are passed to the mysqld program</span><br><span class="line"></span><br><span class="line">[root@centos7 mysql]# ./scripts/mysql_install_db --datadir=/app/dbdata --user=mysql        &lt;==指定mysql数据存储目录为/app/dbdata，用户为mysql</span><br><span class="line">Installing MariaDB/MySQL system tables in &apos;/app/dbdata&apos; ...</span><br><span class="line">2017-09-25 11:02:27 140386981918528 [Warning] &apos;THREAD_CONCURRENCY&apos; is deprecated and will be removed in a future release.</span><br><span class="line">2017-09-25 11:02:30 140386857879296 [Warning] Failed to load slave replication state from table mysql.gtid_slave_pos: 1146: Table &apos;mysql.gtid_slave_pos&apos; doesn&apos;t exist</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">&apos;./bin/mysqladmin&apos; -u root password &apos;new-password&apos;</span><br><span class="line">&apos;./bin/mysqladmin&apos; -u root -h centos7.haiyun.com password &apos;new-password&apos;</span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">&apos;./bin/mysql_secure_installation&apos;</span><br><span class="line"></span><br><span class="line">which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">See the MariaDB Knowledgebase at http://mariadb.com/kb or the</span><br><span class="line">MySQL manual for more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MariaDB daemon with:</span><br><span class="line">cd &apos;.&apos; ; ./bin/mysqld_safe --datadir=&apos;/app/dbdata&apos;</span><br><span class="line"></span><br><span class="line">You can test the MariaDB daemon with mysql-test-run.pl</span><br><span class="line">cd &apos;./mysql-test&apos; ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems at http://mariadb.org/jira</span><br><span class="line"></span><br><span class="line">The latest information about MariaDB is available at http://mariadb.org/.</span><br><span class="line">You can find additional information about the MySQL part at:</span><br><span class="line">http://dev.mysql.com</span><br><span class="line">Consider joining MariaDB&apos;s strong and vibrant community:</span><br><span class="line">https://mariadb.org/get-involved/</span><br><span class="line"></span><br><span class="line">at http://mariadb.org/jira</span><br><span class="line">[root@centos7 mysql]# ls /app/dbdata/       &lt;==可以看到文件已经生成</span><br><span class="line">aria_log.00000001  ibdata1      mysql             mysql-bin.state</span><br><span class="line">aria_log_control   ib_logfile0  mysql-bin.000001  performance_schema</span><br><span class="line">ib_buffer_pool     ib_logfile1  mysql-bin.index   test</span><br></pre></td></tr></table></figure><h3 id="5-准备服务脚本"><a href="#5-准备服务脚本" class="headerlink" title="5. 准备服务脚本"></a>5. 准备服务脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# pwd</span><br><span class="line">/usr/local/mysql</span><br><span class="line">[root@centos7 mysql]# cp support-files/mysql.server /etc/init.d/mysqld </span><br><span class="line">[root@centos7 mysql]# chkconfig --list</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      &apos;systemctl list-dependencies [target]&apos;.</span><br><span class="line"></span><br><span class="line">netconsole     0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line">network        0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">[root@centos7 mysql]# chkconfig --add mysqld</span><br><span class="line">[root@centos7 mysql]# chkconfig --list</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      &apos;systemctl list-dependencies [target]&apos;.</span><br><span class="line"></span><br><span class="line">mysqld         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">netconsole     0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line">network        0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">[root@centos7 mysql]# chkconfig mysqld on</span><br></pre></td></tr></table></figure><h3 id="6-准备日志文件"><a href="#6-准备日志文件" class="headerlink" title="6. 准备日志文件"></a>6. 准备日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# service mysqld start</span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br><span class="line">[root@centos7 mysql]# setfacl -m u:mysql:rwx /var/log/</span><br><span class="line">[root@centos7 mysql]# service mysqld start</span><br><span class="line">Starting mysqld (via systemctl):  Job for mysqld.service failed because the control process exited with error code. See &quot;systemctl status mysqld.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">                                                           [FAILED]</span><br><span class="line">[root@centos7 mysql]# mkdir /var/log/mariadb        &lt;==创建日志目录</span><br><span class="line">[root@centos7 mysql]# touch /var/log/mariadb/mariadb.log    &lt;==穿件日志文件</span><br><span class="line">[root@centos7 mysql]# setfacl -R -m u:mysql:rwx /var/log/mariadb        &lt;==设置acl使mysql用户对/var/log/mariadb目录有权限</span><br></pre></td></tr></table></figure><h3 id="7-设置环境变量"><a href="#7-设置环境变量" class="headerlink" title="7. 设置环境变量"></a>7. 设置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# vim /etc/profile.d/mysql.sh</span><br><span class="line">export PATH=/usr/local/mysql/bin/:$PATH</span><br><span class="line">[root@centos7 mysql]# source /etc/profile.d/mysql.sh    &lt;==同步环境变量到本地</span><br><span class="line">[root@centos7 mysql]# echo $PATH</span><br><span class="line">/usr/local/mysql/bin/:/usr/local/mysql/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><h3 id="8-连接数据库测试"><a href="#8-连接数据库测试" class="headerlink" title="8. 连接数据库测试"></a>8. 连接数据库测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# mysql</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 12</span><br><span class="line">Server version: 10.2.8-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SELECT USER();</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="9-安全初始化"><a href="#9-安全初始化" class="headerlink" title="9. 安全初始化"></a>9. 安全初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# mysql_secure_installation         &lt;==如果没有此安全初始化脚本，可能是环境变量的问题</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&apos;ll need the current</span><br><span class="line">password for the root user.  If you&apos;ve just installed MariaDB, and</span><br><span class="line">you haven&apos;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none): </span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password: </span><br><span class="line">Re-enter new password: </span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &apos;test&apos; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&apos;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br></pre></td></tr></table></figure><h3 id="10-优化后连接"><a href="#10-优化后连接" class="headerlink" title="10. 优化后连接"></a>10. 优化后连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# mysql         &lt;==优化后就无法连接了</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br><span class="line">[root@centos7 mysql]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 19</span><br><span class="line">Server version: 10.2.8-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MarraiDB安装-通用二进制方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL</title>
      <link href="/2017/11/11/MySQL/"/>
      <url>/2017/11/11/MySQL/</url>
      <content type="html"><![CDATA[<h3 id="什么是MySQL？"><a href="#什么是MySQL？" class="headerlink" title="什么是MySQL？"></a>什么是MySQL？</h3><p><code>MySQL</code>是一个关系型数据库管理系统，由瑞典 <code>MySQL AB</code> 公司开发，目前属于 <code>Oracle</code> 旗下公司。<code>MySQL</code> 最流行的关系型数据库管理系统，在 <code>WEB</code> 应用方面 <code>MySQL</code> 是最好的 RDBMS应用软件之一。<code>MySQL</code> 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<code>MySQL</code> 所使用的 <code>SQL</code> 语言是用于访问数据库的最常用标准化语言。<code>MySQL</code> 软件采用了双授权政策（本词条“授权政策”），它分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。由于其社区版的性能卓越，搭配 <code>PHP</code> 和 <code>Apache</code> 可组成良好的开发环境。</p><a id="more"></a><h3 id="MySQL数据库实现模型"><a href="#MySQL数据库实现模型" class="headerlink" title="MySQL数据库实现模型"></a>MySQL数据库实现模型</h3><center><img src="https://houhaiyun.github.io/img/images/MySQL-1.jpg" title="MySQL架构"></center><p><strong>通过上图可以把数据库操作分为以下四个阶段：</strong></p><ol><li>用户通过本地或网络使用C、PHP等多种开发语言开发的接口连接MySQL数据库服务器。</li><li>用户接入服务器后进入连接池，在连接池中实现用户认证、线程重用、并发连接数限制、内存检测、连接缓存等操作，而后数据处理结果进入下一层面，接受用户输入的指令，结合SQL接口，分析器，优化器，缓存缓存管理器，将指令处理后发送给数据库引擎完成数据库管理、维护、集群、配置等操作。</li><li>数据库引擎接收到其能支持的数据处理命令后，对数据执行响应的查询、修改等操作，数据库引擎是直接数据处理层面。</li><li>物理存储层面，数据的最终存储位置，根据数据库引擎的处理以索引顺序或者堆文件存储模式存储底层数据。</li></ol><p><strong>上图中的部分组件介绍：</strong></p><ol><li><code>Connectors</code>：是连接<code>mysql</code>的各种客户端和接口。</li><li><code>Connection Pool</code>：用于创建用户连接，缓存连接线程，做连接池。还有鉴权、进行身份验证、线程重用、连接限制、检查内存、数据缓存、管理用户的连接，线程处理等需要缓存的需求。</li><li><code>Management Serveices &amp; Utilities</code>：系统管理和控制工具备份和恢复的安全性，复制、集群、管理、配置和迁移元数据。</li><li><code>SQL Interface</code>：<code>SQL</code>接口，接受用户的SQL命令，并且返回用户需要查询的结果。比如<code>select from</code>就是调用<code>SQL Interface</code>。进行<code>DML</code>、<code>DDL</code>、存储过程、视图、触发器等操作和管理；用户通过<code>SQL</code>命令查询所需结果。</li><li><code>Parser</code>：解释器，<code>SQL</code>命令传递到解析器的时候会被解析器验证和解析。解析器是由<code>Lex</code>和<code>YACC</code>实现的，是一个很长的脚本。主要功能：<ol><li>将<code>SQL</code>语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的</li><li>如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的</li></ol></li><li><code>Optimizer</code>：查询优化器 <code>SQL</code>语句在查询之前会使用查询优化器对查询进行优化。它使用的是“选取-投影-联接”策略进行查询。<ul><li>用一个例子就可以理解： <code>select uid,name from user where gender = 1</code>;这个<code>select</code> 查询先根据<code>where</code> 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤，这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤将这两个查询条件联接起来生成最终查询结果</li></ul></li><li><code>Cache</code>和<code>Buffer</code>：查询缓存，如果查询缓存有命中的查询结果，查询语法就可以直接去查村缓存中读取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，<code>key</code>缓存，权限缓存等。</li><li><code>Engine</code>：存储引擎：存储引擎是<code>Mysql</code>中具体的与文件打交道的子系统。也就是Mysql最具有特色的一个地方。<code>Mysql</code>的存储引擎是插件式的它根据<code>Mysql AB</code>公司提供的文件访问层的一个抽象接口来定制一种文件访问机制（这种访问机制就叫存储引擎）现在有很多种存储引擎，各个引擎的优势各不一样，最常用的<code>MyISAM</code>,<code>InnoDB</code>,<code>NDB</code>,<code>Archive</code>,<code>Federated</code>,<code>Memory</code>,<code>Merge</code>,<code>Partner</code>,<code>Community</code>,<code>Custom</code>等等。</li></ol><h3 id="系统特性"><a href="#系统特性" class="headerlink" title="系统特性"></a>系统特性</h3><ul><li>使用 <code>C</code>和 <code>C++</code>编写，并使用了多种编译器进行测试，保证了源代码的可移植性。 </li><li>支持 <code>AIX</code>、<code>FreeBSD</code>、<code>HP-UX</code>、<code>Linux</code>、<code>Mac OS</code>、<code>NovellNetware</code>、<code>OpenBSD</code>、<code>OS/2 Wrap</code>、<code>Solaris</code>、<code>Windows</code>等多种操作系统。 </li><li>为多种编程语言提供了 <code>API</code>。这些编程语言包括 <code>C</code>、<code>C++</code>、<code>Python</code>、<code>Java</code>、<code>Perl</code>、<code>PHP</code>、<code>Eiffel</code>、<code>Ruby</code>、<code>.NET</code>和 <code>Tcl</code> 等。 </li><li>支持多线程，充分利用 <code>CPU</code> 资源。 </li><li>优化的 <code>SQL</code>查询算法，有效地提高查询速度。 </li><li>既能够作为一个单独的应用程序应用在客户端服务器网络环境中，也能够作为一个库而嵌入到其他的软件中。 </li><li>提供多语言支持，常见的编码如中文的 <code>GB 2312</code>、<code>BIG5</code>，日文的 <code>Shift_JIS</code>等都可以用作数据表名和数据列名。 </li><li>提供 <code>TCP/IP</code>、<code>ODBC</code> 和 <code>JDBC</code>等多种数据库连接途径。 </li><li>提供用于管理、检查、优化数据库操作的管理工具。 </li><li>支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 </li><li>支持多种存储引擎。 </li><li><code>MySQL</code> 是开源的，所以你不需要支付额外的费用。 </li><li><code>MySQL</code> 使用标准的 <code>SQL</code>数据语言形式。 </li><li><code>MySQL</code> 对 <code>PHP</code> 有很好的支持，<code>PHP</code>是目前最流行的 <code>Web</code> 开发语言。 </li><li><code>MySQL</code>是可以定制的，采用了 <code>GPL</code>协议，你可以修改源码来开发自己的 <code>MySQL</code> 系统。 </li><li>在线 <code>DDL</code>/更改功能，数据架构支持动态应用程序和开发人员灵活性（5.6新增） </li><li>复制全局事务标识，可支持自我修复式集群（5.6新增） </li><li>复制无崩溃从机，可提高可用性（5.6新增） </li><li>复制多线程从机，可提高性能（5.6新增）</li></ul><h3 id="应用环境组合"><a href="#应用环境组合" class="headerlink" title="应用环境组合"></a>应用环境组合</h3><p>与其他的大型数据库例如 <code>Oracle</code>、<code>DB2</code>、<code>SQL Server</code>等相比，<code>MySQL</code> 自有它的不足之处，但是这丝毫也没有减少它受欢迎的程度。对于一般的个人使用者和中小型企业来说，MySQL提供的功能已经绰绰有余，而且由于 <code>MySQ L</code>是开放源码软件，因此可以大大降低总体拥有成本。<code>Linux</code>作为操作系统，<code>Apache</code>和 <code>Nginx</code>作为 <code>Web</code> 服务器，<code>MySQL</code> 作为数据库，<code>PHP</code>/<code>Perl</code>/<code>Python</code>作为服务器端脚本解释器。由于这四个软件都是免费或开放源码软件（<code>FLOSS</code>)，因此使用这种方式不用花一分钱（除开人工成本）就可以建立起一个稳定、免费的网站系统，被业界称为<code>“LAMP“</code>或<code>“LNMP”</code>组合。</p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li><code>MyISAM</code>在<code>MySQL 5.0</code> 之前是默认数据库引擎，最为常用。拥有较高的插入，查询速度，但不支持事务 </li><li><code>InnoDB</code>事务型数据库的首选引擎，支持ACID事务，支持行级锁定, <code>MySQL 5.5</code> 起成为默认数据库引擎 </li><li><code>BDB</code>源 自 <code>Berkeley DB</code>，事务型数据库的另一种选择，支持<code>Commit</code> 和<code>Rollback</code> 等其他事务特性 </li><li><code>Memory</code>所有数据置于内存的存储引擎，拥有极高的插入，更新和查询效率。但是会占用和数据量成正比的内存空间。并且其内容会在 <code>MySQL</code> 重新启动时丢失 </li><li><code>Merge</code>将一定数量的 <code>MyISAM</code> 表联合而成一个整体，在超大规模数据存储时很有用 </li><li><code>Archive</code>非常适合存储大量的独立的，作为历史记录的数据。因为它们不经常被读取。<code>Archive</code> 拥有高效的插入速度，但其对查询的支持相对较差 </li><li><code>Federated</code>将不同的 <code>MySQL</code> 服务器联合起来，逻辑上组成一个完整的数据库。非常适合分布式应用 </li><li><code>Cluster</code>/<code>NDB</code>高冗余的存储引擎，用多台数据机器联合提供服务以提高整体性能和安全性。适合数据量大，安全和性能要求高的应用 </li><li><code>CSV</code>： 逻辑上由逗号分割数据的存储引擎。它会在数据库子目录里为每个数据表创建一个 <code>.csv</code> 文件。这是一种普通文本文件，每个数据行占用一个文本行。<code>CSV</code> 存储引擎不支持索引。 </li><li><code>BlackHole</code>：黑洞引擎，写入的任何数据都会消失，一般用于记录 <code>binlog</code>做复制的中继 </li><li><code>EXAMPLE</code> 存储引擎是一个不做任何事情的存根引擎。它的目的是作为 <code>MySQL</code> 源代码中的一个例子，用来演示如何开始编写一个新存储引擎。同样，它的主要兴趣是对开发者。<code>EXAMPLE</code> 存储引擎不支持编索引。</li></ul><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p><code>ACID</code>，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（<code>Atomicity</code>）、一致性（<code>Consistency</code>）、隔离性（<code>Isolation</code>）、持久性（<code>Durability</code>）。一个支持事务（<code>Transaction</code>）的数据库，必需要具有这四种特性，否则在事务过程（Transaction <code>processing</code>）当中无法保证数据的正确性，交易过程极可能达不到交易方的要求。</p><ul><li>原子性<ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（<code>Rollback</code>）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul></li><li>一致性<ul><li>在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。具体来说就是，比如表与表之间存在外键约束关系，那么你对数据库进行的修改操作就必需要满足约束条件，即如果你修改了一张表中的数据，那你还需要修改与之存在外键约束关系的其他表中对应的数据，以达到一致性。</li></ul></li><li>隔离性<ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul></li><li>持久性<ul><li>在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。 由于一项操作通常会包含许多子操作，而这些子操作可能会因为硬件的损坏或其他因素产生问题，要正确实现<code>ACID</code>并不容易。<code>ACID</code>建议数据库将所有需要更新以及修改的资料一次操作完毕，但实际上并不可行。 </li></ul></li></ul><p> 目前主要有两种方式实现<code>ACID</code>：第一种是<code>Write ahead logging</code>，也就是日志式的方式。第二种是<code>Shadow paging</code>。</p><h3 id="MySQL替代产品"><a href="#MySQL替代产品" class="headerlink" title="MySQL替代产品"></a>MySQL替代产品</h3><p>随着 <code>MySQL</code> 被 <code>Oracle</code> 收购，<code>MySQL</code> 的用户和开发者开始质疑开源数据库的命运，与此同时他们开始寻找替代品。</p><ul><li><code>MariaDB</code>：从 <code>MySQL</code> 转向 <code>MariaDB</code>的代表厂家：谷歌（2013年9月）、<code>RedHat</code>（2013年6月）、维基百科（2013年4月） 。<code>MariaDB</code>如同 <code>MySQL</code> 的影子版本，<code>MariaDB</code>是 <code>MySQL</code> 的一个分支版本（<code>branch</code>），而不是衍生版本（<code>folk</code>），提供的功能可和 <code>MySQL</code> 完全兼容。 </li><li><code>PostgreSQL</code>：从 <code>MySQL</code> 转向 <code>PostgreSQL</code>的代表厂家：苹果（2011年） 。</li><li><code>NoSQL</code>：(<code>NoSQL</code> = <code>Not Only SQL</code>)，意即 <strong>不仅仅是 SQL</strong> ，是一项全新的数据库革命性运动。<code>NoSQL</code>指的是非关系型的数据库。</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.jianshu.com/p/bc66ab95717c" target="_blank" rel="noopener">简书：mysql的架构</a></p><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>目前流行的开源RDBMS</title>
      <link href="/2017/11/11/MySQL-Liuxing-Database/"/>
      <url>/2017/11/11/MySQL-Liuxing-Database/</url>
      <content type="html"><![CDATA[<h3 id="WebScaleSQL"><a href="#WebScaleSQL" class="headerlink" title="WebScaleSQL"></a>WebScaleSQL</h3><p>2015年1月20日，<code>Facebook</code>宣布阿里巴巴旗下的阿里云RDS团队正式加入<code>WebScaleSQL</code>。<code>WebScaleSQL</code>是<code>Facebook</code>、 <code>Google</code>、<code>Twitter</code>和<code>Linkedin</code>四家公司的<code>MySQL</code>团队发起的<code>MySQL</code>开源组织，旨在改进<code>MySQL</code>在规模和性能等方面的问题。<code>WebScaleSQL</code>是基于<code>MySQL 5.6</code> 社区版本改编的<code>MySQL</code>通用分支，基于<code>GPL</code>开源协议发布。<code>WebScaleSQL</code>目前已经做了很多性能改进工作，包括：客户端异步协调、逻辑预读、查询限流、服务端线程池优化、InnoDB大页支持等等。由于我们的分支上本身有一些定制化的需求，因此不会直接使用<code>WebScaleSQL</code>分支提供线上服务，但是这些改进对于我们都是很感兴趣的，好的特性会被吸收进来。因为我们有各种各样应用场景的用户，对<code>MySQL</code>本身的要求也比较高。比如大并发连接的用户，就需要线程池；存大量历史数据的用户，就要求高的压缩比等等。通过这可以看出虽然<code>WebScaleSQL</code>诞生时间较晚，但是其维护力量可以说是很强大的，最后用一句话概括：这款数据库就是专门为<code>web</code>服务设计的数据库。</p><a id="more"></a><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><p><code>PostgreSQL</code>是以加州大学伯克利分校计算机系开发的 <code>POSTGRES</code>，现在已经更名为<code>PostgreSQL</code>，版本 4.2为基础的对象关系型数据库管理系统（<code>ORDBMS</code>）。<code>PostgreSQL</code>支持大部分 <code>SQL</code>标准并且提供了许多其他现代特性：复杂查询、外键、触发器、视图、事务完整性、<code>MVCC</code>。同样，<code>PostgreSQL</code> 可以用许多方法扩展，比如， 通过增加新的数据类型、函数、操作符、聚集函数、索引。免费使用、修改、和分发 <code>PostgreSQL</code>，不管是私用、商用、还是学术研究使用。</p><h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p><code>SQLite</code>，是一款轻型的数据库，是遵守<code>ACID</code>的关系型数据库管理系统，它包含在一个相对小的<code>C</code>库中。它是<code>D.RichardHipp</code>建立的公有领域项目。它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百<code>K</code>的内存就够了。它能够支持<code>Windows</code>/<code>Linux</code>/<code>Unix</code>等等主流的操作系统，同时能够跟很多程序语言相结合，比如 <code>Tcl</code>、<code>C#</code>、<code>PHP</code>、<code>Java</code>等，还有<code>ODBC</code>接口，同样比起<code>Mysql</code>、<code>PostgreSQL</code>这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。<code>SQLite</code>第一个<code>Alpha</code>版本诞生于2000年5月。 至2015年已经有15个年头，<code>SQLite</code>也迎来了一个版本 <code>SQLite 3</code>已经发布。</p><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p><code>MariaDB</code>数据库管理系统是<code>MySQL</code>的一个分支，主要由开源社区在维护，采用<code>GPL</code>授权许可 <code>MariaDB</code>的目的是完全兼容<code>MySQL</code>，包括<code>API</code>和命令行，使之能轻松成为<code>MySQL</code>的代替品。在存储引擎方面，使用<code>XtraDB</code>（英语：<code>XtraDB</code>）来代替<code>MySQL</code>的<code>InnoDB</code>。 <code>MariaDB</code>由<code>MySQL</code>的创始人<code>Michael Widenius</code>（英语：<code>Michael Widenius</code>）主导开发，他早前曾以10亿美元的价格，将自己创建的公司<code>MySQL AB</code>卖给了<code>SUN</code>，此后，随着<code>SUN</code>被甲骨文收购，<code>MySQL</code>的所有权也落入<code>Oracle</code>的手中。<code>MariaDB</code>名称来自<code>Michael Widenius</code>的女儿<code>Maria</code>的名字。</p><p><code>MariaDB</code>基于事务的<code>Maria</code>存储引擎，替换了<code>MySQL</code>的<code>MyISAM</code>存储引擎，它使用了<code>Percona</code>的 <code>XtraDB</code>，I<code>nnoDB</code>的变体，分支的开发者希望提供访问即将到来的<code>MySQL 5.4 InnoDB</code>性能。这个版本还包括了 <code>PrimeBase XT (PBXT)</code> 和 <code>FederatedX</code>存储引擎。</p><p>说在最后，目前由于<code>MySQL</code>是属于<code>Oracle</code>公司的一款产品，而<code>Oracle</code>有将<code>MySQL</code>闭源的潜在风险，现在有很多大公司已经弃用<code>MySQL</code>，而<code>MariaDB</code>就是由<code>MySQL</code>之父<code>Michael</code>领头设计出来的一款开源数据库。确切来讲<code>MariaDB</code>是<code>MySQL</code>的分支版，而且整合了开源社区的很多东西，所以这款产品可以说就是<code>MySQL</code>的替代产品。由于其完全兼容<code>MySQL</code>所以今后演示就用<code>MariaDB</code>进行演示，而所有理论上的概念还是以<code>MySQL</code>为基础。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 目前流行的开源RDBMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关系型数据概念</title>
      <link href="/2017/11/11/MySQL-Guanxi-Database/"/>
      <url>/2017/11/11/MySQL-Guanxi-Database/</url>
      <content type="html"><![CDATA[<h3 id="RDBMS（关系型数据库管理系统）术语"><a href="#RDBMS（关系型数据库管理系统）术语" class="headerlink" title="RDBMS（关系型数据库管理系统）术语"></a>RDBMS（关系型数据库管理系统）术语</h3><ul><li><code>Database</code>：数据库是一个表的集合，与相关的数据。 </li><li><code>Table</code>： 一个表的数据是一个矩阵。在一个数据库中的表看起来像一个简单的电子表格。 </li><li><code>Column</code>： 一列（数据元素）包含的是同一个样的数据，例如列邮政编码。 </li><li><code>Row</code>： 行（元组，进入或记录）是一组相关的数据，例如一个订阅的数据。 </li><li><code>Redundancy</code>： 存储数据的两倍，冗余，使系统速度更快。 </li><li><code>Primary Key</code>：  主键是唯一的。一个关键值可以在一个表中不能出现两次。使用<code>key</code>我们可以在大多数行找到。 </li><li><code>Foreign Key</code>： 外键是两个表之间的链接杆。 </li><li><code>Compound Key</code>： 复合键（组合键）是一个重要的，由多个列，一列是因为并非十分独特。 </li><li><code>Index</code>：在一个数据库中的索引类似于在一本书的背面的一个索引。 </li><li><code>Referential Integrity</code>：参照完整性可以确保一个外键的值总是指向一个现有的行。</li></ul><a id="more"></a><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ol><li><p>关系型数据库可以简单的理解为二维数据库，表格式类似于<code>excel</code>表格，我们平时我接触的数据据，一般都是关系型数据库。</p></li><li><p>关系型数据库不是唯一的高级数据库模型，也不是最优的一种，但是，关系型数据库是现今使用最广泛、最易于理解和使用的数据库模型。</p></li></ol><ul><li>关系：可以理解成一张二维表，每个关系都有一个关系名，即表名。</li><li>元组：可以理解成二维表中的一行，在数据库中常被称作记录。 </li><li>属性：可以理解成二维表中的一列，在数据库中常被成为字段。 </li><li>域：属性的取值范围，也是数据库中某一列的取值限制。 </li><li>关键字：一组可以唯一标识元组的属性。数据库中常称为主键有一个或多个列组成。 </li><li>关系模式：对关系的描述，在数据库中通常称之为表结构。 </li></ul><h4 id="关系型数据库特点"><a href="#关系型数据库特点" class="headerlink" title="关系型数据库特点"></a>关系型数据库特点</h4><ul><li><strong>容易理解</strong>：二维表结构是非常贴近逻辑世界的一个概念，相对与网状、层次以及其它模型更容易理解。</li><li><strong>使用方便</strong>：通过SQL语言程序员和数据管理员可以很方便的在逻辑层面操作数据库而不必理解其底层实现。</li><li><strong>易于维护</strong>：丰富的完整性（实体完整性、参照完整性、用户自定义完整性）降低数据冗余和数据不一致的概率。    </li></ul><h4 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h4><ul><li>数据查询：选择、投影、连接、并、交、差、除</li><li>数据操作：增加、删除、修改、查询</li></ul><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p><code>SQL</code>(<code>Structured Query Language</code>)：结构化查询语言，一种特殊目的的编程语言，数据库查询和程序设计语言，用于存储数据以及查询、更新和管理关系型数据库。</p><p><strong>SQL查询语言组成部分</strong></p><ul><li><code>DDL</code>(<code>Data Definition Languages</code>)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等数据库的对象定义。常用关键字主要包括<code>create</code>、<code>drop</code>、<code>alter</code>等。</li><li><code>DML</code>(<code>Data Manipulation Language</code>)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性。常用关键字包括<code>insert</code>、<code>delete</code>、<code>update</code>和<code>select</code>等。</li><li><code>DCL</code>(<code>Data Control Language</code>)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句，用于定义数据库、表、字段、用户的访问权限和安全级别。常用关键字有<code>grant</code>、<code>revoke</code>等。</li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p><code>SQL</code>标准定义了4类隔离级，包括了一些具体规则，用来限定事务内外的哪些改变时可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p><ul><li><code>READ UNCOMMITTED</code>(读取未提交内容) <ul><li>在<code>READ UNCOMMITTED</code>隔离级，所有事务都可以“看到”未提交事务的执行结果。在这种级别上，可能会产生很多问题。本隔离级很少用于实际应用，因为它的性能也不比其他级别好多少，而别的级别还有其他更多的优点。读取未提交数据，也被称之为<code>“脏读(Dirty Read)”</code></li></ul></li><li><code>READ COMMITTED</code>(读取提交内容) <ul><li>大多数数据库系统的默认隔离级是<code>READ COMMITTED</code>(但这不是<code>MYSQL</code>默认的)。它满足了隔离的早先简单定义：一个事务在开始时，只能“看见”已经提交事务所做的改变，一个事务从开始到提交前，所做的任何数据改变都是不可见的，除非已经提交。这种隔离级别也支持所谓的“不可重复读(<code>Nonrepeatable Read</code>)”。这意味着用户运行同一语句两次，看到的结果是不同的。</li></ul></li><li><code>REPEATABLE READ</code>(可重读) <ul><li><code>REPEATABLE READ</code> 隔离级解决了<code>READ UNCOMMITTED</code>隔离级导致的问题。它确保同一事务的多个实例在并发读取数据时，会“看到相同的”数据行。不过理论上，这会导致另一个棘手问题：幻读(<code>Phantom Read</code>)。简单来说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影”行。<code>InnoDB</code>和<code>Falcon</code>存储引擎通过多版本并发控制机制解决了幻读问题。 <code>REPEATABLE READ</code> 是<code>MYSQL</code>的默认事务隔离级。<code>InnoDB</code>和<code>Falcon</code>存储引擎都遵循这种设置。</li></ul></li><li><code>SERIALIZABLE</code>(可串行化) <ul><li><code>SERIALIZABLE</code>是最高级别的隔离级，它通过强制事务排斥，使之不可能相互冲突，从而解决幻读问题。简言之，<code>SERIALIZABLE</code>是在每个读的数据行上加锁。在这个级别，可能导致大量的超时现象和锁竞争现象。很少看到有用户选择这种隔离级。</li></ul></li></ul><p><strong>注</strong> ：不可重复读与幻读：不可重复读的重点是修改(同样的查询条件，你读取过的数据，再次读取出来发现值不一样了);幻读的重点在于新增或者删除(同样的查询条件，第1次和第2次读出来的记录数不一样)</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>就是使用时间戳或者事务<code>ID</code>来控制数据的多版本</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 关系型数据概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计关系数据库的范式基础概念</title>
      <link href="/2017/11/11/MySQL-Fanshi/"/>
      <url>/2017/11/11/MySQL-Fanshi/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数据库管理系统：<code>DBMS</code>(<code>Datebase Management System</code>)。是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库。</p><a id="more"></a><p><code>RDBMS</code>即关系数据库管理系统(<code>Relational Database Management System</code>)，是将数据组织为相关的行和列的系统，而管理关系数据库的计算机软件就是关系数据库管理系统，常用的数据库软件有<code>Oracle</code>、<code>SQL Server</code>等。</p><h3 id="RDMBS设计范式基础概念"><a href="#RDMBS设计范式基础概念" class="headerlink" title="RDMBS设计范式基础概念"></a>RDMBS设计范式基础概念</h3><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（<code>1NF</code>）、第二范式（<code>2NF</code>）、第三范式（<code>3NF</code>）、巴德斯科范式（<code>BCNF</code>）、第四范式(<code>4NF</code>）和第五范式（<code>5NF</code>，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(<code>3NF</code>）即可。</p><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。<strong>除去同类型的字段，就是无重复的列（域或字段）</strong></p><h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p><strong>第二范式必须先满足第一范式</strong>，<strong>要求表中的每个行必须可以被唯一地区分</strong>。通常为表加上一个列，以存储各个实例的唯一标识PK。非PK的字段需要与整个PK有直接相关性</p><h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p><strong>满足第三范式必须先满足第二范式。一个数据库表中不包含已在其它表中已包含的非主关键字信息。</strong> 第三范式要求一个数据库表中不包含已在其它表中已包含的非主关键字信息，非PK的字段间不能有从属关系。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 设计关系数据库的范式基础概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构模型</title>
      <link href="/2017/11/11/MySQL-Data-Jiegou/"/>
      <url>/2017/11/11/MySQL-Data-Jiegou/</url>
      <content type="html"><![CDATA[<h3 id="数据结构模型常见的有以下三种："><a href="#数据结构模型常见的有以下三种：" class="headerlink" title="数据结构模型常见的有以下三种："></a>数据结构模型常见的有以下三种：</h3><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li></ul><a id="more"></a><h3 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h3><p>层次模型是一种用树形结构描述实体及其之间关系的数据模型。在这种结构中，每一个记录类型都是用节点表示，记录类型之间的联系则用结点之间的有向线段来表示。每一个双亲结点可以有多个子节点但是每一个子节点只能有一个双亲结点。这种结构决定了采用层次模型作为数系组织方式的层次数据库系统只能处理一对多的实体联系。</p><p>由<code>IBM</code>于1968年推出的<code>IMS</code>（<code>Information Management System</code>）数据库管理系统是第一个层次模型数据库管理系统，也是最典型的一个。</p><p><strong>缺点：</strong> 每一个子节点只能有一个父结点，和多个父节点发生关系非常困难。</p><h3 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h3><p>网状模型是一种可以灵活地描述事物及其之间关系的数据库模型。最早由美国的查尔斯·巴赫曼发明。</p><p>层次模型使用树形结构来表示实体及实体间的关系，每一个结点表示一个记录，除了根节点外每一个节点都有且仅有一个双亲结点，但可以有多个子节点。但是网状模型允许一个结点可以同时拥有多个双亲结点和子节点。因而同层次模型相比，网状结构更具有普遍性，能够直接地描述现实世界的实体。也可以认为层次模型是网状模型的一个特例。</p><p><strong>缺点：</strong> 网状模型可以使每个子节点和多个节点发生关系。一旦应用程序应用需求发生改变，底层的数据模型就会发生改变。底层数据模型发生改变，那么应用程序也要发生改变。数据的存储，数据的结构设计与应用层序有非常大的耦合度，并不灵活。</p><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>用于数据库管理的关系模型（英语：<code>Relational model</code>）是基于谓词逻辑和集合论的一种数据模型，广泛被使用于数据库之中。最早于1969年由埃德加·科德提出。</p><p>关系模型的基本假定是所有数据都表示为数学上的关系，就是说<code>n</code>个集合的笛卡儿积的一个子集，有关这种数据的推理通过二值（就是说没有<code>NULL</code>）的谓词逻辑来进行，这意味着对每个命题都没有两种可能的赋值：要么是真要么是假。数据通过关系演算和关系代数的一种方式来操作。关系模型是采用二维表格结构表达实体类型及实体间联系的数据模型。</p><p>关系(<code>Relation</code>)：一个关系对应着一个二维表，二维表就是关系名。</p><p>关系模型中，字段称为属性，字段值称为属性值，记录类型称为关系模型。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据结构模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库简介</title>
      <link href="/2017/11/11/MySQL-DataBase/"/>
      <url>/2017/11/11/MySQL-DataBase/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/MySQL-DataBase-1.png" title="数据库"></center><h3 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h3><p><strong>数据库，简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。</strong></p><a id="more"></a><p><strong>数据库指的是以一定方式储存在一起、能为多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。</strong></p><h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p>数据库管理系统（英语：<code>Database Management System</code>，简称<code>DBMS</code>）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。数据库管理系统可以依据它所支持的数据库模型来作分类，例如关系式、<code>XML</code>；或依据所支持的电脑类型来作分类，例如服务器群集、移动电话；或依据所用查询语言来作分类，例如<code>SQL</code>、<code>XQuery</code>；或依据性能冲量重点来作分类，例如最大规模、最高运行速度；亦或其他的分类方式。不论使用哪种分类方式，一些<code>DBMS</code>能够跨类别，例如，同时支持多种查询语言。</p><h3 id="数据库基本结构"><a href="#数据库基本结构" class="headerlink" title="数据库基本结构"></a>数据库基本结构</h3><ul><li><strong>物理数据层</strong><ul><li>它是数据库的最内层，是物理存贮设备上实际存储的数据的集合。这些数据是原始数据，是用户加工的对象，由内部模式描述的指令操作处理的位串、字符和字组成。</li></ul></li><li><strong>概念数据层</strong><ul><li>它是数据库的中间一层，是数据库的整体逻辑表示。指出了每个数据的逻辑定义及数据间的逻辑联系，是存贮记录的集合。它所涉及的是数据库所有对象的逻辑关系，而不是它们的物理情况，是数据库管理员概念下的数据库。</li></ul></li><li><strong>用户数据层</strong><ul><li>它是用户所看到和使用的数据库，表示了一个或一些特定用户使用的数据集合，即逻辑记录的集合。 数据库不同层次之间的联系是通过映射进行转换的。</li></ul></li></ul><h3 id="数据库主要特点"><a href="#数据库主要特点" class="headerlink" title="数据库主要特点"></a>数据库主要特点</h3><ul><li><strong>实现数据共享</strong><ul><li>数据共享包含所有用户可同时存取数据库中的数据，也包括用户可以用各种方式通过接口使用数据库，并提供数据共享。</li></ul></li><li><strong>减少数据的冗余度</strong></li><li><strong>数据的独立性</strong></li><li><strong>数据实现几种控制</strong><ul><li>文件管理方式中，数据处于一种分散的状态，不同的用户或同一用户在不同处理中其文件之间毫无关系。利用数据库可对数据进行集中控制和管理，并通过数据模型表示各种数据的组织以及数据间的联系。</li></ul></li><li><strong>数据一致性和可维护性</strong><ul><li>主要包括：①安全性控制：以防止数据丢失、错误更新和越权使用；②完整性控制：保证数据的正确性、有效性和相容性；③并发控制：使在同一时间周期内，允许对数据实现多路存取，又能防止用户之间的不正常交互作用。</li></ul></li><li><strong>故障恢复</strong><ul><li>由数据库管理系统提供一套方法，可及时发现故障和修复故障，从而防止数据被破坏。数据库系统能尽快恢复数据库系统运行时出现的故障，可能是物理上或是逻辑上的错误。比如对系统的误操作造成的数据错误等。</li></ul></li></ul><h3 id="数据库发展阶段"><a href="#数据库发展阶段" class="headerlink" title="数据库发展阶段"></a>数据库发展阶段</h3><h4 id="1-人工管理"><a href="#1-人工管理" class="headerlink" title="1. 人工管理"></a>1. 人工管理</h4><p>这一阶段的主要特征可归纳为如下几点：</p><ul><li>计算机中没有支持数据管理的软件。 </li><li>数据组织面向应用，数据不能共享，数据重复。 </li><li>在程序中要规定数据的逻辑结构和物理结构，数据与程序不独立。 </li><li>数据处理方式——批处理。</li></ul><h4 id="2-文件系统"><a href="#2-文件系统" class="headerlink" title="2. 文件系统"></a>2. 文件系统</h4><p>这一阶段的主要标志是计算机中有了专门管理数据库的软件——操作系统（文件管理）。</p><h4 id="3-数据系统阶段"><a href="#3-数据系统阶段" class="headerlink" title="3. 数据系统阶段"></a>3. 数据系统阶段</h4><ul><li>面向企业或部门，以数据为中心组织数据，形成综合性的数据库，为各应用共享。 </li><li>采用一定的数据模型。数据模型不仅要描述数据本身的特点，而且要描述数据之间的联系。 </li><li>数据冗余小，易修改、易扩充。不同的应用程序根据处理要求，从数据库中获取需要的数据，这样就减少了数据的重复存储，也便于增加新的数据结构，便于维护数据的一致性。 </li><li>程序和数据有较高的独立性。 </li><li>具有良好的用户接口，用户可方便地开发和使用数据库。 </li><li>对数据进行统一管理和控制，提供了数据的安全性、完整性、以及并发控制。</li></ul><h4 id="4-高级数据系统阶段"><a href="#4-高级数据系统阶段" class="headerlink" title="4. 高级数据系统阶段"></a>4. 高级数据系统阶段</h4><p>由于现在数据成爆炸式增长，在传统型的数据系统已经不能满足人们的需要，为存储海量的数据现阶段引入了分布式文件系统以及<code>nosql</code>等新的高级数据系统。</p><h3 id="数据库系统软件"><a href="#数据库系统软件" class="headerlink" title="数据库系统软件"></a>数据库系统软件</h3><ul><li><strong>关系型数据库管理系统（<code>RDBMS</code>）</strong><ul><li><code>Oracle</code></li><li><code>SQLServer</code></li><li><code>MySQL</code></li><li><code>MariaDB</code>（开源免费使用）</li><li><code>DB2</code></li><li><code>Sybase</code></li><li><code>PostgreSQL</code></li><li><code>SQLITE</code>（适用于嵌入式系统）</li></ul></li><li><strong>非关系型数据库管理系统（<code>nosql</code>）</strong><ul><li>基于键值：<code>Redis</code></li><li>基于列存储数据库：<code>HBase</code></li><li>基于文档数据库：<code>MongoDB</code></li><li>基于图形数据库：<code>Neo4J</code></li></ul></li></ul><p>关于关系型及非关系型数据库这里只列举了一部分常见的，特别是非关系型数据库还有很多，这里就不多做介绍了。这里我们主要讨论关系型数据库<code>MySQL</code>。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">维基百科：数据库</a></p><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据库简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat + memcached session manager共享session</title>
      <link href="/2017/11/09/Memcached-Tomcat-Session-Manager/"/>
      <url>/2017/11/09/Memcached-Tomcat-Session-Manager/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Memcached-Tomcat-Session-Manager-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>nginx.x86_64 1:1.10.2</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Memcached1</td><td>192.168.8.11/24</td><td>CentOS release 6.9 (Final)</td><td>memcached.x86_64 0:1.4.4-5</td><td>缓存服务</td></tr><tr><td>Memcached2</td><td>192.168.8.13/24</td><td>CentOS release 6.9 (Final)</td><td>memcached.x86_64 0:1.4.4-5</td><td>缓存服务</td></tr></tbody></table><p>简单说明下：<code>tomcat1</code>为主要把它的<code>session</code>存储到<code>memcached2</code>上，而<code>memcache2</code>是运行在另一台主机上的（一般情况下，<code>memcached</code>是存<code>tomcat1</code>的<code>session</code>），只有当<code>memcached2</code>不可用时，<code>tomcat1</code>才会把<code>session</code>存在<code>memcached1</code>上，也就是说<code>memcached1</code>是为了<code>tomcat1</code>做故障切换用的节点。这要的话，当<code>machine1</code>挂了的时候，<code>session</code>是不会丢失的。</p><a id="more"></a><h4 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1. 修改主机名"></a>1. 修改主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Nginx调度器配置</span><br><span class="line">[root@Nginx ~]# hostname Nginx.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# hostname Tomcat1.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# hostname Tomcat2.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Memcached1配置</span><br><span class="line">[root@Memcached1 ~]# hostname Memcached1.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Memcached2配置</span><br><span class="line">[root@Memcached2 ~]# hostname Memcached2.ihaiyun.cc &amp;&amp; exec bash</span><br></pre></td></tr></table></figure><h4 id="2-同步所有sever时间"><a href="#2-同步所有sever时间" class="headerlink" title="2. 同步所有sever时间"></a>2. 同步所有sever时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Nginx调度器配置</span><br><span class="line">[root@Nginx ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:08 ntpdate[11275]: step time server 172.18.0.1 offset 2.684816 sec</span><br><span class="line">[root@Nginx ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:08 ntpdate[11272]: step time server 172.18.0.1 offset 1.247753 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:08 ntpdate[2200]: step time server 172.18.0.1 offset 0.937129 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"># Memcached1配置</span><br><span class="line">[root@Memcached1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:02 ntpdate[1722]: step time server 172.18.0.1 offset -21.159589 sec</span><br><span class="line">[root@Memcached1 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"># Memcached2配置</span><br><span class="line">[root@Memcached2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:02 ntpdate[1941]: step time server 172.18.0.1 offset 2.332137 sec</span><br><span class="line">[root@Memcached2 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br></pre></td></tr></table></figure><h3 id="准备Tomcat-server"><a href="#准备Tomcat-server" class="headerlink" title="准备Tomcat server"></a>准备Tomcat server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel</span><br><span class="line">[root@Tomcat1 ~]# yum -y  install tomcat</span><br><span class="line">[root@Tomcat1 ~]# cd /usr/share/tomcat/webapps/</span><br><span class="line">[root@Tomcat1 webapps]# mkdir -p  myapp/WEB-INF</span><br><span class="line">[root@Tomcat1 webapps]# cd myapp/</span><br><span class="line">[root@Tomcat1 myapp]# vim index.jsp </span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">&lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">&lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat        # 启动tomcat服务；</span><br><span class="line">[root@Tomcat1 ~]# elinks -dump http://192.168.8.12:8080/myapp/      # 访问测试，ok；</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | CDB3C77782AFEB964DD6172FBFA708A8 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510199505033                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel</span><br><span class="line">[root@Tomcat2 ~]# yum -y  install tomcat</span><br><span class="line">[root@Tomcat2 ~]# cd /usr/share/tomcat/webapps/</span><br><span class="line">[root@Tomcat2 webapps]# mkdir -p  myapp/WEB-INF</span><br><span class="line">[root@Tomcat2 webapps]# cd myapp/</span><br><span class="line">[root@Tomcat2 myapp]# vim index.jsp </span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">&lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">&lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat</span><br><span class="line">[root@Tomcat2 ~]# elinks -dump http://192.168.8.15:8080/myapp       # 访问测试，ok；</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 5E1E7AE5B658EDB781276CC37E5B8431 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510199718989                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="准备Memcached-server"><a href="#准备Memcached-server" class="headerlink" title="准备Memcached server"></a>准备Memcached server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Memcached1配置</span><br><span class="line">[root@Memcached1 ~]# yum -y  install memcached</span><br><span class="line">[root@Memcached1 ~]# service memcached start</span><br><span class="line">Starting memcached:                                        [  OK  ]</span><br><span class="line">[root@Memcached1 ~]# ss -uln            # 端口已经打开；</span><br><span class="line">State       Recv-Q Send-Q              Local Address:Port                Peer Address:Port </span><br><span class="line">UNCONN      0      0                               *:68                             *:*     </span><br><span class="line">UNCONN      0      0                               *:11211                          *:*     </span><br><span class="line">UNCONN      0      0                              :::11211                         :::*    </span><br><span class="line"></span><br><span class="line"># Memcached2配置</span><br><span class="line">[root@Memcached2 ~]# yum -y  install memcached</span><br><span class="line">[root@Memcached2 ~]# service memcached start</span><br><span class="line">Starting memcached:                                        [  OK  ]</span><br><span class="line">[root@Memcached2 ~]# ss -uln            # 端口已经打开；</span><br><span class="line">State       Recv-Q Send-Q              Local Address:Port                Peer Address:Port </span><br><span class="line">UNCONN      0      0                               *:68                             *:*     </span><br><span class="line">UNCONN      0      0                               *:11211                          *:*     </span><br><span class="line">UNCONN      0      0                              :::11211                         :::*</span><br></pre></td></tr></table></figure><h3 id="将memcached-session-manager配置为-Manager"><a href="#将memcached-session-manager配置为-Manager" class="headerlink" title="将memcached-session-manager配置为 Manager"></a>将memcached-session-manager配置为 <context>Manager</context></h3><p><code>MSM</code>支持<code>tomcat6</code>，<code>tomcat7</code>，<code>tomcat8</code>，<code>MSM</code>支持两种模式:<code>sticky sessions</code>（<code>粘性session</code>）和<code>non-sticky sessions</code>（<code>非粘性session</code>）。我用到的是<code>sticky session</code>。</p><p>软件包简介</p><ul><li><code>javolution-5.4.3.1.jar</code>：流式化工具</li><li><code>msm-javolution-serializer-1.8.3.jar</code>：MSM</li><li><code>memcached-session-manager-1.8.3.jar</code>：memcached会话管理器</li><li><code>memcached-session-manager-tc7-1.8.3.jar</code>：memcached会话管理器（适用于tomcat7）</li><li><code>spymemcached-2.11.1.jar</code>：tomcat连接memcached的驱动</li></ul><p><a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration" target="_blank" rel="noopener">软件包下载地址：https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><p>通过<code>tomcat</code>扩展类，使<code>tomcat</code>支持将本地<code>session</code>通过<code>memcached</code>驱动和流式化工具和会话管理器将<code>session</code>存入<code>memcached</code>服务器中，实现<code>session</code>共享。（个人理解，如有不对，欢迎指出。）</p><p><code>sticky sessions</code>粘性<code>session + kryo</code>序列化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@Tomcat1 ~]# ls        # 包已经下载好，如下；</span><br><span class="line">javolution-5.4.3.1.jar                   msm-javolution-serializer-1.8.3.jar</span><br><span class="line">memcached-session-manager-1.8.3.jar      spymemcached-2.11.1.jar</span><br><span class="line">memcached-session-manager-tc7-1.8.3.jar</span><br><span class="line">[root@Tomcat1 ~]# cp *.jar /usr/share/tomcat/lib/       # 将下载好的包拷贝到/usr/share/tomcat/lib/目录下；</span><br><span class="line">[root@Tomcat1 ~]# scp *.jar 192.168.8.15:/usr/share/tomcat/lib/         # 将软件包复制到192.168.8.15的对应目录下；</span><br><span class="line">The authenticity of host &apos;192.168.8.15 (192.168.8.15)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is 09:b5:88:63:ef:63:4a:d5:b3:d8:d5:04:73:92:b6:1e.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;192.168.8.15&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.8.15&apos;s password: </span><br><span class="line">javolution-5.4.3.1.jar                                     100%  442KB 442.1KB/s   00:00    </span><br><span class="line">memcached-session-manager-1.8.3.jar                        100%  144KB 143.6KB/s   00:00    </span><br><span class="line">memcached-session-manager-tc7-1.8.3.jar                    100%   11KB  11.0KB/s   00:00    </span><br><span class="line">msm-javolution-serializer-1.8.3.jar                        100%   69KB  69.4KB/s   00:00    </span><br><span class="line">spymemcached-2.11.1.jar                                    100%  449KB 448.7KB/s   00:00  </span><br><span class="line"></span><br><span class="line"># tomcat1的配置文件</span><br><span class="line">[root@Tomcat1 ~]# vim  /etc/tomcat/server.xml           # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;        # 此处填写的为memcached1和memcached2的IP；</span><br><span class="line">                failoverNodes=&quot;m1&quot;          # 参数failoverNodes=&quot;n1&quot; 是用来告诉 MSM 把session优先存储在 memcached2上，只有当memcached2挂了的时候才会把session存在memcache1也就是配置文件的n1里。假如整个machine1挂了，session还是可用，因为session是存在machine2的memcache2上，可以通过tomcat2对外提供服务。</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line"># tomcat2的配置文件</span><br><span class="line">[root@Tomcat2 ~]# vim /etc/tomcat/server.xml        # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;</span><br><span class="line">                failoverNodes=&quot;m2&quot;          # 注意此处为m2；</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br></pre></td></tr></table></figure></p><h3 id="配置Nginx调度器"><a href="#配置Nginx调度器" class="headerlink" title="配置Nginx调度器"></a>配置Nginx调度器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx ~]# yum -y  install nginx</span><br><span class="line">[root@Nginx ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    upstream tcsrvs &#123;</span><br><span class="line">        server 192.168.8.12:8080;       # 定义tomcat1的IP；</span><br><span class="line">        server 192.168.8.15:8080;       # 定义tomcat2的IP；</span><br><span class="line">    &#125;   </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on; </span><br><span class="line">    tcp_nopush          on; </span><br><span class="line">    tcp_nodelay         on; </span><br><span class="line">    keepalive_timeout   65; </span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://tcsrvs ;      # 调度；</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx ~]# systemctl start nginx       # 启动nginx调度器；</span><br><span class="line">[root@Tomcat1 ~]# systemctl restart tomcat      # 重启tomcat；</span><br><span class="line">[root@Tomcat2 ~]# systemctl restart tomcat      # 重启tomcat；</span><br></pre></td></tr></table></figure><center>已经实现会话绑定</center><center><img src="https://houhaiyun.github.io/img/images/Memcached-Tomcat-Session-Manager-2.gif" title="测试访问"></center><h3 id="停止memcached2测试"><a href="#停止memcached2测试" class="headerlink" title="停止memcached2测试"></a>停止memcached2测试</h3><p>停止memcached2测试，会话是否能够保持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached2 ~]# service memcached stop             # 停止memcached2；</span><br><span class="line">Stopping memcached:                                        [  OK  ]</span><br></pre></td></tr></table></figure><center>会话可以保持</center><br><center><img src="https://houhaiyun.github.io/img/images/Memcached-Tomcat-Session-Manager-3.gif" title="测试访问"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://laoxu.blog.51cto.com/4120547/1566477" target="_blank" rel="noopener">老徐的私房菜：tomcat + memcached session manager共享session</a></p><h3 id="实验中用到的配置文件"><a href="#实验中用到的配置文件" class="headerlink" title="实验中用到的配置文件"></a>实验中用到的配置文件</h3><p>把配置文件复制到此，方便大家复制，嘻嘻。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># tomcat1配置文件</span><br><span class="line">[root@Tomcat1 ~]# vim /etc/tomcat/server.xml        # 注意：复制时要看清楚标签为Host；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;</span><br><span class="line">                failoverNodes=&quot;m1&quot;</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html</span><br><span class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line"># tomcat2配置文件</span><br><span class="line">[root@Tomcat2 ~]# vim /etc/tomcat/server.xml    # 注意：复制时要看清楚标签为Host；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;</span><br><span class="line">                failoverNodes=&quot;m2&quot;</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html</span><br><span class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line"># Nginx配置文件</span><br><span class="line">[root@Nginx ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    upstream tcsrvs &#123;</span><br><span class="line">        server 192.168.8.12:8080;</span><br><span class="line">        server 192.168.8.15:8080;</span><br><span class="line">    &#125;   </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on; </span><br><span class="line">    tcp_nopush          on; </span><br><span class="line">    tcp_nodelay         on; </span><br><span class="line">    keepalive_timeout   65; </span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://tcsrvs ;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Memcached </category>
          
          <category> tomcat + memcached session manager共享session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Memcached安装和常用命令</title>
      <link href="/2017/11/09/Memcached-Install-Changyong-Commands/"/>
      <url>/2017/11/09/Memcached-Install-Changyong-Commands/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装通过<code>yum</code>直接安装即可，也可去官网下载源码编译。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached1 ~]# yum -y  install memcached</span><br></pre></td></tr></table></figure><h3 id="启动Memcached常用参数"><a href="#启动Memcached常用参数" class="headerlink" title="启动Memcached常用参数"></a>启动Memcached常用参数</h3><ul><li><code>-p &lt;num&gt;</code>      设置TCP端口号(默认设置为: 11211)</li><li><code>-U &lt;num&gt;</code>      UDP监听端口(默认: 11211, 0 时关闭) </li><li><code>-l &lt;ip_addr&gt;</code>  绑定地址(默认:所有都允许,无论内外网或者本机更换IP，有安全隐患，若设置为127.0.0.1就只能本机访问)</li><li><code>-c &lt;num&gt;</code>      max simultaneous connections (default: 1024)</li><li>`-d            以daemon方式运行</li><li><code>-u &lt;username&gt;</code> 绑定使用指定用于运行进程<username></username></li><li><code>-m &lt;num&gt;</code>      允许最大内存用量，单位M (默认: 64 MB)</li><li><code>-P &lt;file&gt;</code>     将PID写入文件<file>，这样可以使得后边进行快速进程终止, 需要与-d 一起使用</file></li></ul><h3 id="连接和退出"><a href="#连接和退出" class="headerlink" title="连接和退出"></a>连接和退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached ~]# service memcached start         # 启动memcached；</span><br><span class="line">Starting memcached:                                        [  OK  ]</span><br><span class="line">[root@Memcached ~]# ss -unl         # 端口已经打开，默认就是UDP 11211；</span><br><span class="line">State       Recv-Q Send-Q                       Local Address:Port                         Peer Address:Port </span><br><span class="line">UNCONN      0      0                                        *:68                                      *:*     </span><br><span class="line">UNCONN      0      0                                        *:11211                                   *:*     </span><br><span class="line">UNCONN      0      0                                       :::11211                                  :::*   </span><br><span class="line"></span><br><span class="line">[root@Memcached ~]# telnet 127.0.0.1 11211      # 连接；</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">quit        # 退出；</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h3 id="命令行语法"><a href="#命令行语法" class="headerlink" title="命令行语法"></a>命令行语法</h3><p><code>command &lt;key&gt; &lt;flags&gt; &lt;expiration time&gt; &lt;bytes&gt;</code> </p><p><code>&lt;value&gt;</code></p><p>参数说明如下：</p><ul><li><code>command</code>： <code>set/add/replace</code></li><li><code>key</code> key 用于查找缓存值</li><li><code>flags</code>  可以包括键值对的整型参数，客户机使用它存储关于键值对的额外信息</li><li><code>expiration time</code>  在缓存中保存键值对的时间长度（以秒为单位，0 表示永远）</li><li><code>bytes</code>   在缓存中存储的字节点</li><li><code>value</code>   存储的值（始终位于第二行）</li></ul><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>五种基本<code>memcached</code>命令执行最简单的操作。这些命令和操作包括：</p><ul><li><code>set</code>：向缓存添加新的键值对，如果键已经存在，则之前的值将被替换；</li><li><code>add</code>：仅当缓存中不存在键时，<code>add</code>命令才会向缓存中添加一个键值对。如果缓存中已经存在键，则之前的值将仍然保持相同，并且您将获得响应 <code>NOT_STORED</code>;</li><li><code>replace</code>：仅当键已经存在时，<code>replace</code> 命令才会替换缓存中的键。如果缓存中不存在键，那么您将从 <code>memcached</code> 服务器接受到一条 <code>NOT_STORED</code> 响应;</li><li><code>get</code>：用于检索与之前添加的键值对相关的值。您将使用 <code>get</code> 执行大多数检索操作;</li><li><code>delete</code>：用于删除 memcached 中的任何现有值；</li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p><code>set</code>命令用于向缓存添加新的键值对。如果键已经存在，则之前的值将被替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached ~]# !t</span><br><span class="line">telnet 127.0.0.1 11211</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">set userID 0 0 5 </span><br><span class="line">12345</span><br><span class="line">STORED</span><br></pre></td></tr></table></figure><p>如果使用 <code>set</code> 命令正确设定了键值对，服务器将使用单词 <code>STORED</code> 进行响应。本示例向缓存中添加了一个键值对，其键为<code>userId</code>，其值为<code>12345</code>。并将过期时间设置为 <code>0</code>，这将向 <code>memcached</code> 通知您希望将此值存储在缓存中直到删除它为止。</p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>仅当缓存中不存在键时，<code>add</code> 命令才会向缓存中添加一个键值对。如果缓存中已经存在键，则之前的值将仍然保持相同，并且您将获得响应 <code>NOT_STORED</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add userID 0 0 5   </span><br><span class="line">55555</span><br><span class="line">NOT_STORED</span><br><span class="line">add UID 0 0 3</span><br><span class="line">123</span><br><span class="line">STORED</span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>仅当键已经存在时，<code>replace</code> 命令才会替换缓存中的键。如果缓存中不存在键，那么您将从 <code>memcached</code> 服务器接受到一条 <code>NOT_STORED</code> 响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">replace accountID 0 0 5 </span><br><span class="line">67890</span><br><span class="line">NOT_STORED</span><br><span class="line">set accountID 0 0 5 </span><br><span class="line">67890</span><br><span class="line">STORED</span><br><span class="line">replace accountID 0 0 5</span><br><span class="line">66666</span><br><span class="line">STORED</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p><code>get</code> 命令用于检索与之前添加的键值对相关的值。您将使用 <code>get</code> 执行大多数检索操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set userID 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">get userID</span><br><span class="line">VALUE userID 0 5</span><br><span class="line">12345</span><br><span class="line">END</span><br><span class="line">get abc</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>如您所见，<code>get</code> 命令相当简单。您使用一个键来调用 <code>get</code>，如果这个键存在于缓存中，则返回相应的值。如果不存在，则不返回任何内容。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p><code>delete</code> 命令用于删除 <code>memcached</code> 中的任何现有值。您将使用一个键调用<code>delete</code>，如果该键存在于缓存中，则删除该值。如果不存在，则返回一条<code>NOT_FOUND</code> 消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set userID 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">delete bob</span><br><span class="line">NOT_FOUND</span><br><span class="line">delete userID</span><br><span class="line">DELETED</span><br><span class="line">get userID</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h4><p><code>gets</code> 命令的功能类似于基本的<code>get</code> 命令。两个命令之间的差异在于，<code>gets</code> 返回的信息稍微多一些：<code>64</code> 位的整型值非常像名称/值对的 “<code>版本</code>” 标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set userID 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">get userID</span><br><span class="line">VALUE userID 0 5</span><br><span class="line">12345</span><br><span class="line">END</span><br><span class="line">gets userID</span><br><span class="line">VALUE userID 0 5 7</span><br><span class="line">12345</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>考虑 <code>get</code> 和 <code>gets</code> 命令之间的差异。<code>gets</code> 命令将返回一个额外的值 — 在本例中是整型值 7，用于标识名称/值对。如果对此名称/值对执行另一个<code>set</code> 命令，则<code>gets</code> 返回的额外值将会发生更改，以表明名称/值对已经被更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set userId 0 0 5</span><br><span class="line">33333</span><br><span class="line">STORED</span><br><span class="line">gets userId  </span><br><span class="line">VALUE userId 0 5 8</span><br><span class="line">33333</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>您看到 <code>gets</code> 返回的值了吗？它已经更新为 8。您每次修改名称/值对时，该值都会发生更改。</p><h4 id="缓存管理命令"><a href="#缓存管理命令" class="headerlink" title="缓存管理命令"></a>缓存管理命令</h4><p>最后两个 <code>memcached</code> 命令用于监控和清理 <code>memcached</code> 实例。它们是 <code>stats</code> 和 <code>flush_all</code> 命令。</p><h5 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h5><p><code>stats</code> 命令的功能正如其名：转储所连接的 <code>memcached</code> 实例的当前统计数据。在下例中，执行 <code>stats</code> 命令显示了关于当前 <code>memcached</code> 实例的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">stats</span><br><span class="line">STAT pid 11019                  # 进程ID</span><br><span class="line">STAT uptime 192                 # 服务器运行秒数</span><br><span class="line">STAT time 1510214121            # 服务器当前unix时间戳</span><br><span class="line">STAT version 1.4.4              # 服务器版本</span><br><span class="line">STAT pointer_size 64            # 操作系统64位的</span><br><span class="line">STAT rusage_user 0.000000       # 进程累计用户时间</span><br><span class="line">STAT rusage_system 0.012998     # 当前累计系统时间</span><br><span class="line">STAT curr_connections 10        # 当前打开连接数</span><br><span class="line">STAT total_connections 12       # 曾打开的连接总数</span><br><span class="line">STAT connection_structures 11   # 服务器分配的连接结构数</span><br><span class="line">STAT cmd_get 54                 # 执行get命令总数</span><br><span class="line">STAT cmd_set 34                 # 执行set命令总数</span><br><span class="line">STAT cmd_flush 3                # 指向flush_all命令总数</span><br><span class="line">STAT get_hits 9                 # get命中次数</span><br><span class="line">STAT get_misses 45              # get未命中次数</span><br><span class="line">STAT delete_misses 5            # delete未命中次数</span><br><span class="line">STAT delete_hits 1              # delete命中次数</span><br><span class="line">STAT incr_misses 0              # incr未命中次数</span><br><span class="line">STAT incr_hits 0                # incr命中次数</span><br><span class="line">STAT decr_misses 0              # decr未命中次数</span><br><span class="line">STAT decr_hits 0                # decr命中次数</span><br><span class="line">STAT cas_misses 0               # cas未命中次数</span><br><span class="line">STAT cas_hits 0                 # cas命中次数</span><br><span class="line">STAT cas_badval 0               # 使用擦拭次数</span><br><span class="line">STAT auth_cmds 0                    </span><br><span class="line">STAT auth_errors 0                  </span><br><span class="line">STAT bytes_read 86              # 读入字节总数              </span><br><span class="line">STAT bytes_written 55           # 写入字节总数</span><br><span class="line">STAT limit_maxbytes 67108864    # 分配的内存数（字节）                </span><br><span class="line">STAT accepting_conns 1          # 目前接受的连接数        </span><br><span class="line">STAT listen_disabled_num 0                  </span><br><span class="line">STAT threads 4                  # 线程数            </span><br><span class="line">STAT conn_yields 0                  </span><br><span class="line">STAT bytes 76                   # 存储item字节数</span><br><span class="line">STAT curr_items 1               # item个数    </span><br><span class="line">STAT total_items 1              # item总数    </span><br><span class="line">STAT evictions 0                # 为获取空间删除item的总数</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><h5 id="stats-slabs"><a href="#stats-slabs" class="headerlink" title="stats slabs"></a>stats slabs</h5><p><code>stats slabs</code> 显示各个<code>slab</code>的信息，包括<code>chunk</code>的大小、数目、使用情况等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stats slabs</span><br><span class="line">STAT 1:chunk_size 96</span><br><span class="line">STAT 1:chunks_per_page 10922</span><br><span class="line">STAT 1:total_pages 1</span><br><span class="line">STAT 1:total_chunks 10922</span><br><span class="line">STAT 1:used_chunks 1</span><br><span class="line">STAT 1:free_chunks 1</span><br><span class="line">STAT 1:free_chunks_end 10920</span><br><span class="line">STAT 1:mem_requested 76</span><br><span class="line">STAT 1:get_hits 1</span><br><span class="line">STAT 1:cmd_set 2</span><br><span class="line">STAT 1:delete_hits 0</span><br><span class="line">STAT 1:incr_hits 0</span><br><span class="line">STAT 1:decr_hits 0</span><br><span class="line">STAT 1:cas_hits 0</span><br><span class="line">STAT 1:cas_badval 1</span><br><span class="line">STAT active_slabs 1</span><br><span class="line">STAT total_malloced 1048512</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="stats-sizes"><a href="#stats-sizes" class="headerlink" title="stats sizes"></a>stats sizes</h5><p><code>stats sizes</code> 输出所有<code>item</code>的大小和个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stats sizes</span><br><span class="line">STAT 96 1</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="stats-reset"><a href="#stats-reset" class="headerlink" title="stats reset"></a>stats reset</h5><p><code>stats reset</code> 清空统计数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stats reset</span><br><span class="line">RESET</span><br></pre></td></tr></table></figure><h4 id="flush-all"><a href="#flush-all" class="headerlink" title="flush_all"></a>flush_all</h4><p>这个最简单的命令仅用于清理缓存中的所有名称/值对。如果您需要将缓存重置到干净的状态，则 <code>flush_all</code> 能提供很大的用处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">set userid 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">set id 0 0 3</span><br><span class="line">345</span><br><span class="line">STORED</span><br><span class="line">get userid</span><br><span class="line">VALUE userid 0 5</span><br><span class="line">12345</span><br><span class="line">END</span><br><span class="line">get id</span><br><span class="line">VALUE id 0 3</span><br><span class="line">345</span><br><span class="line">END</span><br><span class="line">flush_all</span><br><span class="line">OK</span><br><span class="line">get id</span><br><span class="line">END</span><br><span class="line">get userid</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p><code>append</code> 将数据追加到当前缓存数据的之后，当缓存数据存在时才存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set username 0 0 8</span><br><span class="line">wang1234</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 8</span><br><span class="line">wang1234</span><br><span class="line">END</span><br><span class="line">append username 0 0 5</span><br><span class="line">_ages</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 13</span><br><span class="line">wang1234_ages</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h4><p><code>prepend</code> 将数据追加到当前缓存数据的之前，当缓存数据存在时才存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set username 0 0 8</span><br><span class="line">wang1234</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 8</span><br><span class="line">wang1234</span><br><span class="line">END</span><br><span class="line">prepend username 0 0 5</span><br><span class="line">name_</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 13</span><br><span class="line">name_wang1234</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.cnblogs.com/wayne173/p/5652034.html" target="_blank" rel="noopener">達達尼亞：memcached 常用命令及使用说明</a></p>]]></content>
      
      <categories>
          
          <category> Memcached </category>
          
          <category> Memcached安装和常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Memcached</title>
      <link href="/2017/11/09/Memcached/"/>
      <url>/2017/11/09/Memcached/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Memcached-1.jpg" title="Memcached"></center><a id="more"></a><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><ul><li><code>Memcached</code>是以<code>LiveJournal</code>旗下<code>Danga Interactive</code>公司的<code>Brad Fitzpatric</code>为首开发的一款软件。</li><li>免费和开放源代码的高性能分布式内存对象缓存系统，本质上是通用的，但旨在通过减轻数据库负载来加速动态<code>Web</code>应用程序。</li><li><code>Memcached</code>是内存中的键值存储，用于从数据库调用，<code>API</code>调用或页面呈现的结果中为小块任意数据（字符串，对象）。</li><li><code>Memcached</code>简单而强大。其简单的设计促进了快速部署，易于开发，并解决了大数据缓存面临的许多问题。它的<code>API</code>适用于大多数流行的语言。</li><li>其守护进程（<code>daemon</code> ）是用<code>C</code>写的，但是客户端可以用任何语言来编写，并通过<code>memcached</code>协议与守护进程通信。</li><li>Memcached官网：<a href="http://memcached.org/" target="_blank" rel="noopener">http://memcached.org/</a></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>重启<code>memcached</code>服务器或者操作系统会使数据消失。</li><li>内存容量达到指定值之后，就会使用<code>LRU</code>算法自动删除不使用或者很少使用的缓存。</li></ol><h3 id="Memcached的工作过程"><a href="#Memcached的工作过程" class="headerlink" title="Memcached的工作过程"></a>Memcached的工作过程</h3><p><code>Memcached</code>是一种<code>C/S</code>模式，在服务器端启动服务守护进程，此时可以指定监听的<code>IP</code>地址、端口号以及使用多少内存来处理客户端的请求等几个关键参数。服务器端的服务启动后就一直处于等待处理客户端的连接状态。<code>Memcached</code> 是由<code>C</code>语言来实现的，采用的是<strong>异步<code>I/O</code></strong>，其实现方式是基于事件的单进程和单线程的。使用 <strong><code>libevent</code> 作为事件通知机制</strong> ，多个服务器端可以协同工作，但这些服务器端之间没有任何通信关系，每个服务器端只对自己的数据进行管理。客户端通过指定服务器的IP地址和端口进行通信。</p><p>需要被缓存的对象或数据以 <strong><code>key/value</code>对</strong> 的形式保存在服务器端，每个被缓存的对象或数据都有唯一的标识符key，存取操作通过这个key 进行。保存到 <code>Memcached</code> 中的对象或数据放置在内存中，并不会作为文件存储在磁盘上，所以存取速度非常快。由于没有对这些对象进行持久性存储，因此在服务器端的服务重启之后存储在内存中的这些数据就会消失。而且当存储的容量达到启动时设定的值时，就自动使用 <strong><code>LRU</code>算法</strong> 删除不用的缓存。<code>Memcached</code>是为缓存而设计的服务器，因此在设计之初并没有过多考虑数据的永久性问题。<code>Memcached</code> <strong>支持各种语言编写的客户端<code>API</code></strong> ，目前包括 Perl、PHP、Python、Ruby、Java、C#和C等。</p><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p><h3 id="Slab-Allocation的工作机制"><a href="#Slab-Allocation的工作机制" class="headerlink" title="Slab Allocation的工作机制"></a>Slab Allocation的工作机制</h3><p> <strong><code>Memcached</code>利用<code>Slab Allocation</code>机制来分配和管理内存</strong> 。传统的内存管理方式是：使用完通过<code>malloc</code>分配的内存后通过<code>free</code>来回收内存。这种方式容易产生内存碎片并降低操作系统对内存的管理效率。<code>Slab Allocation</code>机制不存在这样的问题，它按照预先规定的大小，将分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释放，可以重复利用。</p><p><code>Memcached</code>服务器端保存着一个空闲的内存块列表，当有数据存入时根据接收到的数据大小，分配一个能存下这个数据的最小内存块。这种方式有时会造成内存浪费，例如：将一个200字节的数据存入一个300字节的内存块中，会有100字节内存被浪费掉，不能使用。避免浪费内存的办法是，预先计算出应用存入的数据大小，或把同一业务类型的数据存入一个<code>Memcached</code>服务器中，确保存入的数据大小相对均匀，这样就可以减少对内存的浪费。还有一种办法是，在启动时指定“-f”参数，能在某种程度上控制内存组之间的大小差异。在应用中使用Memcached时，通常可以不重新设置这个参数，使用默认值1.25进行部署。如果想优化<code>Memcached</code>对内存的使用，可以考虑重新计算数据的预期平均长度，调整这个参数来获得合适的设置值。</p><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p><h3 id="Memcached的删除机制"><a href="#Memcached的删除机制" class="headerlink" title="Memcached的删除机制"></a>Memcached的删除机制</h3><p>上一节已经介绍过，<code>Memcached</code>不会释放已分配的内存空间，在数据过期后，客户端不能通过<code>key</code>取出它的值，其存储空间被重新利用。</p><p><code>Memcached</code>使用的是一种<code>Lazy Expiration</code>策略，自己不会监控存入的<code>key/value</code>对是否过期，而是在获取<code>key</code>值时查看记录的时间戳，检查<code>key/value</code>对空间是否过期。这种策略不会在过期检测上浪费<code>CPU</code>资源。<br><code>Memcached</code>在分配空间时，优先使用已经过期的<code>key/value</code>对空间，当空间占满时，<code>Memcached</code>就会使用<code>LRU</code>算法来分配空间，删除最近最少使用的<code>key/value</code>对，将其空间分配给新的<code>key/value</code>对。在某些情况下，如果不想使用LRU算法，那么可以通过<code>“-M”</code>参数来启动<code>Memcached</code>，这样，<code>Memcached</code>在内存耗尽时，会返回一个报错信息。</p><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p><h3 id="Memcached的分布式算法"><a href="#Memcached的分布式算法" class="headerlink" title="Memcached的分布式算法"></a>Memcached的分布式算法</h3><p>前面已经介绍过，Memcached的分布式是通过客户端的程序库来实现的。下面举例描述其工作过程。<br>假设有node1、node2、node2三台Memcached服务器，应用程序要实现保存名为“tokyo”、“ tokyo1”、“ tokyo2”、“ tokyo3”的数据，如图3-2所示。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-2.png" title="有node1、node2、node2三台Memcached服务器，应用程序要实现保存名为“tokyo”、“ tokyo1”、“ tokyo2”、“ tokyo3”的数据"></center><p>向Memcached中存入“tokyo”，将“tokyo”传给客户端程序后，客户端实现的算法就会根据这个“键”来决定保存数据的Memcached服务器，选定服务器后，就命令该服务器保存“tokyo”及其值，如图3-3所示。<br>同样，存入“tokyo1”、“ tokyo2”和“ tokyo3”的过程都是先通过客户端的算法选择服务器再保存数据。<br>接下来获取保存的数据。获取保存的key/value对时也要将要获取的键“tokyo”传递给函数库。函数库通过与存取数据操作相同的算法，根据“键”来选择服务器。只要使用的算法相同，就能确定存入在哪一台服务器上，然后发送get命令。只要数据没有因为某些原因被删除，就能获得保存的值，如图3-4所示。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-3.png" title="3-4"></center><p>将不同的键保存到不同的服务器上，就实现了Memcached的分布式算法。部署多台Memcached服务器时，将键分散保存到这些服务器上，当某一台Memcached服务器发生故障无法连接时，只有分散到这台服务器上的key/values对不能访问，其他key/value对不受影响。</p><p>目前有两种分布式算法使用得最多，一种是根据余数来计算分布，另一种是根据一致性散列算法来计算分布。根据余数分布式算法先求得键的整数散列值，再除以服务器台数，根据余数来选择将键存放到哪一台服务器上。这种方法虽然计算简单，效率很高，但在服务器增加或减少时，会导致几乎所有的缓存失效，所以在大规模部署中，很少使用这种方法。一致性散列的原理如图3-5所示，先算出Memcached服务器（节点）的散列值，并将其分散到0到2的32次方的圆上，然后用同样的方法算出存储数据的键的散列值并映射到圆上，最后从数据映射到的位置开始顺时针查找，将数据保存到查找到的第一个服务器上。如果超过232仍然找不到服务器，就会将数据保存到第一台Memcached服务器上。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-4.png" title="两种分布式算法"></center><p>当需要添加一台Memcached服务器时，由于保存键的服务器的个数发生了变化，因此余数分布式算法的余数结果也会发生巨大变化，几乎所有的键都找不到之前存入的服务器，导致所有的缓存失效。但在采用一致性散列算法时，添加服务器后，只有在圆上增加服务器地点的逆时针方向的第一台服务器上的键会受到影响，如图3-6所示。<br>一致性散列算法对数据的存储是不均匀的，但可以最大限度地减少缓存的失效量。在大规模部署Memcached时，容灾和扩容一定要使用一致性散列算法，以确保在出现故障或容量问题时减小对数据库的影响。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-5.png" title="3-6"></center><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p>]]></content>
      
      <categories>
          
          <category> Memcached </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建Tomcat会话集群</title>
      <link href="/2017/11/08/Tomcat-Session-Jiqun/"/>
      <url>/2017/11/08/Tomcat-Session-Jiqun/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Session-Jiqun-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Httpd</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>httpd.x86_64 0:2.4.6-45</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr></tbody></table><a id="more"></a><h4 id="1-修改主机名，并写入hosts文件"><a href="#1-修改主机名，并写入hosts文件" class="headerlink" title="1. 修改主机名，并写入hosts文件"></a>1. 修改主机名，并写入hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 修改Httpd server 主机名；</span><br><span class="line">[root@centos6 ~]# hostname Httpd.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Httpd ~]# </span><br><span class="line">[root@Httpd ~]# vim /etc/hosts      # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Httpd.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat1 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat1 ~]# </span><br><span class="line">[root@Tomcat1 ~]# vim /etc/hosts        # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat1.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat2 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat2 ~]# </span><br><span class="line">[root@Tomcat2 ~]# vim /etc/hosts            # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat2.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# ping -c 1 Httpd.haiyun.com          # 测试是否能够解析成功，ok；</span><br><span class="line">PING localhost (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.010 ms</span><br><span class="line"></span><br><span class="line">--- localhost ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.010/0.010/0.010/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat1.haiyun.com</span><br><span class="line">PING Tomcat1.haiyun.com (192.168.8.12) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat1.haiyun.com (192.168.8.12): icmp_seq=1 ttl=64 time=1.83 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat1.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.835/1.835/1.835/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat2.haiyun.com</span><br><span class="line">PING Tomcat2.haiyun.com (192.168.8.15) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat2.haiyun.com (192.168.8.15): icmp_seq=1 ttl=64 time=1.94 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat2.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.940/1.940/1.940/0.000 ms</span><br></pre></td></tr></table></figure><h4 id="2-同步所有server的时间"><a href="#2-同步所有server的时间" class="headerlink" title="2. 同步所有server的时间"></a>2. 同步所有server的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Httpd server</span><br><span class="line">[root@Httpd ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:36 ntpdate[11037]: adjust time server 172.18.0.1 offset -0.000054 sec</span><br><span class="line">[root@Httpd ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1 server</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[3153]: adjust time server 172.18.0.1 offset 0.000261 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat2 server</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[11255]: adjust time server 172.18.0.1 offset 0.332502 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br></pre></td></tr></table></figure><h3 id="为两台后端server安装Tomcat软件"><a href="#为两台后端server安装Tomcat软件" class="headerlink" title="为两台后端server安装Tomcat软件"></a>为两台后端server安装Tomcat软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br></pre></td></tr></table></figure><h3 id="为两台Tomcat设置默认访问主页"><a href="#为两台Tomcat设置默认访问主页" class="headerlink" title="为两台Tomcat设置默认访问主页"></a>为两台Tomcat设置默认访问主页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat1 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat2 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat2&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><strong>注意：</strong><code>Tomcat1</code>为红色，<code>Tomcat2</code>为蓝色。</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Session-Jiqun-2.gif" title="访问测试"></center><h3 id="安装Httpd并配置调度"><a href="#安装Httpd并配置调度" class="headerlink" title="安装Httpd并配置调度"></a>安装Httpd并配置调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# yum -y install httpd        # 安装httpd；</span><br><span class="line">[root@Httpd ~]# vim /etc/httpd/conf.d/httpd.conf            # 添加配置文件；</span><br><span class="line">&lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">    BalancerMember http://192.168.8.12:8080</span><br><span class="line">    BalancerMember http://192.168.8.15:8080</span><br><span class="line">    ProxySet lbmethod=byrequests</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName httpd.ihaiyun.cc</span><br><span class="line">    ProxyVia On</span><br><span class="line">    ProxyRequests Off </span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / balancer://tcsrvs/</span><br><span class="line">    ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# systemctl start httpd</span><br></pre></td></tr></table></figure><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# for i in &#123;1..4&#125; ; do elinks -dump http://192.168.8.17/myapp/ ; done     # 访问测试，ok；</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | CB54B841B411BD39AC206E5C21A94D2D |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671410                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 5AE73728906E1B832CFABA7DBAB44F62 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671678                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 3223618E201BC73DCB053C52BD2972F2 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671494                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 6DE3ECA59EDB7EB71ECCFBDD47443F4A |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671758                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="修改tomcat配置文件"><a href="#修改tomcat配置文件" class="headerlink" title="修改tomcat配置文件"></a>修改tomcat配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># 修改tomcat1的配置文件</span><br><span class="line">[root@Tomcat1 ~]# vim /etc/tomcat/server.xml </span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;Tomcat1&quot;&gt;     # 标识ID；</span><br><span class="line">    &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;</span><br><span class="line">            channelSendOptions=&quot;8&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot;</span><br><span class="line">            expireSessionsOnShutdown=&quot;false&quot;</span><br><span class="line">            notifyListenersOnReplication=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class="line">        &lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot;</span><br><span class="line">                address=&quot;228.0.8.4&quot;         # 组播地址，自定义需要和tomcat集群中的主机相同；</span><br><span class="line">                port=&quot;45564&quot;</span><br><span class="line">                frequency=&quot;500&quot;</span><br><span class="line">                dropTime=&quot;3000&quot;/&gt;</span><br><span class="line">        &lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span><br><span class="line">            address=&quot;192.168.8.12&quot;          # 本tomcat的IP；</span><br><span class="line">            port=&quot;4000&quot;</span><br><span class="line">            autoBind=&quot;100&quot;</span><br><span class="line">            selectorTimeout=&quot;5000&quot;</span><br><span class="line">            maxThreads=&quot;6&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class="line">        &lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&gt;</span><br><span class="line">        &lt;/Sender&gt;</span><br><span class="line">        &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&gt;</span><br><span class="line">        &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor&quot;/&gt;</span><br><span class="line">        &lt;/Channel&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;</span><br><span class="line">            filter=&quot;&quot;/&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Deployer className=&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot;</span><br><span class="line">            tempDir=&quot;/tmp/war-temp/&quot;</span><br><span class="line">            deployDir=&quot;/tmp/war-deploy/&quot;</span><br><span class="line">            watchDir=&quot;/tmp/war-listen/&quot;</span><br><span class="line">            watchEnabled=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener&quot;/&gt;</span><br><span class="line">        &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&gt;</span><br><span class="line">        &lt;/Cluster&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改tomcat2的配置文件</span><br><span class="line">[root@Tomcat2 ~]# vim /etc/tomcat/server.xml </span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;Tomcat2&quot;&gt;     # 标识ID；</span><br><span class="line">    &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;</span><br><span class="line">            channelSendOptions=&quot;8&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot;</span><br><span class="line">            expireSessionsOnShutdown=&quot;false&quot;</span><br><span class="line">            notifyListenersOnReplication=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class="line">        &lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot;</span><br><span class="line">                address=&quot;228.0.8.4&quot;             # 组播地址，自定义需要和tomcat集群中的主机相同；</span><br><span class="line">                port=&quot;45564&quot;</span><br><span class="line">                frequency=&quot;500&quot;</span><br><span class="line">                dropTime=&quot;3000&quot;/&gt;</span><br><span class="line">        &lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span><br><span class="line">            address=&quot;192.168.8.15&quot;          # 本tomcat的IP；</span><br><span class="line">            port=&quot;4000&quot;</span><br><span class="line">            autoBind=&quot;100&quot;</span><br><span class="line">            selectorTimeout=&quot;5000&quot;</span><br><span class="line">            maxThreads=&quot;6&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class="line">        &lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&gt;</span><br><span class="line">        &lt;/Sender&gt;</span><br><span class="line">        &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&gt;</span><br><span class="line">        &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor&quot;/&gt;</span><br><span class="line">        &lt;/Channel&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;</span><br><span class="line">            filter=&quot;&quot;/&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Deployer className=&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot;</span><br><span class="line">            tempDir=&quot;/tmp/war-temp/&quot;</span><br><span class="line">            deployDir=&quot;/tmp/war-deploy/&quot;</span><br><span class="line">            watchDir=&quot;/tmp/war-listen/&quot;</span><br><span class="line">            watchEnabled=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener&quot;/&gt;</span><br><span class="line">        &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&gt;</span><br><span class="line">        &lt;/Cluster&gt;</span><br></pre></td></tr></table></figure><h3 id="为tomcat准备web-xml"><a href="#为tomcat准备web-xml" class="headerlink" title="为tomcat准备web.xml"></a>为tomcat准备web.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># tomcat1复制；</span><br><span class="line">[root@Tomcat1 ~]# cp /etc/tomcat/web.xml /usr/share/tomcat/webapps/myapp/WEB-INF/</span><br><span class="line">[root@Tomcat1 ~]# vim /usr/share/tomcat/webapps/myapp/WEB-INF/web.xml</span><br><span class="line">&lt;distributable/&gt;</span><br><span class="line">[root@Tomcat1 ~]# systemctl restart tomcat          # 重启tomcat1；</span><br><span class="line"></span><br><span class="line"># tomcat2复制；</span><br><span class="line">[root@Tomcat2 ~]# cp /etc/tomcat/web.xml /usr/share/tomcat/webapps/myapp/WEB-INF/</span><br><span class="line">[root@Tomcat2 ~]# vim /usr/share/tomcat/webapps/myapp/WEB-INF/web.xml</span><br><span class="line">&lt;distributable/&gt;</span><br><span class="line">[root@Tomcat2 ~]#  systemctl restart tomcat         # 重启tomcat2；</span><br></pre></td></tr></table></figure><h3 id="访问测试-2"><a href="#访问测试-2" class="headerlink" title="访问测试"></a>访问测试</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Session-Jiqun-3.gif" title="访问测试"></center><h3 id="基于Nginx调度"><a href="#基于Nginx调度" class="headerlink" title="基于Nginx调度"></a>基于Nginx调度</h3><p>环境是不变的，只是换了调度器为<code>Nginx</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# systemctl stop httpd    # 停止httpd；</span><br><span class="line">[root@Httpd ~]# yum -y install nginx    # 安装nginx；</span><br><span class="line">[root@Httpd ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    upstream tcsrvs &#123;     </span><br><span class="line">        server 192.168.8.12:8080;       # 添加server；</span><br><span class="line">        server 192.168.8.15:8080;</span><br><span class="line">    &#125;       </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on; </span><br><span class="line">    tcp_nodelay         on; </span><br><span class="line">    keepalive_timeout   65; </span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tcsrvs ;      # 调用server；</span><br><span class="line">        &#125;       </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;       </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123; </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;       </span><br><span class="line">[root@Httpd ~]# systemctl start nginx       # 启动nginx；</span><br></pre></td></tr></table></figure><h3 id="访问测试-3"><a href="#访问测试-3" class="headerlink" title="访问测试"></a>访问测试</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Session-Jiqun-4.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> 搭建Tomcat会话集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现httpd会话绑定</title>
      <link href="/2017/11/08/Tomcat-Httpd-session-Bangding-Tomcat/"/>
      <url>/2017/11/08/Tomcat-Httpd-session-Bangding-Tomcat/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-session-Bangding-Tomcat-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Httpd</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>httpd.x86_64 0:2.4.6-45</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr></tbody></table><a id="more"></a><h4 id="1-修改主机名，并写入hosts文件"><a href="#1-修改主机名，并写入hosts文件" class="headerlink" title="1. 修改主机名，并写入hosts文件"></a>1. 修改主机名，并写入hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 修改Httpd server 主机名；</span><br><span class="line">[root@centos6 ~]# hostname Httpd.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Httpd ~]# </span><br><span class="line">[root@Httpd ~]# vim /etc/hosts      # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Httpd.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat1 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat1 ~]# </span><br><span class="line">[root@Tomcat1 ~]# vim /etc/hosts        # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat1.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat2 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat2 ~]# </span><br><span class="line">[root@Tomcat2 ~]# vim /etc/hosts            # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat2.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# ping -c 1 Httpd.haiyun.com          # 测试是否能够解析成功，ok；</span><br><span class="line">PING localhost (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.010 ms</span><br><span class="line"></span><br><span class="line">--- localhost ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.010/0.010/0.010/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat1.haiyun.com</span><br><span class="line">PING Tomcat1.haiyun.com (192.168.8.12) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat1.haiyun.com (192.168.8.12): icmp_seq=1 ttl=64 time=1.83 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat1.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.835/1.835/1.835/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat2.haiyun.com</span><br><span class="line">PING Tomcat2.haiyun.com (192.168.8.15) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat2.haiyun.com (192.168.8.15): icmp_seq=1 ttl=64 time=1.94 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat2.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.940/1.940/1.940/0.000 ms</span><br></pre></td></tr></table></figure><h4 id="2-同步所有server的时间"><a href="#2-同步所有server的时间" class="headerlink" title="2. 同步所有server的时间"></a>2. 同步所有server的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Httpd server</span><br><span class="line">[root@Httpd ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:36 ntpdate[11037]: adjust time server 172.18.0.1 offset -0.000054 sec</span><br><span class="line">[root@Httpd ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1 server</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[3153]: adjust time server 172.18.0.1 offset 0.000261 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat2 server</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[11255]: adjust time server 172.18.0.1 offset 0.332502 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br></pre></td></tr></table></figure><h3 id="为两台后端server安装Tomcat软件"><a href="#为两台后端server安装Tomcat软件" class="headerlink" title="为两台后端server安装Tomcat软件"></a>为两台后端server安装Tomcat软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br></pre></td></tr></table></figure><h3 id="为两台Tomcat设置默认访问主页"><a href="#为两台Tomcat设置默认访问主页" class="headerlink" title="为两台Tomcat设置默认访问主页"></a>为两台Tomcat设置默认访问主页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat1 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat2 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat2&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><strong>注意：</strong><code>Tomcat1</code>为红色，<code>Tomcat2</code>为蓝色。</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-session-Bangding-Tomcat-2.gif" title="访问测试"></center><h3 id="安装Httpd并配置调度"><a href="#安装Httpd并配置调度" class="headerlink" title="安装Httpd并配置调度"></a>安装Httpd并配置调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# yum -y install httpd        # 安装httpd；</span><br><span class="line">[root@Httpd ~]# vim /etc/httpd/conf.d/httpd.conf            # 添加配置文件；</span><br><span class="line">[root@Httpd ~]# vim /etc/httpd/conf.d/httpd.conf </span><br><span class="line"></span><br><span class="line">Header add Set-Cookie &quot;ROUTEID=.%&#123;BALANCER_WORKER_ROUTE&#125;e; path=/&quot; env=BALANCER_ROUTE_CHANGED&lt;proxy         # 添加自定义ROUTEID；  </span><br><span class="line">&lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">    BalancerMember http://192.168.8.12:8080 route=tomcat1       # 指定192.168.8.12的Id为tomcat1；</span><br><span class="line">    BalancerMember http://192.168.8.15:8080 route=tomcat2       # 指定192.168.8.15的Id为tomcat2；</span><br><span class="line">    ProxySet lbmethod=byrequests</span><br><span class="line">    ProxySet stickysession=ROUTEID              # 设置会话根据ROUTEID进行调度；</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName httpd.ihaiyun.cc</span><br><span class="line">    ProxyVia On</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / balancer://tcsrvs/</span><br><span class="line">    ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">    &lt;Location /balancer-manager&gt;</span><br><span class="line">        SetHandler balancer-manager</span><br><span class="line">        ProxyPass !</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# systemctl reload httpd.service          # 重新加载服务；</span><br></pre></td></tr></table></figure><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><p>现在命令行测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# for i in &#123;1..4&#125;; do elinks -dump http://192.168.8.17/myapp/ ; done      # 已经实现会话绑定，都被调度到tomcat2了；</span><br><span class="line">[root@Httpd ~]# for i in &#123;1..4&#125;; do elinks -dump http://192.168.8.17/myapp/ ; done</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | DE99E41C8C2529CA7737F3DDA555A6B3 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510064889270                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | E1C95CC4B1BFAB9A75BD2947F23C0BA9 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510064889312                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 7DA80B52F0719216FBB9A8E691BC3C22 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510064889352                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | D94A56F7A62CFBEDCB71443891917825 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510064889393                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-session-Bangding-Tomcat-3.gif" title="访问测试"></center><h3 id="基于ajp协议实现会话绑定"><a href="#基于ajp协议实现会话绑定" class="headerlink" title="基于ajp协议实现会话绑定"></a>基于ajp协议实现会话绑定</h3><p>环境就按上面搭建好的环境。</p><h3 id="修改httpd配置文件"><a href="#修改httpd配置文件" class="headerlink" title="修改httpd配置文件"></a>修改httpd配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# vim /etc/httpd/conf.d/httpd.conf </span><br><span class="line">Header add Set-Cookie &quot;ROUTEID=.%&#123;BALANCER_WORKER_ROUTE&#125;e; path=/&quot; env=BALANCER_ROUTE_CHANGED&lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">    BalancerMember ajp://192.168.8.12:8009 route=tomcat1        # 已经修改为ajp协议，且端口也变为8009；</span><br><span class="line">    BalancerMember ajp://192.168.8.15:8009 route=tomcat2</span><br><span class="line">    ProxySet lbmethod=byrequests</span><br><span class="line">    ProxySet stickysession=ROUTEID</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName ajpd.ihaiyun.cc</span><br><span class="line">    ProxyVia On</span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / balancer://tcsrvs/</span><br><span class="line">    ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">    &lt;Location /balancer-manager&gt;</span><br><span class="line">        SetHandler balancer-manager</span><br><span class="line">        ProxyPass !</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# systemctl reload httpd      # 重新加载服务；</span><br></pre></td></tr></table></figure><h3 id="访问测试-2"><a href="#访问测试-2" class="headerlink" title="访问测试"></a>访问测试</h3><p>在命令行中访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# for i in &#123;1..4&#125;; do elinks -dump http://192.168.8.17/myapp/ ; done      # 全部调度到tomcat2，ok；</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 22F9390B8F3D48D1462F8F86B880CD03 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510065461064                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 04467F2925B69BE21FD5F87D5C956C42 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510065461105                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 96A245A1732FCA0594A9019530F89173 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510065461142                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | E23E51B0AE529E3F08B3407C320DC272 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510065461183                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure></p><center>在浏览器测试，ok</center><br><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-session-Bangding-Tomcat-4.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> 实现httpd会话绑定 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Httpd基于ajp协议调度Tomcat集群</title>
      <link href="/2017/11/07/Tomcat-Httpd-ajp-Diaodu-Tomcat/"/>
      <url>/2017/11/07/Tomcat-Httpd-ajp-Diaodu-Tomcat/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-ajp-Diaodu-Tomcat-1.jpg" title="拓扑图"></center><br><center> 拓扑</center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Httpd</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>httpd.x86_64 0:2.4.6-45</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr></tbody></table><a id="more"></a><h4 id="1-修改主机名，并写入hosts文件"><a href="#1-修改主机名，并写入hosts文件" class="headerlink" title="1. 修改主机名，并写入hosts文件"></a>1. 修改主机名，并写入hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 修改Httpd server 主机名；</span><br><span class="line">[root@centos6 ~]# hostname Httpd.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Httpd ~]# </span><br><span class="line">[root@Httpd ~]# vim /etc/hosts      # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Httpd.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat1 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat1 ~]# </span><br><span class="line">[root@Tomcat1 ~]# vim /etc/hosts        # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat1.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat2 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat2 ~]# </span><br><span class="line">[root@Tomcat2 ~]# vim /etc/hosts            # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat2.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# ping -c 1 Httpd.haiyun.com          # 测试是否能够解析成功，ok；</span><br><span class="line">PING localhost (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.010 ms</span><br><span class="line"></span><br><span class="line">--- localhost ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.010/0.010/0.010/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat1.haiyun.com</span><br><span class="line">PING Tomcat1.haiyun.com (192.168.8.12) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat1.haiyun.com (192.168.8.12): icmp_seq=1 ttl=64 time=1.83 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat1.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.835/1.835/1.835/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat2.haiyun.com</span><br><span class="line">PING Tomcat2.haiyun.com (192.168.8.15) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat2.haiyun.com (192.168.8.15): icmp_seq=1 ttl=64 time=1.94 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat2.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.940/1.940/1.940/0.000 ms</span><br></pre></td></tr></table></figure><h4 id="2-同步所有server的时间"><a href="#2-同步所有server的时间" class="headerlink" title="2. 同步所有server的时间"></a>2. 同步所有server的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Httpd server</span><br><span class="line">[root@Httpd ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:36 ntpdate[11037]: adjust time server 172.18.0.1 offset -0.000054 sec</span><br><span class="line">[root@Httpd ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1 server</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[3153]: adjust time server 172.18.0.1 offset 0.000261 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat2 server</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[11255]: adjust time server 172.18.0.1 offset 0.332502 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br></pre></td></tr></table></figure><h3 id="为两台后端server安装Tomcat软件"><a href="#为两台后端server安装Tomcat软件" class="headerlink" title="为两台后端server安装Tomcat软件"></a>为两台后端server安装Tomcat软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br></pre></td></tr></table></figure><h3 id="为两台Tomcat设置默认访问主页"><a href="#为两台Tomcat设置默认访问主页" class="headerlink" title="为两台Tomcat设置默认访问主页"></a>为两台Tomcat设置默认访问主页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat1 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat2 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat2&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><strong>注意：</strong><code>Tomcat1</code>为红色，<code>Tomcat2</code>为蓝色。</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-ajp-Diaodu-Tomcat-2.gif" title="访问测试"></center><h3 id="安装Httpd并配置调度"><a href="#安装Httpd并配置调度" class="headerlink" title="安装Httpd并配置调度"></a>安装Httpd并配置调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# yum -y install httpd        # 安装httpd；</span><br><span class="line">[root@Httpd ~]# vim /etc/httpd/conf.d/httpd.conf            # 添加配置文件；</span><br><span class="line">&lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">    BalancerMember ajp://192.168.8.12:8009 loadfactor=1     # loadfactor代表权重；</span><br><span class="line">    BalancerMember ajp://192.168.8.15:8009 loadfactor=2</span><br><span class="line">    ProxySet lbmethod=byrequests</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName ajpd.ihaiyun.cc</span><br><span class="line">    ProxyVia On</span><br><span class="line">    ProxyRequests Off </span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / balancer://tcsrvs/</span><br><span class="line">    ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# systemctl start httpd           # 启动服务；</span><br></pre></td></tr></table></figure><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# for i in &#123;1..4&#125; ; do elinks -dump http://192.168.8.17/myapp/ ; done         # 访问测试，权重也ok；</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | D185B8D76E438F30A380AEF88485B0EF |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510056772305                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | AD507239A812442347ADFEF183242F2F |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510056772572                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | DAECB1047615F1F5CA4231CC58904D10 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510056772613                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 6525B417E343A61E72E4215C81CE7559 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510056772431                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Httpd基于ajp协议调度Tomcat集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Httpd基于http协议调度Tomcat集群</title>
      <link href="/2017/11/07/Tomcat-Httpd-http-Diaodu-Tomcat/"/>
      <url>/2017/11/07/Tomcat-Httpd-http-Diaodu-Tomcat/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-http-Diaodu-Tomcat-1.jpg" title="拓扑图"></center><br><center> 拓扑</center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Httpd</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>httpd.x86_64 0:2.4.6-45</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr></tbody></table><a id="more"></a><h4 id="1-修改主机名，并写入hosts文件"><a href="#1-修改主机名，并写入hosts文件" class="headerlink" title="1. 修改主机名，并写入hosts文件"></a>1. 修改主机名，并写入hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 修改Httpd server 主机名；</span><br><span class="line">[root@centos6 ~]# hostname Httpd.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Httpd ~]# </span><br><span class="line">[root@Httpd ~]# vim /etc/hosts      # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Httpd.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat1 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat1 ~]# </span><br><span class="line">[root@Tomcat1 ~]# vim /etc/hosts        # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat1.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat2 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat2 ~]# </span><br><span class="line">[root@Tomcat2 ~]# vim /etc/hosts            # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat2.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Httpd.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# ping -c 1 Httpd.haiyun.com          # 测试是否能够解析成功，ok；</span><br><span class="line">PING localhost (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.010 ms</span><br><span class="line"></span><br><span class="line">--- localhost ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.010/0.010/0.010/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat1.haiyun.com</span><br><span class="line">PING Tomcat1.haiyun.com (192.168.8.12) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat1.haiyun.com (192.168.8.12): icmp_seq=1 ttl=64 time=1.83 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat1.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.835/1.835/1.835/0.000 ms</span><br><span class="line">[root@Httpd ~]# ping -c 1 Tomcat2.haiyun.com</span><br><span class="line">PING Tomcat2.haiyun.com (192.168.8.15) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat2.haiyun.com (192.168.8.15): icmp_seq=1 ttl=64 time=1.94 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat2.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.940/1.940/1.940/0.000 ms</span><br></pre></td></tr></table></figure><h4 id="2-同步所有server的时间"><a href="#2-同步所有server的时间" class="headerlink" title="2. 同步所有server的时间"></a>2. 同步所有server的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Httpd server</span><br><span class="line">[root@Httpd ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:36 ntpdate[11037]: adjust time server 172.18.0.1 offset -0.000054 sec</span><br><span class="line">[root@Httpd ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1 server</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[3153]: adjust time server 172.18.0.1 offset 0.000261 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat2 server</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[11255]: adjust time server 172.18.0.1 offset 0.332502 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br></pre></td></tr></table></figure><h3 id="为两台后端server安装Tomcat软件"><a href="#为两台后端server安装Tomcat软件" class="headerlink" title="为两台后端server安装Tomcat软件"></a>为两台后端server安装Tomcat软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br></pre></td></tr></table></figure><h3 id="为两台Tomcat设置默认访问主页"><a href="#为两台Tomcat设置默认访问主页" class="headerlink" title="为两台Tomcat设置默认访问主页"></a>为两台Tomcat设置默认访问主页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat1 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat2 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat2&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><strong>注意：</strong><code>Tomcat1</code>为红色，<code>Tomcat2</code>为蓝色。</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-http-Diaodu-Tomcat-2.gif" title="访问测试"></center><h3 id="安装Httpd并配置调度"><a href="#安装Httpd并配置调度" class="headerlink" title="安装Httpd并配置调度"></a>安装Httpd并配置调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# yum -y install httpd        # 安装httpd；</span><br><span class="line">[root@Httpd ~]# vim /etc/httpd/conf.d/httpd.conf            # 添加配置文件；</span><br><span class="line">&lt;proxy balancer://tcsrvs&gt;</span><br><span class="line">    BalancerMember http://192.168.8.12:8080</span><br><span class="line">    BalancerMember http://192.168.8.15:8080</span><br><span class="line">    ProxySet lbmethod=byrequests</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName httpd.ihaiyun.cc</span><br><span class="line">    ProxyVia On</span><br><span class="line">    ProxyRequests Off </span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / balancer://tcsrvs/</span><br><span class="line">    ProxyPassReverse / balancer://tcsrvs/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">[root@Httpd ~]# systemctl start httpd</span><br></pre></td></tr></table></figure><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Httpd ~]# for i in &#123;1..4&#125; ; do elinks -dump http://192.168.8.17/myapp/ ; done     # 访问测试，ok；</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | CB54B841B411BD39AC206E5C21A94D2D |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671410                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 5AE73728906E1B832CFABA7DBAB44F62 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671678                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 3223618E201BC73DCB053C52BD2972F2 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671494                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 6DE3ECA59EDB7EB71ECCFBDD47443F4A |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510055671758                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Httpd基于http协议调度Tomcat集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx调度Tomcat集群</title>
      <link href="/2017/11/07/Tomcat-Nginx-Diaodu-Tomcat/"/>
      <url>/2017/11/07/Tomcat-Nginx-Diaodu-Tomcat/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Nginx-Diaodu-Tomcat-1.jpg" title="拓扑图"></center><center> 拓扑</center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>nginx.x86_64 1:1.10.2</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr></tbody></table><a id="more"></a><h4 id="1-修改主机名，并写入hosts文件"><a href="#1-修改主机名，并写入hosts文件" class="headerlink" title="1. 修改主机名，并写入hosts文件"></a>1. 修改主机名，并写入hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># 修改Nginx server 主机名；</span><br><span class="line">[root@centos6 ~]# hostname Nginx.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Nginx ~]# </span><br><span class="line">[root@Nginx ~]# vim /etc/hosts      # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Nginx.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Nginx.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat1 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat1.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat1 ~]# </span><br><span class="line">[root@Tomcat1 ~]# vim /etc/hosts        # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat1.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Nginx.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改Tomccat2 server 主机名；</span><br><span class="line">[root@centos7 ~]# hostname Tomcat2.haiyun.com &amp;&amp; exec bash</span><br><span class="line">[root@Tomcat2 ~]# </span><br><span class="line">[root@Tomcat2 ~]# vim /etc/hosts            # 写入/etc/hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 Tomcat2.haiyun.com</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 Nginx.haiyun.com </span><br><span class="line">192.168.8.12 Tomcat1.haiyun.com</span><br><span class="line">192.168.8.15 Tomcat2.haiyun.com</span><br><span class="line"></span><br><span class="line">[root@Nginx ~]# ping -c 1 Nginx.haiyun.com          # 测试是否能够解析成功，ok；</span><br><span class="line">PING localhost (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.010 ms</span><br><span class="line"></span><br><span class="line">--- localhost ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.010/0.010/0.010/0.000 ms</span><br><span class="line">[root@Nginx ~]# ping -c 1 Tomcat1.haiyun.com</span><br><span class="line">PING Tomcat1.haiyun.com (192.168.8.12) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat1.haiyun.com (192.168.8.12): icmp_seq=1 ttl=64 time=1.83 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat1.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.835/1.835/1.835/0.000 ms</span><br><span class="line">[root@Nginx ~]# ping -c 1 Tomcat2.haiyun.com</span><br><span class="line">PING Tomcat2.haiyun.com (192.168.8.15) 56(84) bytes of data.</span><br><span class="line">64 bytes from Tomcat2.haiyun.com (192.168.8.15): icmp_seq=1 ttl=64 time=1.94 ms</span><br><span class="line"></span><br><span class="line">--- Tomcat2.haiyun.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 1.940/1.940/1.940/0.000 ms</span><br></pre></td></tr></table></figure><h4 id="2-同步所有server的时间"><a href="#2-同步所有server的时间" class="headerlink" title="2. 同步所有server的时间"></a>2. 同步所有server的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Nginx server</span><br><span class="line">[root@Nginx ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:36 ntpdate[11037]: adjust time server 172.18.0.1 offset -0.000054 sec</span><br><span class="line">[root@Nginx ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1 server</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[3153]: adjust time server 172.18.0.1 offset 0.000261 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat2 server</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 7 Nov 16:32:42 ntpdate[11255]: adjust time server 172.18.0.1 offset 0.332502 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Tue Nov  7 16:32:47 CST 2017</span><br></pre></td></tr></table></figure><h3 id="为两台后端server安装Tomcat软件"><a href="#为两台后端server安装Tomcat软件" class="headerlink" title="为两台后端server安装Tomcat软件"></a>为两台后端server安装Tomcat软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel tomcat tomcat-admin-webapps tomcat-docs-webapp tomcat-webapps</span><br></pre></td></tr></table></figure><h3 id="为两台Tomcat设置默认访问主页"><a href="#为两台Tomcat设置默认访问主页" class="headerlink" title="为两台Tomcat设置默认访问主页"></a>为两台Tomcat设置默认访问主页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat1 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# mkdir -pv /usr/share/tomcat/webapps/myapp/WEB-INF</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp’</span><br><span class="line">mkdir: created directory ‘/usr/share/tomcat/webapps/myapp/WEB-INF’</span><br><span class="line">[root@Tomcat2 ~]# vim /usr/share/tomcat/webapps/myapp/index.jsp     # 创建默认主页；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;title&gt;Tomcat2&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">            &lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat.service        # 启动Tomcat服务；</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><strong>注意：</strong><code>Tomcat1</code>为红色，<code>Tomcat2</code>为蓝色。</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Nginx-Diaodu-Tomcat-2.gif" title="访问测试"></center><h3 id="安装Nginx并配置调度"><a href="#安装Nginx并配置调度" class="headerlink" title="安装Nginx并配置调度"></a>安装Nginx并配置调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx ~]# yum -y  install  nginx</span><br><span class="line">[root@Nginx ~]# vim /etc/nginx/nginx.conf       # 修改配置文件；</span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    upstream tcsrvs &#123;               # 添加一个upstream；</span><br><span class="line">        server 192.168.8.12:8080;</span><br><span class="line">        server 192.168.8.15:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://tcsrvs ;          # 调度；</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx ~]# nginx -t        # 检查配置文件，ok；</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx ~]# nginx           # 启动nginx；</span><br></pre></td></tr></table></figure><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx ~]# for i in &#123;1..4&#125; ; do elinks -dump http://192.168.8.17/myapp/ ; done         # 访问测试，ok；</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 38F138AAC0BEEFC6D8E05C7D744EC0D4 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510048315220                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 9637B2765CBB9B45E8EE1FA9C77FCD86 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510048315322                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | C4257FC42C22ED09670B8C0EEF763E97 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510048315299                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 6A4111864EEC323C8156A269D8CBB8C5 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510048315401                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Nginx调度Tomcat集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>会话保持解决方案</title>
      <link href="/2017/11/07/Tomcat-Keep-Session/"/>
      <url>/2017/11/07/Tomcat-Keep-Session/</url>
      <content type="html"><![CDATA[<h3 id="一、为什么需要会话保持"><a href="#一、为什么需要会话保持" class="headerlink" title="一、为什么需要会话保持"></a>一、为什么需要会话保持</h3><p>如果我们将后端的Web服务器分为两组，一组是静态内容服务器，一组是动态内容服务器，那么我们再进行反向代理的时候，反向代理服务器通过判断资源文件的后缀名，决定将其调度至后端的那一组服务上。如果我们的后端服务器静态内容和动态内容都分别有多台，那么反向代理服务器还需要对其进行负载均衡，然后觉得资源调度到那一台服务器。那么对于静态内容的服务器，因为静态内容是不会处理会话的，所以在进行负载均衡时我们不用考虑其会话保持。做最简单的和最直接的轮询就好了，如果服务器的性能不一样的话，就做加权轮询即可。当然如果说后端静态服务器的资源大小区别也非常大，那么轮询的方式对负载均衡的方式来讲，效果不是特别明显，那可能需要使用最少连接数的负载均衡方式来处理这类资源情况，最少连接是可以考虑当前连接的服务器的负载情况，能保证结果公平。这是对于静态内容的服务器来说，那么对于动态内容的服务器，因为动态内容涉及到处理会话，我们就需要考虑负载均衡间服务器的会话保持了。会话保持是指在负载均衡器上有一种机制，在作负载均衡的同时，还保证同一用户相关连的访问请求会被分配到同一台服务器上。</p><a id="more"></a><p>举例来说，网络银行的服务门户网站。用户通过输入用户名和密码登录到应用系统中，一旦登录成功，用户可以做很多业务操作。例如检查帐户余额，在线转帐等。</p><p> 如果没有配置会话保持，那么可能出现这样的情况:用户登录的时候，系统选择了Server1进行认证，通过认证以后，用户接下来进行业务操作时(比如转帐)，此时系统又选择了Server2或Server3对用户进行服务，这时问题就出现了，因为Server2或Server3上没有用户交易状态的信息，所以Server2或Server3会认为用户没有通过认证，从而拒绝该用户的操作请求。</p><p>如果配置了会话保持，那么用户登录以后后续的所有操作都会直接发送到在认证时选择的那台服务上。</p><h3 id="二、会话保持的方法"><a href="#二、会话保持的方法" class="headerlink" title="二、会话保持的方法"></a>二、会话保持的方法</h3><h4 id="1、会话绑定"><a href="#1、会话绑定" class="headerlink" title="1、会话绑定"></a>1、会话绑定</h4><p><strong>1、会话绑定</strong>：会话绑定是指使用一个算法或者是使用持久连接，将来自于同一个IP的请求始终定向至后端的同一个后端服务器。这种方法简单易用，但有如下问题：</p><ul><li>当后端服务器宕机后，会话就会丢失；</li><li>来自同一IP的客户端会被转发到同一个后端服务器，可能导致负载失衡；</li><li>不适用于前段还有代理的情况。</li></ul><h4 id="2、会话复制"><a href="#2、会话复制" class="headerlink" title="2、会话复制"></a>2、会话复制</h4><p><strong>2、会话复制</strong>：也叫会话集群，通过后端服务器自身的组件构建成类似会话高可用的集群，集群内部的动态服务器之间通过多播方式进行通信，在这些集群服务器中，每一台服务器都会将自己创建的会话通过多播的方式同步给集群的其他服务器。所以每一个服务器都维持着当前集群内的所有会话，因此用户的请求可以被调度至任意服务器上。因为我们的会话都是在集群服务器之间被同步的，不管用户连接那一台服务器，他的会话都是存在的。但是这样一种解决方法的问题在于：</p><ul><li>由于服务器于服务器之间要进行会话复制，所以后端服务器之间的带宽被大量占用；</li><li>每台服务器都要维持整个集群中的所有会话，对服务器本身的资源占用和消耗非常大，使得服务器本身的并发承载能力有限。</li><li>但是好处在于我们的负载均衡调度可以任何进行，而且任何一个服务器故障都不会导致我们的会话丢失。</li></ul><h4 id="3、会话服务器"><a href="#3、会话服务器" class="headerlink" title="3、会话服务器"></a>3、会话服务器</h4><p><strong>3、会话服务器</strong>：因为会话复制的弊端，我们可以找一台高性能的服务器，存储流式的数据，比如MemCached，这个是著名的用于会话缓存服务器，MemCache可以把web服务器中的内存组合起来，成为一个”内存池”，不管是哪个服务器产生的会话都可以放到这个”内存池”中，其他的服务器都可以使用。还有Redis（Key-value，kv store），键值服务器，键值存储，对于种存储来讲，他们可以帮我们在前端把我们的会话保存下来。但是这种方式也有弊端：</p><ul><li>服务器有可能会成为性能瓶颈；</li><li>他们是单点故障之一，因此我们部署这种类似的服务器，还得做扩展和冗余。</li></ul><h4 id="4、其他会话保持技术"><a href="#4、其他会话保持技术" class="headerlink" title="4、其他会话保持技术"></a>4、其他会话保持技术</h4><ul><li>至于其他的用数据库做会话保持以及利用客户端的Cookie做会话保持的技术，直接就不用推荐，为什么？数据库本来就是瓶颈的地方，还用来进行会话保持，这不是加大数据库的负担吗？</li><li>利用客户端的Cookie做会话保持，需要客户端把Cookie开启，如果把Cookie禁掉了，也就玩不转了。而且利用客户端的Cookie，容易被攻击，毕竟Cookie安全性太低了，太容易被伪造。</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p> <a href="http://www.mamicode.com/" target="_blank" rel="noopener">本文内容来自：码迷</a></p>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> 会话保持解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP会话原理解释与应用</title>
      <link href="/2017/11/07/Tomcat-Session/"/>
      <url>/2017/11/07/Tomcat-Session/</url>
      <content type="html"><![CDATA[<h3 id="一、什么是会话"><a href="#一、什么是会话" class="headerlink" title="一、什么是会话"></a>一、什么是会话</h3><p> 首先解释一下什么是会话。在计算机术语中，会话是指一个终端用户与交互系统进行通讯的过程，比如从输入账户密码进入操作系统到退出操作系统就是一个会话过程。会话较多用于网络上，TCP的三次握手就创建了一个会话，TCP关闭连接就是关闭会话。用平述的语言可以解释为：你拔打你女友的电话号码，你女友接听，然后一翻“亲爱的”，直到任何一方挂掉电话，这个过程就是一个会话。你挑逗一只小狗，它跟你互动，也是会话；它不鸟你，那就不形成会话。</p><a id="more"></a><h3 id="二、什么是HTTP会话"><a href="#二、什么是HTTP会话" class="headerlink" title="二、什么是HTTP会话"></a>二、什么是HTTP会话</h3><p>协议的状态是指下一次传输可以“记住”这次传输信息的能力，HTTP是不会为了下一次连接而维护这次连接所传输的信息的。从传统WEB上看：无状态是指，当浏览器发送请求给服务器的时候，服务器响应，但是同一个浏览器再发送请求给服务器的时候，他会响应，但是他不知道你就是刚才那个浏览器，简单地说，就是服务器不会去记得你，所以是无状态协议。本质是：HTTP1.0是短连接的（这里先忽略HTTP1.1的keep alive吧），请求响应后，断开了TCP连接，下一次连接与上一次无关。为了识别不同的请求是否来自同一客户，引用HTTP会话机制，即：多次HTTP连接间维护用户与同一用户发出的不同请求之间关联的情况称为维护一个会话（session）。通过会话管理对会话进行创建、信息存储、关闭等。</p><h3 id="三、HTTP会话的实现机制"><a href="#三、HTTP会话的实现机制" class="headerlink" title="三、HTTP会话的实现机制"></a>三、HTTP会话的实现机制</h3><p>Cookie与session是各种教材，网上文章所介绍到的与HTTP会话相关的两个内容。这种者较常见的解释是：cookie存在在浏览器，session存储在服务器中。这种解释是最显浅的，很不严谨，但又不能说是错误。先从cookie谈起吧，很久很久以前，为了完成HTTP会话，那些互联网的设计者们想到了一个办法，就是在浏览器中存储用户信息，每次请求都向服务端发送这些信息，这样服务端就知道请求发送者是谁了，就知道应该返回什么信息给客户了。但是问题很快就出现了，张三冒充李四的名字发送请求给服务器，服务器把李四的相关信息发给了张三。为了安全起见，互联网老大哥们又想到了一招识别用户身份的办法，就是把客户信息存储在服务端（session），一切用户的身份由服务器指定。直到目前，session已成功HTTP会话的主流，应该说是绝对控制的地位。</p><p>Session是怎样做到会话身份识别的呢？首先，用户端向服务端发送一个请求，服务端接收到请求（这里忽悠无须会话控制的情况）后，初始化会话，生成相应的会话信息，核心是会话ID，把会话ID发送给客户端，客户端接收到这个会话ID，把它存储起来，下一次发送请求的时候，附带着这个会话ID一起发送给服务端，服务端只要根据这个会话ID，就知道是谁了。这个会话ID，就像我们的身份证号码，一直伴随终生。核心：服务端如何生成这个会话ID，客户端怎样存储这个会话ID。</p><h3 id="四、如何存储会话ID（SESSION-ID）"><a href="#四、如何存储会话ID（SESSION-ID）" class="headerlink" title="四、如何存储会话ID（SESSION ID）"></a>四、如何存储会话ID（SESSION ID）</h3><p>服务端存储会话ID有多种方式，常见的有本地存储，如：普通文本，文本名就是会话ID。对于文件系统，同一目录下，同一文件名只允许唯一一个文件，那么使用会话ID作为文件名是可以做到唯一确定会话的。除了本地文件存储，还可以使用memcache、redis、或者Mysql之类的数据库存储，即使用第三方数据库进行存储。只有一个原则：存储的会话ID必须是唯一的。</p><p>客户端收到服务端返回的（或者说服务端下发的）会话ID后，也是像服务端那样使用文件名作为会话ID存储会话信息到文本吗？如果客户端只与同一个服务端（理解为同一个服务端处理程序）进行会话通讯的话，是可行的。但是，HTTP是因万维网而生的，浏览器作为最常见的HTTP客户端，需要访问各种不同的网站，如果采用会话ID作为文件名，以这样的文件存在会话信息的话，会出现这样的情况：N个不同的网站，服务端采用的是相同的会话生成算法，在同一时刻，很可能会生成一样的会话ID，客户端则无法唯一确定这个会话ID到底是与哪个服务端通讯，也就是客户端“不认得”服务端了，会话就无法完成。如何确定服务端身份？那就是使用“域”，不同的域拥有独立的会话。客户端以域相关信息作为文件标识符创建会话文件（客户端存储）对会话信息进行存储，其中域与会话ID结合就能唯一确定服务端，并且确定会话。那么，以“域”信息作为文件名的文件中存储着会话ID等信息。每次请求某个域的服务时，把存储着的会话ID附带到请求中发送到服务端。浏览器是最常见的HTTP客户端，浏览器存储会话信息，是使用COOKIE文件的，里面保存着COOKIE信息，而服务端返回的会话ID也存储在里面。会话ID存储在COOKIE文件中是一般情况下的，而COOKIE信息是作为HTTP头发送给服务端的，也就是说这种情况下，会话ID是附带在请求头中。但是，HTTP请求，除了头信息，还可以有内容体，必须有URL。那么，会话ID同样可以存储在内容体中或URL中，比如在禁用浏览器COOKIE的情况下，也可实现与服务端会话，要么依赖内容体，要么依赖URL，常见的是URL中附带会话ID，这个在PHP等编程语言中较为常见（曾经的历史上常见，但是会涉及安全或者效率等问题，这里不详述）。</p><p>粗糙地，可理解为服务端返回给客户端的会话ID是存储在COOKIE文件中的。COOKIE文件是由浏览器管理的，当然在自实现的客户端中，可以通过编程手段实现COOKIE文件管理，即客户端会话的管理。举例：IOS开发者，可以把HTTP返回的信息头存储到沙盒中进行管理。PHP开发客户端时，可以把信息头写到文件中，或第三方服务中，或网络存储中等等。</p><h3 id="五、会话管理（SESSION）"><a href="#五、会话管理（SESSION）" class="headerlink" title="五、会话管理（SESSION）"></a>五、会话管理（SESSION）</h3><p>会话管理包括：会话创建、会话识别、会话信息操作、会话生命周期、会话关闭。</p><p>注意：这一节中的服务端会话都看作是开启的，无特别情况不再交待。</p><h4 id="1、会话创建"><a href="#1、会话创建" class="headerlink" title="1、会话创建"></a>1、会话创建</h4><p>客户端发起不带会话ID（SESSION ID）的HTTP请求，服务端认为还没产生会话，即创建会话，生成会话ID并且在服务器中存储相关会话信息，并通知客户端已开启会话。一般情况下，是在返回给客户端的HTTP  header中的COOKIE项中附带上会话ID，形式为：会话标记：会话ID。客户端根据返回的信息头，设置本地COOKIE值并存储。</p><h4 id="2、会话识别"><a href="#2、会话识别" class="headerlink" title="2、会话识别"></a>2、会话识别</h4><p>会话ID是会话的唯一标识符，一个会话ID只会对应一个会话，就像身份证号码只对应一个人一样。HTTP中，服务端是被动接受请求的，会话识别也是被动的（触发式）。服务端不需要知道发送请求的到底是谁，只需要知道对方发送过来的会话ID，把客户端传过来的会话ID与服务端存储的会话ID进行匹配。找不到这个会话ID，就认为这个会话是不存在的。</p><p>举例：服务器有个会话ID是“21412545jladfjljljqwr”，映射的值是“名字：张三，性别：男”。客户端只要请求中的会话ID是“21412545jladfjljljqwr”，就识别到这个会话了，能认为这人是张三，而且是男性。如果客户端请求的会话ID是“qwesadfasdfadsfasdf”，即使客户端附带了信息“名字：张三，性别：男”，服务端都认为不存在此人，不形成会话。就算是李四盗用了张三的会话ID，服务端也会识别这个会话</p><p>可简单理解为：SESSION只根据SESSION ID建立起会话，是不负责安全校验的，只负责让服务端与客户端可以“通话”。</p><h4 id="3、会话信息操作"><a href="#3、会话信息操作" class="headerlink" title="3、会话信息操作"></a>3、会话信息操作</h4><p>服务端：会话ID映射信息，ID不变，映射的内容可变</p><p>客户端：会话ID映射信息，ID不变，映射的内容可变（即存在在COOKIEk中的内容可变）。</p><p>服务端与客户端的会话信息只有会话ID是必须相同的，其它会话信息（即会话ID映射的信息）没有直接关系。</p><h4 id="4、会话生命周期"><a href="#4、会话生命周期" class="headerlink" title="4、会话生命周期"></a>4、会话生命周期</h4><p>会话从开始到结束就是会话的生命周期。设定一个时间，这个时间内无通讯就清除会话信息，我们就把这个时间叫做会话超时周期。</p><p>习惯地，我们把会话超时周期叫做会话的生命周期，其实这是两个概念。</p><h4 id="5、会话关闭"><a href="#5、会话关闭" class="headerlink" title="5、会话关闭"></a>5、会话关闭</h4><p>会话关闭，有2种方式。一种是用户主动清除会话信息，另一种是会话超时。会话超时不是守护任务（或自动任务）周期性检查处理的，而是访问会话信息时，根据会话信息中的“上一次更新时间”到现在的时间差，与会话周期比较，超出周期的，清除会话信息，即会话关闭。</p><p>经典例子：会话过程中，突然断网。</p><h3 id="六、-会话原理的应用"><a href="#六、-会话原理的应用" class="headerlink" title="六、 会话原理的应用"></a>六、 会话原理的应用</h3><p>浏览器默认是开启Cookie的，浏览器发起HTTP请求时，在请求头中带有Cookie信息，只要服务端返回Cookie中包含SessionID，在服务端根据Sessionid即实现HTTP会话，此过程对于前端开发者是透明的（即前端开发可以不关心浏览器是怎样与服务端确定会话的）。</p><p>除即时通讯，实时动作网游外，大多APP是使用HTTP协议与服务端通讯的，使用HTTP协议的原因主要是移动网络环境复杂（容易断线），并且HTTP协议穿透性强。原生开发的IOS，安卓等APP，与服务端会话，可不使用COOKIE，只需要在请求中携带会话ID即可，这在上文已描述。原生APP与内嵌浏览器的APP相比：原生实现性能更高，交互效果流畅，用户体验相对较好，但快速跌代比不上内嵌浏览器的APP。手机配置越来越高，内嵌浏览器对HTML5支持也越来越好，在性能要求不是很高的场景，内嵌WEB的性能已可满足，在布局多变，或者元素多变的情况下，可快速修改，而无需用户升级APP，也能获得更好的产品体验。APP内嵌WEB最常见的场景就是电商APP了，登陆、注册、入口等交互效果较多的模块使用原生程序开发，而商品列表、商品展示等等模块可采用内嵌WEB,这样既可满足快速产品跌代的要求，又可满足操作的性能要求。</p><p> 举例：电商APP入门界面、登陆、注册是使用原生开发的，登陆后跳转到商品列表页（即内嵌WEB），然后下订单。问题来了，如何使得登陆后跳转到WEB后，还是登陆状态（即内嵌WEB与原生程序具有一致的会话 ）呢？内嵌WEB是不会去取得原生程序所存储的data的。最简单直接的办法就是：登陆成功，服务器返回会话ID与成功信息，跳转到WEB时，发送的HTTP请求头中包括COOKIE，会话ID存储在COOKIE中，这样之后点击WEB中的链接后向服务端发送的HTTP请求头，就会携带这个COOKIE（会话ID）了。简单地理解：终端原生程序请求服务端，服务端按普通WEB那样返回信息，终端原生程序取得HTTP返回头中的COOKIE信息，保存下来，下一次请求时，携带COOKIE信息即可。在浏览器中，COOKIE的处理由浏览器默认处理，而在原生APP程序中，由开发者写程序去处理而已。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p> <a href="http://www.mamicode.com/info-detail-608168.html" target="_blank" rel="noopener">本文内容来自：码迷-HTTP会话原理解释与应用</a></p>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> HTTP会话原理解释与应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Varnish日志</title>
      <link href="/2017/11/06/Varnish-Log/"/>
      <url>/2017/11/06/Varnish-Log/</url>
      <content type="html"><![CDATA[<h3 id="Varnishlog"><a href="#Varnishlog" class="headerlink" title="Varnishlog"></a>Varnishlog</h3><p><code>varnishlog</code>：显示原始日志格式信息</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishlog </span><br><span class="line">*   &lt;&lt; BeReq    &gt;&gt; 3         </span><br><span class="line">-   Begin          bereq 2 pass</span><br><span class="line">-   Timestamp      Start: 1509976549.796530 0.000000 0.000000</span><br><span class="line">-   BereqMethod    GET</span><br><span class="line">-   BereqURL       /login/</span><br><span class="line">-   BereqProtocol  HTTP/1.1</span><br><span class="line">-   BereqHeader    Host: 192.168.8.12</span><br><span class="line">-   BereqHeader    Cache-Control: max-age=0</span><br><span class="line">-   BereqHeader    Upgrade-Insecure-Requests: 1</span><br><span class="line">-   BereqHeader    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36</span><br><span class="line">-   BereqHeader    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">-   BereqHeader    Accept-Encoding: gzip, deflate</span><br><span class="line">-   BereqHeader    Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line">-   BereqHeader    Cookie: solo=732e32b4c3cbba398e9012784ab5b73c476497082ae9da4fece6802005aa95e7b56437ec3b4f64a6f3f8d84903ae067826d5036728270b7ce8a3136e6427a59888a534443b2723cf1a379f2a83216b0a7992966869df4284f600c6be73056c528b6a93e20c50dda63b7d8eaecac3b4e8</span><br><span class="line">-   BereqHeader    If-None-Match: &quot;134-b-55d4f270ba01d&quot;</span><br><span class="line">-   BereqHeader    If-Modified-Since: Mon, 06 Nov 2017 11:57:02 GMT</span><br><span class="line">-   BereqHeader    X-Forwarded-For: 192.168.8.1</span><br><span class="line">-   BereqHeader    X-Varnish: 3</span><br><span class="line">-   VCL_call       BACKEND_FETCH</span><br><span class="line">-   VCL_return     fetch</span><br><span class="line">-   BackendOpen    21 srv1(192.168.8.11,,80) 192.168.8.12 54160 </span><br><span class="line">-   Backend        21 srvs srv1(192.168.8.11,,80)</span><br><span class="line">-   Timestamp      Bereq: 1509976549.797146 0.000617 0.000617</span><br><span class="line">-   Timestamp      Beresp: 1509976549.797757 0.001227 0.000611</span><br><span class="line">-   BerespProtocol HTTP/1.1</span><br><span class="line">-   BerespStatus   304</span><br><span class="line">-   BerespReason   Not Modified</span><br><span class="line">-   BerespHeader   Date: Mon, 06 Nov 2017 13:56:12 GMT</span><br><span class="line">-   BerespHeader   Server: Apache/2.2.15 (CentOS)</span><br><span class="line">-   BerespHeader   Connection: close</span><br><span class="line">-   BerespHeader   ETag: &quot;134-b-55d4f270ba01d&quot;</span><br><span class="line">-   TTL            RFC 120 -1 -1 1509976550 1509976550 1509976572 0 0</span><br><span class="line">-   VCL_call       BACKEND_RESPONSE</span><br><span class="line">-   TTL            VCL 120 10 0 1509976550</span><br><span class="line">-   VCL_return     deliver</span><br><span class="line">-   Storage        malloc Transient</span><br><span class="line">-   ObjProtocol    HTTP/1.1</span><br><span class="line">-   ObjStatus      304</span><br><span class="line">-   ObjReason      Not Modified</span><br><span class="line">-   ObjHeader      Date: Mon, 06 Nov 2017 13:56:12 GMT</span><br><span class="line">-   ObjHeader      Server: Apache/2.2.15 (CentOS)</span><br><span class="line">-   ObjHeader      ETag: &quot;134-b-55d4f270ba01d&quot;</span><br><span class="line">-   Fetch_Body     0 none -</span><br><span class="line">-   Timestamp      BerespBody: 1509976549.802552 0.006022 0.004795</span><br><span class="line">-   BackendClose   21 srv1(192.168.8.11,,80)</span><br><span class="line">-   Length         0</span><br><span class="line">-   BereqAcct      754 0 754 146 0 146</span><br><span class="line">-   End            </span><br><span class="line"></span><br><span class="line">*   &lt;&lt; Request  &gt;&gt; 2         </span><br><span class="line">-   Begin          req 1 rxreq</span><br><span class="line">-   Timestamp      Start: 1509976549.796289 0.000000 0.000000</span><br><span class="line">-   Timestamp      Req: 1509976549.796289 0.000000 0.000000</span><br><span class="line">-   ReqStart       192.168.8.1 57807</span><br><span class="line">-   ReqMethod      GET</span><br><span class="line">-   ReqURL         /login/</span><br><span class="line">-   ReqProtocol    HTTP/1.1</span><br><span class="line">-   ReqHeader      Host: 192.168.8.12</span><br><span class="line">-   ReqHeader      Connection: keep-alive</span><br><span class="line">-   ReqHeader      Cache-Control: max-age=0</span><br><span class="line">-   ReqHeader      Upgrade-Insecure-Requests: 1</span><br><span class="line">-   ReqHeader      User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36</span><br><span class="line">-   ReqHeader      Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">-   ReqHeader      Accept-Encoding: gzip, deflate</span><br><span class="line">-   ReqHeader      Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line">-   ReqHeader      Cookie: solo=732e32b4c3cbba398e9012784ab5b73c476497082ae9da4fece6802005aa95e7b56437ec3b4f64a6f3f8d84903ae067826d5036728270b7ce8a3136e6427a59888a534443b2723cf1a379f2a83216b0a7992966869df4284f600c6be73056c528b6a93e20c50dda63b7d8eaecac3b4e8</span><br><span class="line">-   ReqHeader      If-None-Match: &quot;134-b-55d4f270ba01d&quot;</span><br><span class="line">-   ReqHeader      If-Modified-Since: Mon, 06 Nov 2017 11:57:02 GMT</span><br><span class="line">-   ReqHeader      X-Forwarded-For: 192.168.8.1</span><br><span class="line">-   VCL_call       RECV</span><br><span class="line">-   VCL_return     pass</span><br><span class="line">-   VCL_call       HASH</span><br><span class="line">-   VCL_return     lookup</span><br><span class="line">-   VCL_call       PASS</span><br><span class="line">-   VCL_return     fetch</span><br><span class="line">-   Link           bereq 3 pass</span><br><span class="line">-   Timestamp      Fetch: 1509976549.802556 0.006268 0.006268</span><br><span class="line">-   RespProtocol   HTTP/1.1</span><br><span class="line">-   RespStatus     304</span><br><span class="line">-   RespReason     Not Modified</span><br><span class="line">-   RespHeader     Date: Mon, 06 Nov 2017 13:56:12 GMT</span><br><span class="line">-   RespHeader     Server: Apache/2.2.15 (CentOS)</span><br><span class="line">-   RespHeader     ETag: &quot;134-b-55d4f270ba01d&quot;</span><br><span class="line">-   RespHeader     X-Varnish: 2</span><br><span class="line">-   RespHeader     Age: 0</span><br><span class="line">-   RespHeader     Via: 1.1 varnish-v4</span><br><span class="line">-   VCL_call       DELIVER</span><br><span class="line">-   VCL_return     deliver</span><br><span class="line">-   Timestamp      Process: 1509976549.802575 0.006286 0.000019</span><br><span class="line">-   Debug          &quot;RES_MODE 0&quot;</span><br><span class="line">-   RespHeader     Connection: keep-alive</span><br><span class="line">-   Timestamp      Resp: 1509976549.802628 0.006340 0.000053</span><br><span class="line">-   Debug          &quot;XXX REF 1&quot;</span><br><span class="line">-   ReqAcct        734 0 734 194 0 194</span><br><span class="line">-   End            </span><br><span class="line"></span><br><span class="line">*   &lt;&lt; Session  &gt;&gt; 1         </span><br><span class="line">-   Begin          sess 0 HTTP/1</span><br><span class="line">-   SessOpen       192.168.8.1 57807 :80 192.168.8.12 80 1509976549.795585 12</span><br><span class="line">-   Link           req 2 rxreq</span><br><span class="line">-   SessClose      RX_TIMEOUT 5.048</span><br><span class="line">-   End</span><br></pre></td></tr></table></figure><h3 id="varnishtop-日志条目实时排序"><a href="#varnishtop-日志条目实时排序" class="headerlink" title="varnishtop: 日志条目实时排序"></a>varnishtop: 日志条目实时排序</h3><ul><li>支持正则表达式匹配</li><li>常用选项：<ul><li><code>-IP PATTERN</code>：匹配条件则显示</li><li><code>-X  PATTERN</code>：不匹配条件则显示</li><li><code>-1     Inst</code>ead of a continously updated display, print the statistics once and exit.</li><li><code>-i taglist</code>，可以同时使用多个-i选项，也可以一个选项跟上多个标签；</li><li><code>-I &lt;[taglist:]regex&gt;</code></li><li><code>-x taglist</code>：排除列表</li><li><code>-X  &lt;[taglist:]regex&gt;</code></li></ul></li></ul><h4 id="直接使用varnishtop"><a href="#直接使用varnishtop" class="headerlink" title="直接使用varnishtop"></a>直接使用varnishtop</h4><p>刷新浏览器</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-1.gif" title="访问测试"></center><p>查看排序</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-2.gif" title="查看排序"></center><h4 id="查看特定标签的排序"><a href="#查看特定标签的排序" class="headerlink" title="查看特定标签的排序"></a>查看特定标签的排序</h4><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-3.gif" title="查看特定标签的排序"></center><h4 id="查看除了某标签的排序"><a href="#查看除了某标签的排序" class="headerlink" title="查看除了某标签的排序"></a>查看除了某标签的排序</h4><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-4.gif" title="查看除了某标签的排序"></center><h4 id="查看特定的多个标签"><a href="#查看特定的多个标签" class="headerlink" title="查看特定的多个标签"></a>查看特定的多个标签</h4><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-5.gif" title="查看特定的多个标签"></center><h4 id="基于正则表达式过滤"><a href="#基于正则表达式过滤" class="headerlink" title="基于正则表达式过滤"></a>基于正则表达式过滤</h4><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-6.gif" title="基于正则表达式过滤"></center><h3 id="varnishncsa-显示combined格式日志信息"><a href="#varnishncsa-显示combined格式日志信息" class="headerlink" title="varnishncsa: 显示combined格式日志信息"></a>varnishncsa: 显示combined格式日志信息</h3><p><code>varnishncsa</code>: 显示<code>combined</code>格式日志信息</p><p>打开之后会一直处于监听状态，有请求则以<code>combined</code>格式显示请求日志</p><p>格式如下：</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-7.jpg" title="combined格式日志信息"></center><h4 id="将日志记录到本地"><a href="#将日志记录到本地" class="headerlink" title="将日志记录到本地"></a>将日志记录到本地</h4><p>命令：<code>/usr/bin/varnishncsa -a -w /var/log/varnish/varnishncsa.log -D -P /run/varnishncsa/varnishncsa.pid</code></p><p>文件路径：<code>/var/log/varnish/varnishncsa.log</code></p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-8.gif" title="日志记录到本地"></center><h3 id="varnishstat-显示计数器信息"><a href="#varnishstat-显示计数器信息" class="headerlink" title="varnishstat: 显示计数器信息"></a>varnishstat: 显示计数器信息</h3><ul><li>显示的信息为服务工作状态信息</li><li>如：接收的客户端请求数，缓冲的命中次数，启动的线程数等</li></ul><p>选项：</p><ul><li><code>-1</code></li><li><code>-1 -f FILED_NAME</code> <ul><li><code>-l</code>：可用于<code>-f</code>选项指定的字段名称列表；</li></ul></li></ul><h4 id="直接执行varnishstat"><a href="#直接执行varnishstat" class="headerlink" title="直接执行varnishstat"></a>直接执行varnishstat</h4><center><img src="https://houhaiyun.github.io/img/images/Varnish-Log-9.gif" title="执行varnishstat"></center><h4 id="查看特定某字段"><a href="#查看特定某字段" class="headerlink" title="查看特定某字段"></a>查看特定某字段</h4><p>查看缓存命中的次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishstat -1 -f MAIN.cache_hit</span><br><span class="line">MAIN.cache_hit               0         0.00 Cache hits</span><br></pre></td></tr></table></figure><h4 id="查看多个字段"><a href="#查看多个字段" class="headerlink" title="查看多个字段"></a>查看多个字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishstat -1 -f MAIN.cache_hit -f MAIN.cache_miss</span><br><span class="line">MAIN.cache_hit               0         0.00 Cache hits</span><br><span class="line">MAIN.cache_miss              0         0.00 Cache misses</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> Varnish日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>varnishadm设定后台server状态</title>
      <link href="/2017/11/06/Varnish-varnishadm-status/"/>
      <url>/2017/11/06/Varnish-varnishadm-status/</url>
      <content type="html"><![CDATA[<h3 id="设定后端server为sick"><a href="#设定后端server为sick" class="headerlink" title="设定后端server为sick"></a>设定后端server为sick</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">backend.list            # 查看后端server状态；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Healthy 6/6</span><br><span class="line">backend.set_health srv1 sick        # 将srv1设为sick；</span><br><span class="line">200        </span><br><span class="line"></span><br><span class="line">backend.set_healtlist       # 查看后端server状态，已经设置为sick；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      sick       Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Healthy 6/6</span><br></pre></td></tr></table></figure><p>测试，已经设置为<code>sick</code></p><center><img src="https://houhaiyun.github.io/img/images/Varnish-varnishadm-status-1.gif" title="访问测试"></center><h3 id="设置后端server为auto"><a href="#设置后端server为auto" class="headerlink" title="设置后端server为auto"></a>设置后端server为auto</h3><p><code>auto</code>就代表根据探测结果来决定是<code>healthy</code>的还是<code>sick</code>的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">backend.list            # 查看后端server状态；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      sick       Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Healthy 6/6</span><br><span class="line">backend.set_health srv1 auto        # 将srv1设置为auto；</span><br><span class="line">200        </span><br><span class="line"></span><br><span class="line">backend.list        # 查看后端server状态；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Healthy 6/6</span><br></pre></td></tr></table></figure><p>访问测试，ok</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-varnishadm-status-2.gif" title="访问测试"></center><h3 id="设置后端server为healthy"><a href="#设置后端server为healthy" class="headerlink" title="设置后端server为healthy"></a>设置后端server为healthy</h3><p>设置了后端主机为<code>healthy</code>，就代表不管这台<code>server</code>是否<code>sick</code>，<code>varnish</code>都认为它是<code>healthy</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">backend.list                # 查看后端server状态；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Healthy 6/6</span><br><span class="line">backend.set_health srv2 healthy     # 设置srv2为healthy</span><br><span class="line">200        </span><br><span class="line"></span><br><span class="line">backend.set_healtlist           # 查看后端server状态；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      healthy    Healthy 6/6</span><br></pre></td></tr></table></figure><p>访问测试，ok</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-varnishadm-status-3.gif" title="访问测试"></center><p>现在我们将<code>srv2</code>的<code>web</code>服务<code>down</code>掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web2 html]# service httpd stop        # 停止srv2的httpd服务；</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br></pre></td></tr></table></figure></p><p>访问测试，可以看到，虽然<code>srv2</code>是宕机的，但是<code>varnish</code>认为它还是<code>healthy</code>的。</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-varnishadm-status-4.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> varnishadm设定后台server状态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现后端server负载均衡+健康检测</title>
      <link href="/2017/11/06/Varnish-Fuzaijunhen-healthy/"/>
      <url>/2017/11/06/Varnish-Fuzaijunhen-healthy/</url>
      <content type="html"><![CDATA[<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>后端定义两个<code>web server</code>，192.168.8.13和192.168.8.11。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># web1配置；</span><br><span class="line">[root@web html]# ifconfig eth1</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.11  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1459 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1690 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:144561 (141.1 KiB)  TX bytes:1249303 (1.1 MiB)</span><br><span class="line">[root@web html]# yum install httpd</span><br><span class="line">[root@web html]# cd /var/www/html/</span><br><span class="line">[root@web html]# echo &quot;web server&quot; &gt; index.html</span><br><span class="line">[root@web html]# for i in &#123;1..10&#125; ; do echo &quot;test $i page&quot; &gt; $i.html ; done</span><br><span class="line">[root@web html]# mkdir ./login</span><br><span class="line">[root@web html]# echo &quot;web1 login&quot; &gt; ./login/index.html</span><br><span class="line">[root@web html]# service httpd start</span><br><span class="line">[root@web html]# ls</span><br><span class="line">10.html  1.html  2.html  3.html  4.html  5.html  6.html  7.html  8.html  9.html  index.html</span><br><span class="line"></span><br><span class="line"># web2 配置；</span><br><span class="line">[root@web2 html]# ifconfig eth1 </span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.13  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:967 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:598 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:326109 (318.4 KiB)  TX bytes:81411 (79.5 KiB)</span><br><span class="line">[root@web2 html]# yum install -y httpd</span><br><span class="line">[root@web2 html]# mkdir ./login</span><br><span class="line">[root@web2 html]# echo &quot;web2 login&quot; &gt; ./login/index.html</span><br><span class="line">[root@web2 html]# service httpd start</span><br></pre></td></tr></table></figure><h3 id="修改varnish配置文件"><a href="#修改varnish配置文件" class="headerlink" title="修改varnish配置文件"></a>修改varnish配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# vim /etc/varnish/default.vcl  </span><br><span class="line">probe healthchk &#123;       # 定义健康状态检测；；</span><br><span class="line">    .url = &quot;/index.html&quot;;   # 定义检测的URL；</span><br><span class="line">    .interval = 2s ;        # 检测频率；</span><br><span class="line">    .timeout = 2s ;         # 请求的超时时长(默认2s)；</span><br><span class="line">    .window = 6 ;           # 在window中定义的次数中请求成功的次数；</span><br><span class="line">    .threshold = 5 ;        # 表示在最近的多少次检测是有效的；</span><br><span class="line">    .expected_response：200;    # 期望的响应码，默认为200；</span><br><span class="line">&#125;</span><br><span class="line">backend srv1 &#123;</span><br><span class="line">    .host = &quot;192.168.8.11&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">    .probe = healthchk;      # 调用健康检查healthchk；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backend srv2 &#123;</span><br><span class="line">    .host = &quot;192.168.8.13&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">    .probe = healthchk ;     # 调用健康检查healthchk；</span><br><span class="line">&#125;</span><br><span class="line">import directors;</span><br><span class="line">sub vcl_init &#123;</span><br><span class="line">    new srvs = directors.round_robin();</span><br><span class="line">    srvs.add_backend(srv1);</span><br><span class="line">    srvs.add_backend(srv2);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">    set req.backend_hint = srvs.backend();</span><br><span class="line"></span><br><span class="line">    if (req.url ~ &quot;(?i)^/(login|admin)&quot;) &#123;</span><br><span class="line">        return(pass);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082       # 启用配置文件；</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test2</span><br><span class="line">available       0 test3</span><br><span class="line">active          0 test4</span><br><span class="line"></span><br><span class="line">vcl.load test5 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test5</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test5&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test2</span><br><span class="line">available       0 test3</span><br><span class="line">available       0 test4</span><br><span class="line">active          0 test5</span><br><span class="line"></span><br><span class="line">backend.list</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Sick 0/6       # 可以看到健康检测了；</span><br><span class="line">backend.list</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Sick 0/6</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>可以看到只会调度到<code>web1</code>上面，因为我们在<code>web2</code>上面没有配置<code>index.html</code>。所以<code>varnish</code>认为<code>web2</code>已经宕机了。</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Fuzaijunhen-healthy-1.gif" title="访问测试"></center><p>为<code>web2</code>配置<code>index.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@web2 html]# echo &quot;web2 index.html&quot; &gt; index.html       # 为web2配置index.html</span><br><span class="line"></span><br><span class="line"># 在varnishadm中查看后端主机状态，已经是健康状态了</span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         2      probe      Healthy 6/6</span><br><span class="line">srv2(192.168.8.13,,80)         2      probe      Healthy 6/6</span><br></pre></td></tr></table></figure></p><p>再次访问测试，已经正常调度了。</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Fuzaijunhen-healthy-2.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> 实现后端server负载均衡+健康检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现后端server负载均衡</title>
      <link href="/2017/11/06/Varnish-Fuzaijunhen-Server/"/>
      <url>/2017/11/06/Varnish-Fuzaijunhen-Server/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>后端定义两个<code>web server</code>，192.168.8.13和192.168.8.11。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># web1配置；</span><br><span class="line">[root@web html]# ifconfig eth1</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.11  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1459 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1690 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:144561 (141.1 KiB)  TX bytes:1249303 (1.1 MiB)</span><br><span class="line">[root@web html]# yum install httpd</span><br><span class="line">[root@web html]# cd /var/www/html/</span><br><span class="line">[root@web html]# echo &quot;web server&quot; &gt; index.html</span><br><span class="line">[root@web html]# for i in &#123;1..10&#125; ; do echo &quot;test $i page&quot; &gt; $i.html ; done</span><br><span class="line">[root@web html]# mkdir ./login</span><br><span class="line">[root@web html]# echo &quot;web1 login&quot; &gt; ./login/index.html</span><br><span class="line">[root@web html]# service httpd start</span><br><span class="line">[root@web html]# ls</span><br><span class="line">10.html  1.html  2.html  3.html  4.html  5.html  6.html  7.html  8.html  9.html  index.html</span><br><span class="line"></span><br><span class="line"># web2 配置；</span><br><span class="line">[root@web2 html]# ifconfig eth1 </span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.13  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:967 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:598 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:326109 (318.4 KiB)  TX bytes:81411 (79.5 KiB)</span><br><span class="line">[root@web2 html]# yum install -y httpd</span><br><span class="line">[root@web2 html]# mkdir ./login</span><br><span class="line">[root@web2 html]# echo &quot;web2 login&quot; &gt; ./login/index.html</span><br><span class="line">[root@web2 html]# service httpd start</span><br></pre></td></tr></table></figure><h3 id="修改varnish配置文件"><a href="#修改varnish配置文件" class="headerlink" title="修改varnish配置文件"></a>修改varnish配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# vim /etc/varnish/default.vcl</span><br><span class="line">backend srv1 &#123;          # 定义srv1，IP为192.168.8.11；</span><br><span class="line">    .host = &quot;192.168.8.11&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backend srv2 &#123;          # 定义srv1，IP为192.168.8.13；</span><br><span class="line">    .host = &quot;192.168.8.13&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">&#125;</span><br><span class="line">import directors;</span><br><span class="line">sub vcl_init &#123;</span><br><span class="line">    new srvs = directors.round_robin();         # 轮询；</span><br><span class="line">    srvs.add_backend(srv1);</span><br><span class="line">    srvs.add_backend(srv2);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">    set req.backend_hint = srvs.backend();</span><br><span class="line"></span><br><span class="line">    if (req.url ~ &quot;(?i)^/(login|admin)&quot;) &#123;      # 访问login或admin就不缓存；</span><br><span class="line">        return(pass);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082       # 重读配置文件；</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test2</span><br><span class="line">active          0 test3</span><br><span class="line"></span><br><span class="line">vcl.load test4 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test4</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test4&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test2</span><br><span class="line">available       0 test3</span><br><span class="line">active          0 test4</span><br><span class="line"></span><br><span class="line">backend.list</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br><span class="line">srv1(192.168.8.11,,80)         1      probe      Healthy (no probe)</span><br><span class="line">srv2(192.168.8.13,,80)         1      probe      Healthy (no probe)</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><center><img src="https://houhaiyun.github.io/img/images/Varnish-Fuzaijunhen-Server-1.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> 实现后端server负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>定义多个后端server</title>
      <link href="/2017/11/06/Varnish-Many-Server/"/>
      <url>/2017/11/06/Varnish-Many-Server/</url>
      <content type="html"><![CDATA[<h3 id="定义多个后端主机"><a href="#定义多个后端主机" class="headerlink" title="定义多个后端主机"></a>定义多个后端主机</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>后端定义两个<code>web server</code>，192.168.8.13用来存储图片，192.168.8.11用来存储<code>html</code>等文件。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># web1配置；</span><br><span class="line">[root@web html]# ifconfig eth1</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.11  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1459 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1690 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:144561 (141.1 KiB)  TX bytes:1249303 (1.1 MiB)</span><br><span class="line">[root@web html]# yum install httpd</span><br><span class="line">[root@web html]# cd /var/www/html/</span><br><span class="line">[root@web html]# echo &quot;web server&quot; &gt; index.html</span><br><span class="line">[root@web html]# for i in &#123;1..10&#125; ; do echo &quot;test $i page&quot; &gt; $i.html ; done</span><br><span class="line">[root@web html]# service httpd start</span><br><span class="line">[root@web html]# ls</span><br><span class="line">10.html  1.html  2.html  3.html  4.html  5.html  6.html  7.html  8.html  9.html  index.html</span><br><span class="line"></span><br><span class="line"># web2 配置；</span><br><span class="line">[root@web2 html]# ifconfig eth1 </span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.13  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:967 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:598 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:326109 (318.4 KiB)  TX bytes:81411 (79.5 KiB)</span><br><span class="line">[root@web2 html]# yum install -y httpd</span><br><span class="line">[root@web2 html]# find / -iname &quot;*.jpg&quot; -exec cp &#123;&#125; /var/www/html/ \;</span><br><span class="line">[root@web2 html]# ls /var/www/html/</span><br><span class="line">centos_1920x1200_logoonly.jpg  simple_waves.jpg  syslinux-vesa-splash.jpg  test.jpg</span><br><span class="line">centos_2048x1536_logoonly.jpg  splash.jpg        test22.jpg</span><br><span class="line">[root@web2 html]# service httpd start</span><br></pre></td></tr></table></figure><h4 id="修改varnish配置文件"><a href="#修改varnish配置文件" class="headerlink" title="修改varnish配置文件"></a>修改varnish配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# vim /etc/varnish/default.vcl</span><br><span class="line">backend default &#123;</span><br><span class="line">    .host = &quot;192.168.8.11&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backend.images &#123;            # 添加一个后端主机为images；</span><br><span class="line">    .host = &quot;192.168.8.13&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">    if (req.url ~ &quot;(?i)\.(jpg|jpeg|png|gif)$&quot;)&#123;     # 如果是以jpg、jpeg、png、gif结尾的文件就发送到images server；</span><br><span class="line">        set req.backend_hint = images ;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        set req.backend_hint = default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082       # 重载配置文件； </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">active          0 boot</span><br><span class="line"></span><br><span class="line">vcl.load test1 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test1</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test1&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">active          0 test1</span><br><span class="line"></span><br><span class="line">varnish&gt; backend.list       # 查看后端server；</span><br><span class="line">200        </span><br><span class="line">Backend name                   Refs   Admin      Probe</span><br><span class="line">default(192.168.8.11,,80)      3      probe      Healthy (no probe)</span><br><span class="line">images(192.168.8.13,,80)       2      probe      Healthy (no probe)</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Varnish-Many-Server-1.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> 定义多个后端server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Varnish缓存清理</title>
      <link href="/2017/11/06/Varnish-Qingli-Cache/"/>
      <url>/2017/11/06/Varnish-Qingli-Cache/</url>
      <content type="html"><![CDATA[<h3 id="缓存对象的修剪：purge"><a href="#缓存对象的修剪：purge" class="headerlink" title="缓存对象的修剪：purge"></a>缓存对象的修剪：purge</h3><p>当我们定义某一内容缓存一定的时间例如2小时，那么当此内容更新时恰好时间在2小时之内，那用户访问的就是旧的图片了，如何解决这个问题呢？</p><h3 id="问题如下："><a href="#问题如下：" class="headerlink" title="问题如下："></a>问题如下：</h3><p>设定某一类(例如：图片缓存2小时)内容的缓存时长；</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_backend_response &#123;</span><br><span class="line">    if (bereq.url ~ &quot;(?i)\.(jgp|jpeg|png|gif)$&quot;)&#123;</span><br><span class="line">        unset beresp.http.Set-Cookie;</span><br><span class="line">        set beresp.ttl = 7200s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">active          0 test2</span><br><span class="line"></span><br><span class="line">vcl.load test3 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test3</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test3&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">available       0 test2</span><br><span class="line">active          0 test3</span><br><span class="line"></span><br><span class="line"># 为后端web server准备图片；</span><br><span class="line">[root@web ~]# find /usr/share -iname &quot;*.jpg&quot;</span><br><span class="line">/usr/share/wallpapers/CentOS6/contents/images/simple_waves.jpg</span><br><span class="line">/usr/share/backgrounds/centos_1920x1200_logoonly.jpg</span><br><span class="line">/usr/share/backgrounds/centos_2048x1536_logoonly.jpg</span><br><span class="line">/usr/share/backgrounds/simple_waves.jpg</span><br><span class="line">[root@web ~]# cp /usr/share/backgrounds/simple_waves.jpg /var/www/html/test.jpg</span><br></pre></td></tr></table></figure><p>访问测试：</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Qingli-Cache-1.gif" title="访问测试"></center><h4 id="1-能执行purge操作"><a href="#1-能执行purge操作" class="headerlink" title="(1) 能执行purge操作"></a>(1) 能执行purge操作</h4><ol><li><p>在<code>web server</code> 将图片替换掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web ~]# cp /usr/share/wallpapers/CentOS6/contents/images/simple_waves.jpg /var/www/html/test.jpg</span><br><span class="line">cp: overwrite `/var/www/html/test.jpg&apos;? y</span><br></pre></td></tr></table></figure></li><li><p>访问测试，图片并没有替换掉</p></li></ol><center><img src="https://houhaiyun.github.io/img/images/Varnish-Qingli-Cache-2.gif" title="访问测试"></center><ol start="3"><li>添加<code>purge</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_purge &#123;</span><br><span class="line">return (synth(200,&quot;Purged&quot;));</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;          # 此在默认中有定义，可以不用添加；</span><br><span class="line">if (req.method == &quot;PURGE&quot;)&#123;</span><br><span class="line">    return(purge);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 刷新配置文件；</span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">available       0 test2</span><br><span class="line">active          0 test3</span><br><span class="line"></span><br><span class="line">vcl.load test4 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test4</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test4&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">available       0 test2</span><br><span class="line">available       0 test3</span><br><span class="line">active          0 test4</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl -X PURGE http://192.168.8.15/test.jpg        # 执行PURGE请求；</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;200 Purged&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Error 200 Purged&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Purged&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;Guru Meditation:&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;XID: 31&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p&gt;Varnish cache server&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><p>访问测试：图片已经替换；</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-Qingli-Cache-3.gif" title="访问测试"></center><h4 id="2-何时执行purge操作"><a href="#2-何时执行purge操作" class="headerlink" title="(2) 何时执行purge操作"></a>(2) 何时执行purge操作</h4><p>如果有人对我们的缓存服务器执行<code>PURGE</code>操作的话，后果很可怕。我可以定义ACL只有特定的IP才能执行<code>PURGE</code>操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">acl purgers &#123;       # 定义acl</span><br><span class="line">    &quot;127.0.0.1&quot;/8;</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">if (req.method == &quot;PURGE&quot;)&#123;</span><br><span class="line">    if (!client.ip ~ purgers) &#123;     # 定义只有127.0.0.1才能使用PURGE;</span><br><span class="line">        return(synth(405,&quot;PURGE not allow for&quot; + client.ip));</span><br><span class="line">    &#125;</span><br><span class="line">    return(purge);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082       # 重新加载配置文件；</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">available       0 test2</span><br><span class="line">available       0 test3</span><br><span class="line">active          0 test4</span><br><span class="line"></span><br><span class="line">vcl.load test5 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test5</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test5&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">available       0 test2</span><br><span class="line">available       0 test3</span><br><span class="line">available       0 test4</span><br><span class="line">active          0 test5</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl -X PURGE http://192.168.8.15/test.jpg        # 再次PURGE已经被拒绝；</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;405 PURGE not allow for192.168.8.15&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Error 405 PURGE not allow for192.168.8.15&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;PURGE not allow for192.168.8.15&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;Guru Meditation:&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;XID: 32841&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p&gt;Varnish cache server&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@centos7 ~]# curl -X PURGE http://127.0.0.1/test.jpg       # 已经清除掉；</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;200 Purged&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Error 200 Purged&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Purged&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;Guru Meditation:&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;XID: 31&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p&gt;Varnish cache server&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="缓存对象的修剪：ban"><a href="#缓存对象的修剪：ban" class="headerlink" title="缓存对象的修剪：ban"></a>缓存对象的修剪：ban</h3><p>当我们清理某一类(例如：所有的图片)的文件，<code>PURGE</code>就有些麻烦了。</p><h4 id="使用varnishadm中的ban"><a href="#使用varnishadm中的ban" class="headerlink" title="使用varnishadm中的ban"></a>使用varnishadm中的ban</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">active          0 boot</span><br><span class="line"></span><br><span class="line">ban.list</span><br><span class="line">200        </span><br><span class="line">Present bans:</span><br><span class="line">1509930641.689327     0 C  </span><br><span class="line"></span><br><span class="line">ban req.url ~ (?i).(jgp|jpeg)       # 定义ban规则；</span><br><span class="line">200        </span><br><span class="line"></span><br><span class="line">ban.list</span><br><span class="line">200        </span><br><span class="line">Present bans:</span><br><span class="line">1509931580.224348     0    req.url ~ (?i).(jgp|jpeg)</span><br></pre></td></tr></table></figure><h4 id="定义在配置文件中"><a href="#定义在配置文件中" class="headerlink" title="定义在配置文件中"></a>定义在配置文件中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (req.method == &quot;BAN&quot;) &#123;</span><br><span class="line">ban(&quot;req.http.host == &quot; + req.http.host + &quot; &amp;&amp; req.url == &quot; + req.url);</span><br><span class="line"># Throw a synthetic page so the request won&apos;t go to the backend.</span><br><span class="line">return(synth(200, &quot;Ban added&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> Varnish缓存清理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>varnishadm(命令行接口)常用子命令</title>
      <link href="/2017/11/06/Varnish-varnishadm/"/>
      <url>/2017/11/06/Varnish-varnishadm/</url>
      <content type="html"><![CDATA[<h3 id="命令行管理接口命令"><a href="#命令行管理接口命令" class="headerlink" title="命令行管理接口命令"></a>命令行管理接口命令</h3><p><code>varnishadm  [-t  timeout] [-S secret_file] [-T address:port] [-n name] [command[...]]</code></p><ul><li><code>-S secret_file</code>：指定秘钥文件路径(<code>/etc/varnish/secret</code>)</li><li><code>-T -T address:port</code>: 指定连接命令行接口的地址和端口</li></ul><p>默认可不指选项参数，<code>varnishadm</code>即可连接到命令行管理接口</p><a id="more"></a><h4 id="命令行接口常用子命令"><a href="#命令行接口常用子命令" class="headerlink" title="命令行接口常用子命令"></a>命令行接口常用子命令</h4><ul><li><code>vcl.list</code>：列出所有配置文件</li><li><code>vcl.show CONF_NAME</code>: 查看配置文件</li><li><code>vcl.load CONF_NAME config_file</code>: 编译配置文件</li><li><code>vcl.use CONF_NAME</code>：使用配置文件（转为active状态）</li><li><code>backend.list</code> 查看后端服务器主机</li><li><code>backend.set_hleth</code> 设定后端服务器状态</li><li><code>storage.list</code> 查看后端存储方式</li><li><code>param.show thread_pools</code> 显示线程池参数</li><li><code>param.set thread_pools = 4</code> 设定线程池数量<br>配置生效需要先加载（<code>vcl.load</code>），再使用（<code>vcl.use</code>）</li></ul><h4 id="加载配置示例"><a href="#加载配置示例" class="headerlink" title="加载配置示例"></a>加载配置示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082       # -S 指定密钥文件路径；-T：指定地址和端口；</span><br><span class="line">200       </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list        # 列出所有配置文件；</span><br><span class="line">200        </span><br><span class="line">active          0 boot      # active表示当前使用的配置文件；</span><br><span class="line">available       0 test22    # available表示可用；</span><br><span class="line"></span><br><span class="line">vcl.load test23 default.vcl     # 加载新的配置；</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.list        # 列出所有配置文件；</span><br><span class="line">200        </span><br><span class="line">active          0 boot</span><br><span class="line">available       0 test22</span><br><span class="line">available       0 test23</span><br><span class="line"></span><br><span class="line">vcl.use test23      # 使用此配置文件；</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test23&apos; now active     # 启用此配置文件</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test22</span><br><span class="line">active          0 test23</span><br></pre></td></tr></table></figure><p><strong>注意</strong> ：命令行中调整的参数不会永久有效（配置文件永久有效），但不要轻易重启</p><h3 id="线程相关的参数：使用线程池机制管理线程"><a href="#线程相关的参数：使用线程池机制管理线程" class="headerlink" title="线程相关的参数：使用线程池机制管理线程"></a>线程相关的参数：使用线程池机制管理线程</h3><p>在线程池内部，其每一个请求由一个线程来处理； 其<code>worker</code>线程的最大数决定了v<code>arnish</code>的并发响应能力；</p><ul><li><code>thread_pools</code>：Number of worker thread pools. 最好小于或等于CPU核心数量； </li><li><code>thread_pool_max</code>：The maximum number of worker threads in each pool. 每线程池的最大线程数；</li><li><code>thread_pool_min</code>：The minimum number of worker threads in each pool. 额外意义为“最大空闲线程数”；</li><li>`最大并发连接数 = thread_pools  * thread_pool_max</li><li><code>thread_pool_timeout</code>：Thread idle threshold.  Threads in excess of thread_pool_min, which have been idle for at least this long, will be destroyed.(线程池超时时间)</li><li><code>thread_pool_add_delay</code>：Wait at least this long after creating a thread.(添加线程是否要犹豫一下)</li><li><code>thread_pool_destroy_delay</code>：Wait this long after destroying a thread.(删除线程是否要犹豫一下)</li></ul><h4 id="设定线程池最大线程为3000"><a href="#设定线程池最大线程为3000" class="headerlink" title="设定线程池最大线程为3000"></a>设定线程池最大线程为3000</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">param.set thread_pool_max 3000</span><br><span class="line">200        </span><br><span class="line"></span><br><span class="line">param.show thread_pool_max</span><br><span class="line">200        </span><br><span class="line">thread_pool_max</span><br><span class="line">        Value is: 3000 [threads]</span><br><span class="line">        Default is: 5000</span><br><span class="line">        Minimum is: 100</span><br><span class="line"></span><br><span class="line">        The maximum number of worker threads in each pool.</span><br><span class="line"></span><br><span class="line">        Do not set this higher than you have to, since excess worker</span><br><span class="line">        threads soak up RAM and CPU and generally just get in the way</span><br><span class="line">        of getting work done.</span><br><span class="line"></span><br><span class="line">        Minimum is 10 threads.</span><br><span class="line"></span><br><span class="line">        NB: This parameter may take quite some time to take (full)</span><br><span class="line">        effect.</span><br></pre></td></tr></table></figure><h4 id="修改线程池的数量为4个"><a href="#修改线程池的数量为4个" class="headerlink" title="修改线程池的数量为4个"></a>修改线程池的数量为4个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">param.set thread_pools 4</span><br><span class="line">200        </span><br><span class="line"></span><br><span class="line">param.show thread_pools</span><br><span class="line">200        </span><br><span class="line">thread_pools</span><br><span class="line">        Value is: 4 [pools]</span><br><span class="line">        Default is: 2</span><br><span class="line">        Minimum is: 1</span><br><span class="line"></span><br><span class="line">        Number of worker thread pools.</span><br><span class="line"></span><br><span class="line">        Increasing number of worker pools decreases lock contention.</span><br><span class="line"></span><br><span class="line">        Too many pools waste CPU and RAM resources, and more than one</span><br><span class="line">        pool for each CPU is probably detrimal to performance.</span><br><span class="line"></span><br><span class="line">        Can be increased on the fly, but decreases require a restart to</span><br><span class="line">        take effect.</span><br><span class="line"></span><br><span class="line">        NB: This parameter may take quite some time to take (full)</span><br><span class="line">        effect.</span><br><span class="line"></span><br><span class="line">        NB: We do not know yet if it is a good idea to change this</span><br><span class="line">        parameter, or if the default value is even sensible.  Caution</span><br><span class="line">        is advised, and feedback is most welcome.</span><br></pre></td></tr></table></figure><h4 id="设定thread-pools禁止在CLI中修改"><a href="#设定thread-pools禁止在CLI中修改" class="headerlink" title="设定thread_pools禁止在CLI中修改"></a>设定thread_pools禁止在CLI中修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@Varnish ~]# vim /etc/varnish/varnish.params       # 修改配置文件；</span><br><span class="line">DAEMON_OPTS=&quot;-p thread_pool_min=5 -p thread_pool_max=500 -p thread_pool_timeout=300 -p thread_pools=4 -r thread_pools,thread_pool_max,thread_pool_min&quot;</span><br><span class="line">[root@Varnish ~]# systemctl restart varnish     # 重启varnish；</span><br><span class="line">[root@Varnish ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082 </span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">param.set thread_pools 2        # 测试修改，已经处于保护状态；</span><br><span class="line">107        </span><br><span class="line">parameter &quot;thread_pools&quot; is protected.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> varnishadm(命令行接口)常用子命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vcl：缓存策略配置工具</title>
      <link href="/2017/11/06/Varnish-VCL/"/>
      <url>/2017/11/06/Varnish-VCL/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>“域”</code>专用的编程语言或状态引擎(<code>state engine</code>)，用于配置缓存策略。</p><p>若要配置缓存规则，则需要先了解varnish的缓存处理流程，各状态引擎(有限状态机)的工作方式。</p><p> <code>VCL</code>存在多个状态引擎，状态之间有关联性，但彼此之间互相隔离，每个引擎使用<code>return</code>来退出当前状态，并转入下一状态。</p><a id="more"></a><h3 id="有限状态机图解"><a href="#有限状态机图解" class="headerlink" title="有限状态机图解"></a>有限状态机图解</h3><center><img src="https://houhaiyun.github.io/img/images/Varnish-VCL-1.svg" title="有限状态机"></center><h4 id="简单请求处理"><a href="#简单请求处理" class="headerlink" title="简单请求处理"></a>简单请求处理</h4><ul><li>对于可缓存的请求，有以下两种情况<ul><li>（1）命中，通过缓存直接响应</li><li>（2）未命中，到后端服务器取得响应内容后，进行以下判断<pre><code>- a) 可缓存,则缓存后再响应- b) 不可缓,存则直接响应</code></pre></li></ul></li><li>不可缓存的请求<ul><li>到后端服务器取得相应内容，响应给客户端</li></ul></li></ul><h4 id="状态引擎"><a href="#状态引擎" class="headerlink" title="状态引擎"></a>状态引擎</h4><p><strong>前端引擎：</strong></p><ul><li><code>vcl_recv</code>: 接收请求，<code>return</code>一个<code>lookup</code>值转入<code>vcl_hash</code>            </li><li><code>vcl_hash</code>：解析请求方式，而后return一个状态值转入下一状态引擎</li></ul><p>可以<code>return</code>的状态值有<code>hit</code>,<code>miss</code>,<code>purge</code>,<code>pipe</code>,pass<code>,</code>hit-for-pass<code>,</code>busy`</p><ul><li><code>vcl_hit</code>：缓存命中(hit)时需转入的状态引擎</li><li><code>vcl_miss</code>：缓存未命中(miss)时转入的状态引擎</li><li><code>vcl_purge</code>：请求缓存修剪(purge)需要转入的状态引擎</li><li><code>vcl_pipe</code>：hash后无法理解的请求方式需要转入的状态引擎</li><li><code>vcl_pass</code>：需要到后端服务器取数据时要转入的状态引擎</li><li><code>vcl_deliver</code>：将请求资源响应给客户端的状态引擎</li></ul><p><strong>后端服务器引擎：</strong></p><ul><li><code>vcl_backend_fetch</code>：接收前端状态引擎数据请求的后端状态引擎</li><li><code>vcl_backend_response</code>：在后端获取到数据后要正常响应的状态引擎</li><li><code>vcl-backend_error</code>：在后端无法获得数据要响应错误信息的状态引擎</li></ul><h4 id="数据报文流向"><a href="#数据报文流向" class="headerlink" title="数据报文流向"></a>数据报文流向</h4><p>数据报文处理流向：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vcl_recv –&gt;</span><br><span class="line">            vcl_hash</span><br><span class="line">                hit –&gt; vcl_hit –&gt;</span><br><span class="line">                        a) vcl_deliver</span><br><span class="line">                        b) vcl_pass</span><br><span class="line">                </span><br><span class="line">                miss –&gt; vcl_miss –&gt;</span><br><span class="line">                        a) vcl_pass</span><br><span class="line">                        b) vcl_backend_fetch</span><br><span class="line">                </span><br><span class="line">                purge –&gt; vcl_purge –&gt;</span><br><span class="line">                        vcl_synth</span><br><span class="line">            </span><br><span class="line">                pipe –&gt; vcl_pipe</span><br><span class="line"></span><br><span class="line">        vcl_backend_fetch –&gt;</span><br><span class="line">            a) vcl_backend_response –&gt; vcl_deliver</span><br><span class="line">            b) vcl_backend_error</span><br></pre></td></tr></table></figure></p><h4 id="总结几种流向"><a href="#总结几种流向" class="headerlink" title="总结几种流向"></a>总结几种流向</h4><ul><li><p>（1）<code>recv</code>接收请求，处理后交由<code>hash</code>缓存查找，若缓存命中，则转入<code>deliver</code>，将响应内容投递给客户端  </p></li><li><p>（2）<code>recv</code>接收请求，处理后交由<code>hash</code>缓存查找，若缓存未命中，则转入<code>pass</code>，<code>pass</code>转到后端<code>fetch</code>数据，取得数据后，判断是否可以缓存，可缓存则缓存后<code>deliver</code>，否则直接<code>deliver</code></p></li><li><p>（3）<code>recv</code>接收请求，处理后发现请求是<code>purge</code>，交由<code>hash</code>，<code>hash return purge</code>，转入<code>purge</code>状态引擎，而后由<code>synth</code>完成缓存修剪</p></li><li><p>（4）<code>recv</code>接收请求，处理后发现无法理解请求方法，交由<code>hash</code>，<code>hash return pipe</code>，直接通过管道传递给后端服务器，由后端服务器处理</p></li></ul><h3 id="两个特殊的引擎："><a href="#两个特殊的引擎：" class="headerlink" title="两个特殊的引擎："></a>两个特殊的引擎：</h3><ul><li><code>vcl_init</code>：在处理任何请求之前要执行的<code>vcl</code>代码：主要用于初始化<code>VMODs</code>；</li><li><code>vcl_fini</code>：所有的请求都已经结束，在<code>vcl</code>配置被丢弃时调用；主要用于清理<code>VMODs</code>；</li></ul><h3 id="vcl配置文件语法"><a href="#vcl配置文件语法" class="headerlink" title="vcl配置文件语法"></a>vcl配置文件语法</h3><p>vcl的语法格式：</p><ul><li>(1) <code>VCL files start with vcl 4.0</code>;表名版本</li><li>(2) <code>//</code>, <code>#</code>单行蛛丝； <code>/*</code> 和 <code>*/</code> 多行注释的开始和结束;</li><li>(3) <code>Subroutines are declared with the sub keyword</code>; 例如sub vcl_recv { …}；</li><li>(4) <code>No loops(不支持循环), state-limited variables</code>（受限于引擎的内建变量）；</li><li>(5) <code>Terminating statements with a keyword for next action as argument of the return() function</code>, <code>i.e.</code>:<code>return(action)</code>；用于实现状态引擎转换(每一个状态结束需要加return，return后面加下一个状态)； </li><li>(6) <code>Domain-specific</code>（域专有的language）;</li></ul><h3 id="三类主要语法："><a href="#三类主要语法：" class="headerlink" title="三类主要语法："></a>三类主要语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 第一种</span><br><span class="line">sub subroutine &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第二种</span><br><span class="line">if CONDITION &#123;</span><br><span class="line">...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第三种</span><br><span class="line">return(), hash_data()</span><br></pre></td></tr></table></figure><h3 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords:"></a>Keywords:</h3><p><code></code>call subroutine<code>，</code>return(action)<code>，</code>new<code>，</code>set<code>，</code>unset`</p><h3 id="VCL的变量"><a href="#VCL的变量" class="headerlink" title="VCL的变量"></a>VCL的变量</h3><h4 id="内建变量："><a href="#内建变量：" class="headerlink" title="内建变量："></a>内建变量：</h4><ul><li><p><code>req.*</code>: 由客户端发来的http请求相关</p><ul><li><code>req.http.*</code>: 请求报文各首部</li></ul></li><li><p><code>ereq.*</code>: 由varnish向benkend主机发出的http请求</p><ul><li><code>bereq.http.*</code>: 向backend主机请求报各首部</li></ul></li><li><p><code>beresq.*</code>: 由backend主机发来的http响应报文</p><ul><li><code>beresp.http.*</code>: backend主机响应报文首部</li></ul></li><li><p><code>resp.*</code>: 由varnish响应给client的http的响应报文</p><ul><li><code>resp.http.*</code>: 响应报文的各首部</li></ul></li><li><p><code>obj.*</code>: 存储在缓存空间中的缓存对象属性（只读）</p><ul><li><code>obj.hits</code>: 缓存项命中的次数</li></ul></li><li><p><code>client.*</code>, <code>server.*</code>, <code>storage.*</code> 可用在所有的client例程（即非 <code>backend</code>例程）</p></li></ul><h4 id="自定义变量-set"><a href="#自定义变量-set" class="headerlink" title="自定义变量: set"></a>自定义变量: set</h4><p>如自定义响应报文<code>http</code>首部：<code>set resp.http.X-Cache = “HIT”</code>; </p><h3 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h3><p><code>berep</code>: 向<code>backend</code>主机请求相关变量</p><ul><li><code>bereq.http.HEADERS</code>: 请求首部</li><li><code>bereq.method</code>: 请求方法</li><li><code>bereq.url</code>: 请求backend主机的url</li><li><code>bereq.proto</code>: 请求的协议版本</li><li><code>bereq.backend</code>: 指明要调用的后端主机</li></ul><p><code>bresp</code>: <code>backend</code>主机响应相关变量</p><ul><li><code>beresp.proto</code>: 响应协议版本</li><li><code>beresp.status</code>: 响应状态码    </li><li><code>beresp.reason</code>: 响应原因短语</li><li><code>beresp.backend.name</code>: 后端服务器名称</li><li><code>beresp.http.HEADERS</code>: 响应首部</li><li><code>beresp.ttl</code>: 后端服务器响应内容的余下生存时长</li></ul><p><code>obj</code>: 缓存项相关变量</p><ul><li><code>obj.hits</code>：在缓存中命中的次数</li><li><code>obj.ttl</code>：缓存时长</li></ul><p><code>server</code>: 缓存服务端先关变量</p><ul><li><code>server.ip</code></li><li><code>server.hostname</code></li></ul><p><code>req</code>： 客户端请求先关变量</p><ul><li><code>req.url</code>: 客户端请求的url</li></ul><p><code>resp</code>: 由缓存服务器响应客户端的相关变量</p><ul><li><code>resp.proto</code>: 响应协议版本</li></ul><h4 id="操作符："><a href="#操作符：" class="headerlink" title="操作符："></a>操作符：</h4><p><code>==, !=, ~, &gt;, &gt;=, &lt;, &lt;=</code></p><ul><li>逻辑操作符：<code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li><li>变量赋值：<code>=</code></li></ul><h4 id="各变量在各vcl子例程的可用性：（R读，W写）"><a href="#各变量在各vcl子例程的可用性：（R读，W写）" class="headerlink" title="各变量在各vcl子例程的可用性：（R读，W写）"></a>各变量在各vcl子例程的可用性：（R读，W写）</h4><center><img src="https://houhaiyun.github.io/img/images/Varnish-VCL-2.jpg" title="操作符"></center><br><center><img src="https://houhaiyun.github.io/img/images/Varnish-VCL-3.jpg" title="操作符"></center><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>在后续Varnish的实验中，基本上都是此结构。</p><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>httpd</td><td>192.168.8.11</td><td>CentOS release 6.9 (Final)</td><td>httpd-2.2.15(yum安装)</td><td>提供web服务</td></tr><tr><td>varnish</td><td>192.168.8.15</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>varnish-4.0.4(yum安装)</td><td>提供缓存服务</td></tr></tbody></table><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>添加响应报文，如果从缓存命中了就显示<code>&quot;Hit via&quot; + server.ip</code>；如果没命中就显示<code>&quot;Miss from&quot; + server.ip</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_deliver &#123;</span><br><span class="line">    if (obj.hits&gt;0) &#123;</span><br><span class="line">        set resp.http.C-Cache = &quot;Hit via&quot; + server.ip;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    set resp.http.X-Cache = &quot;Miss from&quot; + server.ip;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list            # 列出所有配置文件；</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test22</span><br><span class="line">active          0 test23</span><br><span class="line"></span><br><span class="line">vcl.load test24 default.vcl         # 加载配置文件；</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test22</span><br><span class="line">active          0 test23</span><br><span class="line">available       0 test24</span><br><span class="line">    </span><br><span class="line">vcl.use test24          # 启用配置文件；</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test24&apos; now active</span><br><span class="line">vcl.list        # 列出所有配置文件；</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test22</span><br><span class="line">available       0 test23</span><br><span class="line">active          0 test24</span><br></pre></td></tr></table></figure></p><center><img src="https://houhaiyun.github.io/img/images/Varnish-VCL-4.gif" title="访问测试"></center><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>强制访问某资源不检查缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 在后台web服务器上创建目录和默认访问网页；</span><br><span class="line">[root@web ~]# cd /var/www/html/</span><br><span class="line">[root@web html]# ls</span><br><span class="line">10.html  1.html  2.html  3.html  4.html  5.html  6.html  7.html  8.html  9.html  index.html</span><br><span class="line">[root@web html]# mkdir login</span><br><span class="line">[root@web html]# echo &quot;login&quot; &gt; login/index.html</span><br><span class="line">[root@web html]# cat login/index.html</span><br><span class="line">login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_recv &#123;      # 定义访问login和admin时，就不检查缓存；</span><br><span class="line">if (req.url ~ &quot;(?i)^/(login|admin)&quot;);    # ?代表忽略字符大小写，~代表开始正则匹配；</span><br><span class="line">    return(pass);</span><br><span class="line">&#125;</span><br><span class="line">sub vcl_recv &#123;       # 定义访问login和admin时，就不检查缓存；</span><br><span class="line">if (req.url ~ &quot;(?i)^/(login|admin)&quot;)&#123;       # ?代表忽略字符大小写，~代表开始正则匹配；</span><br><span class="line">    return(pass);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">active          0 boot</span><br><span class="line"></span><br><span class="line">vcl.load test1 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">active          0 boot</span><br><span class="line">available       0 test1</span><br><span class="line"></span><br><span class="line">vcl.use test1           # 使用test1；</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test1&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">active          0 test1</span><br></pre></td></tr></table></figure><p>测试效果</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-VCL-5.gif" title="访问测试"></center><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><p>对于特定类型的资源，例如公开的图片等，取消其私有标识，并强行设定其可以由<code>varnish</code>缓存的时长； 定义在<code>vcl_backend_response</code>中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">    if (beresp.http.cache-control !~ &quot;s-maxage&quot;) &#123;</span><br><span class="line">    if (bereq.url ~ &quot;(?i)\.(jpg|jpeg|png|gif|css|js)$&quot;) &#123;</span><br><span class="line">    unset beresp.http.Set-Cookie;</span><br><span class="line">    set beresp.ttl = 3600s;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><p>告知<code>web server</code>真实的客户端地址；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_recv &#123;</span><br><span class="line">if (req.restarts == 0) &#123;</span><br><span class="line">    if (req.http.X-Forwarded-For)&#123;</span><br><span class="line">            set req.http.X-Forwarded-For = req.http.X-Forwarded-For + &quot;,&quot; + clietn.ip;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            set req.http.X-Forwarded-For = client.ip;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082       # 重新加载配置文件；</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">active          0 test1</span><br><span class="line"></span><br><span class="line">vcl.load test2 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test2</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test2&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">active          0 test2</span><br><span class="line"></span><br><span class="line"># 修改后端web server；</span><br><span class="line">[root@web ~]# vim /etc/httpd/conf/httpd.conf        # 修改配置文件日志格式，添加X-Forwarded-For；</span><br><span class="line">LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot; \&quot;%&#123;X-Forwarded-For&#125;i\&quot;&quot; varnish</span><br><span class="line">CustomLog logs/access_log varnish</span><br><span class="line">[root@web ~]# apachectl -t</span><br><span class="line">Syntax OK</span><br><span class="line">[root@web ~]# service httpd restart</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@web ~]# tail -1  /var/log/httpd/access_log        # 查看日志，已经记录；</span><br><span class="line">192.168.8.15 - - [05/Nov/2017:21:59:25 +0800] &quot;GET /login/ HTTP/1.1&quot; 200 6 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36&quot; &quot;192.168.8.1,192.168.8.1&quot;</span><br></pre></td></tr></table></figure><h3 id="示例5"><a href="#示例5" class="headerlink" title="示例5"></a>示例5</h3><p>设定某一类(例如：图片缓存2小时)内容的缓存时长；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">sub vcl_backend_response &#123;</span><br><span class="line">    if (bereq.url ~ &quot;(?i)\.(jgp|jpeg|png|gif)$&quot;)&#123;</span><br><span class="line">        unset beresp.http.Set-Cookie;</span><br><span class="line">        set beresp.ttl = 7200s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# varnishadm -S /etc/varnish/secret -T 127.0.0.1:6082</span><br><span class="line">200        </span><br><span class="line">-----------------------------</span><br><span class="line">Varnish Cache CLI 1.0</span><br><span class="line">-----------------------------</span><br><span class="line">Linux,3.10.0-514.el7.x86_64,x86_64,-smalloc,-smalloc,-hcritbit</span><br><span class="line">varnish-4.0.4 revision 386f712</span><br><span class="line"></span><br><span class="line">Type &apos;help&apos; for command list.</span><br><span class="line">Type &apos;quit&apos; to close CLI session.</span><br><span class="line"></span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">active          0 test2</span><br><span class="line"></span><br><span class="line">vcl.load test3 default.vcl</span><br><span class="line">200        </span><br><span class="line">VCL compiled.</span><br><span class="line">vcl.use test3</span><br><span class="line">200        </span><br><span class="line">VCL &apos;test3&apos; now active</span><br><span class="line">vcl.list</span><br><span class="line">200        </span><br><span class="line">available       0 boot</span><br><span class="line">available       0 test1</span><br><span class="line">available       0 test2</span><br><span class="line">active          0 test3</span><br><span class="line"></span><br><span class="line"># 为后端web server准备图片；</span><br><span class="line">[root@web ~]# find /usr/share -iname &quot;*.jpg&quot;</span><br><span class="line">/usr/share/wallpapers/CentOS6/contents/images/simple_waves.jpg</span><br><span class="line">/usr/share/backgrounds/centos_1920x1200_logoonly.jpg</span><br><span class="line">/usr/share/backgrounds/centos_2048x1536_logoonly.jpg</span><br><span class="line">/usr/share/backgrounds/simple_waves.jpg</span><br><span class="line">[root@web ~]# cp /usr/share/backgrounds/simple_waves.jpg /var/www/html/test.jpg</span><br></pre></td></tr></table></figure><p>访问测试：</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-VCL-6.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> vcl：缓存策略配置工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Varnish</title>
      <link href="/2017/11/06/Varnish/"/>
      <url>/2017/11/06/Varnish/</url>
      <content type="html"><![CDATA[<h3 id="Varnish简介"><a href="#Varnish简介" class="headerlink" title="Varnish简介"></a>Varnish简介</h3><p><code>Varnish</code> 是一款高性能且开源的反向代理服务器和 <code>HTTP</code> 加速器，其采用全新的软件体系机构，和现在的硬件体系紧密配合，与传统的 <code>squid</code> 相比，<code>varnish</code> 具有性能更高、速度更快、管理更加方便等诸多优点，很多大型的网站都开始尝试使用 varnish 来替换 <code>squid</code>，这些都促进 <code>varnish</code> 迅速发展起来。</p><p>挪威的最大的在线报纸 <code>Verdens Gang</code>(<code>vg.no</code>) 使用 3 台 <code>Varnish</code> 代替了原来的 12 台 <code>Squid</code>，性能比以前更好，这是 <code>Varnish</code> 最成功的应用案例。</p><center><img src="https://houhaiyun.github.io/img/images/Varnish-1.jpg" title="Varnish"></center><a id="more"></a><h3 id="Varnish架构"><a href="#Varnish架构" class="headerlink" title="Varnish架构"></a>Varnish架构</h3><center><img src="https://houhaiyun.github.io/img/images/Varnish-2.png" title="Varnish架构"></center><h4 id="架构图解析"><a href="#架构图解析" class="headerlink" title="架构图解析"></a>架构图解析</h4><h5 id="varnish进程管理接口"><a href="#varnish进程管理接口" class="headerlink" title="varnish进程管理接口"></a>varnish进程管理接口</h5><ul><li><code>CLI interface</code>：命令行接口</li><li><code>Telnet interface</code>：不建议使用，不安全</li><li><code>Web interface</code>：<code>web GUI</code>接口，商业版才有的功能</li></ul><h5 id="Management进程"><a href="#Management进程" class="headerlink" title="Management进程"></a>Management进程</h5><p><strong><code>Management</code></strong> 进程：（主控进程，类似<code>nginx</code>的<code>master</code>）</p><ul><li><code>command line</code>：提供命令行接口，通过接口对服务进程管理 </li><li><code>child process mgmt</code>：管理子进程</li><li><code>initialisation</code>：初始化缓存空间，缓存目录，调用<code>vcl</code>编译器完成配置文件编译等</li></ul><p><code>Management</code>主控进程还会不时探测各子进程是否正常运行，若在一段时间内没有收到各子进程的响应信息，则重启子进程，相当于<code>watch dog</code>角色。</p><h5 id="Child-Cache进程"><a href="#Child-Cache进程" class="headerlink" title="Child/Cache进程"></a>Child/Cache进程</h5><ul><li><code>command line</code>：命令行接口</li><li><code>storege/hashing</code>：缓存管理</li><li><code>log/stats</code>：记录日志，数据统计</li><li><code>accept</code>：接收请求</li><li><code>backend communication</code>：建立与后端服务器的联系（取得内容，缓存内容）</li><li><code>worker threads</code>：处理请求</li><li><code>object expiry</code>：缓存有效性验证，缓存清理</li></ul><p><code>child</code>进程会生成多个子线程，用于接收请求，处理请求，需要注意的是，<code>varnish</code>处理请求是单线程的，即以一个线程处理一个请求，所以多个请求就需要启动多个线程处理。</p><h5 id="VCL-compiler"><a href="#VCL-compiler" class="headerlink" title="VCL compiler"></a>VCL compiler</h5><p><code>varnish</code>配置语言编译器，将<code>varnish</code>配置文件编程语言转换为<code>C</code>语言。由此可见，varnish的配置文件是一门编程语言。</p><h5 id="C-compiler"><a href="#C-compiler" class="headerlink" title="C compiler"></a>C compiler</h5><p><code>C compiler</code>:（<code>gcc 编译器</code>）</p><p>将<code>VCL compiler</code>转换的<code>C</code>语言配置文件编译为二进制格式的配置文件对象</p><h5 id="Shared-object"><a href="#Shared-object" class="headerlink" title="Shared object"></a>Shared object</h5><p>由<code>C compiler</code>生成的二进程序格式配置文件对象，由各子进程加载，应用。</p><h5 id="Log-file"><a href="#Log-file" class="headerlink" title="Log file"></a>Log file</h5><p><code>Log file</code>:（并非普通文件，而是一段内存空间）</p><ul><li><code>varnishlog</code>：将内存空间中日志记录永久保存在文件</li><li><code>varnishstat</code>：将内存中的日志展示出来，统计分析</li><li><code>varnishhist</code>：展示历史日志信息</li><li><code>varnishtop</code>：将内存中的日志按照一定规律排序</li><li><code>varnishncsa</code>：将内存空间中日志记录永久保存于文件中</li></ul><p><code>varnish</code>可以基于文件系统接口进行访问的共享内在的区域来记录日志（默认<code>90M</code>）</p><p><code>log</code>日志保存格式<code>ncsa</code>的保存格式稍同，<code>log</code>保存方式接近于<code>varnish</code>原生记录格式，<code>ncsa</code>记录的格式类似于<code>httpd</code>的<code>combined</code>日志记录格式。</p><p>日志分为两部分：</p><ul><li>前半部分时计数器（缓存命中次数等）</li><li>后半部分为客户端请求的数据</li></ul><h4 id="Varnish缓存存储方式"><a href="#Varnish缓存存储方式" class="headerlink" title="Varnish缓存存储方式"></a>Varnish缓存存储方式</h4><ul><li>(1) <code>file</code>：自管理文件系统，黑盒（不能持久的存储，重启失效）</li><li>(2) <code>malloc</code>: 使用<code>malloc()</code>库调用在<code>varnish</code>启动时向内存申请指定大小的空间</li><li>(3) <code>persistent</code>: 于<code>file</code>功能相同，处于测试期（不建议使用）</li></ul><p><strong>注意</strong>：若使用内存来缓存，若缓存管理不当，容易产生内存碎片，从而影响性能，所以需要有较好的内存管理工具来实现高效内存分配和回收</p><h3 id="安装Varnish"><a href="#安装Varnish" class="headerlink" title="安装Varnish"></a>安装Varnish</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum -y  install varnish       # 使用epel源；</span><br></pre></td></tr></table></figure><h3 id="varnish的程序环境："><a href="#varnish的程序环境：" class="headerlink" title="varnish的程序环境："></a>varnish的程序环境：</h3><p><code>varnish</code>的程序环境：</p><ul><li><code>/etc/varnish/varnish.params</code>： 配置<code>varnish</code>服务进程的工作特性，例如监听的地址和端口，缓存机制；<br><code>/etc/varnish/default.vcl</code>：配置各<code>Child/Cache</code>线程的缓存策略；</li><li>主程序：<ul><li><code>/usr/sbin/varnishd</code></li><li><code>CLI interface：</code></li><li><code>/usr/bin/varnishadm</code></li><li><code>Shared Memory Log</code>交互工具：</li><li><code>/usr/bin/varnishhist</code></li><li><code>/usr/bin/varnishlog</code></li><li><code>/usr/bin/varnishncsa</code></li><li><code>/usr/bin/varnishstat</code></li><li><code>/usr/bin/varnishtop</code>        </li></ul></li><li>测试工具程序：<ul><li><code>/usr/bin/varnishtest</code></li></ul></li><li>VCL配置文件重载程序：<ul><li><code>/usr/sbin/varnish_reload_vcl</code></li></ul></li><li><code>Systemd Unit File</code>：<ul><li><code>usr/lib/systemd/system/varnish.service</code></li></ul></li><li>日志持久的服务；<ul><li><code>/usr/lib/systemd/system/varnishlog.service</code></li></ul></li><li>varnish服务<ul><li><code>/usr/lib/systemd/system/varnishncsa.service</code></li></ul></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li><code>/etc/varnish/default.vcl</code>：用于定义缓存策略</li><li><code>/etc/varnish/varnish.params</code>：用于配置服务程序工作参数</li></ul><h4 id="后端主机配置"><a href="#后端主机配置" class="headerlink" title="后端主机配置"></a>后端主机配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/default.vcl      # 修改配置文件；</span><br><span class="line">backend default &#123;</span><br><span class="line">    .host = &quot;192.168.8.11&quot;;     # 定义一台后端主机IP为192.168.8.11(已经安装好的httpd-2.2)；</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改缓存服务监听地址和端口"><a href="#修改缓存服务监听地址和端口" class="headerlink" title="修改缓存服务监听地址和端口"></a>修改缓存服务监听地址和端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/varnish.params       # 修改配置文件；</span><br><span class="line">VARNISH_LISTEN_ADDRESS=192.168.8.15     # 定义varnish监听IP为：192.168.8.12；</span><br><span class="line">VARNISH_LISTEN_PORT=80      # 监听端口为80；</span><br></pre></td></tr></table></figure><p><strong>提醒</strong>：这里为了测试方便，使用80端口，正常情况下，缓存服务器前端还有调度器，此时缓存服务器可能使用的是默认端口</p><h3 id="修改管理接口监听的地址和端口"><a href="#修改管理接口监听的地址和端口" class="headerlink" title="修改管理接口监听的地址和端口"></a>修改管理接口监听的地址和端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/varnish.params       # 修改配置文件；</span><br><span class="line">VARNISH_ADMIN_LISTEN_ADDRESS=127.0.0.1</span><br><span class="line">VARNISH_ADMIN_LISTEN_PORT=6082</span><br></pre></td></tr></table></figure><p><strong>提醒</strong>：管理接口建议只监听在本机</p><h4 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/varnish/varnish.params       # 修改配置文件；</span><br><span class="line">VARNISH_STORAGE=&quot;malloc,256M&quot;           # 这里测试使用malloc存储方式；</span><br></pre></td></tr></table></figure><h4 id="相关参数介绍"><a href="#相关参数介绍" class="headerlink" title="相关参数介绍"></a>相关参数介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VARNISH_SECRET_FILE=/etc/varnish/secret     # 秘钥文件路径，连接命令行窗口需要</span><br><span class="line"></span><br><span class="line">VARNISH_TTL=        #TTL：缓存有效时间在后端服务器没有设定缓存ttl时使此处的ttl值</span><br><span class="line"></span><br><span class="line">DAEMON_OPTS=                # 配置服务运行参数</span><br></pre></td></tr></table></figure><h4 id="配置完成启动服务即可"><a href="#配置完成启动服务即可" class="headerlink" title="配置完成启动服务即可"></a>配置完成启动服务即可</h4><p>服务启动后即可正常为后端服务器提供缓存服务了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# systemctl start varnish</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.15         # 可以访问，ok；</span><br><span class="line">web server</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-varnish-intro/index.html" target="_blank" rel="noopener">Varnish 入门：https://www.ibm.com/developerworks/cn/opensource/os-cn-varnish-intro/index.html</a></p><p><a href="http://www.itjohn.org/blog/index.php/2016/05/22/varnish/" target="_blank" rel="noopener">Varnish工作原理及配置应用：http://www.itjohn.org/blog/index.php/2016/05/22/varnish/</a></p>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> Varnish </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cache缓存相关二</title>
      <link href="/2017/11/06/Varnish-Cache2/"/>
      <url>/2017/11/06/Varnish-Cache2/</url>
      <content type="html"><![CDATA[<h3 id="http-cache-解决方案"><a href="#http-cache-解决方案" class="headerlink" title="http cache 解决方案"></a>http cache 解决方案</h3><p><code>squid</code><strong>VS</strong><code>varnish</code></p><ul><li>基于<code>http</code>协议提专业的供缓存控制的程序有<code>squid</code>和<code>varnish</code>，<code>squid</code>比较重量级，是个老家伙，不过，老当益壮。</li><li>在高并发的情况下仍能保持较好的稳定性，而<code>varnish</code>比较轻量，也是比较<code>young</code>的一款缓存管理程序，性能与<code>squid</code>不相上下。</li><li>而在高并发的情况下，<code>varnish</code>可能就没有<code>squid</code>稳定，不过又有使用者反映<code>varnish</code>的性能和稳定性高于<code>squid</code>，不管是否如此，两款开源程序都是不错的<code>http</code>缓存解决方案，本文仅以<code>varnish</code>作为学习对象。</li></ul><a id="more"></a><p><code>nginx</code><strong>VS</strong><code>httpd</code></p><ul><li><code>nginx</code>和<code>httpd</code>做为提供<code>web</code>服务的程序，同时也提供了简单的缓存功能，一般在条件允许都因该使用专 业的缓存控制软件，而不使用自带的缓存功能。</li></ul><h3 id="缓存控制机制"><a href="#缓存控制机制" class="headerlink" title="缓存控制机制"></a>缓存控制机制</h3><p><code>HTTP</code>首部控制，通过过期日期控制。</p><p>基于过期时间的缓存控制，只要缓存命中且在有效期内，都将以缓存数据响应用户，否则就请求上游服务器获取资源。</p><h4 id="请求报文缓存控制首部"><a href="#请求报文缓存控制首部" class="headerlink" title="请求报文缓存控制首部"></a>请求报文缓存控制首部</h4><p>用于发送请求报文时，明确提示所请求的服务器自己是否接收缓存数据或只接收哪类数据（这种情况可能无效，因为缓存代理可能是多级的，可能到了第一个缓存服务器就结束了）</p><h4 id="响应报文缓存控制首部"><a href="#响应报文缓存控制首部" class="headerlink" title="响应报文缓存控制首部"></a>响应报文缓存控制首部</h4><p>用于发送响应报文时，明确提示响应的数据是属于哪种类型。</p><h4 id="过期日期："><a href="#过期日期：" class="headerlink" title="过期日期："></a>过期日期：</h4><ul><li><code>expires</code><ul><li>首部格式：<code>Expires:Fri, 20 May 2016 02:03:18 GMT</code></li><li><code>HTTP1.0</code>版本使用的缓存控制，在响应报文加上<code>Expire</code>首部定义资源的有效日期，其定义的时间为绝对时间，此中控制方式会出现时区差产生的问题</li></ul></li><li><code>Cache-Control:</code><ul><li>首部格式：<code>Cache-Control: max-age=600</code></li><li><code>HTTP1.1</code>版本才添加的缓存控制机制，其在请求报文或响应报文首部添加一个<code>cache-control</code>的首部，用于定义资源的缓存最大时长，是相对于响应报文首部中的<code>date</code>首部定义的时间</li></ul></li></ul><p>一般响应报文首部会同时有<code>Expires</code>首部和<code>Cache-control</code>首部，两者结合达到更好的缓存有效性控制。</p><h5 id="Cache-Control首部相关指令"><a href="#Cache-Control首部相关指令" class="headerlink" title="Cache-Control首部相关指令"></a>Cache-Control首部相关指令</h5><ul><li><code>cache-request-directive=no-cache</code> ：表示客户端接受缓存响应，但每次响应之前要先校验缓存有效性<ul><li><code>no-store</code> 客户端明确提示服务器不接收缓存响应</li><li><code>max-age</code>  客户端接受的缓存有效时长</li><li><code>max-stale</code> 客户端可以接受过期的缓存内容响应</li><li><code>min-fresh</code> 客户端接受的响应时长</li></ul></li><li><code>cache-response-directive=public</code>：服务端表明缓存可以存放于公共缓存空间<ul><li><code>private</code> 表明缓存需要存放于私有缓存空间</li><li><code>no-cache</code> 表明内容可缓存，但客户端的每次请求都要先检验缓存的有效性</li><li><code>no-store</code> 表明内容不可以缓存</li><li><code>must-revalidate</code> 客户端的每次请求都必须做重新校验类似（<code>no-cache</code>）</li><li><code>max-age</code> 缓存的有效期</li><li><code>s-mx-age</code> 存放于公共缓存服务器上的缓存有效期</li></ul></li></ul><h3 id="新鲜度检测机制"><a href="#新鲜度检测机制" class="headerlink" title="新鲜度检测机制"></a>新鲜度检测机制</h3><p>有效性再验证：<code>revalidate</code></p><ul><li>用户第一次请求的资源被缓存之后，当用户再次请求时，缓存服务器会先与后端缓存服务器做缓存有效性校验，就有如下情况：<ul><li>(1)如果原始内容没有发生改变，则仅响应首部，不响应body部分(响应码304)</li><li>(2)如果原始内容发生改变，则正常响应(响应码200)</li><li>(3)如果原始内容消失，则响应404</li></ul></li></ul><h4 id="条件式请求首部"><a href="#条件式请求首部" class="headerlink" title="条件式请求首部"></a>条件式请求首部</h4><p><code>If-Modifified-Since</code>: 基于原始内容的最近一次修改的时间戳进行验证，如果发生改变，则200响应，否则304响应。</p><p><code>If-Unmodified-Since</code>: 基于原始内容的最近一次修改的时间戳进行验证，如果没有发生改变，则304响应，否则200响应。</p><p><code>If-Match</code>: 使用标签(<code>Etag</code>)进行有效性检验，标签吻合，说明内容没有发生改变，以304响应。此次的标签可以理解为文件的校验码，只要文件发生改变，则校验码必定发生改变。</p><p><code>If-None-Match</code>: 使用标签(<code>Etag</code>)进行有效性检验，标签不吻合，则以200正常响应，否则以304响应。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基于新鲜度检测机制的缓存控制有个缺点，缓存服务器对于客户端的每次请求，都要做有效性验证，这样虽然保证了响应客户端的内容的新鲜度，但也造成了麻烦，所以就有了过期时间控制和新鲜度控制两种控制机制的结合：</p><ul><li>只要缓存没有过期，都以缓存内容响应用户，若缓存过期，则需要向后端服务器做有效性验证，如果原始内容没有发生改变，则继续以缓存内容响应用户，若原始内容发生改变，则取得原始内容先缓存再响应客户端。</li><li>其实浏览器也会将内容缓存在本地，用户再次对同一资源请求时，浏览器和缓存服务器之间会基于标签(Etag)进行有效性检测，请求的内容没有发生，则由浏览器缓直接响应，否则就以上述的各缓存控制机制给予响应。</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.itjohn.org/blog/index.php/2016/05/22/varnish/" target="_blank" rel="noopener">本文内容来自：Varnish工作原理及配置应用</a></p>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> Cache缓存相关二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cache缓存相关</title>
      <link href="/2017/11/06/Varnish-Cache/"/>
      <url>/2017/11/06/Varnish-Cache/</url>
      <content type="html"><![CDATA[<p><strong>本文中描述的缓存概念多是相对<code>http</code>缓存而言。</strong></p><h3 id="缓存作用"><a href="#缓存作用" class="headerlink" title="缓存作用"></a>缓存作用</h3><p>缓存所起的作用就是加速，减轻后端服务器压力。一般而言，我们请求的大多数web资源往往不是由后端服务器所响应的(对于颇具规模的站点来说)，而是由前端的缓存服务器所缓存的内容直接响应，所以，我们得到的资源可能不实最新的，因为缓存的数据于后端服务器不一定时同步更新的。</p><a id="more"></a><h3 id="缓存优点"><a href="#缓存优点" class="headerlink" title="缓存优点"></a>缓存优点</h3><ul><li>节约带宽</li><li>降低后端服务器的压力</li><li>降低时延，加速响应</li></ul><h3 id="什么数据应该被缓存？"><a href="#什么数据应该被缓存？" class="headerlink" title="什么数据应该被缓存？"></a>什么数据应该被缓存？</h3><p> <code>热区数据</code>，所谓的热区数据就是经常被访问到的数据，这类数据缓存最有价值，缓存命中率高。</p><p><strong>注意</strong> ：并非所有可缓存数据都应该被缓存，私有数据不应该被缓存，比如用户的个人信息等，因为缓存容易被破解，一旦被破解，用户信息将泄漏。</p><h3 id="缓存命中率hit-hit-miss"><a href="#缓存命中率hit-hit-miss" class="headerlink" title="缓存命中率hit/(hit+miss)"></a>缓存命中率hit/(hit+miss)</h3><ul><li>缓存命中率hit/(hit+miss)<ul><li><code>hit</code>表示缓存被命中，<code>miss</code>表示没有命中，也就是缓存项中没有对应的资源</li></ul></li><li>文档命中率：从文档命中的个数进行衡量</li><li>字节命中率：从内容命中的大小(字节)进行衡量</li></ul><h3 id="缓存生命周期"><a href="#缓存生命周期" class="headerlink" title="缓存生命周期"></a>缓存生命周期</h3><p>缓存据有一定的生命周期，因为以下两种情况缓存会被清理</p><ul><li>缓存清理：<ul><li>缓存项过期：缓存的资源往往会设定其缓存的有效时长，过期则会被清理</li><li>缓存空间用尽：当缓存空间耗尽时，会通过<code>LRU</code>(最近最少使用)算法清理缓存<br>对于<code>http</code>缓存而言，不同资源类型，不同业务类型，缓存时有效时长也是不同的，如果后端服务器刷性时间频繁，者缓存有效期不宜设置过长，过长则会导致用户请求的数据都是陈旧的。</li></ul></li></ul><h3 id="缓存处理步骤"><a href="#缓存处理步骤" class="headerlink" title="缓存处理步骤"></a>缓存处理步骤</h3><p> <code>接收请求</code> –&gt; <code>解析请求</code> –&gt; <code>查询缓存</code> –&gt; <code>新鲜度检测</code>（<code>若缓存被命中</code>）–&gt; <code>构建响应报文</code> –&gt; <code>发送响应报文</code> –&gt; <code>记录日志</code></p><ul><li>解析请求是提取请求URL及各首部首部信息（响应报文是根据请求报文构建的）</li><li>缓存不被命中，则缓存服务就将请求发送至后端的服务器（可能还是缓存服务器）</li><li>记录日志的作用，则是对用户的行为分析</li></ul><h3 id="K-V数据"><a href="#K-V数据" class="headerlink" title="K/V数据"></a>K/V数据</h3><p>缓存数据是<code>K/V</code>数据，即<code>key</code>/<code>value</code>，缓存的存储方式一般是以文件到的<code>MD5</code>码的前某些字符为键，做为存储目录，存储目录一般时多级的，其值则可能是整个<code>MD5</code>码，也可能时<code>MD5</code>码减去<code>key</code>所用的字符。</p><p><strong><code>k/v</code>存储的好处</strong>是检索速度快，具有幂等性，此处的幂等性指的是，无论查找多少次所消耗的时间都是一样的。</p><h3 id="DNS智能解析-CDN"><a href="#DNS智能解析-CDN" class="headerlink" title="DNS智能解析(CDN)"></a>DNS智能解析(CDN)</h3><p>智能解析可以做到将用户的请求解析到离用户最近的缓存服务器，缓存命中则直接返回给客户端，若不命中，有可能请求离自己最近的缓存服务器，而不是直接请求真实的服务器，因为缓存服务器往往是形成一个网络</p><p>对于国内的分裂网络(电信，联通，移动)，CDN可以判断用户来自于哪各运营商的网络，解析请求到相应网络的服务器主机，前提是需要提供web服务运营商需要在不同的的电信运营商部署服务器</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.itjohn.org/blog/index.php/2016/05/22/varnish/" target="_blank" rel="noopener">本文内容来自：Varnish工作原理及配置应用</a></p>]]></content>
      
      <categories>
          
          <category> 缓存服务 </category>
          
          <category> Cache缓存相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Varnish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署solo应用</title>
      <link href="/2017/11/05/Tomcat-solo/"/>
      <url>/2017/11/05/Tomcat-solo/</url>
      <content type="html"><![CDATA[<h3 id="安装配置tomcat"><a href="#安装配置tomcat" class="headerlink" title="安装配置tomcat"></a>安装配置tomcat</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDk ~]# vim /etc/tomcat/tomcat-users.xml          # 修改配置文件，开启web管理界面并配置tomcat用户，密码也是tomcat；</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui,admin-gui&quot;/&gt;</span><br><span class="line">[root@OpenJDk ~]# systemctl start tomcat            # 启动tomcat服务；</span><br></pre></td></tr></table></figure><h3 id="下载solo"><a href="#下载solo" class="headerlink" title="下载solo"></a>下载solo</h3><p>目前solo最新版本为2.4；</p><p><a href="https://github.com/b3log/solo" target="_blank" rel="noopener">下载地址：https://github.com/b3log/solo</a></p><h3 id="复制solo包并修改solo配置文件"><a href="#复制solo包并修改solo配置文件" class="headerlink" title="复制solo包并修改solo配置文件"></a>复制solo包并修改solo配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDk ~]# cp solo-2.2.0.war /usr/share/tomcat/webapps/</span><br><span class="line">[root@OpenJDk ~]# cd /usr/share/tomcat/webapps/</span><br><span class="line">[root@OpenJDk webapps]# ls</span><br><span class="line">docs  examples  host-manager  manager  ROOT  sample  solo-2.4.0  solo-2.4.0.war  test</span><br><span class="line">[root@OpenJDk webapps]# cd solo-2.4.0/WEB-INF/classes/</span><br><span class="line">[root@OpenJDk classes]# vim latke.properties        # 修改配置文件；</span><br><span class="line">serverScheme=http</span><br><span class="line"># Browser visit domain name</span><br><span class="line">serverHost=192.168.8.12     # 因为本处我们没有设置域名解析，所以将此修改为IP；</span><br><span class="line"># Browser visit port, 80 as usual, THIS IS NOT SERVER LISTEN PORT!</span><br><span class="line">serverPort=8080         # 端口也是默认的8080；</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDk classes]# systemctl restart tomcat        # 重启tomcat服务；</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Tomcat-solo-1.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> 部署solo应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Httpd代理Tomcat</title>
      <link href="/2017/11/05/Tomcat-Httpd-Proxy/"/>
      <url>/2017/11/05/Tomcat-Httpd-Proxy/</url>
      <content type="html"><![CDATA[<h3 id="基于http协议代理Tomcat"><a href="#基于http协议代理Tomcat" class="headerlink" title="基于http协议代理Tomcat"></a>基于http协议代理Tomcat</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDk ~]# yum install httpd</span><br><span class="line">[root@OpenJDk ~]# cd /etc/httpd/conf.d/</span><br><span class="line">[root@OpenJDk conf.d]# ls</span><br><span class="line">autoindex.conf  README  userdir.conf  welcome.conf</span><br><span class="line">[root@OpenJDk conf.d]# vim httpd-tomcat.conf</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName www.ihaiyun.cc</span><br><span class="line">    ProxyRequests Off </span><br><span class="line">    ProxyVia    On  </span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted </span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / http://127.0.0.1:8080/</span><br><span class="line">    ProxyPassReverse / http://127.0.0.1:8080/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted </span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">[root@OpenJDk conf.d]# httpd -t</span><br><span class="line">Syntax OK</span><br><span class="line">[root@OpenJDk conf.d]# systemctl start httpd</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-Proxy-1.gif" title="访问测试"></center><h3 id="基于AJP协议代理Tomcat"><a href="#基于AJP协议代理Tomcat" class="headerlink" title="基于AJP协议代理Tomcat"></a>基于AJP协议代理Tomcat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDk conf.d]# vim httpd-tomcat.conf        # 修改配置文件；</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName www.ihaiyun.cc</span><br><span class="line">    ProxyRequests Off </span><br><span class="line">    ProxyVia    On  </span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">        Require all granted </span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line">    ProxyPass / ajp://127.0.0.1:8009/           # 修改为ajp协议，且端口为8009；</span><br><span class="line">    ProxyPassReverse / ajp://127.0.0.1:8009/</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        Require all granted </span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">[root@OpenJDk conf.d]# httpd -t</span><br><span class="line">Syntax OK</span><br><span class="line">[root@OpenJDk conf.d]# systemctl restart httpd</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Httpd-Proxy-2.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Httpd代理Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx代理Tomcat</title>
      <link href="/2017/11/05/Tomcat-Nginx-Proxy/"/>
      <url>/2017/11/05/Tomcat-Nginx-Proxy/</url>
      <content type="html"><![CDATA[<h3 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDk ~]# yum install -y tomcat </span><br><span class="line">[root@OpenJDk ~]# systemctl start nginx</span><br><span class="line">[root@OpenJDk ~]# systemctl start tomcat.service </span><br><span class="line">[root@OpenJDk ~]# vim /etc/nginx/nginx.conf         # 修改配置文件；</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        root         /usr/share/tomcat/webapps/ROOT;        # 根目录指向tomcat的根目录；</span><br><span class="line">        index index.jsp index.html; </span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location ~* \.(jsp|do)$ &#123;       # 定义访问以.jsp和.do结尾就转发到本地的tomcat来处理；</span><br><span class="line">            proxy_pass http://192.168.8.12:8080 ;   # 注意：此处不能加/；</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">[root@OpenJDk ~]# nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Nginx-Proxy-1.jpg" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Nginx代理Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat web管理界面</title>
      <link href="/2017/11/05/Tomcat-Web/"/>
      <url>/2017/11/05/Tomcat-Web/</url>
      <content type="html"><![CDATA[<h3 id="web管理界面"><a href="#web管理界面" class="headerlink" title="web管理界面"></a>web管理界面</h3><p>当我们安装完成Tomcat，默认的web界面如下：</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-1.jpg" title="安装完成Tomcat，默认的web界面"></center><a id="more"></a><p>我们可以看到三个按钮，分别对应为：</p><ul><li><code>Server Status</code>：tomcat服务器状态，包括内存信息，进程信息等等。</li><li><code>manager App</code>：Web App的管理页面，可以开、关、重载、部署、卸载 Web App。</li><li><code>Host Manager</code>：虚拟主机的管理页面，可以对虚拟主机进行添加删除修改操作。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-2.gif" title="点击按钮"></center><p>为我们提供了帮助信息：</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-3.jpg" title="失败界面，为我们提供了帮助信息"></center><p>角色对应的信息为：</p><ul><li>manager-gui - allows access to the HTML GUI and the status pages</li><li>manager-script - allows access to the text interface and the status pages</li><li>manager-jmx - allows access to the JMX proxy and the status pages</li><li>manager-status - allows access to the status pages only</li></ul><h3 id="访问web界面Server-Status和Manager-App"><a href="#访问web界面Server-Status和Manager-App" class="headerlink" title="访问web界面Server Status和Manager App"></a>访问web界面Server Status和Manager App</h3><p>定义角色为<code>manager-gui</code>，用户和密码为<code>tomcat</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# vim /etc/tomcat/tomcat-users.xml          # 修改配置文件；</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;          </span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui&quot;/&gt;</span><br><span class="line">[root@OpenJDK ~]# systemctl restart tomcat</span><br></pre></td></tr></table></figure></p><p>登陆测试：</p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-4.gif" title="登陆测试"></center><h4 id="使用Manager-App热部署"><a href="#使用Manager-App热部署" class="headerlink" title="使用Manager App热部署"></a>使用Manager App热部署</h4><p>例如：部署的访问路径为<code>/app</code>，真实路径在<code>/app/test</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# cp -r test/ /app/         # 准备文件；</span><br><span class="line">[root@OpenJDK ~]# cd /app/test/</span><br><span class="line">[root@OpenJDK test]# ls</span><br><span class="line">classes  index.jsp  lib  META-INF  WEB-INF</span><br><span class="line">[root@OpenJDK test]# vim index.jsp </span><br><span class="line">[root@OpenJDK test]# cat index.jsp </span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.*&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Test Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% out.println(&quot;hello app server&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-5.gif" title="访问测试"></center><h4 id="Server-Status界面"><a href="#Server-Status界面" class="headerlink" title="Server Status界面"></a>Server Status界面</h4><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-6.jpg" title="Server Status界面"></center><p><strong><code>JVM Memory Status</code></strong></p><p><code>MAX memory</code>：大约为服务器最大内存的四分之一左右。可以自定义，最大不超过32G。</p><p><code>Heap</code> 内存区分为：<code>Eden Space</code>（伊甸园）、<code>Survivor Space</code>(幸存者区)、<code>Tenured Gen</code>（老年代-养老区）。</p><p>非<code>Heap</code> 内存区分为：<code>Code Cache</code>（代码缓存区）、<code>Compressed Class Space</code>（压缩的类区）、<code>Metaspace</code>（源数据区）</p><p><code>AJP</code> 服务 和<code>HTTP</code>服务（默认<code>HTTPS</code>服务没有启用）</p><p><code>AJP</code>(默认监听在8009端口）、<code>HTTP</code>（默认监听在8080端口）</p><p>服务阶段（<code>Stage</code>）<br><code>P</code>: Parse and prepare request （解析和准备请求）<br><code>S</code>: Service （服务中）<br><code>F</code>: Finishing （完成服务）<br><code>R</code>: Ready （准备好）<br><code>K</code>: Keepalive（保持连接）</p><h3 id="使用Host-Manager"><a href="#使用Host-Manager" class="headerlink" title="使用Host Manager"></a>使用Host Manager</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-7.jpg" title="错误界面"></center><br>根据帮助页面来修改<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# vim /etc/tomcat/tomcat-users.xml          # 修改配置文件；</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;admin-gui,manager-gui&quot;/&gt; </span><br><span class="line">[root@OpenJDK ~]# systemctl restart tomcat.service</span><br></pre></td></tr></table></figure><br><br><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Web-8.gif" title="访问测试"></center>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Tomcat web管理界面 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat常用配置</title>
      <link href="/2017/11/05/Tomcat-configure/"/>
      <url>/2017/11/05/Tomcat-configure/</url>
      <content type="html"><![CDATA[<h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Tomcat的核心组件：server.xml</span><br><span class="line">&lt;Server&gt;</span><br><span class="line">&lt;Service&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">&lt;connector/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;Engine&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">&lt;Context/&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">&lt;Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Engine&gt;</span><br><span class="line">&lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</code></p><p><code>Server</code>：代表<code>tomcat instance</code>，即表现出的一个<code>java</code>进程；监听在8005端口，只接收“<code>SHUTDOWN</code>”（<code>SHUTDOWN</code>代表向本机的8005端口发送<code>SHUTDOWN</code>指令时就代表关闭<code>tomcat</code>服务。）。各<code>server</code>监听的端口不能相同，因此，在同一物理主机启动多个实例时，需要修改其监听端口为不同的端口；</p><p>建议将此功能关闭：</p><ul><li><code>port=-1</code>或将<code>shutdown=&quot;随机数&quot;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# ss -tnlp          # 查看端口tomcat服务已经启动；</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">LISTEN     0      128                *:22                             *:*                   users:((&quot;sshd&quot;,pid=852,fd=3))</span><br><span class="line">LISTEN     0      100        127.0.0.1:25                             *:*                   users:((&quot;master&quot;,pid=1275,fd=13))</span><br><span class="line">LISTEN     0      100               :::8080                          :::*                   users:((&quot;java&quot;,pid=3278,fd=49))</span><br><span class="line">LISTEN     0      128               :::22                            :::*                   users:((&quot;sshd&quot;,pid=852,fd=4))</span><br><span class="line">LISTEN     0      100              ::1:25                            :::*                   users:((&quot;master&quot;,pid=1275,fd=14))</span><br><span class="line">LISTEN     0      1       ::ffff:127.0.0.1:8005                          :::*                   users:((&quot;java&quot;,pid=3278,fd=55))</span><br><span class="line">LISTEN     0      100               :::8009                          :::*                   users:((&quot;java&quot;,pid=3278,fd=50))</span><br><span class="line">[root@OpenJDK ~]# telnet 127.0.0.1 8005     # telnet本机8005端口，发送SHUTDOWN指令；</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">SHUTDOWN</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">[root@OpenJDK ~]# ss -tnlp      # tomcat服务已经被关闭；</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">LISTEN     0      128                *:22                             *:*                   users:((&quot;sshd&quot;,pid=852,fd=3))</span><br><span class="line">LISTEN     0      100        127.0.0.1:25                             *:*                   users:((&quot;master&quot;,pid=1275,fd=13))</span><br><span class="line">LISTEN     0      128               :::22                            :::*                   users:((&quot;sshd&quot;,pid=852,fd=4))</span><br><span class="line">LISTEN     0      100              ::1:25                            :::*                   users:((&quot;master&quot;,pid=1275,fd=14))</span><br></pre></td></tr></table></figure></li></ul><h3 id="connector组件"><a href="#connector组件" class="headerlink" title="connector组件"></a>connector组件</h3><p>负责接收请求，常见的有三类http/https/ajp；</p><p>进入tomcat的请求可分为两类：</p><ul><li>(1) standalone : 请求来自于客户端浏览器；</li><li>(2) 由其它的web server反代：来自前端的反代服务器；<ul><li><code>nginx --&gt; http connector --&gt; tomcat</code> </li><li><code>httpd(proxy_http_module) --&gt; http connector --&gt; tomcat</code></li><li><code>httpd(proxy_ajp_module) --&gt; ajp connector --&gt; tomcat</code> </li><li><code>httpd(mod_jk) --&gt; ajp connector --&gt; tomcat</code> </li></ul></li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">           connectionTimeout=&quot;20000&quot;</span><br><span class="line">           redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;</span><br><span class="line">           maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>属性：</p><ul><li><code>port</code>=”8080” </li><li><code>protocol</code>=”HTTP/1.1”</li><li><code>connectionTimeout</code>=”20000”</li><li><code>address</code>：监听的IP地址；默认为本机所有可用地址；</li><li><code>maxThreads</code>：最大并发连接数，默认为200；</li><li><code>enableLookups</code>：是否启用DNS查询功能；</li><li><code>acceptCount</code>：等待队列的最大长度；</li><li><code>secure</code>：true 是否使用安全通信</li><li><code>sslProtocol</code>：TLS协议</li></ul><h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><p>Engine组件：Servlet实例，即servlet引擎，其内部可以一个或多个host组件来定义站点； 通常需要通过defaultHost来定义默认的虚拟主机；</p><p>属性：</p><ul><li>name=</li><li>defaultHost=”localhost”</li><li>jvmRoute=</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">      unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">         prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">         pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure></p><p>属性：<br>(1) appBase：此Host的webapps的默认存放目录，指存放非归档的web应用程序的目录或归档的WAR文件目录路径；可以使用基于$CATALINA_BASE变量所定义的路径的相对路径；</p><p>(2) autoDeploy：在Tomcat处于运行状态时，将某webapp放置于appBase所定义的目录中时，是否自动将其部署至tomcat；</p><h4 id="添加虚拟主机"><a href="#添加虚拟主机" class="headerlink" title="添加虚拟主机"></a>添加虚拟主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# vim /etc/tomcat/server.xml        # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;www.ihaiyun.cc&quot; appBase=&quot;/data/webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; /&gt;</span><br><span class="line">[root@OpenJDK ~]# mkdir -pv /data/webapps</span><br><span class="line">mkdir: created directory ‘/data’</span><br><span class="line">mkdir: created directory ‘/data/webapps’</span><br><span class="line">[root@OpenJDK ~]# cp -r test/ /data/webapps/ROOT        # 为虚拟主机提供访问文件；</span><br><span class="line">[root@OpenJDK ~]# cd /data/webapps/ROOT</span><br><span class="line">[root@OpenJDK ROOT]# ls</span><br><span class="line">classes  index.jsp  lib  META-INF  WEB-INF</span><br><span class="line">[root@OpenJDK ROOT]# vim index.jsp </span><br><span class="line">[root@OpenJDK ROOT]# cat index.jsp      # 编辑默认jsp文件；</span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.*&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Test Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% out.println(&quot;www.ihaiyun.cc&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@OpenJDK ROOT]# vim /etc/hosts         # 修改hosts文件；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.12 www.ihaiyun.cc</span><br><span class="line">[root@OpenJDK ROOT]# curl  http://www.ihaiyun.cc:8080       # 3访问测试，ok；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Test Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@OpenJDK ROOT]# elinks -dump http://www.ihaiyun.cc:8080</span><br><span class="line">   www.ihaiyun.cc</span><br></pre></td></tr></table></figure><h3 id="Context组件"><a href="#Context组件" class="headerlink" title="Context组件:"></a>Context组件:</h3><p><code>&lt;Context path=&quot;/PATH&quot; docBase=&quot;/PATH/TO/SOMEDIR&quot; reloadable=&quot;&quot;/&gt;</code></p><p>包含在Host标签里。</p><p>如果在一个主机上部署多个app的话，Context就可以用来定义不同app对应的路径。</p><p>把/PATH/TO/SOMEDIR映射到 request URI /PATH</p><ul><li>如果/PATH/TO/SOMEDIR不带/，则是相对路径，相对的是Host的appBase。</li><li>如果/PATH/TO/SOMEDIR带/，则是操作系统的绝对路径。</li><li>reloadable：是否支持主机装载。</li></ul><h4 id="定义context"><a href="#定义context" class="headerlink" title="定义context"></a>定义context</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# vim /etc/tomcat/server.xml        # 在上面刚刚增在的host中添加一个context；</span><br><span class="line">      &lt;Host name=&quot;www.ihaiyun.cc&quot; appBase=&quot;/data/webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; &gt;</span><br><span class="line">        &lt;context path=&quot;/appserver&quot; docBase=&quot;/data/app&quot; reloadable=&quot;&quot;/&gt;</span><br><span class="line">     &lt;/host&gt;</span><br><span class="line"></span><br><span class="line">[root@OpenJDK ~]# cp -r /root/test/ /data/</span><br><span class="line">[root@OpenJDK ~]# cd /data/test/</span><br><span class="line">[root@OpenJDK test]# vim index.jsp </span><br><span class="line">[root@OpenJDK test]# cat index.jsp </span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.*&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Test Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% out.println(&quot;/data/test&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@OpenJDK test]# systemctl restart tomcat </span><br><span class="line">[root@OpenJDK test]# elinks -dump http://www.ihaiyun.cc:8080/testapp/       # 测试访问，ok；</span><br><span class="line">   /data/test</span><br></pre></td></tr></table></figure><h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><p>Valve存在多种类型：</p><ul><li>定义访问日志：<code>org.apache.catalina.valves.AccessLogValve</code></li><li>定义访问控制：<code>org.apache.catalina.valves.RemoteAddrValve</code></li></ul><p>访问日志示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;ihaiyun.cc_access_log.&quot; suffix=&quot;.log&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br></pre></td></tr></table></figure><p><code>&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot;</code>为日志格式，<code>&amp;quot</code>表示的是引号。</p><h4 id="定义日志"><a href="#定义日志" class="headerlink" title="定义日志"></a>定义日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK test]# vim /etc/tomcat/server.xml         # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;www.ihaiyun.cc&quot; appBase=&quot;/data/webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;Context path=&quot;/testapp&quot; docBase=&quot;/data/test&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;ihaiyun.cc_access_log.&quot; suffix=&quot;.log&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"> &lt;/Host&gt;</span><br><span class="line">[root@OpenJDK test]# elinks -dump http://www.ihaiyun.cc:8080        # 访问测试；</span><br><span class="line">   www.ihaiyun.cc</span><br><span class="line">[root@OpenJDK test]# elinks -dump http://www.ihaiyun.cc:8080</span><br><span class="line">   www.ihaiyun.cc</span><br><span class="line">[root@OpenJDK test]# elinks -dump http://www.ihaiyun.cc:8080</span><br><span class="line">   www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@OpenJDK ~]# cd /usr/share/tomcat/logs/</span><br><span class="line">[root@OpenJDK logs]# ls</span><br><span class="line">catalina.2017-11-04.log      ihaiyun.cc_access_log.2017-11-04.log  manager.2017-11-04.log</span><br><span class="line">catalina.out                 localhost.2017-11-04.log</span><br><span class="line">host-manager.2017-11-04.log  localhost_access_log.2017-11-04.txt</span><br><span class="line">[root@OpenJDK logs]# tail ihaiyun.cc_access_log.2017-11-04.log          # 查看日志；</span><br><span class="line">192.168.8.12 - - [04/Nov/2017:19:53:01 +0800] &quot;GET / HTTP/1.1&quot; 200 132</span><br><span class="line">192.168.8.12 - - [04/Nov/2017:19:53:01 +0800] &quot;GET / HTTP/1.1&quot; 200 132</span><br><span class="line">192.168.8.12 - - [04/Nov/2017:19:53:03 +0800] &quot;GET / HTTP/1.1&quot; 200 132</span><br></pre></td></tr></table></figure><h4 id="定义访问控制，允许某主机"><a href="#定义访问控制，允许某主机" class="headerlink" title="定义访问控制，允许某主机"></a>定义访问控制，允许某主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# vim /etc/tomcat/server.xml            # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;www.ihaiyun.cc&quot; appBase=&quot;/data/webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;Context path=&quot;/testapp&quot; docBase=&quot;/data/test&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;ihaiyun.cc_access_log.&quot; suffix=&quot;.log&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+&quot;/&gt;</span><br><span class="line"> &lt;/Host&gt;</span><br><span class="line"> [root@OpenJDK ~]# systemctl restart tomcat</span><br><span class="line">[root@OpenJDK ~]# elinks -dump http://www.ihaiyun.cc:8080/test      # 可以看到使用域名已经无法访问了；</span><br><span class="line">[root@OpenJDK ~]# elinks -dump http://127.0.0.1:8080/test   # 但使用iP还可以；</span><br><span class="line">   hello world</span><br></pre></td></tr></table></figure><h4 id="定义访问控制，拒绝某主机"><a href="#定义访问控制，拒绝某主机" class="headerlink" title="定义访问控制，拒绝某主机"></a>定义访问控制，拒绝某主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@OpenJDK ~]# vim /etc/tomcat/server.xml        # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;www.ihaiyun.cc&quot; appBase=&quot;/data/webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;Context path=&quot;/testapp&quot; docBase=&quot;/data/test&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;ihaiyun.cc_access_log.&quot; suffix=&quot;.log&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; deny=&quot;192\.168\.8\.11&quot;/&gt; &lt;/Host&gt;      # 拒绝192.168.8.11，这台主机访问；</span><br><span class="line">[root@OpenJDK ~]# systemctl restart tomcat</span><br><span class="line">[root@Client ~]# ifconfig eth1              # Client就是192.168.8.11；</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.11  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3742 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:3027 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:380924 (371.9 KiB)  TX bytes:390104 (380.9 KiB)</span><br><span class="line"></span><br><span class="line">[root@Client ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11 www.ihaiyun.cc</span><br><span class="line">[root@Client ~]# elinks -dump http://192.168.8.12:8080/test/        # 直接访问默认虚拟主机，还是可以访问的；</span><br><span class="line">   hello world</span><br><span class="line">[root@Client ~]# elinks -dump http://www.ihaiyun.cc:8080/test/      # 访问www.ihaiyun.cc就被拒绝了；</span><br><span class="line">ELinks: Connection refused</span><br></pre></td></tr></table></figure><h3 id="注释某语句"><a href="#注释某语句" class="headerlink" title="注释某语句"></a>注释某语句</h3><p><code>&lt;!-- --&gt;</code>代表注释某语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      &lt;Host name=&quot;www.ihaiyun.cc&quot; appBase=&quot;/data/webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;Context path=&quot;/testapp&quot; docBase=&quot;/data/test&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;ihaiyun.cc_access_log.&quot; suffix=&quot;.log&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">&lt;!---   &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; deny=&quot;192\.168\.8\.11&quot;/&gt; --&gt;      # 此语句已经被注释；</span><br><span class="line"> &lt;/Host&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> Tomcat常用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装tomcat</title>
      <link href="/2017/11/05/Tomcat-Install/"/>
      <url>/2017/11/05/Tomcat-Install/</url>
      <content type="html"><![CDATA[<h3 id="JAVA简介"><a href="#JAVA简介" class="headerlink" title="JAVA简介"></a>JAVA简介</h3><p><code>Java</code>是一种广泛使用的计算机编程语言，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web应用开发和移动应用开发。</p><h4 id="JAVA代码的运行"><a href="#JAVA代码的运行" class="headerlink" title="JAVA代码的运行"></a>JAVA代码的运行</h4><p><code>*.java(source code) --&gt; javac --&gt; *.class(bytecode)</code></p><p><code>.java</code>代码编写完成后，由<code>javac</code>编译后，生成字节码<code>.class</code>，然后发送给<code>jvm</code>来运行。</p><a id="more"></a><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><p><code>JVM</code>是<code>Java Virtual Machine</code>（<code>Java</code>虚拟机）的缩写，<code>class loader</code>，加载程序的类文件，及程序的类文件依赖到的其它的类文件而后运行； 整个运行表现为一个<code>jvm</code>进程。</p><h4 id="Servlet与Applet"><a href="#Servlet与Applet" class="headerlink" title="Servlet与Applet"></a>Servlet与Applet</h4><ul><li><code>Applet</code>具有很好的图形界面(<code>AWT</code>)，与浏览器一起，在客户端运行。</li><li><code>Servlet</code> 则没有图形界面，运行在服务器端。</li></ul><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><p><code>JSP</code>全名为<code>Java Server Pages</code>，中文名叫<code>java</code>服务器页面，其根本是一个简化的<code>Servlet</code>设计。<br>是一种实现普通静态<code>HTML</code>和动态<code>HTML</code>混合编码的技术，<code>JSP</code>并没有增加任何本质上不能用<code>Servlet</code>实现的功能。但是，在 <code>JSP</code>中编写静态<code>HTML</code>更加方便，不必再用<code>println</code>语句来输出每一行<code>HTML</code>代码。更重要的是，借助内容和外观的分离，页面制作中不同性质的任务可以方便地分开：比如，由页面设计者进行HTML设计，同时留出供<code>Servlet</code>程序员插入动态内容的空间。</p><h4 id="jasper"><a href="#jasper" class="headerlink" title="jasper"></a>jasper</h4><p><code>jasper</code>程序的功能，就是把<code>JVM</code>不认识的<code>JSP</code>文件解析成<code>java</code>文件，然后由<code>javac</code>程序编译成<code>class</code>文件提供使用。目前有很多的<code>JSP</code>解析引擎，<code>Tomcat</code>中使用的是<code>Jasper</code>。如下：</p><p><code>*.jsp –&gt; jasper –&gt; *.java –&gt; javac –&gt; *.class –&gt; JVM</code></p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p><code>JDK</code>(<code>Java Development Kits</code>)是 <code>Java</code> 语言的软件开发工具包，是整个<code>java</code>开发的核心，它包含了<code>JAVA</code>的运行环境（<code>JVM+Java</code>系统类库）和<code>JAVA</code>工具。</p><p>一共分为两种：</p><ul><li><code>OpenJDK</code> ：而OpenJDK使用的是开源的FreeType</li><li><code>Oracle JDK</code>：Oracle JDK采用了商业实现</li></ul><h4 id="安装OpenJDK-1-8"><a href="#安装OpenJDK-1-8" class="headerlink" title="安装OpenJDK 1.8"></a>安装OpenJDK 1.8</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum list | grep &quot;^java&quot;           # 查看java开头的包，可以看到，有1.6、1.7、1.8三个版本</span><br><span class="line">file://misc/cd/repodata/repomd.xml: [Errno 14] curl#37 - &quot;Couldn&apos;t open file /cd/repodata/repomd.xml&quot;</span><br><span class="line">Trying other mirror.</span><br><span class="line">java-1.8.0-openjdk.x86_64                   1:1.8.0.102-4.b14.el7      @base    </span><br><span class="line">java-1.8.0-openjdk-devel.x86_64             1:1.8.0.102-4.b14.el7      @base    </span><br><span class="line">java-1.8.0-openjdk-headless.x86_64          1:1.8.0.102-4.b14.el7      @base    </span><br><span class="line">javapackages-tools.noarch                   3.4.1-11.el7               @base    </span><br><span class="line">java-1.6.0-openjdk.x86_64                   1:1.6.0.40-1.13.12.9.el7   base     </span><br><span class="line">java-1.6.0-openjdk-demo.x86_64              1:1.6.0.40-1.13.12.9.el7   base     </span><br><span class="line">java-1.6.0-openjdk-devel.x86_64             1:1.6.0.40-1.13.12.9.el7   base     </span><br><span class="line">java-1.6.0-openjdk-javadoc.x86_64           1:1.6.0.40-1.13.12.9.el7   base     </span><br><span class="line">java-1.6.0-openjdk-src.x86_64               1:1.6.0.40-1.13.12.9.el7   base     </span><br><span class="line">java-1.7.0-openjdk.x86_64                   1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.7.0-openjdk-accessibility.x86_64     1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.7.0-openjdk-demo.x86_64              1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.7.0-openjdk-devel.x86_64             1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.7.0-openjdk-headless.x86_64          1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.7.0-openjdk-javadoc.noarch           1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.7.0-openjdk-src.x86_64               1:1.7.0.111-2.6.7.8.el7    base     </span><br><span class="line">java-1.8.0-openjdk.i686                     1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-accessibility.x86_64     1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-accessibility-debug.x86_64</span><br><span class="line">java-1.8.0-openjdk-debug.i686               1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-debug.x86_64             1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-demo.x86_64              1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-demo-debug.x86_64        1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-devel.i686               1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-devel-debug.i686         1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-devel-debug.x86_64       1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-headless.i686            1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-headless-debug.i686      1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-headless-debug.x86_64    1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-javadoc.noarch           1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-javadoc-debug.noarch     1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-javadoc-zip.noarch       1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-javadoc-zip-debug.noarch 1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-src.x86_64               1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-1.8.0-openjdk-src-debug.x86_64         1:1.8.0.102-4.b14.el7      base     </span><br><span class="line">java-atk-wrapper.i686                       0.30.4-5.el7               base     </span><br><span class="line">java-atk-wrapper.x86_64                     0.30.4-5.el7               base     </span><br><span class="line">java-dirq.noarch                            1.4-1.el6                  epel     </span><br><span class="line">java-dirq-javadoc.noarch                    1.4-1.el6                  epel     </span><br><span class="line">java-service-wrapper.x86_64                 3.2.5-23.el6               epel     </span><br><span class="line">java-service-wrapper-javadoc.noarch         3.2.5-23.el6               epel     </span><br><span class="line">java-sleep.noarch                           2.1-6.el6                  epel     </span><br><span class="line">java-sleep-javadoc.noarch                   2.1-6.el6                  epel     </span><br><span class="line">java_cup.noarch                             1:0.11a-16.el7             base     </span><br><span class="line">java_cup-javadoc.noarch                     1:0.11a-16.el7             base     </span><br><span class="line">java_cup-manual.noarch                      1:0.11a-16.el7             base     </span><br><span class="line">javacc.noarch                               5.0-10.el7                 base     </span><br><span class="line">javacc-demo.noarch                          5.0-10.el7                 base     </span><br><span class="line">javacc-javadoc.noarch                       5.0-10.el7                 base     </span><br><span class="line">javacc-manual.noarch                        5.0-10.el7                 base     </span><br><span class="line">javacc-maven-plugin.noarch                  2.6-17.el7                 base     </span><br><span class="line">javacc-maven-plugin-javadoc.noarch          2.6-17.el7                 base     </span><br><span class="line">javamail.noarch                             1.4.6-8.el7                base     </span><br><span class="line">javamail-javadoc.noarch                     1.4.6-8.el7                base     </span><br><span class="line">javassist.noarch                            3.16.1-10.el7              base     </span><br><span class="line">javassist-javadoc.noarch                    3.16.1-10.el7              base     </span><br><span class="line">javastroke.x86_64                           0.5.1-33.el6               epel     </span><br><span class="line">javatar.noarch                              2.5-5.el6                  epel     </span><br><span class="line">javatar-javadoc.noarch                      2.5-5.el6                  epel     </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# yum install -y java-1.8.0-openjdk-devel[root@centos7 ~]# yum install -y java-1.8.0-openjdk-devel        # 我们安装1.8的devel包，这条命令会安装java-1.8.0、java-1.8.0-poenjdk-devel、java-1.8.0-openjdk-headless以及其他相关依赖。</span><br><span class="line"></span><br><span class="line"># openjdk是The OpenJDK runtime environment，只有运行环境; openjdk-devel是The OpenJDK development tools,是开发工具包组。所以我们来安装openjdk-devel，这样有一系列的开发工具包组可供使用。</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# java -version         # 安装完成后可以查看java版本；</span><br><span class="line">openjdk version &quot;1.8.0_102&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="安装-Oracle-的-JDK-8"><a href="#安装-Oracle-的-JDK-8" class="headerlink" title="安装 Oracle 的 JDK 8"></a>安装 Oracle 的 JDK 8</h4><p>Oracle官方也有对应的JRE和JDK。可以去官网下载：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Install-1.gif" title="下载JDK"></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ls</span><br><span class="line">jdk-8u151-linux-x64.rpm</span><br><span class="line">[root@centos7 ~]# rpm -ivh jdk-8u151-linux-x64.rpm          # 用rpm命令安装</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:jdk1.8-2000:1.8.0_151-fcs        ################################# [100%]</span><br><span class="line">Unpacking JAR files...</span><br><span class="line">tools.jar...</span><br><span class="line">plugin.jar...</span><br><span class="line">javaws.jar...</span><br><span class="line">deploy.jar...</span><br><span class="line">rt.jar...</span><br><span class="line">jsse.jar...</span><br><span class="line">charsets.jar...</span><br><span class="line">localedata.jar...</span><br></pre></td></tr></table></figure><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# rpm -ql jdk       # 因为我们是自行下载的rpm包，所以系统并没有记录；</span><br><span class="line">package jdk is not installed</span><br><span class="line">[root@centos7 ~]# cd /usr/java/     </span><br><span class="line">[root@centos7 java]# ll             # 默认安装在/usr/java目录下；</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root  16 Nov  4 09:05 default -&gt; /usr/java/latest</span><br><span class="line">drwxr-xr-x 9 root root 268 Nov  4 09:05 jdk1.8.0_151</span><br><span class="line">lrwxrwxrwx 1 root root  22 Nov  4 09:05 latest -&gt; /usr/java/jdk1.8.0_151</span><br><span class="line">[root@centos7 java]# vim /etc/profile.d/java.sh             # 编写环境变量；</span><br><span class="line">export JAVA_HOME=/usr/java/latest</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">[root@centos7 java]# source  /etc/profile.d/java.sh         # 同步到当前终端；</span><br><span class="line">[root@centos7 ~]# java -version             # 查看版本；</span><br><span class="line">java version &quot;1.8.0_151&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_151-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p><code>Tomcat</code>服务器是一个免费的开放源代码的<code>Web</code> 应用服务器，<code>Tomcat</code>是<code>Apache</code> 软件基金会（<code>Apache Software Foundation</code>）的<code>Jakarta</code> 项目中的一个核心项目：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官网：tomcat.apache.org</a>，它的项目名称为<code>catalina</code>，后来由<code>Apache</code>、<code>Sun</code> 和其他一些公司及个人共同开发而成，因为在<code>O’Reilly</code>家出的书的封面是一只汤姆猫，所以软件更名为<code>Tomcat</code>。<code>Tomcat</code> 是一个小型的轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选，因为<code>Tomcat</code> 技术先进、性能稳定，成为目前比较流行的<code>Web</code> 应用服务器。Tomcat是应用（<code>java</code>）服务器，它只是一个<code>servlet</code>容器，是<code>Apache</code>的扩展，但它是独立运行的。</p><h3 id="Tomcat架构"><a href="#Tomcat架构" class="headerlink" title="Tomcat架构"></a>Tomcat架构</h3><center><img src="https://houhaiyun.github.io/img/images/Tomcat-Install-2.png" title="Tomcat架构"></center><p>Tomcat由一组嵌套的层次和组件组成，一般可分为以下四类：</p><ul><li>顶级组件：位于配置层次的顶级，并且彼此间有着严格的对应关系；</li><li>连接器：连接客户端（可以是浏览器或Web服务器）请求至Servlet容器，</li><li>容器：包含一组其它组件；</li><li>被嵌套的组件：位于一个容器当中，但不能包含其它组件；</li></ul><h4 id="各常见组件："><a href="#各常见组件：" class="headerlink" title="各常见组件："></a>各常见组件：</h4><ol><li><p>服务器(server)：Tomcat的一个实例，通常一个JVM只能包含一个Tomcat实例；因此，一台物理服务器上可以在启动多个JVM的情况下在每一个JVM中启动一个Tomcat实例，每个实例分属于一个独立的管理端口。这是一个顶级组件。</p></li><li><p>服务(service)：一个服务组件通常包含一个引擎和与此引擎相关联的一个或多个连接器。给服务命名可以方便管理员在日志文件中识别不同服务产生的日志。一个server可以包含多个service组件，但通常情下只为一个service指派一个server。</p></li></ol><h4 id="连接器类组件"><a href="#连接器类组件" class="headerlink" title="连接器类组件"></a>连接器类组件</h4><ol start="3"><li>连接器(connectors)：负责连接客户端（可以是浏览器或Web服务器）请求至Servlet容器内的Web应用程序，通常指的是接收客户发来请求的位置及服务器端分配的端口。默认端口通常是HTTP协议的8080，管理员也可以根据自己的需要改变此端口。一个引擎可以配置多个连接器，但这些连接器必须使用不同的端口。默认的连接器是基于HTTP/1.1的Coyote。同时，Tomcat也支持AJP、JServ和JK2连接器。</li></ol><h4 id="容器类组件"><a href="#容器类组件" class="headerlink" title="容器类组件"></a>容器类组件</h4><ol start="4"><li><p>引擎(Engine)：引擎通是指处理请求的Servlet引擎组件，即Catalina Servlet引擎，它检查每一个请求的HTTP首部信息以辨别此请求应该发往哪个host或context，并将请求处理后的结果返回的相应的客户端。严格意义上来说，容器不必非得通过引擎来实现，它也可以是只是一个容器。如果Tomcat被配置成为独立服务器，默认引擎就是已经定义好的引擎。而如果Tomcat被配置为Apache Web服务器的提供Servlet功能的后端，默认引擎将被忽略，因为Web服务器自身就能确定将用户请求发往何处。一个引擎可以包含多个host组件。</p></li><li><p>主机(Host)：主机组件类似于Apache中的虚拟主机，但在Tomcat中只支持基于FQDN的“虚拟主机”。一个引擎至少要包含一个主机组件。</p></li><li><p>上下文(Context)：Context组件是最内层次的组件，它表示Web应用程序本身。配置一个Context最主要的是指定Web应用程序的根目录，以便Servlet容器能够将用户请求发往正确的位置。Context组件也可包含自定义的错误页，以实现在用户访问发生错误时提供友好的提示信息。</p></li></ol><h4 id="被嵌套类-nested-组件"><a href="#被嵌套类-nested-组件" class="headerlink" title="被嵌套类(nested)组件"></a>被嵌套类(nested)组件</h4><p>这类组件通常包含于容器类组件中以提供具有管理功能的服务，它们不能包含其它组件，但有些却可以由不同层次的容器各自配置。</p><ol start="7"><li><p>阀门(Valve)：用来拦截请求并在将其转至目标之前进行某种处理操作，类似于Servlet规范中定义的过滤器。Valve可以定义在任何容器类的组件中。Valve常被用来记录客户端请求、客户端IP地址和服务器等信息，这种处理技术通常被称作请求转储(request dumping)。请求转储valve记录请求客户端请求数据包中的HTTP首部信息和cookie信息文件中，响应转储valve则记录响应数据包首部信息和cookie信息至文件中。</p></li><li><p>日志记录器(Logger)：用于记录组件内部的状态信息，可被用于除Context之外的任何容器中。日志记录的功能可被继承，因此，一个引擎级别的Logger将会记录引擎内部所有组件相关的信息，除非某内部组件定义了自己的Logger组件。</p></li><li><p>领域(Realm)：用于用户的认证和授权；在配置一个应用程序时，管理员可以为每个资源或资源组定义角色及权限，而这些访问控制功能的生效需要通过Realm来实现。Realm的认证可以基于文本文件、数据库表、LDAP服务等来实现。Realm的效用会遍及整个引擎或顶级容器，因此，一个容器内的所有应用程序将共享用户资源。同时，Realm可以被其所在组件的子组件继承，也可以被子组件中定义的Realm所覆盖。<br>引擎(Engine)：引擎是指处理请求的Servlet引擎组件，即Catalina Servlet引擎，它从HTTPconnector接收请求并响应请求。它检查每一个请求的HTTP首部信息以辨别此请求应该发往哪个host或context，并将请求处理后的结果返回的相应的客户端。严格意义上来说，容器不必非得通过引擎来实现，它也可以是只是一个容器。如果Tomcat被配置成为独立服务器，默认引擎就是已经定义好的引擎。而如果Tomcat被配置为Apache Web服务器的提供Servlet功能的后端，默认引擎将被忽略，因为Web服务器自身就能确定将用户请求发往何处。一个引擎可以包含多个host组件。</p></li></ol><h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><h4 id="yum方式安装tomcat"><a href="#yum方式安装tomcat" class="headerlink" title="yum方式安装tomcat"></a>yum方式安装tomcat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install tomcat tomcat-admin-webapps tomcat-webapps tomcat-docs-webapp     # 注意：yum安装tomcat时记得把epel源，给关闭否则会发生冲突</span><br><span class="line">。。。省略部分信息</span><br><span class="line">Installed:</span><br><span class="line">  tomcat.noarch 0:7.0.69-10.el7                tomcat-admin-webapps.noarch 0:7.0.69-10.el7   </span><br><span class="line">  tomcat-docs-webapp.noarch 0:7.0.69-10.el7    tomcat-webapps.noarch 0:7.0.69-10.el7         </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  apache-commons-collections.noarch 0:3.2.1-22.el7_2                                         </span><br><span class="line">  apache-commons-daemon.x86_64 0:1.0.13-6.el7                                                </span><br><span class="line">  apache-commons-dbcp.noarch 0:1.4-17.el7                                                    </span><br><span class="line">  apache-commons-logging.noarch 0:1.1.2-7.el7                                                </span><br><span class="line">  apache-commons-pool.noarch 0:1.6-9.el7                                                     </span><br><span class="line">  avalon-framework.noarch 0:4.3-10.el7                                                       </span><br><span class="line">  avalon-logkit.noarch 0:2.1-14.el7                                                          </span><br><span class="line">  ecj.x86_64 1:4.2.1-8.el7                                                                   </span><br><span class="line">  geronimo-jms.noarch 0:1.1.1-19.el7                                                         </span><br><span class="line">  geronimo-jta.noarch 0:1.1.1-17.el7                                                         </span><br><span class="line">  jakarta-taglibs-standard.noarch 0:1.1.2-14.el7_1                                           </span><br><span class="line">  javamail.noarch 0:1.4.6-8.el7                                                              </span><br><span class="line">  log4j.noarch 0:1.2.17-15.el7                                                               </span><br><span class="line">  tomcat-el-2.2-api.noarch 0:7.0.69-10.el7                                                   </span><br><span class="line">  tomcat-jsp-2.2-api.noarch 0:7.0.69-10.el7                                                  </span><br><span class="line">  tomcat-lib.noarch 0:7.0.69-10.el7                                                          </span><br><span class="line">  tomcat-servlet-3.0-api.noarch 0:7.0.69-10.el7                                              </span><br><span class="line">  xalan-j2.noarch 0:2.7.1-23.el7                                                             </span><br><span class="line">  xerces-j2.noarch 0:2.11.0-17.el7_0                                                         </span><br><span class="line">  xml-commons-apis.noarch 0:1.4.01-16.el7                                                    </span><br><span class="line">  xml-commons-resolver.noarch 0:1.2-15.el7    </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# systemctl start tomcat.service        # 安装直接启动tomcat；</span><br><span class="line">[root@centos7 ~]# jps       # 专门用来查看java进程的；</span><br><span class="line">2340 Bootstrap</span><br><span class="line">2409 Jps</span><br><span class="line">    </span><br><span class="line">[root@centos7 ~]# jps -v        # 查看详细过程；</span><br><span class="line">2340 Bootstrap -Dcatalina.base=/usr/share/tomcat -Dcatalina.home=/usr/share/tomcat -Djava.endorsed.dirs= -Djava.io.tmpdir=/var/cache/tomcat/temp -Djava.util.logging.config.file=/usr/share/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br><span class="line">2421 Jps -Dapplication.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64 -Xms8m</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ss -tnlp          # 端口分别为，8080：http协议接口，8009：AJP协议接口，9005管理接口；</span><br><span class="line">State       Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">LISTEN      0      128                *:22                             *:*                   users:((&quot;sshd&quot;,pid=852,fd=3))</span><br><span class="line">LISTEN      0      100        127.0.0.1:25                             *:*                   users:((&quot;master&quot;,pid=1275,fd=13))</span><br><span class="line">LISTEN      0      100               :::8080                          :::*                   users:((&quot;java&quot;,pid=2340,fd=49))</span><br><span class="line">LISTEN      0      128               :::22                            :::*                   users:((&quot;sshd&quot;,pid=852,fd=4))</span><br><span class="line">LISTEN      0      100              ::1:25                            :::*                   users:((&quot;master&quot;,pid=1275,fd=14))</span><br><span class="line">LISTEN      0      1       ::ffff:127.0.0.1:8005                          :::*                   users:((&quot;java&quot;,pid=2340,fd=54))</span><br><span class="line">LISTEN      0      100               :::8009                          :::*                   users:((&quot;java&quot;,pid=2340,fd=50))</span><br></pre></td></tr></table></figure><h4 id="二进制方式安装"><a href="#二进制方式安装" class="headerlink" title="二进制方式安装"></a>二进制方式安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gz</span><br><span class="line">--2017-11-04 14:14:50--  http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gz</span><br><span class="line">Resolving mirrors.hust.edu.cn (mirrors.hust.edu.cn)... 202.114.18.160</span><br><span class="line">Connecting to mirrors.hust.edu.cn (mirrors.hust.edu.cn)|202.114.18.160|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 8997403 (8.6M) [application/octet-stream]</span><br><span class="line">Saving to: ‘apache-tomcat-7.0.82.tar.gz’</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 8,997,403   4.43MB/s   in 1.9s   </span><br><span class="line"></span><br><span class="line">2017-11-04 14:14:52 (4.43 MB/s) - ‘apache-tomcat-7.0.82.tar.gz’ saved [8997403/8997403]</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# tar xf apache-tomcat-7.0.82.tar.gz -C /usr/local/</span><br><span class="line">[root@centos7 ~]# cd /usr/local/</span><br><span class="line">[root@centos7 local]# ls</span><br><span class="line">apache-tomcat-7.0.82  bin  etc  games  include  lib  lib64  libexec  sbin  share  src</span><br><span class="line">[root@centos7 local]# ln -sv apache-tomcat-7.0.82/ tomcat</span><br><span class="line">‘tomcat’ -&gt; ‘apache-tomcat-7.0.82/’</span><br><span class="line">[root@centos7 local]# ls</span><br><span class="line">apache-tomcat-7.0.82  etc    include  lib64    sbin   src</span><br><span class="line">bin                   games  lib      libexec  share  tomcat</span><br><span class="line">[root@centos7 local]# cd tomcat</span><br><span class="line">[root@centos7 tomcat]# ll</span><br><span class="line">total 96</span><br><span class="line">drwxr-xr-x 2 root root  4096 Nov  4 14:15 bin</span><br><span class="line">drwxr-xr-x 2 root root   158 Sep 29 20:27 conf</span><br><span class="line">drwxr-xr-x 2 root root  4096 Nov  4 14:15 lib</span><br><span class="line">-rw-r--r-- 1 root root 56846 Sep 29 20:27 LICENSE</span><br><span class="line">drwxr-xr-x 2 root root     6 Sep 29 20:23 logs</span><br><span class="line">-rw-r--r-- 1 root root  1239 Sep 29 20:27 NOTICE</span><br><span class="line">-rw-r--r-- 1 root root  8965 Sep 29 20:27 RELEASE-NOTES</span><br><span class="line">-rw-r--r-- 1 root root 16195 Sep 29 20:27 RUNNING.txt</span><br><span class="line">drwxr-xr-x 2 root root    30 Nov  4 14:15 temp</span><br><span class="line">drwxr-xr-x 7 root root    81 Sep 29 20:26 webapps</span><br><span class="line">drwxr-xr-x 2 root root     6 Sep 29 20:23 work</span><br><span class="line">[root@centos7 tomcat]# useradd -r tomcat</span><br><span class="line">[root@centos7 tomcat]# chown -R tomcat.tomcat ./* </span><br><span class="line">[root@centos7 tomcat]# ll</span><br><span class="line">total 96</span><br><span class="line">drwxr-xr-x 2 tomcat tomcat  4096 Nov  4 14:15 bin</span><br><span class="line">drwxrwxr-x 3 tomcat tomcat   174 Nov  4 14:23 conf</span><br><span class="line">drwxr-xr-x 2 tomcat tomcat  4096 Nov  4 14:15 lib</span><br><span class="line">-rw-r--r-- 1 tomcat tomcat 56846 Sep 29 20:27 LICENSE</span><br><span class="line">drwxrwxr-x 2 tomcat tomcat   197 Nov  4 14:23 logs</span><br><span class="line">-rw-r--r-- 1 tomcat tomcat  1239 Sep 29 20:27 NOTICE</span><br><span class="line">-rw-r--r-- 1 tomcat tomcat  8965 Sep 29 20:27 RELEASE-NOTES</span><br><span class="line">-rw-r--r-- 1 tomcat tomcat 16195 Sep 29 20:27 RUNNING.txt</span><br><span class="line">drwxrwxr-x 2 tomcat tomcat    30 Nov  4 14:15 temp</span><br><span class="line">drwxr-xr-x 7 tomcat tomcat    81 Sep 29 20:26 webapps</span><br><span class="line">drwxrwxr-x 3 tomcat tomcat    22 Nov  4 14:23 work</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# su - tomcat -c &apos;catalina.sh start&apos;</span><br><span class="line">su: warning: cannot change directory to /home/tomcat: No such file or directory</span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/java/latest</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">[root@centos7 tomcat]# ss -tnul         # 端口已经打开；</span><br><span class="line">Netid  State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp    UNCONN     0      0               *:14630                       *:*                  </span><br><span class="line">udp    UNCONN     0      0       127.0.0.1:323                         *:*                  </span><br><span class="line">udp    UNCONN     0      0               *:68                          *:*                  </span><br><span class="line">udp    UNCONN     0      0             ::1:323                        :::*                  </span><br><span class="line">udp    UNCONN     0      0              :::24928                      :::*                  </span><br><span class="line">tcp    LISTEN     0      128             *:22                          *:*                  </span><br><span class="line">tcp    LISTEN     0      100     127.0.0.1:25                          *:*                  </span><br><span class="line">tcp    LISTEN     0      100            :::8080                       :::*                  </span><br><span class="line">tcp    LISTEN     0      128            :::22                         :::*                  </span><br><span class="line">tcp    LISTEN     0      100           ::1:25                         :::*                  </span><br><span class="line">tcp    LISTEN     0      1        ::ffff:127.0.0.1:8005                       :::*                  </span><br><span class="line">tcp    LISTEN     0      100            :::8009                       :::*            </span><br><span class="line">[root@centos7 tomcat]# ps aux | grep java       # 运行身份也为tomcat；</span><br><span class="line">tomcat    13683  3.6  8.0 2745508 80984 ?       Sl   14:40   0:03 /usr/java/latest/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.endorsed.dirs=/usr/local/tomcat/endorsed -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start</span><br></pre></td></tr></table></figure><h3 id="tomcat目录结构"><a href="#tomcat目录结构" class="headerlink" title="tomcat目录结构"></a>tomcat目录结构</h3><ul><li><code>bin</code>：脚本，及启动时用到的类。</li><li><code>conf</code>：配置文件目录。</li><li><code>lib</code>：库文件，Java类库，jar。</li><li><code>logs</code>：日志文件目录。</li><li><code>temp</code>：临时文件目录。</li><li><code>webapps</code>：webapp的默认目录。</li><li><code>work</code>：工作目录。存放编译后的字节码文件。</li></ul><h4 id="tomcat的配置文件构成："><a href="#tomcat的配置文件构成：" class="headerlink" title="tomcat的配置文件构成："></a>tomcat的配置文件构成：</h4><ul><li><code>server.xml</code>：主配置文件；</li><li><code>web.xml</code>：每个webapp只有“部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认部署相关的配置；</li><li><code>context.xml</code>：每个webapp都可以使用的配置文件，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中；此文件为所有的webapps提供默认配置；</li><li><code>tomcat-users.xml</code>：用户认证的账号和密码文件；角色（role），用户（User）；此文件在tomcat启动时被装入内存；</li><li><code>catalina.policy</code>：当使用-security选项启动tomcat时，用于为tomcat设置安全策略； </li><li><code>catalina.properties</code>：Java属性的定义文件，用于设定类加载器路径，以及一些与JVM调优相关参数；</li><li><code>logging.properties</code>：日志系统相关的配置；    </li></ul><h4 id="JSP-Webapp的组织结构"><a href="#JSP-Webapp的组织结构" class="headerlink" title="JSP Webapp的组织结构"></a>JSP Webapp的组织结构</h4><p>webapps的根目录：</p><ul><li><code>index.jsp</code>：主页；</li><li><code>WEB-INF/</code>：当前webapp的私有资源路径；通常用于存储当前webapp的web.xml和context.xml配置文件；</li><li><code>META-INF/</code>：类似于WEB-INF/；</li><li><code>classes/</code>：类文件，当前webapp所提供的类；</li><li><code>lib/</code>：类文件，当前webapp所提供的类，被打包为jar格式；</li></ul><p>webapp归档格式：</p><ul><li><code>.war</code>：webapp</li><li><code>.jar</code>：EJB的类打包文件；</li><li><code>.rar</code>：资源适配器类打包文件；</li><li><code>.ear</code>：企业级webapp；</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://developer.51cto.com/art/200907/134616.htm" target="_blank" rel="noopener">详解Java Servlet与Applet比较：http://developer.51cto.com/art/200907/134616.htm</a></p><p><a href="http://www.yulongjun.com/linux/20170830-01-tomcat-basic/" target="_blank" rel="noopener">Tomcat基础知识：http://www.yulongjun.com/linux/20170830-01-tomcat-basic/</a></p><p><a href="http://www.cnblogs.com/dycg/archive/2012/12/11/2813903.html" target="_blank" rel="noopener">Tomcat的架构：http://www.cnblogs.com/dycg/archive/2012/12/11/2813903.html</a></p>]]></content>
      
      <categories>
          
          <category> TOMCAT </category>
          
          <category> 安装tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAProxy支持https协议</title>
      <link href="/2017/11/05/Haproxy-Https/"/>
      <url>/2017/11/05/Haproxy-Https/</url>
      <content type="html"><![CDATA[<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# cd /etc/pki/tls/certs/</span><br><span class="line">[root@HAProxy certs]# make /etc/haproxy/haproxy.pem</span><br><span class="line">umask 77 ; \</span><br><span class="line">PEM1=`/bin/mktemp /tmp/openssl.XXXXXX` ; \</span><br><span class="line">PEM2=`/bin/mktemp /tmp/openssl.XXXXXX` ; \</span><br><span class="line">/usr/bin/openssl req -utf8 -newkey rsa:2048 -keyout $PEM1 -nodes -x509 -days 365 -out $PEM2 -set_serial 0 ; \</span><br><span class="line">cat $PEM1 &gt;  /etc/haproxy/haproxy.pem ; \</span><br><span class="line">echo &quot;&quot;    &gt;&gt; /etc/haproxy/haproxy.pem ; \</span><br><span class="line">cat $PEM2 &gt;&gt; /etc/haproxy/haproxy.pem ; \</span><br><span class="line">rm -f $PEM1 $PEM2</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">....+++</span><br><span class="line">..............................................................................................................................................+++</span><br><span class="line">writing new private key to &apos;/tmp/openssl.2c99KA&apos;</span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BJ</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:haiyun</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.ihaiyun.cc</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg      # 修改配置文件；</span><br><span class="line">frontend https</span><br><span class="line">    bind *:80</span><br><span class="line">    bind *:443 ssl crt /etc/haproxy/haproxy.pem     # 指定启用ssl和证书文件路径；</span><br><span class="line">    default_backend websrvs</span><br><span class="line"></span><br><span class="line">backend websrvs</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check</span><br><span class="line">    </span><br><span class="line">[root@HAProxy ~]# service  haproxy restart          # 重启服务；</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 测试访问，加密和不加密都可以；</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl -k https://192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -k https://192.168.8.11</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-Https-1.gif" title="测试访问"></center><h3 id="把80端口的请求重定向到443"><a href="#把80端口的请求重定向到443" class="headerlink" title="把80端口的请求重定向到443"></a>把80端口的请求重定向到443</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg      # 修改配置文件；</span><br><span class="line">frontend https</span><br><span class="line">    bind *:80</span><br><span class="line">    bind *:443 ssl crt /etc/haproxy/haproxy.pem</span><br><span class="line">    default_backend websrvs</span><br><span class="line">    redirect scheme https if !&#123; ssl_fc &#125;        # 加入此项；</span><br><span class="line"></span><br><span class="line">backend websrvs</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service  haproxy restart          # 重启服务；</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl -kL  192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -kL  192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl -I  192.168.8.11         # 查看头部已经被重定向到https；</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Content-length: 0</span><br><span class="line">Location: https://192.168.8.11/</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h3 id="向后端传递用户请求的协议和端口（frontend或backend）"><a href="#向后端传递用户请求的协议和端口（frontend或backend）" class="headerlink" title="向后端传递用户请求的协议和端口（frontend或backend）"></a>向后端传递用户请求的协议和端口（frontend或backend）</h3><p><code>http_request set-header X-Forwarded-Port%[dst_port]</code></p><p><code>http_request add-header X-Forwared-Proto httpsif { ssl_fc }</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg      # 修改配置文件；</span><br><span class="line">frontend https</span><br><span class="line">    bind *:80</span><br><span class="line">    bind *:443 ssl crt /etc/haproxy/haproxy.pem</span><br><span class="line">    default_backend websrvs</span><br><span class="line">    redirect scheme https if !&#123; ssl_fc &#125;</span><br><span class="line">    http-request set-header X-Forwared-Port %[dst_port]         # 加入此项；</span><br><span class="line"></span><br><span class="line">backend websrvs</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check</span><br><span class="line"></span><br><span class="line">[root@web1 html]# vim /etc/httpd/conf/httpd.conf        # 修改后端http日志；</span><br><span class="line">    LogFormat &quot; %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;%&#123;X-Forwared-Port&#125;i&quot; haproxy</span><br><span class="line">    CustomLog &quot;logs/access_log&quot; haproxy</span><br><span class="line">    </span><br><span class="line">[root@web1 html]# systemctl restart httpd</span><br><span class="line">[root@HAProxy ~]# curl -kL 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl -kL 192.168.8.11</span><br><span class="line">web1</span><br><span class="line"></span><br><span class="line">[root@web1 html]# tail -1 /var/log/httpd/access_log         # 查看日志端口号已经记录；</span><br><span class="line"> 192.168.8.11 - - [02/Nov/2017:15:43:45 +0800] &quot;GET / HTTP/1.1&quot; 200 5 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;443</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> HAProxy支持https协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAProxy四层TCP代理</title>
      <link href="/2017/11/05/Haproxy-TCP-Proxy/"/>
      <url>/2017/11/05/Haproxy-TCP-Proxy/</url>
      <content type="html"><![CDATA[<h3 id="格式如下"><a href="#格式如下" class="headerlink" title="格式如下"></a>格式如下</h3><p>根据第4层条件对传入连接执行操作<br><code>tcp-request connection {accept|reject} [{if | unless}&lt;condition&gt;]</code></p><h3 id="实现对mysql-3306-的代理"><a href="#实现对mysql-3306-的代理" class="headerlink" title="实现对mysql(3306)的代理"></a>实现对mysql(3306)的代理</h3><a id="more"></a><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><p>192.168.8.12(<code>centos7.3</code>)和192.168.8.13(<code>centos6.9</code>)是我们的<code>real server</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@web1 html]# yum install -y mariadb-server     # web1就代表192.168.8.12</span><br><span class="line">[root@web1 html]# systemctl start mariadb</span><br><span class="line">[root@web1 html]# mysql</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL ON test.* TO &apos;test&apos;@&apos;192.168.8.11&apos; IDENTIFIED BY &apos;test&apos;         # 授权并创建用户test；</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@web2 html]# yum install -y mysql-server</span><br><span class="line">[root@web2 html]# service mysqld start</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br><span class="line">[root@web2 html]# mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL ON test.* TO &apos;test&apos;@&apos;192.168.8.11&apos; IDENTIFIED BY &apos;test&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# mysql -utest -ptest -h192.168.8.12        # 在本机直接连接192.168.8.12，ok；</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; Bye</span><br><span class="line">[root@HAProxy ~]# mysql -utest -ptest -h192.168.8.13        # 在本机直接连接192.168.8.13，ok；</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; Bye</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend mysql</span><br><span class="line">    bind *:3306</span><br><span class="line">    mode tcp            # 模式改为tcp，切记；</span><br><span class="line">    default_backend mysqlsrv</span><br><span class="line"></span><br><span class="line">backend mysqlsrv</span><br><span class="line">    mode tcp            # 模式改为tcp，切记；</span><br><span class="line">    server sql1 192.168.8.12:3306</span><br><span class="line">    server sql2 192.168.8.13:3306</span><br><span class="line">[root@HAProxy ~]# service  haproxy restart          # 重启服务</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# mysql -utest -ptest -h192.168.8.11</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 6</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;hostname&apos; ;         # 连接到192.168.8.13上面了；</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| hostname      | web2  |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; Bye</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# mysql -utest -ptest -h192.168.8.11</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 7</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;hostname&apos;;      # 连接到192.168.8.12上面了；</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| hostname      | web1  |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> HAProxy四层TCP代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAPoxy-ACL</title>
      <link href="/2017/11/05/Haproxy-configure-ACL/"/>
      <url>/2017/11/05/Haproxy-configure-ACL/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>acl</code>：访问控制列表（<code>ACL</code>）的使用提供了一个灵活的解决方案来执行内容交换，并且通常基于从请求中提取的内容、响应或任何环境状态进行决策</p><a id="more"></a><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><code>acl &lt;aclname&gt; &lt;criterion&gt; [flags] [operator] [&lt;value&gt;]...</code></p><ul><li><code>&lt;aclname&gt;</code>： <code>ACL</code>名称，可使用字母 数字 :<code>. - _</code>区分字符大小写</li><li><code>&lt;criterion&gt;</code>： 比较的标准和条件<ul><li><code>dst</code> 目标<code>IP</code></li><li><code>dst_port</code> 目标<code>PORT</code></li><li><code>src</code> 源<code>IP</code></li><li><code>src_port</code> 源<code>PORT</code></li></ul></li><li><code>&lt;flags&gt;</code><ul><li><code>-i</code> 不区分大小写</li><li><code>-m</code> 使用指定的<code>pattern</code>匹配方法</li><li><code>-n</code> 不做<code>DNS</code>解析</li><li><code>-u</code> 强制每个<code>ACL</code>必须唯一<code>ID</code>，否则多个同名<code>ACL</code>或关系</li><li><code>--</code> 强制<code>flag</code>结束. 当字符串和某个<code>flag</code>相似时使用</li></ul></li><li><code>[operator]</code><ul><li>匹配整数值： <code>eq</code>、 <code>ge</code>、 <code>gt</code>、 <code>le</code>、 <code>lt</code></li><li>匹配字符串：<ul><li><code>- exact match (-m str)</code> :字符串必须完全匹配模式</li><li><code>- substring match (-m sub)</code> :在提取的字符串中查找模式，如果其中任何一个被发现， <code>ACL</code>将匹配</li><li><code>- prefix match (-m beg)</code> :在提取的字符串首部中查找模式，如果其中任何一个被发现， <code>ACL</code>将匹配</li><li><code>- suffix match (-m end)</code> :将模式与提取字符串的尾部进行比较，如果其中任何一个匹配，则<code>ACL</code>进行匹配</li><li><code>- subdir match (-m dir)</code> :查看提取出来的用斜线分隔（<code>“/”</code>）的字符串， 如果其中任何一个匹配，则<code>ACL</code>进行匹配</li><li><code>- domain match (-m dom)</code> :查找提取的用点（<code>“.”</code>）分隔字符串，如果其中任何一个匹配，则<code>ACL</code>进行匹配</li></ul></li></ul></li><li><code>acl</code>作为条件时的逻辑关系：<ul><li>与：隐式（默认）使用</li><li>或：使用<code>“or”</code>或 <code>“||”</code>表示</li><li>否定：使用<code>“!“</code> 表示</li><li>示例： <code>if invalid_src invalid_port</code> 与关系</li><li><code>if invalid_src || invalid_port</code> 或</li><li><code>if ! invalid_src</code> 非</li></ul></li></ul><h4 id="base-string"><a href="#base-string" class="headerlink" title="base : string"></a><code>base : string</code></h4><p>返回第一个主机头和请求的路径部分的连接，该请求从第一个斜杠开始，并在问号之前结束,对虚拟主机有用</p><p><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></p><ul><li><code>base : exact string match</code></li><li><code>base_beg : prefix match</code></li><li><code>base_dir : subdir match</code></li><li><code>base_dom : domain match</code></li><li><code>base_end : suffix match</code></li><li><code>base_len : length match</code></li><li><code>base_reg : regex match</code></li><li><code>base_sub : substring match</code></li></ul><h4 id="path-string"><a href="#path-string" class="headerlink" title="path : string"></a><code>path : string</code></h4><p>提取请求的<code>URL</code>路径，该路径从第一个斜杠开始，并在问号之前结束（无主机部分）</p><p><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></p><ul><li><code>path : exact string match</code></li><li><code>path_beg : prefix match</code></li><li><code>path_dir : subdir match</code></li><li><code>path_dom : domain match</code></li><li><code>path_end : suffix match</code></li><li><code>path_len : length match</code></li><li><code>path_reg : regex match</code></li><li><code>path_sub : substring match</code></li></ul><h4 id="url-string"><a href="#url-string" class="headerlink" title="url : string"></a><code>url</code> : <code>string</code></h4><p>提取请求中的<code>URL</code>。 一个典型的应用是具有预取能力的缓存，以及需要从数据库聚合多个信息并将它们保存在缓存中的网页门户入口</p><ul><li><code>url : exact string match</code></li><li><code>url_beg : prefix match</code></li><li><code>url_dir : subdir match</code></li><li><code>url_dom : domain match</code></li><li><code>url_end : suffix match</code></li><li><code>url_len : length match</code></li><li><code>url_reg : regex match</code></li><li><code>url_sub : substring match</code></li></ul><h4 id="req-hdr-lt-name-gt-lt-occ-gt-string"><a href="#req-hdr-lt-name-gt-lt-occ-gt-string" class="headerlink" title="req.hdr([&lt;name&gt;[,&lt;occ&gt;]]) : string"></a><code>req.hdr([&lt;name&gt;[,&lt;occ&gt;]]) : string</code></h4><pre><code>提取在一个HTTP请求报文的首部</code></pre><ul><li><code>hdr([&lt;name&gt;[,&lt;occ&gt;]]) : exact string match</code></li><li><code>hdr_beg([&lt;name&gt;[,&lt;occ&gt;]]) : prefix match</code></li><li><code>hdr_dir([&lt;name&gt;[,&lt;occ&gt;]]) : subdir match</code></li><li><code>hdr_dom([&lt;name&gt;[,&lt;occ&gt;]]) : domain match</code></li><li><code>hdr_end([&lt;name&gt;[,&lt;occ&gt;]]) : suffix match</code></li><li><code>hdr_len([&lt;name&gt;[,&lt;occ&gt;]]) : length match</code></li><li><code>hdr_reg([&lt;name&gt;[,&lt;occ&gt;]]) : regex match</code></li><li><code>hdr_sub([&lt;name&gt;[,&lt;occ&gt;]]) : substring match</code></li></ul><p>示例：</p><ul><li><code>acl bad_curl hdr_sub(User-Agent) -i curl</code></li><li><code>block if bad_curl</code></li><li><code>status</code> : integer 返回在响应报文中的状态码</li></ul><h4 id="预定义ACL"><a href="#预定义ACL" class="headerlink" title="预定义ACL"></a>预定义ACL</h4><p>ACL名称    等价于      说明</p><ul><li><code>TRUE always_true</code> 总是匹配</li><li><code>FALSE always_false</code> 从不匹配</li><li><code>HTTP req_proto_http</code> 匹配HTTP协议</li><li><code>HTTP_1.0 req_ver 1.0</code> 匹配HTTP协议1.0</li><li><code>HTTP_1.1 req_ver 1.1</code> 匹配HTTP协议1.1</li><li><code>HTTP_CONTENT hdr_val(content-length) gt 0</code> 匹配已存在内容长度</li><li><code>HTTP_URL_ABS url_reg ^[^/:]*://</code> 匹配URL绝对路径</li><li><code>HTTP_URL_SLASH url_beg /</code> 匹配URL相对路径</li><li><code>HTTP_URL_STAR url *</code> 匹配 URL 等于 “*”</li><li><code>LOCALHOST src 127.0.0.1/8</code> 匹配从localhost来的连接</li><li><code>METH_CONNECT method CONNECT</code> 匹配HTTP CONNECT方</li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><code>use_backend &lt;backend&gt; [{if | unless} &lt;condition&gt;]</code></p><ul><li>当<code>if/unless</code>一个基于ACL的条件匹配时切换指定backend</li><li><code>block { if | unless } &lt;condition&gt;</code> 阻止7层请求if/unless一个条件匹配</li></ul><p>对7层请求的访问控制：<br><code>http-request { allow | deny |add-header &lt;name&gt; &lt;fmt&gt;|set-header &lt;name&gt; &lt;fmt&gt; } [ { if | unless }&lt;condition&gt; ]</code></p><h3 id="基于ACL实现图片和网页文件的分离"><a href="#基于ACL实现图片和网页文件的分离" class="headerlink" title="基于ACL实现图片和网页文件的分离"></a>基于ACL实现图片和网页文件的分离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">web1：192.168.8.12      用来存放html文件</span><br><span class="line">web2：192.168.8.13      用来存放图片文件</span><br><span class="line"></span><br><span class="line">[root@web2 ~]# locate *.jpg         # 为web2准备图片文件；</span><br><span class="line">/usr/lib/anaconda-runtime/syslinux-vesa-splash.jpg</span><br><span class="line">/usr/share/backgrounds/centos_1920x1200_logoonly.jpg</span><br><span class="line">/usr/share/backgrounds/centos_2048x1536_logoonly.jpg</span><br><span class="line">/usr/share/backgrounds/simple_waves.jpg</span><br><span class="line">/usr/share/wallpapers/CentOS6/contents/images/simple_waves.jpg</span><br><span class="line">[root@web2 ~]# cp /usr/lib/anaconda-runtime/syslinux-vesa-splash.jpg /var/www/html/test.jpg</span><br><span class="line">[root@web2 ~]# cd /var/www/html/</span><br><span class="line">[root@web2 html]# for i in &#123;1..5&#125; ;do echo &quot;web2 &quot;$i&quot;page &quot; &gt; $i.html ;done     # 生成5个html文件；</span><br><span class="line">[root@web2 html]# cat 1.html </span><br><span class="line">web2 1page </span><br><span class="line">[root@web2 html]# curl 192.168.8.13/1.html          # 测试访问1.html，ok</span><br><span class="line">web2 1page</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# cd /var/www/html/</span><br><span class="line">[root@web1 html]# for i in &#123;1..5&#125; ;do echo &quot;web1 &quot;$i&quot;page &quot; &gt; $i.html ;done         # 生成5个html文件；</span><br><span class="line">[root@web1 html]# cat 1.html </span><br><span class="line">web1 1page </span><br><span class="line">[root@web1 html]# curl 192.168.8.12         # 本地测试，ok；</span><br><span class="line">web1</span><br><span class="line">[root@web1 html]# curl 192.168.8.12/1.html</span><br><span class="line">web1 1page </span><br><span class="line">[root@web1 html]# ls                # web1内是没有放图片文件的；</span><br><span class="line">1.html  2.html  3.html  4.html  5.html  index.html</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg              # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    acl static path_end -i .html .css .js .html .txt        # 定义acl，以.html结尾</span><br><span class="line">    acl images path_end -i .jpg .gif .png</span><br><span class="line">    default_backend appser</span><br><span class="line">    use_backend pictureser if images</span><br><span class="line">    use_backend appser if static</span><br><span class="line">    </span><br><span class="line">backend appser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line"></span><br><span class="line">backend pictureser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser2 192.168.8.13:80 check</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service  haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-ACL-1.gif" title="测试访问"></center><h3 id="基于ACL实现动静分离"><a href="#基于ACL实现动静分离" class="headerlink" title="基于ACL实现动静分离"></a>基于ACL实现动静分离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">web1：192.168.8.12      用来解析和存放php文件</span><br><span class="line">web2：192.168.8.13      用来存放图片文件</span><br><span class="line"></span><br><span class="line">[root@web1 html]# yum -y install php</span><br><span class="line">[root@web1 html]# systemctl restart httpd</span><br><span class="line">[root@web1 html]# vim test.php      # 编写php测试页面</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg              # 修改配置文件</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    acl static path_end -i .html .css .js .html .txt .jpg .gif .png</span><br><span class="line">    acl php path_end -i  .php</span><br><span class="line">    default_backend staticsrv</span><br><span class="line">    use_backend staticsrv if static</span><br><span class="line">    use_backend phpsrv if php</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">backend phpsrv</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line"></span><br><span class="line">backend staticsrv</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser2 192.168.8.13:80 check</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service  haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-ACL-2.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> HAPoxy-ACL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Haproxy常用配置</title>
      <link href="/2017/11/05/Haproxy-configure/"/>
      <url>/2017/11/05/Haproxy-configure/</url>
      <content type="html"><![CDATA[<h3 id="bind监听多个端口"><a href="#bind监听多个端口" class="headerlink" title="bind监听多个端口"></a>bind监听多个端口</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">listen webser </span><br><span class="line">    bind *:80,:888          # 设置监听两个端口，用逗号分隔，:888代表监听所有iP的888端口</span><br><span class="line">    mode http</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80</span><br><span class="line">    server ser2 192.168.8.13:80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ss -tnul          # 80和888端口都已经监听；</span><br><span class="line">Netid State      Recv-Q Send-Q            Local Address:Port              Peer Address:Port </span><br><span class="line">tcp   LISTEN     0      128                           *:80                           *:*     </span><br><span class="line">tcp   LISTEN     0      128                          :::22                          :::*     </span><br><span class="line">tcp   LISTEN     0      128                           *:22                           *:*     </span><br><span class="line">tcp   LISTEN     0      128                           *:888                          *:*     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 测试，ok；</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11:888</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11:888</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><h3 id="后端server配置"><a href="#后端server配置" class="headerlink" title="后端server配置"></a>后端server配置</h3><p>格式：<code>server &lt;name&gt; &lt;address&gt;[:[port]] [param*]</code></p><p>定义后端主机的各服务器及其选项：</p><ul><li><code>server &lt;name&gt; &lt;address&gt;[:port] [settings ...]</code></li><li><code>default-server [settings ...]</code></li><li><code>&lt;name&gt;</code>：服务器在<code>haproxy</code>上的内部名称；出现在日志及警告信息</li><li><code>&lt;address&gt;</code>：服务器地址，支持使用主机名</li><li><code>[:[port]]</code>：端口映射；省略时，表示同<code>bind</code>中绑定的端口</li><li><code>[param*]</code>：参数<ul><li><code>weight &lt;weight&gt;</code>：权重，默认为1</li><li><code>maxconn &lt;maxconn&gt;</code>：当前后端server的最大并发连接数</li><li><code>backlog &lt;backlog&gt;</code>：当<code>server</code>的连接数达到上限后的后援队列长度</li><li><code>backup</code>：设定当前<code>server</code>为备用服务器<code>Sorry Server</code></li></ul></li></ul><p><code>param</code>之<code>check</code>：</p><ul><li><code>check</code>：对当前<code>server</code>做健康状态检测，只用于四层检测</li><li>注意： <code>httpchk</code>， “<code>smtpchk</code>”, “<code>mysql-check</code>”, “<code>pgsqlcheck</code>” and “<code>ssl-hello-chk</code>” 用于定义应用层检测方法<ul><li><code>addr</code> ：检测时使用的IP地址</li><li><code>port</code> ：针对此端口进行检测</li><li><code>inter &lt;delay&gt;</code>：检测之间的时间间隔，默认为<code>2000ms</code></li><li><code>rise &lt;count&gt;</code>：连续多少次检测结果为“成功”才标记服务器为可用；默认为<code>2</code></li><li><code>fall &lt;count&gt;</code>：连续多少次检测结果为“失败”才标记服务器为不可用；默认为<code>3</code></li></ul></li></ul><p><code>param</code>之<code>disabled</code>：标记为不可用</p><p><code>redir &lt;prefix&gt;</code>：将发往此<code>server</code>的所有<code>GET</code>和<code>HEAD</code>类的请求重定向至指定的<code>URL</code></p><p><code>cookie &lt;value&gt;</code>：为当前<code>server</code>指定<code>cookie</code>值，实现基于<code>cookie</code>的会话黏性</p><p> <code>cookie &lt;name&gt; [ rewrite | insert | prefix ] [ indirect ][ nocache ] [ postonly ] [ preserve ] [ httponly ] [secure ] [ domain &lt;domain&gt; ]* [ maxidle &lt;idle&gt; ] [maxlife &lt;life&gt; ]</code></p><ul><li><code>&lt;name&gt;</code>： <code>cookie</code>名称，用于实现持久连接</li><li><code>rewrite</code>：重写</li><li><code>insert</code>：插入</li><li><code>prefix</code>：前缀</li></ul><h4 id="定义后端server"><a href="#定义后端server" class="headerlink" title="定义后端server"></a>定义后端server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    default-server weight 6</span><br><span class="line">    server ser1 192.168.8.12:80 check weight 2 maxconn 5000 backlog 500     # 指定进行健康检查，权重为2，最大并发连接数为5000，达到并发连接数后的队列长度为500</span><br><span class="line">    server ser2 192.168.8.13:80</span><br></pre></td></tr></table></figure><h4 id="定义backup-server-sorry-server"><a href="#定义backup-server-sorry-server" class="headerlink" title="定义backup server (sorry server)"></a>定义backup server (sorry server)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# yum install -y httpd          # 在本地安装httpd服务；</span><br><span class="line">[root@HAProxy ~]# vim /etc/httpd/conf/httpd.conf        # 修改httpd配置文件，端口为6666；</span><br><span class="line">Listen 6666</span><br><span class="line">[root@HAProxy ~]# echo &quot;我们的服务器宕机了，哈哈哈~~~&quot; &gt; /var/www/html/index.html       # 创建网站默认界面</span><br><span class="line">[root@HAProxy ~]# service httpd start           # 启动服务；</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11:6666        # 测试访问，ok；</span><br><span class="line">我们的服务器宕机了，哈哈哈~~~</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    default-server weight 6</span><br><span class="line">    server ser1 192.168.8.12:80 check weight 2 maxconn 5000 backlog 500</span><br><span class="line">    server ser2 192.168.8.13:80 </span><br><span class="line">    server bak  192.168.8.11:6666 backup            # 定义backup server</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11             # 目前还可以访问；    </span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ansible web1 -m service -a &apos;name=&quot;httpd&quot; state=&quot;stopped&quot;&apos;     # 利用ansible停止real server 的httpd服务</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;stopped&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;stopped&quot;, </span><br><span class="line">。。。省略</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；       </span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    default-server weight 6</span><br><span class="line">    server ser1 192.168.8.12:80 check  weight 2 maxconn 5000 </span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line">    server bak  192.168.8.11:6666 backup        # 注意：定义sorry server时，需要给server加上健康检查(check)，否则会报错；</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 测试，ok；</span><br><span class="line">我们的服务器宕机了，哈哈哈~~~</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">我们的服务器宕机了，哈哈哈~~~</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">我们的服务器宕机了，哈哈哈~~~</span><br></pre></td></tr></table></figure><h4 id="指定check的地址"><a href="#指定check的地址" class="headerlink" title="指定check的地址"></a>指定check的地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# ansible 192.168.8.13 -m shell -a &apos;ifconfig eth1:0 192.168.8.14 up&apos;        # 为192.168.8.13配置一个虚拟IP192.168.8.14；</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ansible 192.168.8.13 -a &apos;ifconfig&apos;        # 查看192.168.8.13的IP，虚拟IP192.168.8.14已经配置；</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.13  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3332 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2536 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:1723718 (1.6 MiB)  TX bytes:259501 (253.4 KiB)</span><br><span class="line"></span><br><span class="line">eth1:0    Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.14  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:10 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:1177 (1.1 KiB)  TX bytes:1177 (1.1 KiB)</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ansible web1 -m service -a &apos;name=&quot;httpd&quot; state=&quot;started&quot;&apos;     # 启动两台服务器的httpd服务；</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;, </span><br><span class="line">    &quot;status&quot;: &#123;</span><br><span class="line">。。。省略</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    default-server weight 6</span><br><span class="line">    server ser1 192.168.8.12:80 check  weight 2 maxconn 5000 </span><br><span class="line">    server ser2 192.168.8.13:80 check addr 192.168.8.14 port 80 inter 3000 rise 3 fall 3        # 指定健康检查IP为192.168.8.14，端口为80，间隔为3000毫秒，失败3次标为宕机，成功3次标为正常</span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 测试，都是可以访问的；</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ansible web1 -m shell -a &apos;ifconfig eth1:0 down&apos;       # 将刚刚配置的虚拟IP删掉；</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ansible 192.168.8.13 -a &apos;ifconfig&apos;        # IP已经被删除；</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.13  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3871 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2871 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:2013622 (1.9 MiB)  TX bytes:299325 (292.3 KiB)</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# for i in &#123;1..10&#125;;do curl 192.168.8.11 ; done          # 测试，全部都调度到web1上面了，因为haproxy认为192.168.8.14已经down了。</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br><span class="line">web1</span><br></pre></td></tr></table></figure><h4 id="指定real-server为down"><a href="#指定real-server为down" class="headerlink" title="指定real server为down"></a>指定real server为down</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    default-server weight 6</span><br><span class="line">    server ser1 192.168.8.12:80 check  weight 2 maxconn 5000 disabled       # 标记ser1为down；</span><br><span class="line">    server ser2 192.168.8.13:80 check   </span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# for i in &#123;1..5&#125; ; do curl 192.168.8.11 ; done         # 测试访问，一直都是往web2调度了，因为web1被我们标记为down了；</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><h4 id="redir重定向"><a href="#redir重定向" class="headerlink" title="redir重定向"></a>redir重定向</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    default-server weight 6</span><br><span class="line">    server ser1 192.168.8.12:80 check  weight 2 maxconn 5000 </span><br><span class="line">    server ser2 192.168.8.13:80 check   redir http://www.baidu.com      # 定义访问ser2重定向到baidu</span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-1.gif" title="测试访问"></center><h4 id="基于cookie的session-sticky的实现"><a href="#基于cookie的session-sticky的实现" class="headerlink" title="基于cookie的session sticky的实现"></a>基于cookie的session sticky的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    cookie TEST insert nocache          # 插入匹配cookie；</span><br><span class="line">    server ser1 192.168.8.12:80 check   cookie test     当cookie为test就调度到当前主机；</span><br><span class="line">    server ser2 192.168.8.13:80 check</span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 正常测试，可以调度；</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -b TEST=test 192.168.8.11        # 携带cookie为test，就会调度为web1</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -b TEST=test 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -b TEST=test 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -b TEST=test1 192.168.8.11       # 携带cookie为非test，正常调度</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl -b TEST=test1 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl -b TEST=test1 192.168.8.11</span><br><span class="line">web2</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl -I  -b TEST=test1 192.168.8.11       # 查看响应头部信息</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 01 Nov 2017 12:03:13 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS)</span><br><span class="line">Last-Modified: Tue, 31 Oct 2017 13:28:20 GMT</span><br><span class="line">ETag: &quot;5-55cd7ba80027a&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 5</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Set-Cookie: TEST=test; path=/</span><br><span class="line">Cache-control: private</span><br></pre></td></tr></table></figure><h3 id="web统计接口"><a href="#web统计接口" class="headerlink" title="web统计接口"></a>web统计接口</h3><ul><li><code>stats enable</code>：启用统计页；基于默认的参数启用<code>stats page</code><ul><li><code>stats uri</code> : <code>/haproxy?stats</code> <code>uri</code>默认值</li><li><code>stats realm</code> : <code>HAProxy\ Statistics</code></li><li><code>stats auth</code> : <code>no authentication</code></li></ul></li><li><code>stats uri &lt;prefix&gt;</code><ul><li>自定义<code>stats page uri</code></li></ul></li><li><code>stats auth &lt;user&gt;:&lt;passwd&gt;</code><ul><li>认证时的账号和密码，可使用多次</li></ul></li><li><code>stats realm &lt;realm&gt;</code><ul><li><code>认证时的realm</code></li></ul></li><li><code>stats hide-version</code><ul><li>隐藏版本</li></ul></li><li><code>stats refresh &lt;delay&gt;</code><ul><li>设定自动刷新时间间隔</li></ul></li><li><code>stats admin { if | unless } &lt;cond&gt;</code><ul><li>启用<code>stats page</code>中的管理功能</li></ul></li></ul><h4 id="启用统计接口"><a href="#启用统计接口" class="headerlink" title="启用统计接口"></a>启用统计接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">listen stats</span><br><span class="line">    bind *:1234</span><br><span class="line">    stats enable</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-2.gif" title="启用统计接口"></center><h4 id="为统计接口web界面设置密码"><a href="#为统计接口web界面设置密码" class="headerlink" title="为统计接口web界面设置密码"></a>为统计接口web界面设置密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">listen stats</span><br><span class="line">    bind *:1234</span><br><span class="line">    stats enable</span><br><span class="line">    stats realm &quot;HAProxy info&quot;      # 认证时显示的信息；</span><br><span class="line">    stats auth user:user        # 指定用户和密码；</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-3.gif" title="为统计接口web界面设置密码"></center><h4 id="设置自动刷新、隐藏版本和自定义访问路径"><a href="#设置自动刷新、隐藏版本和自定义访问路径" class="headerlink" title="设置自动刷新、隐藏版本和自定义访问路径"></a>设置自动刷新、隐藏版本和自定义访问路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">listen stats</span><br><span class="line">    bind *:1234</span><br><span class="line">    stats enable</span><br><span class="line">    stats realm &quot;HAProxy info&quot;</span><br><span class="line">    stats auth user:user</span><br><span class="line">    stats refresh 1s</span><br><span class="line">    stats hide-version</span><br><span class="line">    stats uri /admin</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-4.gif" title="设置自动刷新、隐藏版本和自定义访问路径"></center><h4 id="启用管理功能"><a href="#启用管理功能" class="headerlink" title="启用管理功能"></a>启用管理功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">listen stats</span><br><span class="line">    bind *:1234</span><br><span class="line">    stats enable</span><br><span class="line">    stats realm &quot;HAProxy info&quot;</span><br><span class="line">    stats auth user:user</span><br><span class="line">    stats refresh 10s           # 将刷新间隔调长</span><br><span class="line">    stats hide-version</span><br><span class="line">    stats uri /admin</span><br><span class="line">    stats admin if TRUE     # 认证成功后才能使用管理功能</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Haproxy-configure-5.gif" title="启用管理功能"></center><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p><code>maxconn &lt;conns&gt;</code>：为指定的<code>frontend</code>定义其最大并发连接数；默认为3000</p><p><code>mode { tcp|http|health }</code></p><ul><li>定义<code>haproxy</code>的工作模式</li><li><code>tcp</code>：基于<code>layer4</code>实现代理；可代理<code>mysql</code>, <code>pgsql</code>, <code>ssh</code>,</li><li><code>ssl</code>等协议,<code>https</code>时使用此模式，默认模式</li><li><code>http</code>：仅当代理协议为<code>http</code>时使用,<code>centos</code>实际默认模式</li><li><code>health</code>：工作为健康状态检查的响应模式，当连接请求到达时回应<code>“OK”</code>后即断开连接，较少使用</li></ul><h3 id="健康状态检查"><a href="#健康状态检查" class="headerlink" title="健康状态检查"></a>健康状态检查</h3><p>对后端服务器做http协议健康状态检测：通常用于<code>bendend</code></p><ul><li><code>option httpchk 默认为： / OPTIONS HTTP/1.0</code></li><li><code>option httpchk &lt;uri&gt;</code></li><li><code>option httpchk &lt;method&gt; &lt;uri&gt;</code></li><li><code>option httpchk &lt;method&gt; &lt;uri&gt; &lt;version&gt;</code><ul><li>定义基于<code>http</code>协议的7层健康状态检测机制</li></ul></li><li><code>http-check expect [!] &lt;match&gt; &lt;pattern&gt;</code><ul><li><code>http</code>协议健康状态检测响应内容或指定响应码</li></ul></li></ul><h4 id="实现对后端server做健康检查"><a href="#实现对后端server做健康检查" class="headerlink" title="实现对后端server做健康检查"></a>实现对后端server做健康检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option httpchk          # 定义http健康检查；</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# tail -5 /var/log/httpd/access_log        # 查看web1的访问日志；</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:21:07 +0800] &quot;OPTIONS / HTTP/1.0&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:21:09 +0800] &quot;OPTIONS / HTTP/1.0&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:21:11 +0800] &quot;OPTIONS / HTTP/1.0&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:21:13 +0800] &quot;OPTIONS / HTTP/1.0&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:21:15 +0800] &quot;OPTIONS / HTTP/1.0&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option httpchk / HEAD HTTP/1.1      # 自定义请求路径、方法和协议</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# tail -5 /var/log/httpd/access_log                # 查看web1的访问日志；</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:23:14 +0800] &quot;/ HEAD HTTP/1.1&quot; 400 226 &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:23:16 +0800] &quot;/ HEAD HTTP/1.1&quot; 400 226 &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:23:18 +0800] &quot;/ HEAD HTTP/1.1&quot; 400 226 &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:23:20 +0800] &quot;/ HEAD HTTP/1.1&quot; 400 226 &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:23:22 +0800] &quot;/ HEAD HTTP/1.1&quot; 400 226 &quot;-&quot; &quot;-&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option httpchk  HEAD /index.html HTTP/1.1\r\nhost:          </span><br><span class="line">    http-check expect status 200        # 定义返回状态码为200才是正常的；</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line">    server bak  192.168.8.11:6666 backup</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# tail -5 /var/log/httpd/access_log            # 查看日志，ok；</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:55:20 +0800] &quot;HEAD /index.html HTTP/1.1&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:55:22 +0800] &quot;HEAD /index.html HTTP/1.1&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:55:24 +0800] &quot;HEAD /index.html HTTP/1.1&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:55:26 +0800] &quot;HEAD /index.html HTTP/1.1&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br><span class="line">192.168.8.11 - - [01/Nov/2017:21:55:28 +0800] &quot;HEAD /index.html HTTP/1.1&quot; 200 - &quot;-&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="forwardfor配置"><a href="#forwardfor配置" class="headerlink" title="forwardfor配置"></a>forwardfor配置</h3><p> <code>option forwardfor [ except &lt;network&gt; ] [ header &lt;name&gt; ][ if-none ]</code></p><p>在由<code>haproxy</code>发往后端主机的请求报文中添加<code>“X-ForwardedFor”</code>首部，其值为前端客户端的地址；用于向后端主发送真实的客户端<code>IP</code></p><p><code>[ except &lt;network&gt; ]</code>：请求报请来自此处指定的网络时不予添加此首部，如<code>haproxy</code>自身所在网络</p><p><code>[ header &lt;name&gt; ]</code>：使用自定义的首部名称，而非<code>“XForwarded-For”</code></p><p><code>[ if-none ]</code> 如果没有首部才添加首部，如果有使用默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg              # 在我们的默认配置中已经定义forwardfor；</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# vim /etc/httpd/conf/httpd.conf               # 在web1修改日志格式即可；</span><br><span class="line">    LogFormat &quot;%&#123;x-forwarded-for&#125;i %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; haproxy</span><br><span class="line">    CustomLog &quot;logs/access_log&quot; haproxy</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# tail -2 /var/log/httpd/access_log            # 已经看到日志；</span><br><span class="line">192.168.8.1 192.168.8.11 - - [01/Nov/2017:22:15:27 +0800] &quot;GET / HTTP/1.1&quot; 200 5 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36&quot;</span><br><span class="line">192.168.8.1 192.168.8.11 - - [01/Nov/2017:22:15:28 +0800] &quot;GET / HTTP/1.1&quot; 200 5 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8 header X-Client      # 使用自定义名称X-Client</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@web1 ~]# vim /etc/httpd/conf/httpd.conf           # 修改配置文件，将x-client定义到后面；</span><br><span class="line">    LogFormat &quot; %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;%&#123;x-Client&#125;i&quot; haproxy </span><br><span class="line">    CustomLog &quot;logs/access_log&quot; haproxy</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# systemctl restart httpd</span><br><span class="line"></span><br><span class="line">[root@web1 ~]# tail -1 /var/log/httpd/access_log        # 查看日志，已经记录；</span><br><span class="line"> 192.168.8.11 - - [01/Nov/2017:22:21:50 +0800] &quot;GET / HTTP/1.1&quot; 200 5 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36&quot;192.168.8.1</span><br></pre></td></tr></table></figure><h3 id="为指定的MIME类型启用压缩传输功能"><a href="#为指定的MIME类型启用压缩传输功能" class="headerlink" title="为指定的MIME类型启用压缩传输功能"></a>为指定的MIME类型启用压缩传输功能</h3><p><code>compression algo &lt;algorithm&gt; ...</code>：启用<code>http</code>协议的压缩机制，指明压缩算法<code>gzip</code>, <code>deflate</code></p><p><code>compression type &lt;mime type&gt; ...</code>：指明压缩的<code>MIMI</code>类型</p><h3 id="错误页配置"><a href="#错误页配置" class="headerlink" title="错误页配置"></a>错误页配置</h3><p><code>errorfile &lt;code&gt; &lt;file&gt; 自定义错误页</code></p><ul><li><code>&lt;code&gt;： HTTP status code.</code><ul><li>支持<code>200</code>, <code>400</code>, <code>403</code>, <code>408</code>, <code>500</code>, <code>502</code>, <code>503</code>, <code>504</code>.</li><li><code>&lt;file&gt;</code>：错误页文件路径<ul><li><code>errorloc &lt;code&gt; &lt;url&gt;</code></li><li>相当于<code>errorloc302 &lt;code&gt; &lt;url&gt;</code>，利用302重定向至指<code>URL</code></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# ansible web1 -m service -a &apos;name=&quot;httpd&quot; state=&quot;stopped&quot;&apos;         # 先停止后台的real server的httpd服务；</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;stopped&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;stopped&quot;, </span><br><span class="line">    &quot;status&quot;: &#123;</span><br><span class="line">。。。省略</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 访问测试，这个页面应该就是192.168.8.11的503错误页面；</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;503 Service Unavailable&lt;/h1&gt;</span><br><span class="line">No server is available to handle this request.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option httpchk  HEAD /index.html HTTP/1.1\r\nhost:</span><br><span class="line">    http-check expect status 200 </span><br><span class="line">    errorfile 503   /etc/haproxy/error_file/503.html            # 定制错误页面；</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# cd /etc/haproxy/</span><br><span class="line">[root@HAProxy haproxy]# mkdir error_file</span><br><span class="line">[root@HAProxy haproxy]# echo error 503 &gt; error_file/503.html        # 创建503页面；</span><br><span class="line"></span><br><span class="line">[root@HAProxy haproxy]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@HAProxy haproxy]# curl 192.168.8.11           # 访问测试，ok；</span><br><span class="line">error 503</span><br><span class="line">[root@HAProxy haproxy]# curl 192.168.8.11</span><br><span class="line">error 503</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option httpchk  HEAD /index.html HTTP/1.1\r\nhost:</span><br><span class="line">    http-check expect status 200 </span><br><span class="line">    errorloc 503    http://192.168.8.11:6666        # 指定出现503错误时，就跳转到指定的web界面；</span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line"></span><br><span class="line">[root@HAProxy haproxy]# curl -L  192.168.8.11       # 测试，ok；</span><br><span class="line">我们的服务器宕机了，哈哈哈~~~</span><br><span class="line">[root@HAProxy haproxy]# curl -L  192.168.8.11</span><br><span class="line">我们的服务器宕机了，哈哈哈~~~</span><br></pre></td></tr></table></figure><h3 id="修改报文首部"><a href="#修改报文首部" class="headerlink" title="修改报文首部"></a>修改报文首部</h3><ul><li>在请求报文尾部添加指定首部<ul><li><code>reqadd &lt;string&gt; [{if | unless} &lt;cond&gt;]</code></li></ul></li><li>在响应报文尾部添加指定首部<ul><li><code>rspadd &lt;string&gt; [{if | unless} &lt;cond&gt;]</code><br>示例： <code>rspadd X-Via:\ HAPorxy</code></li></ul></li><li>从请求报文中删除匹配正则表达式的首部<ul><li><code>reqdel &lt;search&gt; [{if | unless} &lt;cond&gt;]</code></li><li><code>reqidel &lt;search&gt; [{if | unless} &lt;cond&gt;]</code>不分大小写</li></ul></li><li>从响应报文中删除匹配正则表达式的首部<ul><li><code>rspdel &lt;search&gt; [{if | unless} &lt;cond&gt;]</code></li><li><code>rspidel &lt;search&gt; [{if | unless} &lt;cond&gt;]</code> 不分大小写</li><li>示例： <code>rspidel server.*</code></li></ul></li></ul><h4 id="添加请求报文"><a href="#添加请求报文" class="headerlink" title="添加请求报文"></a>添加请求报文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy haproxy]# ansible web1 -m service -a &apos;name=&quot;httpd&quot; state=&quot;started&quot;&apos;           # 启动后台real server的http的服务；</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;, </span><br><span class="line">    &quot;status&quot;: &#123;</span><br><span class="line">        &quot;ActiveEnterTimestampMonotonic&quot;: &quot;0&quot;, </span><br><span class="line">        &quot;ActiveExitTimestampMonotonic&quot;: &quot;0&quot;, </span><br><span class="line">        &quot;ActiveState&quot;: &quot;inactive&quot;, </span><br><span class="line">。。。省略</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;httpd&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 访问测试，可以调度；</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    reqadd x-via:\ HAProxy11        # 添加请求报文，x-via</span><br><span class="line">    option httpchk  HEAD /index.html HTTP/1.1\r\nhost:</span><br><span class="line">    http-check expect status 200 </span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line"></span><br><span class="line">[root@HAProxy haproxy]# service haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@web1 ~]# vim /etc/httpd/conf/httpd.conf           # 修改httpd配置文件，添加记录日志；</span><br><span class="line">    LogFormat &quot; %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;%&#123;x-via&#125;i&quot; haproxy</span><br><span class="line">    CustomLog &quot;logs/access_log&quot; haproxy</span><br><span class="line">[root@web1 ~]# systemctl restart httpd</span><br><span class="line">[root@web1 ~]# tail -1 /var/log/httpd/access_log        # 查看日志，请求报文添加成功；</span><br><span class="line"> 192.168.8.11 - - [02/Nov/2017:09:38:27 +0800] &quot;GET / HTTP/1.1&quot; 200 5 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;HAProxy11</span><br></pre></td></tr></table></figure><h4 id="删除响应报文特定字段"><a href="#删除响应报文特定字段" class="headerlink" title="删除响应报文特定字段"></a>删除响应报文特定字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy haproxy]# curl -I  192.168.8.11       # 默认的响应报文是有Server信息；</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 02 Nov 2017 01:45:03 GMT</span><br><span class="line">Server: Apache/2.2.15 (CentOS)</span><br><span class="line">Last-Modified: Tue, 31 Oct 2017 13:28:19 GMT</span><br><span class="line">ETag: &quot;2205b1-5-55cd7ba725754&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 5</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend webser</span><br><span class="line"></span><br><span class="line">backend webser</span><br><span class="line">    balance roundrobin</span><br><span class="line">    reqadd x-via:\ HAProxy11</span><br><span class="line">    rspidel server              # 删除响应报文server段，不区分大小写；</span><br><span class="line">    option httpchk  HEAD /index.html HTTP/1.1\r\nhost:</span><br><span class="line">    http-check expect status 200 </span><br><span class="line">    server ser1 192.168.8.12:80 check</span><br><span class="line">    server ser2 192.168.8.13:80 check </span><br><span class="line"></span><br><span class="line">[root@HAProxy haproxy]# service haproxy restart </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@HAProxy haproxy]# curl -I  192.168.8.11           # 测试访问，已经被删除；</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 02 Nov 2017 01:47:38 GMT</span><br><span class="line">Last-Modified: Tue, 31 Oct 2017 13:28:20 GMT</span><br><span class="line">ETag: &quot;5-55cd7ba80027a&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 5</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure><h3 id="连接超时"><a href="#连接超时" class="headerlink" title="连接超时"></a>连接超时</h3><p>连接超时可以根据具体公司业务进行修改。</p><ul><li><code>timeout client &lt;timeout&gt;</code><ul><li>客户端最长空闲连接超时时长 默认单位是毫秒</li></ul></li><li><code>timeout server &lt;timeout&gt;</code><ul><li>后端服务器最长空闲连接超时时长</li></ul></li><li><code>timeout http-keep-alive &lt;timeout&gt;</code><ul><li>持久连接的持久时长</li></ul></li><li><code>timeout http-request &lt;timeout&gt;</code><ul><li>一次完整的HTTP请求的最大等待时长</li></ul></li><li><code>timeout connect &lt;timeout&gt;</code><ul><li>成功连接后端服务器的最大等待时长</li></ul></li><li><code>timeout client-fin &lt;timeout&gt;</code><ul><li>客户端半连接的空闲时长</li></ul></li><li><code>timeout server-fin &lt;timeout&gt;</code><ul><li>后端服务器半连接的空闲时长</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> Haproxy常用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAProxy调度算法</title>
      <link href="/2017/11/05/Haproxy-Diaodu-Suanfa/"/>
      <url>/2017/11/05/Haproxy-Diaodu-Suanfa/</url>
      <content type="html"><![CDATA[<h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><h4 id="roundrobin"><a href="#roundrobin" class="headerlink" title="roundrobin"></a>roundrobin</h4><ul><li><code>roundrobin</code>：基于权重轮询，动态算法，支持权重的运行时调整，支持慢启动；每个后端<code>backend</code>中最多支持<code>4095</code>个<code>server</code></li><li><code>server options： weight #</code></li></ul><h5 id="server指定权重"><a href="#server指定权重" class="headerlink" title="server指定权重"></a>server指定权重</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ser1 192.168.8.12:80 weight 2        # 指定权重为2；</span><br><span class="line">    server ser2 192.168.8.13:80         # 默认权重为1；</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 测试，ok；</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><h4 id="static-rr"><a href="#static-rr" class="headerlink" title="static-rr"></a>static-rr</h4><p><code>static-rr</code>：基于权重轮询，静态算法，不支持权重的运行时调整及慢启动；后端主机数量无上限</p><h4 id="leastconn"><a href="#leastconn" class="headerlink" title="leastconn"></a>leastconn</h4><p><code>leastconn</code>：加权最少连接，动态算法，最少连接的后端服务器优先分配接收新连接，相同连接时轮询，推荐在较长会话的场景使用，例如<code>MySQL</code>、 <code>LDAP</code>等，不适合<code>http</code></p><h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><p> <code>first</code>：根据服务器在列表中的位置，自上而下进行调度；前面服务器的连接数达到上限，新请求才会分配给下一台服务</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p><code>source</code>：源地址<code>hash</code>，新连接先按权重分配，后续连接按<code>source</code>分配请求</p><h4 id="uri"><a href="#uri" class="headerlink" title="uri"></a>uri</h4><p>对<code>URI</code>的左半部分或整个<code>uri</code>做<code>hash</code>计算，并除以服务器总权重取模，以后派发至某挑出的服务器,适用于后端缓存服务器</p><p><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></p><ul><li>左半部分： <code>/&lt;path&gt;;&lt;params&gt;</code></li><li>整个<code>uri</code>： <code>/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></li></ul><h4 id="url-param"><a href="#url-param" class="headerlink" title="url_param"></a>url_param</h4><p>对用户请求的<code>uri</code>中的<code>&lt;params&gt;</code>部分中的参数的值作<code>hash</code>计算，并由服务器总权重相除以后派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个<code>Backend Server</code></p><p><code>http://www.magedu.com/bbs/hello;type=title</code></p><h5 id="实现rui-parm"><a href="#实现rui-parm" class="headerlink" title="实现rui_parm"></a>实现rui_parm</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# ansible web1 -m shell -a &apos;for i in &#123;1..5&#125;; do echo &quot;`hostname` $i page&quot; &gt; /var/www/html/$i.html ; done &apos;          # 使用ansible快速生成5个test页面；</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# ansible web1 -a &apos;cat /var/www/html/1.html&apos;        # 查看页面内容，ok；</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">web2 1 page</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">web1 1 page</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance uri         # 修改调度算法为uri；</span><br><span class="line">    server ser1 192.168.8.12:80 weight 2</span><br><span class="line">    server ser2 192.168.8.13:80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/1.html          # 测试，相同的URI已经调度到同一台主机；</span><br><span class="line">web1 1 page </span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/1.html</span><br><span class="line">web1 1 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/1.html</span><br><span class="line">web1 1 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/2.html</span><br><span class="line">web2 2 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/2.html</span><br><span class="line">web2 2 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/2.html</span><br><span class="line">web2 2 page</span><br></pre></td></tr></table></figure><h4 id="hash-type：哈希算法"><a href="#hash-type：哈希算法" class="headerlink" title="hash-type：哈希算法"></a>hash-type：哈希算法</h4><ul><li><code>hash-type &lt;method&gt; &lt;function&gt; &lt;modifier&gt;</code><ul><li><code>method:</code><ul><li><code>map-based</code>：除权取余法，哈希数据结构是静态数组</li><li><code>consistent</code>：一致性哈希，哈希数据结构是一棵树</li></ul></li><li><code>&lt;function&gt;</code> : 哈希函数<ul><li><code>sdbm djb2 wt6</code></li></ul></li></ul></li><li><code>default_backend &lt;backend&gt;</code><ul><li>无<code>use_backend</code> 匹配时，使用默认的<code>backend</code>，用于<code>frontend</code>中</li><li><code>default-server [param*]</code></li></ul></li><li>为<code>backend</code>中的各<code>server</code>设定默认选项</li></ul><h5 id="实现hash-type：consistent一致性哈希"><a href="#实现hash-type：consistent一致性哈希" class="headerlink" title="实现hash-type：consistent一致性哈希"></a>实现hash-type：consistent一致性哈希</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance uri</span><br><span class="line">    hash-type consistent            # 添加hash-type为consistent；</span><br><span class="line">    server ser1 192.168.8.12:80 weight 2</span><br><span class="line">    server ser2 192.168.8.13:80</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/2.html          # 测试，效果看不出来~~~；</span><br><span class="line">web1 2 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/2.html</span><br><span class="line">web1 2 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/2.html</span><br><span class="line">web1 2 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/5.html</span><br><span class="line">web1 5 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/5.html</span><br><span class="line">web1 5 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/5.html</span><br><span class="line">web1 5 page</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11/5.html</span><br><span class="line">web1 5 page</span><br></pre></td></tr></table></figure><h5 id="定义default-server"><a href="#定义default-server" class="headerlink" title="定义default server"></a>定义default server</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance roundrobin          # 将调度算法修改为轮询，方便测试；</span><br><span class="line">    default-server weight 6     # 定义默认server，权重为6</span><br><span class="line">    server ser1 192.168.8.12:80 weight 2</span><br><span class="line">    server ser2 192.168.8.13:80</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@HAProxy ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.11 ; done        # 测试，ok；</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web1</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web2</span><br><span class="line">web1</span><br><span class="line">web2</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><h4 id="hdr"><a href="#hdr" class="headerlink" title="hdr"></a>hdr</h4><p><code>hdr(&lt;name&gt;)</code>：对于每个<code>http</code>请求，此处由<code>&lt;name&gt;</code>指定的<code>http</code>首部将会被取出做<code>hash</code>计算；并由服务器总权重相除以后派发至某挑出的服务器； 无有效值的会被轮询调度</p><h5 id="实现hdr"><a href="#实现hdr" class="headerlink" title="实现hdr"></a>实现hdr</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/hosts            # 修改/etc/hosts文件，添加两条解析；</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.11www.a.comwww.b.com</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改配置文件；</span><br><span class="line">frontend web </span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend websers</span><br><span class="line"></span><br><span class="line">backend websers</span><br><span class="line">    balance hdr(host)         # 指定调度算法为hdr；</span><br><span class="line">    server ser1 192.168.8.12:80 weight 2</span><br><span class="line">    server ser2 192.168.8.13:80</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# curl www.a.com            # 测试，ok；</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl www.a.com</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl www.a.com</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl www.a.com</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><h4 id="rdp-cookie-远程桌面相关"><a href="#rdp-cookie-远程桌面相关" class="headerlink" title="rdp-cookie 远程桌面相关"></a>rdp-cookie 远程桌面相关</h4><p><code>rdp-cookie</code> 远程桌面相关，不做解释<br><code>rdp-cookie(&lt;name&gt;)</code></p>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> HAProxy调度算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAProxy log日志设置</title>
      <link href="/2017/11/05/Haproxy-Log/"/>
      <url>/2017/11/05/Haproxy-Log/</url>
      <content type="html"><![CDATA[<h3 id="日志记录在本机"><a href="#日志记录在本机" class="headerlink" title="日志记录在本机"></a>日志记录在本机</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # haproxy服务默认已经定义日志；</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">[root@HAProxy ~]# vim /etc/rsyslog.conf             # 只需要修改日志服务配置文件，添加local2.*，并开启可以网络传输日志开关，就可以将日志记录到本机了；</span><br><span class="line">$ModLoad imudp</span><br><span class="line">$UDPServerRun 514</span><br><span class="line"># Save HAProxy log</span><br><span class="line">local2.*                                                /var/log/haproxy.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart       </span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line">[root@HAProxy ~]# service rsy</span><br><span class="line">rsync    rsyslog  </span><br><span class="line">[root@HAProxy ~]# service rsyslog restart           # 重启日志服务；</span><br><span class="line">Shutting down system logger:                               [  OK  ]</span><br><span class="line">Starting system logger:                                    [  OK  ]</span><br><span class="line">[root@HAProxy ~]# ls -l /var/log/haproxy.log        # 日志文件已经创建；</span><br><span class="line">-rw-------. 1 root root 0 Oct 31 20:22 /var/log/haproxy.log</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 访问测试；</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@HAProxy ~]# tail /var/log/haproxy.log         # 查看日志，已经记录；</span><br><span class="line">Oct 31 20:23:33 localhost haproxy[13640]: 192.168.8.11:44506 [31/Oct/2017:20:23:33.508] webser webser/ser1 0/0/0/1/1 200 263 - - ---- 1/1/0/0/0 0/0 &quot;GET / HTTP/1.1&quot;</span><br><span class="line">Oct 31 20:23:34 localhost haproxy[13640]: 192.168.8.11:44510 [31/Oct/2017:20:23:34.163] webser webser/ser2 0/0/0/1/1 200 271 - - ---- 1/1/0/0/0 0/0 &quot;GET / HTTP/1.1&quot;</span><br></pre></td></tr></table></figure><h3 id="日志记录在远程主机"><a href="#日志记录在远程主机" class="headerlink" title="日志记录在远程主机"></a>日志记录在远程主机</h3><p>例如，我们将日志记录在<code>192.168.8.12</code>这台主机上面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@HAProxy ~]# vim /etc/haproxy/haproxy.cfg          # 修改haproxy配置文件，将本地的IP改为远程日志服务器的iP;</span><br><span class="line">    log         192.168.8.12 local2</span><br><span class="line"></span><br><span class="line">[root@HAProxy ~]# service haproxy restart</span><br><span class="line">Stopping haproxy:                                          [  OK  ]</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@Log ~]# vim /etc/rsyslog.conf</span><br><span class="line">$ModLoad imudp</span><br><span class="line">$UDPServerRun 514</span><br><span class="line">local2.*                                                /var/log/haproxy.log</span><br><span class="line">[root@Log ~]# systemctl restart rsyslog.service</span><br><span class="line">[root@Log ~]# ll /var/log/haproxy.log </span><br><span class="line">-rw------- 1 root root 67 Oct 31 20:32 /var/log/haproxy.log</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11         # 访问测试；</span><br><span class="line">web1</span><br><span class="line">[root@HAProxy ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line"></span><br><span class="line">[root@Log ~]# tail /var/log/haproxy.log         # 查看日志，已经发送过来；</span><br><span class="line">Oct 31 20:33:06 192.168.8.11 haproxy[13827]: Proxy webser started.</span><br><span class="line">Oct 31 20:33:38 192.168.8.11 haproxy[13828]: 192.168.8.11:44514 [31/Oct/2017:20:33:38.978] webser webser/ser1 0/0/0/1/1 200 263 - - ---- 1/1/0/1/0 0/0 &quot;GET / HTTP/1.1&quot;</span><br><span class="line">Oct 31 20:33:39 192.168.8.11 haproxy[13828]: 192.168.8.11:44518 [31/Oct/2017:20:33:39.644] webser webser/ser2 0/0/0/1/1 200 271 - - ---- 1/1/0/1/0 0/0 &quot;GET / HTTP/1.1&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> HAProxy log日志设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAProxy配置文件</title>
      <link href="/2017/11/05/Haproxy-Configuration-File/"/>
      <url>/2017/11/05/Haproxy-Configuration-File/</url>
      <content type="html"><![CDATA[<h3 id="配置文件组成部分"><a href="#配置文件组成部分" class="headerlink" title="配置文件组成部分"></a>配置文件组成部分</h3><ul><li><p><code>global</code>：全局配置段</p><ul><li>进程及安全配置相关的参数</li><li>性能调整相关参数</li><li><code>Debug</code>参数</li></ul></li><li><p><code>proxies</code>：代理配置段</p><ul><li><code>defaults</code>：为<code>frontend</code>, <code>backend</code>, <code>listen</code>提供默认配置</li><li><code>fronted</code>：前端配置，相当于<code>nginx</code>, <code>server {}</code>，定义前端套接字，接受客户端请求</li><li><code>backend</code>：后端，相当于<code>nginx</code>, <code>upstream {}</code>，定义后端分配规则，与后端服务器交互</li><li><code>listen</code>：同时拥有前端和后端,适用于一对一环境，将指定的客户端与后端特定服务器绑定到一起</li></ul></li></ul><a id="more"></a><h3 id="简单配置示例"><a href="#简单配置示例" class="headerlink" title="简单配置示例"></a>简单配置示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"># Real server1 配置</span><br><span class="line">[root@web1 ~]# yum install -y httpd</span><br><span class="line">[root@web1 ~]# echo &quot;web1&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@web1 ~]# systemctl start httpd</span><br><span class="line">[root@web1 ~]# curl 192.168.8.12            # 本地测试，ok</span><br><span class="line">web1</span><br><span class="line"></span><br><span class="line"># Real server2 配置</span><br><span class="line">[root@web2 ~]# yum install -y httpd</span><br><span class="line">[root@web2 ~]# echo &quot;web2&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@web2 ~]# service httpd start</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@web2 ~]# curl 192.168.8.13            # 本地测试，ok</span><br><span class="line">web2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# vim /etc/haproxy/haproxy.cfg          # HAProxy配置文件如下；</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Example configuration for a possible web application.  See the</span><br><span class="line"># full configuration options online.</span><br><span class="line">#</span><br><span class="line">#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt</span><br><span class="line">#</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Global settings</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">global</span><br><span class="line">    # to have these messages end up in /var/log/haproxy.log you will</span><br><span class="line">    # need to:</span><br><span class="line">    #   </span><br><span class="line">    # 1) configure syslog to accept network log events.  This is done</span><br><span class="line">    #    by adding the &apos;-r&apos; option to the SYSLOGD_OPTIONS in</span><br><span class="line">    #    /etc/sysconfig/syslog</span><br><span class="line">    #   </span><br><span class="line">    # 2) configure local2 events to go to the /var/log/haproxy.log</span><br><span class="line">    #   file. A line like the following can be added to</span><br><span class="line">    #   /etc/sysconfig/syslog</span><br><span class="line">    #   </span><br><span class="line">    #    local2.*                       /var/log/haproxy.log</span><br><span class="line">    #   </span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line"></span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># common defaults that all the &apos;listen&apos; and &apos;backend&apos; sections will</span><br><span class="line"># use if not designated in their block</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">frontend web            # 下面内容改为添加部分</span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend realsrv</span><br><span class="line"></span><br><span class="line">backend realsrv</span><br><span class="line">    balance roundrobin          # 定义调度算法</span><br><span class="line">    server  ser1 192.168.8.12:80        # 定义real server1</span><br><span class="line">    server  ser2 192.168.8.13:80        # 定义real server2</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# service haproxy start         # 启动haproxy</span><br><span class="line">Starting haproxy:                                          [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ss -tnul          # 本地80端口已经监听；</span><br><span class="line">Netid State      Recv-Q Send-Q            Local Address:Port              Peer Address:Port </span><br><span class="line">udp   UNCONN     0      0                             *:68                           *:*     </span><br><span class="line">udp   UNCONN     0      0                             *:57096                        *:*     </span><br><span class="line">tcp   LISTEN     0      128                           *:80                           *:*     </span><br><span class="line">tcp   LISTEN     0      128                          :::22                          :::*     </span><br><span class="line">tcp   LISTEN     0      128                           *:22                           *:*     </span><br><span class="line">tcp   LISTEN     0      100                         ::1:25                          :::*     </span><br><span class="line">tcp   LISTEN     0      100                   127.0.0.1:25                           *:*    </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl 192.168.8.11         # 测试访问，192.168.8.11就是haproxy的iP,代理成功；</span><br><span class="line">web1</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.11</span><br><span class="line">web1</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.11</span><br><span class="line">web2</span><br></pre></td></tr></table></figure><h3 id="global配置"><a href="#global配置" class="headerlink" title="global配置"></a>global配置</h3><p>进程及安全管理： <code>chroot</code>, <code>deamon</code>， <code>user</code>, <code>group</code>, <code>uid</code>, <code>gid</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">global          # 全局配置</span><br><span class="line"></span><br><span class="line">    log         127.0.0.1 local2        # 日志记录，默认记录到本地，最多可以定义两个；</span><br><span class="line"></span><br><span class="line">    chroot      /var/lib/haproxy        # 修改haproxy的工作目录至指定的目录并在放弃权限之前执行chroot()操作，可以提升haproxy的安全级别，不过需要注意的是要确保指定的目录为空目录且任何用户均不能有写权限；</span><br><span class="line">    pidfile     /var/run/haproxy.pid    # 指定PID文件路径；</span><br><span class="line">    daemon                              # 让haproxy以守护进程的方式工作于后台，其等同于“-D”选项的功能，当然，也可以在命令行中以“-db”选项将其禁用；</span><br><span class="line">    user        haproxy         # 指定运行haproxy用户；</span><br><span class="line">    group       haproxy         # 指定运行haproxy组；</span><br><span class="line">        nbproc &lt;number&gt;             # 指定启动的haproxy进程的个数，只能用于守护进程模式(daemon)的haproxy；默认只启动一个进程，鉴于调试困难等多方面的原因，一般只在单进程仅能打开少数文件描述符的场景中才使用多进程模式；</span><br><span class="line">    ulimit -n &lt;number&gt;          # 设定每进程所能够打开的最大文件描述符数目，默认情况下其会自动进行计算，因此不推荐修改此选项；</span><br><span class="line">    stats socket /var/lib/haproxy/stats         # 打开unix套接字；</span><br><span class="line">    maxconn &lt;number&gt;                # 设定每个haproxy进程所能接受的最大并发连接数；</span><br><span class="line">    maxconnrate &lt;number&gt;            # 设置每个进程每秒种所能建立的最大连接数量；</span><br><span class="line">    maxsessrate &lt;number&gt;            # 设置每个进程每秒种所能建立的最大会话数量；</span><br><span class="line">    maxsslconn &lt;number&gt;             # 每进程支持SSL的最大连接数量；</span><br><span class="line">    spread-checks &lt;0..50, in percent&gt;           # 健康检测延迟时长比建议2-5之间；</span><br><span class="line">    maxpipes &lt;number&gt;                   # haproxy使用pipe完成基于内核的tcp报文重组，此选项则用于设定每进程所允许使用的最大pipe个数；每个pipe会打开两个文件描述符，因此，“ulimit -n”自动计算时会根据需要调大此值；默认为maxconn/4，其通常会显得过大；</span><br><span class="line">    noepoll                 # 在Linux系统上禁用epoll机制；</span><br><span class="line">    nokqueue                    # 在BSD系统上禁用kqueue机制；</span><br><span class="line">    nopoll                  # 禁用poll机制；</span><br><span class="line">    nosepoll                # 在Linux禁用启发式epoll机制；</span><br><span class="line">    nosplice                # 禁止在Linux套接字上使用内核tcp重组，这会导致更多的recv/send系统调用；不过，在Linux 2.6.25-28系列的内核上，tcp重组功能有bug存在；</span><br><span class="line">    spread-checks &lt;0..50, in percent&gt;               # 在haproxy后端有着众多服务器的场景中，在精确的时间间隔后统一对众服务器进行健康状况检查可能会带来意外问题；此选项用于将其检查的时间间隔长度上增加或减小一定的随机时长；</span><br><span class="line">    tune.bufsize &lt;number&gt;               # 设定buffer的大小，同样的内存条件下，较小的值可以让haproxy有能力接受更多的并发连接，较大的值可以让某些应用程序使用较大的cookie信息；默认为16384，其可以在编译时修改，不过强烈建议使用默认值；</span><br><span class="line">    tune.chksize &lt;number&gt;           # 设定检查缓冲区的大小，单位为字节；更大的值有助于在较大的页面中完成基于字符串或模式的文本查找，但也会占用更多的系统资源；不建议修改；</span><br><span class="line">    tune.maxaccept &lt;number&gt;         # 设定haproxy进程内核调度运行时一次性可以接受的连接的个数，较大的值可以带来较大的吞吐率，默认在单进程模式下为100，多进程模式下为8，设定为-1可以禁止此限制；一般不建议修改；</span><br><span class="line">    tune.maxpollevents  &lt;number&gt;            # 设定一次系统调用可以处理的事件最大数，默认值取决于OS；其值小于200时可节约带宽，但会略微增大网络延迟，而大于200时会降低延迟，但会稍稍增加网络带宽的占用量；</span><br><span class="line">    tune.maxrewrite &lt;number&gt;            # 设定为首部重写或追加而预留的缓冲空间，建议使用1024左右的大小；在需要使用更大的空间时，haproxy会自动增加其值；</span><br><span class="line">    tune.rcvbuf.server &lt;number&gt;     # 设定内核套接字中服务端或客户端接收缓冲的大小，单位为字节；强烈推荐使用默认值；</span><br></pre></td></tr></table></figure><h3 id="代理配置段"><a href="#代理配置段" class="headerlink" title="代理配置段"></a>代理配置段</h3><h4 id="defaults"><a href="#defaults" class="headerlink" title="defaults"></a>defaults</h4><p><code>defaults</code>：为<code>frontend</code>, <code>backend</code>, <code>listen</code>提供默认配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">defaults            # 默认配置项</span><br><span class="line">    mode                    http        # 默认工作模式为7层http，4层tcp；</span><br><span class="line">    log                     global      # 使用全局日志；</span><br><span class="line">    option                  httplog     # 日志类别http日志格式 ；</span><br><span class="line">    option                  dontlognull     # 不记录健康检查的日志信息 ；</span><br><span class="line">    option http-server-close            # 允许客户端关闭连接；</span><br><span class="line">    option forwardfor       except 127.0.0.0/8      # 如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip ，本地IP不记录；</span><br><span class="line">    option                  redispatch  # server Id对应的服务器挂掉后,强制定向到其他健康的服务器  ；</span><br><span class="line">    option abortonclose                 # 当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接 ；</span><br><span class="line">    balance roundrobin                  # 默认的负载均衡的方式,轮询方式 ；</span><br><span class="line">    stats refresh 30                    # 统计页面刷新间隔 ；</span><br><span class="line">    retries                 3           # 请求重试次数，3次连接失败就认为服务不可用，也可以通过后面设置； </span><br><span class="line">    timeout http-request    10s         # http请求超时时间；</span><br><span class="line">    timeout queue           1m          </span><br><span class="line">    timeout connect         10s </span><br><span class="line">    timeout client          1m  </span><br><span class="line">    timeout server          1m  </span><br><span class="line">    timeout http-keep-alive 10s </span><br><span class="line">    timeout check           10s         # 健康检查超时时间；</span><br><span class="line">    maxconn                 3000        # 最大并发连接数；</span><br></pre></td></tr></table></figure><h4 id="fronted"><a href="#fronted" class="headerlink" title="fronted"></a>fronted</h4><p><code>fronted</code>：前端，相当于<code>nginx</code>, <code>server {}</code>，定义前端套接字，接受客户端请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">frontend web        # 定义前端名称；</span><br><span class="line">    bind *:80       # 监听所有IP的80端口；</span><br><span class="line">    default_backend websers     # 默认后端server为websers；</span><br></pre></td></tr></table></figure><h4 id="backend"><a href="#backend" class="headerlink" title="backend"></a>backend</h4><p><code>backend</code>：后端，相当于<code>nginx</code>, <code>upstream {}</code>，定义后端分配规则，与后端服务器交互</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backend websers         # 后端名称；</span><br><span class="line">    balance roundrobin      # 调度算法；</span><br><span class="line">    server ser1 192.168.8.12:80     # real server IP为192.168.8.12，端口为80；</span><br><span class="line">    server ser2 192.168.8.13:80     # real server IP为192.168.8.13，端口为80；</span><br></pre></td></tr></table></figure><h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h4><p><code>listen</code>：同时拥有前端和后端,适用于一对一环境，将指定的客户端与后端特定服务器绑定到一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listen webser       # name；</span><br><span class="line">    bind *:80       # 监听所有IP的80端口；</span><br><span class="line">    mode http       # http的7层模式；</span><br><span class="line">    balance roundrobin      # 调度算法为轮询；</span><br><span class="line">    server ser1 192.168.8.12:80     # real server IP为192.168.8.12，端口为80；</span><br><span class="line">    server ser2 192.168.8.13:80     # real server IP为192.168.8.13，端口为80；</span><br></pre></td></tr></table></figure><h5 id="listen-haproxy-status"><a href="#listen-haproxy-status" class="headerlink" title="listen haproxy_status"></a>listen haproxy_status</h5><p>监控界面的设置。</p><pre><code>listen admin_status                    # Frontend和Backend的组合体,监控组的名称，按需自定义名称 ；        bind 0.0.0.0:65532             # 监听端口 ；        mode http                      # http的7层模式 ；        log 127.0.0.1 local3 err       # 错误日志记录 ；        stats refresh 5s               # 每隔5秒自动刷新监控页面 ；        stats uri /admin?stats         # 监控页面的url ；        stats realm itnihao\ itnihao   # 监控页面的提示信息 ；        stats auth admin:admin         # 监控页面的用户和密码admin,可以设置多个用户名 ；        stats auth admin1:123456       # 监控页面的用户和密码123456；        stats hide-version             # 隐藏统计页面上的HAproxy版本信息  ；        stats admin if TRUE            # 手工启用/禁用,后端服务器(haproxy-1.4.9以后版本) ；</code></pre>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> HAProxy配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Haproxy简介</title>
      <link href="/2017/11/05/Haproxy/"/>
      <url>/2017/11/05/Haproxy/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Haproxy-1.jpg" title="Harproxy"></center><h3 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h3><p><a href="http://www.haproxy.org" target="_blank" rel="noopener">官网：http://www.haproxy.org</a></p><p><a href="https://cbonte.github.io/haproxy-dconv/" target="_blank" rel="noopener">帮助文档：https://cbonte.github.io/haproxy-dconv/</a></p><a id="more"></a><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p><code>HAProxy</code>是<code>TCP</code>/<code>HTTP</code>反向代理服务器，尤其适合于高可用性环境</p><ul><li>可以针对<code>HTTP</code>请求添加<code>cookie</code>，进行路由后端服务器</li><li>可平衡负载至后端服务器，并支持持久连接</li><li>支持基于<code>cookie</code>进行调度</li><li>支持所有主服务器故障切换至备用服务器</li><li>支持专用端口实现监控服务</li><li>支持不影响现有连接情况下停止接受新连接请求</li><li>可以在双向添加，修改或删除HTTP报文首部</li><li>支持基于<code>pattern</code>实现连接请求的访问控制</li><li>通过特定的<code>URI</code>为授权用户提供详细的状态信息</li></ul><h3 id="HAProxy功能"><a href="#HAProxy功能" class="headerlink" title="HAProxy功能"></a>HAProxy功能</h3><ul><li>支持<code>http</code>反向代理</li><li>支持动态程序的反向代理</li><li>支持基于数据库的反向代理</li></ul><h3 id="安装HAProxy"><a href="#安装HAProxy" class="headerlink" title="安装HAProxy"></a>安装HAProxy</h3><p>直接通过yum安装即可，<code>HAProxy</code>已经集成在<code>base</code>源。大家也可以源码编译安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# yum install -y haproxy</span><br><span class="line">[root@centos6 ~]# yum info haproxy          # HAProxy相关信息</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">file://misc/cd/repodata/repomd.xml: [Errno 14] Could not open/read file://misc/cd/repodata/repomd.xml</span><br><span class="line">Trying other mirror.</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : haproxy</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 1.5.18</span><br><span class="line">Release     : 1.el6</span><br><span class="line">Size        : 2.5 M</span><br><span class="line">Repo        : installed</span><br><span class="line">From repo   : base</span><br><span class="line">Summary     : HAProxy is a TCP/HTTP reverse proxy for high availability environments</span><br><span class="line">URL         : http://www.haproxy.org/</span><br><span class="line">License     : GPLv2+</span><br><span class="line">Description : HAProxy is a TCP/HTTP reverse proxy which is particularly suited for high</span><br><span class="line">            : availability environments. Indeed, it can:</span><br><span class="line">            :  - route HTTP requests depending on statically assigned cookies</span><br><span class="line">            :  - spread load among several servers while assuring server persistence</span><br><span class="line">            :    through the use of HTTP cookies</span><br><span class="line">            :  - switch to backup servers in the event a main one fails</span><br><span class="line">            :  - accept connections to special ports dedicated to service monitoring</span><br><span class="line">            :  - stop accepting connections without breaking existing ones</span><br><span class="line">            :  - add, modify, and delete HTTP headers in both directions</span><br><span class="line">            :  - block requests matching particular patterns</span><br><span class="line">            :  - persists clients to the correct application server depending on</span><br><span class="line">            :    application cookies</span><br><span class="line">            :  - report detailed status as HTML pages to authenticated users from a URI</span><br><span class="line">            :    intercepted from the application</span><br><span class="line">[root@centos6 ~]# rpm -ql haproxy           # 查看HAProxy安装后生成的文件</span><br><span class="line">/etc/haproxy</span><br><span class="line">/etc/haproxy/haproxy.cfg</span><br><span class="line">/etc/logrotate.d/haproxy</span><br><span class="line">/etc/rc.d/init.d/haproxy</span><br><span class="line">/etc/sysconfig/haproxy</span><br><span class="line">/usr/bin/halog</span><br><span class="line">/usr/bin/iprange</span><br><span class="line">/usr/sbin/haproxy</span><br><span class="line">/usr/share/doc/haproxy-1.5.18</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/CHANGELOG</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/LICENSE</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/README</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/acl-content-sw.cfg</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/acl.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/architecture.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/close-options.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/coding-style.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/configuration.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/content-sw-sample.cfg</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/cookie-options.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/cttproxy-src.cfg</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/backends-v0.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/backends.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/be-fe-changes.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/binding-possibilities.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/buffer-redesign.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/buffers.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/config-language.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/connection-reuse.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/cttproxy-changes.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/entities-v2.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/how-it-works.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/http_load_time.url</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/rate-shaping.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/design-thoughts/sess_par_sec.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/gpl.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/haproxy-en.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/haproxy-fr.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/haproxy.1</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/haproxy.cfg</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/acl.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/body-parsing.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/buffer-operations.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/buffer-ops.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/connect-status.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/connection-header.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/connection-scale.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/entities.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/entities.pdf</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/entities.svg</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/entities.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/hashing.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/header-parser-speed.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/header-tree.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/http-cookies.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/http-docs.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/http-parsing.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/naming.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/pattern.dia</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/pattern.pdf</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/polling-states.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/repartition-be-fe-fi.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/sequence.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/stats-v2.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/stream-sock-states.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/internals/todo.cttproxy</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/lgpl.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/proxy-protocol.txt</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/queuing.fig</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/tarpit.cfg</span><br><span class="line">/usr/share/doc/haproxy-1.5.18/url-switching.cfg</span><br><span class="line">/usr/share/haproxy</span><br><span class="line">/usr/share/haproxy/400.http</span><br><span class="line">/usr/share/haproxy/403.http</span><br><span class="line">/usr/share/haproxy/408.http</span><br><span class="line">/usr/share/haproxy/500.http</span><br><span class="line">/usr/share/haproxy/502.http</span><br><span class="line">/usr/share/haproxy/503.http</span><br><span class="line">/usr/share/haproxy/504.http</span><br><span class="line">/usr/share/haproxy/README</span><br><span class="line">/usr/share/man/man1/halog.1.gz</span><br><span class="line">/usr/share/man/man1/haproxy.1.gz</span><br><span class="line">/var/lib/haproxy</span><br></pre></td></tr></table></figure></p><h3 id="HAProxy程序环境"><a href="#HAProxy程序环境" class="headerlink" title="HAProxy程序环境"></a>HAProxy程序环境</h3><ul><li>主程序： <code>/usr/sbin/haproxy</code></li><li>配置文件： <code>/etc/haproxy/haproxy.cfg</code></li><li>Unit file： <code>/usr/lib/systemd/system/haproxy.service</code></li></ul>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> Haproxy简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ansible常用模块二</title>
      <link href="/2017/10/30/Ansible-configure2/"/>
      <url>/2017/10/30/Ansible-configure2/</url>
      <content type="html"><![CDATA[<h3 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h3><p>指定服务的运行状态。</p><h4 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s service </span><br><span class="line">- name: Manage services.</span><br><span class="line">  action: service</span><br><span class="line">      arguments              # Additional arguments provided on the command line</span><br><span class="line">      enabled                # Whether the service should start on boot. *At least one of state and enabled are required.*</span><br><span class="line">      name=                  # Name of the service.</span><br><span class="line">      pattern                # If the service does not respond to the status command, name a substring to look for as would be found in the output of the `ps&apos; command as a stand-in for a</span><br><span class="line">                               status result.  If the string is found, the service will be assumed to be running.</span><br><span class="line">      runlevel               # For OpenRC init scripts (ex: Gentoo) only.  The runlevel that this service belongs to.</span><br><span class="line">      sleep                  # If the service is being `restarted&apos; then sleep this many seconds between the stop and start command. This helps to workaround badly behaving init scripts that</span><br><span class="line">                               exit immediately after signaling a process to stop.</span><br><span class="line">      state                  # `started&apos;/`stopped&apos; are idempotent actions that will not run commands unless necessary.  `restarted&apos; will always bounce the service.  `reloaded&apos; will always</span><br><span class="line">                               reload. *At least one of state and enabled are required.*</span><br><span class="line">      use                    # The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module. Normally it uses the value</span><br><span class="line">                               of the &apos;ansible_service_mgr&apos; fact and falls back to the old &apos;service&apos; module when none matching is found.</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -a &quot;service autofs status&quot;           # 查看autofs服务的运行状态，都是运行的</span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">automount (pid  1544) is running...</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">automount (pid  1596) is running...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;chkconfig  --list autofs&quot;            # autofs服务都是开机自启动的</span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">autofs         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">autofs         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m service -a &apos;name=&quot;autofs&quot; state=&quot;restarted&quot;&apos;      # 重启autofs服务</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m service -a &apos;name=&quot;autofs&quot; state=&apos;stopped&apos;&apos;        # 停止autofs服务</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;stopped&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;stopped&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;service autofs status&quot;           # 查看autofs服务状态，已经停止</span><br><span class="line">192.168.8.13 | FAILED | rc=3 &gt;&gt;</span><br><span class="line">automount is stopped</span><br><span class="line"></span><br><span class="line">192.168.8.14 | FAILED | rc=3 &gt;&gt;</span><br><span class="line">automount is stopped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m service -a &apos;name=&quot;autofs&quot; state=&quot;started&quot;&apos;        # 启动autofs服务</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos6 ~]# ansible web1 -a &apos;service autofs status&apos;           # 查看autofs状态，已经启动</span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">automount (pid  23086) is running...</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">automount (pid  24883) is running...</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m service -a &apos;name=&quot;autofs&quot; state=&quot;reloaded&quot;&apos;       # 重新加载配置文件</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m service -a &apos;name=&quot;autofs&quot; enabled=&quot;false&quot;&apos;        # 关闭开机自启动autofs</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;enabled&quot;: false, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;enabled&quot;: false, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;</span><br><span class="line">&#125;   </span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;chkconfig autofs --list&quot;     # 确认</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">autofs         0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line"></span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">autofs         0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m service -a &apos;name=&quot;autofs&quot; enabled=&quot;true&quot;&apos;         # 开启开机自启动autofs</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;enabled&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;enabled&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;autofs&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos6 ~]# ansible web1 -a &apos;chkconfig autofs --list&apos;         # 确认</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">autofs         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line"></span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">autofs         0:off1:off2:on3:on4:on5:on6:off</span><br></pre></td></tr></table></figure><h3 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h3><p>和<code>command</code>模块类似，尤其是用到管道等功能复杂的命令，建议使用shell。</p><h4 id="帮助信息-1"><a href="#帮助信息-1" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s shell</span><br><span class="line">- name: Execute commands in nodes.</span><br><span class="line">  action: shell</span><br><span class="line">      chdir                  # cd into this directory before running the command</span><br><span class="line">      creates                # a filename, when it already exists, this step will *not* be run.</span><br><span class="line">      executable             # change the shell used to execute the command. Should be an absolute path to the executable.</span><br><span class="line">      free_form=             # The shell module takes a free form command to run, as a string.  There&apos;s not an actual option named &quot;free form&quot;.  See the examples!</span><br><span class="line">      removes                # a filename, when it does not exist, this step will *not* be run.</span><br><span class="line">      warn                   # if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m user -a &apos;name=&quot;tset&quot;&apos;         # 添加test用户</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 500, </span><br><span class="line">    &quot;home&quot;: &quot;/home/tset&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;tset&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: false, </span><br><span class="line">    &quot;uid&quot;: 500</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 2223, </span><br><span class="line">    &quot;home&quot;: &quot;/home/tset&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;tset&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: false, </span><br><span class="line">    &quot;uid&quot;: 2223</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m command -a &apos;echo haiyun | passwd --stdin test &apos;           # 注意看，command并没有把管道当命令只是当作字符串输出了</span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">haiyun | passwd --stdin test</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">haiyun | passwd --stdin test</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m shell -a &apos;echo haiyun | passwd --stdin tset&apos;          # 修改密码成功，这就是command和shell的区别</span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Changing password for user tset.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Changing password for user tset.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><h3 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h3><p>将本地脚本复制到远程主机并运行。</p><h4 id="帮助信息-2"><a href="#帮助信息-2" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s script</span><br><span class="line">- name: Runs a local script on a remote node after transferring it</span><br><span class="line">  action: script</span><br><span class="line">      creates                # a filename, when it already exists, this step will *not* be run.</span><br><span class="line">      free_form=             # path to the local script file followed by optional arguments.</span><br><span class="line">      removes                # a filename, when it does not exist, this step will *not* be run.</span><br></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# cat /tmp/test.sh          # 创建一个测试脚本</span><br><span class="line">#!/bin/bash</span><br><span class="line">date</span><br><span class="line">useradd testuser</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m script -a &quot;/tmp/test.sh&quot;          # 将test.sh复制到远程主机并执行</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;stderr&quot;: &quot;Shared connection to 192.168.8.14 closed.\r\n&quot;, </span><br><span class="line">    &quot;stdout&quot;: &quot;Mon Oct 30 22:15:29 CST 2017\r\n&quot;, </span><br><span class="line">    &quot;stdout_lines&quot;: [</span><br><span class="line">        &quot;Mon Oct 30 22:15:29 CST 2017&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;stderr&quot;: &quot;Shared connection to 192.168.8.13 closed.\r\n&quot;, </span><br><span class="line">    &quot;stdout&quot;: &quot;Mon Oct 30 22:15:29 CST 2017\r\n&quot;, </span><br><span class="line">    &quot;stdout_lines&quot;: [</span><br><span class="line">        &quot;Mon Oct 30 22:15:29 CST 2017&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;getent passwd testuser&quot;      # 用户已经添加成功</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">testuser<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">2224:2224::/home/testuser:/bin/bash</span><br><span class="line"></span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">testuser<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">501:501::/home/testuser:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h3><p>安装和卸载软件包。</p><h4 id="帮助信息-3"><a href="#帮助信息-3" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s yum</span><br><span class="line">- name: Manages packages with the `yum&apos; package manager</span><br><span class="line">  action: yum</span><br><span class="line">      conf_file              # The remote yum configuration file to use for the transaction.</span><br><span class="line">      disable_gpg_check      # Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is `present&apos; or `latest&apos;.</span><br><span class="line">      disablerepo            # `Repoid&apos; of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos,</span><br><span class="line">                               separate them with a &quot;,&quot;.</span><br><span class="line">      enablerepo             # `Repoid&apos; of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos,</span><br><span class="line">                               separate them with a &quot;,&quot;.</span><br><span class="line">      exclude                # Package name(s) to exclude when state=present, or latest</span><br><span class="line">      list                   # Various (non-idempotent) commands for usage with `/usr/bin/ansible&apos; and `not&apos; playbooks. See examples.</span><br><span class="line">      name=                  # Package name, or package specifier with version, like `name-1.0&apos;. When using state=latest, this can be &apos;*&apos; which means run: yum -y update. You can also pass a</span><br><span class="line">                               url or a local path to a rpm file (using state=present).  To operate on several packages this can accept a comma separated list</span><br><span class="line">                               of packages or (as of 2.0) a list of packages.</span><br><span class="line">      state                  # Whether to install (`present&apos; or `installed&apos;, `latest&apos;), or remove (`absent&apos; or `removed&apos;) a package.</span><br><span class="line">      update_cache           # Force updating the cache. Has an effect only if state is `present&apos; or `latest&apos;.</span><br><span class="line">      validate_certs         # This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to `no&apos;, the SSL certificates will not be validated. This should</span><br><span class="line">                               only set to `no&apos; used on personally controlled sites using self-signed certificates as it avoids verifying the source site. Prior</span><br><span class="line">                               to 2.1 the code worked as if this was set to `yes&apos;.</span><br></pre></td></tr></table></figure><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m yum -a &apos;name=&quot;httpd&quot;&apos;         # 安装httpd软件包</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;msg&quot;: &quot;file://misc/cd/repodata/repomd.xml: [Errno 14] Could not open/read file://misc/cd/repodata/repomd.xml\nTrying other mirror.\n&quot;, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &quot;Loaded plugins: fastestmirror, security\nSetting up Install Process\nLoading mirror speeds from cached hostfile\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package httpd.x86_64 0:2.2.15-59.el6.centos will be installed\n--&gt; Processing Dependency: httpd-tools = 2.2.15-59.el6.centos for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: apr-util-ldap for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: /etc/mime.types for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: libaprutil-1.so.0()(64bit) for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: libapr-1.so.0()(64bit) for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Running transaction check\n---&gt; Package apr.x86_64 0:1.3.9-5.el6_2 will be installed\n---&gt; Package apr-util.x86_64 0:1.3.9-3.el6_0.1 will be installed\n---&gt; Package apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1 will be installed\n---&gt; Package httpd-tools.x86_64 0:2.2.15-59.el6.centos will be installed\n---&gt; Package mailcap.noarch 0:2.1.31-2.el6 will be installed\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package             Arch         Version                      Repository  Size\n================================================================================\nInstalling:\n httpd               x86_64       2.2.15-59.el6.centos         base       834 k\nInstalling for dependencies:\n apr                 x86_64       1.3.9-5.el6_2                base       123 k\n apr-util            x86_64       1.3.9-3.el6_0.1              base        87 k\n apr-util-ldap       x86_64       1.3.9-3.el6_0.1              base        15 k\n httpd-tools         x86_64       2.2.15-59.el6.centos         base        79 k\n mailcap             noarch       2.1.31-2.el6                 base        27 k\n\nTransaction Summary\n================================================================================\nInstall       6 Package(s)\n\nTotal download size: 1.1 M\nInstalled size: 3.7 M\nDownloading Packages:\n--------------------------------------------------------------------------------\nTotal                                           2.2 MB/s | 1.1 MB     00:00     \nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n\r  Installing : apr-1.3.9-5.el6_2.x86_64                                     1/6 \n\r  Installing : apr-util-1.3.9-3.el6_0.1.x86_64                              2/6 \n\r  Installing : httpd-tools-2.2.15-59.el6.centos.x86_64                      3/6 \n\r  Installing : apr-util-ldap-1.3.9-3.el6_0.1.x86_64                         4/6 \n\r  Installing : mailcap-2.1.31-2.el6.noarch                                  5/6 \n\r  Installing : httpd-2.2.15-59.el6.centos.x86_64                            6/6 \n\r  Verifying  : httpd-tools-2.2.15-59.el6.centos.x86_64                      1/6 \n\r  Verifying  : apr-util-ldap-1.3.9-3.el6_0.1.x86_64                         2/6 \n\r  Verifying  : httpd-2.2.15-59.el6.centos.x86_64                            3/6 \n\r  Verifying  : apr-1.3.9-5.el6_2.x86_64                                     4/6 \n\r  Verifying  : mailcap-2.1.31-2.el6.noarch                                  5/6 \n\r  Verifying  : apr-util-1.3.9-3.el6_0.1.x86_64                              6/6 \n\nInstalled:\n  httpd.x86_64 0:2.2.15-59.el6.centos                                           \n\nDependency Installed:\n  apr.x86_64 0:1.3.9-5.el6_2                                                    \n  apr-util.x86_64 0:1.3.9-3.el6_0.1                                             \n  apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1                                        \n  httpd-tools.x86_64 0:2.2.15-59.el6.centos                                     \n  mailcap.noarch 0:2.1.31-2.el6                                                 \n\nComplete!\n&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;msg&quot;: &quot;file://misc/cd/repodata/repomd.xml: [Errno 14] Could not open/read file://misc/cd/repodata/repomd.xml\nTrying other mirror.\n&quot;, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &quot;Loaded plugins: fastestmirror, security\nSetting up Install Process\nLoading mirror speeds from cached hostfile\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package httpd.x86_64 0:2.2.15-59.el6.centos will be installed\n--&gt; Processing Dependency: httpd-tools = 2.2.15-59.el6.centos for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: apr-util-ldap for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: /etc/mime.types for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: libaprutil-1.so.0()(64bit) for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Processing Dependency: libapr-1.so.0()(64bit) for package: httpd-2.2.15-59.el6.centos.x86_64\n--&gt; Running transaction check\n---&gt; Package apr.x86_64 0:1.3.9-5.el6_2 will be installed\n---&gt; Package apr-util.x86_64 0:1.3.9-3.el6_0.1 will be installed\n---&gt; Package apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1 will be installed\n---&gt; Package httpd-tools.x86_64 0:2.2.15-59.el6.centos will be installed\n---&gt; Package mailcap.noarch 0:2.1.31-2.el6 will be installed\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package             Arch         Version                      Repository  Size\n================================================================================\nInstalling:\n httpd               x86_64       2.2.15-59.el6.centos         base       834 k\nInstalling for dependencies:\n apr                 x86_64       1.3.9-5.el6_2                base       123 k\n apr-util            x86_64       1.3.9-3.el6_0.1              base        87 k\n apr-util-ldap       x86_64       1.3.9-3.el6_0.1              base        15 k\n httpd-tools         x86_64       2.2.15-59.el6.centos         base        79 k\n mailcap             noarch       2.1.31-2.el6                 base        27 k\n\nTransaction Summary\n================================================================================\nInstall       6 Package(s)\n\nTotal download size: 1.1 M\nInstalled size: 3.7 M\nDownloading Packages:\n--------------------------------------------------------------------------------\nTotal                                           6.1 MB/s | 1.1 MB     00:00     \nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n\r  Installing : apr-1.3.9-5.el6_2.x86_64                                     1/6 \n\r  Installing : apr-util-1.3.9-3.el6_0.1.x86_64                              2/6 \n\r  Installing : httpd-tools-2.2.15-59.el6.centos.x86_64                      3/6 \n\r  Installing : apr-util-ldap-1.3.9-3.el6_0.1.x86_64                         4/6 \n\r  Installing : mailcap-2.1.31-2.el6.noarch                                  5/6 \n\r  Installing : httpd-2.2.15-59.el6.centos.x86_64                            6/6 \n\r  Verifying  : httpd-tools-2.2.15-59.el6.centos.x86_64                      1/6 \n\r  Verifying  : apr-util-ldap-1.3.9-3.el6_0.1.x86_64                         2/6 \n\r  Verifying  : httpd-2.2.15-59.el6.centos.x86_64                            3/6 \n\r  Verifying  : apr-1.3.9-5.el6_2.x86_64                                     4/6 \n\r  Verifying  : mailcap-2.1.31-2.el6.noarch                                  5/6 \n\r  Verifying  : apr-util-1.3.9-3.el6_0.1.x86_64                              6/6 \n\nInstalled:\n  httpd.x86_64 0:2.2.15-59.el6.centos                                           \n\nDependency Installed:\n  apr.x86_64 0:1.3.9-5.el6_2                                                    \n  apr-util.x86_64 0:1.3.9-3.el6_0.1                                             \n  apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1                                        \n  httpd-tools.x86_64 0:2.2.15-59.el6.centos                                     \n  mailcap.noarch 0:2.1.31-2.el6                                                 \n\nComplete!\n&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &apos;rpm -q httpd&apos;        # 确认，已经安装</span><br><span class="line">192.168.8.14 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">httpd-2.2.15-59.el6.centos.x86_64</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">httpd-2.2.15-59.el6.centos.x86_64</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m yum  -a &apos;name=&quot;httpd&quot; state=&quot;absent&quot;&apos;         # 卸载httpd软件包</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;msg&quot;: &quot;&quot;, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &quot;Loaded plugins: fastestmirror, security\nSetting up Remove Process\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package httpd.x86_64 0:2.2.15-59.el6.centos will be erased\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package       Arch           Version                       Repository     Size\n================================================================================\nRemoving:\n httpd         x86_64         2.2.15-59.el6.centos          @base         3.0 M\n\nTransaction Summary\n================================================================================\nRemove        1 Package(s)\n\nInstalled size: 3.0 M\nDownloading Packages:\nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n\r  Erasing    : httpd-2.2.15-59.el6.centos.x86_64                            1/1 \n\r  Verifying  : httpd-2.2.15-59.el6.centos.x86_64                            1/1 \n\nRemoved:\n  httpd.x86_64 0:2.2.15-59.el6.centos                                           \n\nComplete!\n&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;msg&quot;: &quot;&quot;, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &quot;Loaded plugins: fastestmirror, security\nSetting up Remove Process\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package httpd.x86_64 0:2.2.15-59.el6.centos will be erased\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package       Arch           Version                       Repository     Size\n================================================================================\nRemoving:\n httpd         x86_64         2.2.15-59.el6.centos          @base         3.0 M\n\nTransaction Summary\n================================================================================\nRemove        1 Package(s)\n\nInstalled size: 3.0 M\nDownloading Packages:\nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n\r  Erasing    : httpd-2.2.15-59.el6.centos.x86_64                            1/1 \n\r  Verifying  : httpd-2.2.15-59.el6.centos.x86_64                            1/1 \n\nRemoved:\n  httpd.x86_64 0:2.2.15-59.el6.centos                                           \n\nComplete!\n&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &apos;rpm -q httpd&apos;        # 确认，已经卸载</span><br><span class="line">192.168.8.14 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">package httpd is not installed</span><br><span class="line"></span><br><span class="line">192.168.8.13 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">package httpd is not installed</span><br></pre></td></tr></table></figure><h3 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h3><p><code>setup</code>模块：收集远程主机的<code>facts</code>。</p><ul><li>每个被管理节点在接收并运行管理命令之前。会将自己主机相关信息，如操作系统版本、<code>IP</code>地址等报告给<code>ansbile</code>主机。</li></ul><h4 id="帮助信息-4"><a href="#帮助信息-4" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s setup          # 信息如下</span><br><span class="line">- name: Gathers facts about remote hosts</span><br><span class="line">  action: setup</span><br><span class="line">      fact_path              # path used for local ansible facts (*.fact) - files in this dir will be run (if executable) and their results be added to ansible_local facts if a file is not</span><br><span class="line">                               executable it is read. Check notes for Windows options. (from 2.1 on) File/results format can be json or ini-format</span><br><span class="line">      filter                 # if supplied, only return facts that match this shell-style (fnmatch) wildcard.</span><br><span class="line">      gather_subset          # if supplied, restrict the additional facts collected to the given subset. Possible values: all, hardware, network, virtual, ohai, and facter Can specify a list</span><br><span class="line">                               of values to specify a larger subset. Values can also be used with an initial `!&apos; to specify that that specific subset should not</span><br><span class="line">                               be collected.  For instance: !hardware, !network, !virtual, !ohai, !facter.  Note that a few facts are always collected.  Use the</span><br><span class="line">                               filter parameter if you do not want to display those.</span><br><span class="line">      gather_timeout         # Set the default timeout in seconds for individual fact gathering</span><br></pre></td></tr></table></figure><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m setup </span><br><span class="line">192.168.8.14 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;172.18.254.49&quot;, </span><br><span class="line">            &quot;192.168.8.14&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_all_ipv6_addresses&quot;: [</span><br><span class="line">            &quot;fe80::20c:29ff:fefc:1402&quot;, </span><br><span class="line">            &quot;fe80::20c:29ff:fefc:140c&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_architecture&quot;: &quot;x86_64&quot;, </span><br><span class="line">        &quot;ansible_bios_date&quot;: &quot;07/02/2015&quot;, </span><br><span class="line">        &quot;ansible_bios_version&quot;: &quot;6.00&quot;, </span><br><span class="line">        &quot;ansible_cmdline&quot;: &#123;</span><br><span class="line">            &quot;KEYBOARDTYPE&quot;: &quot;pc&quot;, </span><br><span class="line">            &quot;KEYTABLE&quot;: &quot;us&quot;, </span><br><span class="line">            &quot;LANG&quot;: &quot;en_US.UTF-8&quot;, </span><br><span class="line">            &quot;SYSFONT&quot;: &quot;latarcyrheb-sun16&quot;, </span><br><span class="line">            &quot;quiet&quot;: true, </span><br><span class="line">            &quot;rd_NO_DM&quot;: true, </span><br><span class="line">            &quot;rd_NO_LUKS&quot;: true, </span><br><span class="line">            &quot;rd_NO_LVM&quot;: true, </span><br><span class="line">            &quot;rd_NO_MD&quot;: true, </span><br><span class="line">            &quot;rhgb&quot;: true, </span><br><span class="line">            &quot;ro&quot;: true, </span><br><span class="line">            &quot;root&quot;: &quot;UUID=de56e176-3b0b-4c02-84bc-84c99bfda1ac&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_date_time&quot;: &#123;</span><br><span class="line">            &quot;date&quot;: &quot;2017-10-30&quot;, </span><br><span class="line">            &quot;day&quot;: &quot;30&quot;, </span><br><span class="line">            &quot;epoch&quot;: &quot;1509373858&quot;, </span><br><span class="line">            &quot;hour&quot;: &quot;22&quot;, </span><br><span class="line">            &quot;iso8601&quot;: &quot;2017-10-30T14:30:58Z&quot;, </span><br><span class="line">            &quot;iso8601_basic&quot;: &quot;20171030T223058088697&quot;, </span><br><span class="line">            &quot;iso8601_basic_short&quot;: &quot;20171030T223058&quot;, </span><br><span class="line">            &quot;iso8601_micro&quot;: &quot;2017-10-30T14:30:58.088808Z&quot;, </span><br><span class="line">            &quot;minute&quot;: &quot;30&quot;, </span><br><span class="line">            &quot;month&quot;: &quot;10&quot;, </span><br><span class="line">            &quot;second&quot;: &quot;58&quot;, </span><br><span class="line">            &quot;time&quot;: &quot;22:30:58&quot;, </span><br><span class="line">            &quot;tz&quot;: &quot;CST&quot;, </span><br><span class="line">            &quot;tz_offset&quot;: &quot;+0800&quot;, </span><br><span class="line">            &quot;weekday&quot;: &quot;Monday&quot;, </span><br><span class="line">            &quot;weekday_number&quot;: &quot;1&quot;, </span><br><span class="line">            &quot;weeknumber&quot;: &quot;44&quot;, </span><br><span class="line">            &quot;year&quot;: &quot;2017&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_default_ipv4&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;172.18.254.49&quot;, </span><br><span class="line">            &quot;alias&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;broadcast&quot;: &quot;172.18.255.255&quot;, </span><br><span class="line">            &quot;gateway&quot;: &quot;172.18.0.1&quot;, </span><br><span class="line">            &quot;interface&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:fc:14:02&quot;, </span><br><span class="line">            &quot;mtu&quot;: 1500, </span><br><span class="line">            &quot;netmask&quot;: &quot;255.255.0.0&quot;, </span><br><span class="line">            &quot;network&quot;: &quot;172.18.0.0&quot;, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_default_ipv6&quot;: &#123;&#125;, </span><br><span class="line">        &quot;ansible_devices&quot;: &#123;</span><br><span class="line">            &quot;sda&quot;: &#123;</span><br><span class="line">                &quot;holders&quot;: [], </span><br><span class="line">                &quot;host&quot;: &quot;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;, </span><br><span class="line">                &quot;model&quot;: &quot;VMware Virtual S&quot;, </span><br><span class="line">                &quot;partitions&quot;: &#123;</span><br><span class="line">                    &quot;sda1&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;8388608&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;4.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;2048&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;bbebea2d-5e04-4638-9a48-fb59c406bbbc&quot;</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda2&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;104857600&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;50.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;8390656&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;de56e176-3b0b-4c02-84bc-84c99bfda1ac&quot;</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda3&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;104857600&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;50.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;113248256&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;2cd02e07-26b7-45d4-bdd1-432e0fc763f9&quot;</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda4&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;2&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;1.00 KB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;218105856&quot;, </span><br><span class="line">                        &quot;uuid&quot;: null</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda5&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;41943040&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;20.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;218109952&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;0eb283d4-fc17-40a7-b025-4aea863a9858&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                &quot;removable&quot;: &quot;0&quot;, </span><br><span class="line">                &quot;rotational&quot;: &quot;1&quot;, </span><br><span class="line">                &quot;sas_address&quot;: null, </span><br><span class="line">                &quot;sas_device_handle&quot;: null, </span><br><span class="line">                &quot;scheduler_mode&quot;: &quot;cfq&quot;, </span><br><span class="line">                &quot;sectors&quot;: &quot;419430400&quot;, </span><br><span class="line">                &quot;sectorsize&quot;: &quot;512&quot;, </span><br><span class="line">                &quot;size&quot;: &quot;200.00 GB&quot;, </span><br><span class="line">                &quot;support_discard&quot;: &quot;0&quot;, </span><br><span class="line">                &quot;vendor&quot;: &quot;VMware,&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;sr0&quot;: &#123;</span><br><span class="line">                &quot;holders&quot;: [], </span><br><span class="line">                &quot;host&quot;: &quot;IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)&quot;, </span><br><span class="line">                &quot;model&quot;: &quot;VMware IDE CDR10&quot;, </span><br><span class="line">                &quot;partitions&quot;: &#123;&#125;, </span><br><span class="line">                &quot;removable&quot;: &quot;1&quot;, </span><br><span class="line">                &quot;rotational&quot;: &quot;1&quot;, </span><br><span class="line">                &quot;sas_address&quot;: null, </span><br><span class="line">                &quot;sas_device_handle&quot;: null, </span><br><span class="line">                &quot;scheduler_mode&quot;: &quot;cfq&quot;, </span><br><span class="line">                &quot;sectors&quot;: &quot;7757824&quot;, </span><br><span class="line">                &quot;sectorsize&quot;: &quot;2048&quot;, </span><br><span class="line">                &quot;size&quot;: &quot;14.80 GB&quot;, </span><br><span class="line">                &quot;support_discard&quot;: &quot;0&quot;, </span><br><span class="line">                &quot;vendor&quot;: &quot;NECVMWar&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_distribution&quot;: &quot;CentOS&quot;, </span><br><span class="line">        &quot;ansible_distribution_major_version&quot;: &quot;6&quot;, </span><br><span class="line">        &quot;ansible_distribution_release&quot;: &quot;Final&quot;, </span><br><span class="line">        &quot;ansible_distribution_version&quot;: &quot;6.9&quot;, </span><br><span class="line">        &quot;ansible_dns&quot;: &#123;</span><br><span class="line">            &quot;nameservers&quot;: [</span><br><span class="line">                &quot;172.18.0.1&quot;</span><br><span class="line">            ], </span><br><span class="line">            &quot;search&quot;: [</span><br><span class="line">                &quot;magedu.com&quot;, </span><br><span class="line">                &quot;haiyun.com&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_domain&quot;: &quot;genericreverse.com&quot;, </span><br><span class="line">        &quot;ansible_env&quot;: &#123;</span><br><span class="line">            &quot;G_BROKEN_FILENAMES&quot;: &quot;1&quot;, </span><br><span class="line">            &quot;HOME&quot;: &quot;/root&quot;, </span><br><span class="line">            &quot;LANG&quot;: &quot;en_US.UTF-8&quot;, </span><br><span class="line">            &quot;LESSOPEN&quot;: &quot;||/usr/bin/lesspipe.sh %s&quot;, </span><br><span class="line">            &quot;LOGNAME&quot;: &quot;root&quot;, </span><br><span class="line">            &quot;LS_COLORS&quot;: &quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz=01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:&quot;, </span><br><span class="line">            &quot;MAIL&quot;: &quot;/var/mail/root&quot;, </span><br><span class="line">            &quot;PATH&quot;: &quot;/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin&quot;, </span><br><span class="line">            &quot;PWD&quot;: &quot;/root&quot;, </span><br><span class="line">            &quot;SHELL&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">            &quot;SHLVL&quot;: &quot;2&quot;, </span><br><span class="line">            &quot;SSH_CLIENT&quot;: &quot;192.168.8.11 34978 22&quot;, </span><br><span class="line">            &quot;SSH_CONNECTION&quot;: &quot;192.168.8.11 34978 192.168.8.14 22&quot;, </span><br><span class="line">            &quot;SSH_TTY&quot;: &quot;/dev/pts/1&quot;, </span><br><span class="line">            &quot;TERM&quot;: &quot;xterm&quot;, </span><br><span class="line">            &quot;USER&quot;: &quot;root&quot;, </span><br><span class="line">            &quot;_&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_eth0&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true, </span><br><span class="line">            &quot;device&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;features&quot;: &#123;</span><br><span class="line">                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;generic_receive_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;generic_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;highdma&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;loopback&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;netns_local&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;rx_vlan_filter&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ip_generic&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv4&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv6&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_unneeded&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_lockless&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_scatter_gather_fraglist&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_tcp6_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_ecn_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;udp_fragmentation_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;vlan_challenged&quot;: &quot;off [fixed]&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;172.18.254.49&quot;, </span><br><span class="line">                &quot;broadcast&quot;: &quot;172.18.255.255&quot;, </span><br><span class="line">                &quot;netmask&quot;: &quot;255.255.0.0&quot;, </span><br><span class="line">                &quot;network&quot;: &quot;172.18.0.0&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;fe80::20c:29ff:fefc:1402&quot;, </span><br><span class="line">                    &quot;prefix&quot;: &quot;64&quot;, </span><br><span class="line">                    &quot;scope&quot;: &quot;link&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:fc:14:02&quot;, </span><br><span class="line">            &quot;module&quot;: &quot;e1000&quot;, </span><br><span class="line">            &quot;mtu&quot;: 1500, </span><br><span class="line">            &quot;pciid&quot;: &quot;0000:02:01.0&quot;, </span><br><span class="line">            &quot;promisc&quot;: false, </span><br><span class="line">            &quot;speed&quot;: 1000, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_eth1&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true, </span><br><span class="line">            &quot;device&quot;: &quot;eth1&quot;, </span><br><span class="line">            &quot;features&quot;: &#123;</span><br><span class="line">                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;generic_receive_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;generic_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;highdma&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;loopback&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;netns_local&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;rx_vlan_filter&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ip_generic&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv4&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv6&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_unneeded&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_lockless&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_scatter_gather_fraglist&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_tcp6_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_ecn_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;udp_fragmentation_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;vlan_challenged&quot;: &quot;off [fixed]&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;192.168.8.14&quot;, </span><br><span class="line">                &quot;broadcast&quot;: &quot;192.168.8.255&quot;, </span><br><span class="line">                &quot;netmask&quot;: &quot;255.255.255.0&quot;, </span><br><span class="line">                &quot;network&quot;: &quot;192.168.8.0&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;fe80::20c:29ff:fefc:140c&quot;, </span><br><span class="line">                    &quot;prefix&quot;: &quot;64&quot;, </span><br><span class="line">                    &quot;scope&quot;: &quot;link&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:fc:14:0c&quot;, </span><br><span class="line">            &quot;module&quot;: &quot;e1000&quot;, </span><br><span class="line">            &quot;mtu&quot;: 1500, </span><br><span class="line">            &quot;pciid&quot;: &quot;0000:02:02.0&quot;, </span><br><span class="line">            &quot;promisc&quot;: false, </span><br><span class="line">            &quot;speed&quot;: 1000, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_fips&quot;: false, </span><br><span class="line">        &quot;ansible_form_factor&quot;: &quot;Other&quot;, </span><br><span class="line">        &quot;ansible_fqdn&quot;: &quot;204-74-211-183.genericreverse.com&quot;, </span><br><span class="line">        &quot;ansible_gather_subset&quot;: [</span><br><span class="line">            &quot;hardware&quot;, </span><br><span class="line">            &quot;network&quot;, </span><br><span class="line">            &quot;virtual&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_hostname&quot;: &quot;centos6&quot;, </span><br><span class="line">        &quot;ansible_interfaces&quot;: [</span><br><span class="line">            &quot;lo&quot;, </span><br><span class="line">            &quot;eth1&quot;, </span><br><span class="line">            &quot;eth0&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_kernel&quot;: &quot;2.6.32-696.el6.x86_64&quot;, </span><br><span class="line">        &quot;ansible_lo&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true, </span><br><span class="line">            &quot;device&quot;: &quot;lo&quot;, </span><br><span class="line">            &quot;features&quot;: &#123;</span><br><span class="line">                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;generic_receive_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;generic_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;highdma&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;loopback&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;netns_local&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_checksumming&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_filter&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ip_generic&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv4&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv6&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_unneeded&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_lockless&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather_fraglist&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_tcp6_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_tcp_ecn_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_vlan_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;udp_fragmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;vlan_challenged&quot;: &quot;on [fixed]&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1&quot;, </span><br><span class="line">                &quot;broadcast&quot;: &quot;host&quot;, </span><br><span class="line">                &quot;netmask&quot;: &quot;255.0.0.0&quot;, </span><br><span class="line">                &quot;network&quot;: &quot;127.0.0.0&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;::1&quot;, </span><br><span class="line">                    &quot;prefix&quot;: &quot;128&quot;, </span><br><span class="line">                    &quot;scope&quot;: &quot;host&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;mtu&quot;: 65536, </span><br><span class="line">            &quot;promisc&quot;: false, </span><br><span class="line">            &quot;type&quot;: &quot;loopback&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_lvm&quot;: &#123;</span><br><span class="line">            &quot;lvs&quot;: &#123;&#125;, </span><br><span class="line">            &quot;vgs&quot;: &#123;&#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_machine&quot;: &quot;x86_64&quot;, </span><br><span class="line">        &quot;ansible_machine_id&quot;: &quot;948d9e6668675b7782adc61a00000008&quot;, </span><br><span class="line">        &quot;ansible_memfree_mb&quot;: 555, </span><br><span class="line">        &quot;ansible_memory_mb&quot;: &#123;</span><br><span class="line">            &quot;nocache&quot;: &#123;</span><br><span class="line">                &quot;free&quot;: 848, </span><br><span class="line">                &quot;used&quot;: 132</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;real&quot;: &#123;</span><br><span class="line">                &quot;free&quot;: 555, </span><br><span class="line">                &quot;total&quot;: 980, </span><br><span class="line">                &quot;used&quot;: 425</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;swap&quot;: &#123;</span><br><span class="line">                &quot;cached&quot;: 0, </span><br><span class="line">                &quot;free&quot;: 0, </span><br><span class="line">                &quot;total&quot;: 0, </span><br><span class="line">                &quot;used&quot;: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_memtotal_mb&quot;: 980, </span><br><span class="line">        &quot;ansible_mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda2&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 49024323584, </span><br><span class="line">                &quot;size_total&quot;: 52710469632, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda3&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/app&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 49971777536, </span><br><span class="line">                &quot;size_total&quot;: 52710469632, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda1&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/boot&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 3836063744, </span><br><span class="line">                &quot;size_total&quot;: 4093313024, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda5&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/script&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 19883814912, </span><br><span class="line">                &quot;size_total&quot;: 21003628544, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_nodename&quot;: &quot;centos6.haiyun.com&quot;, </span><br><span class="line">        &quot;ansible_os_family&quot;: &quot;RedHat&quot;, </span><br><span class="line">        &quot;ansible_pkg_mgr&quot;: &quot;yum&quot;, </span><br><span class="line">        &quot;ansible_processor&quot;: [</span><br><span class="line">            &quot;GenuineIntel&quot;, </span><br><span class="line">            &quot;Intel(R) Core(TM) i5-6300HQ CPU @ 2.30GHz&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_processor_cores&quot;: 1, </span><br><span class="line">        &quot;ansible_processor_count&quot;: 1, </span><br><span class="line">        &quot;ansible_processor_threads_per_core&quot;: 1, </span><br><span class="line">        &quot;ansible_processor_vcpus&quot;: 1, </span><br><span class="line">        &quot;ansible_product_name&quot;: &quot;VMware Virtual Platform&quot;, </span><br><span class="line">        &quot;ansible_product_serial&quot;: &quot;VMware-56 4d 06 1b 69 98 c0 ca-2d a3 33 45 27 fc 14 02&quot;, </span><br><span class="line">        &quot;ansible_product_uuid&quot;: &quot;564D061B-6998-C0CA-2DA3-334527FC1402&quot;, </span><br><span class="line">        &quot;ansible_product_version&quot;: &quot;None&quot;, </span><br><span class="line">        &quot;ansible_python&quot;: &#123;</span><br><span class="line">            &quot;executable&quot;: &quot;/usr/bin/python&quot;, </span><br><span class="line">            &quot;has_sslcontext&quot;: false, </span><br><span class="line">            &quot;type&quot;: &quot;CPython&quot;, </span><br><span class="line">            &quot;version&quot;: &#123;</span><br><span class="line">                &quot;major&quot;: 2, </span><br><span class="line">                &quot;micro&quot;: 6, </span><br><span class="line">                &quot;minor&quot;: 6, </span><br><span class="line">                &quot;releaselevel&quot;: &quot;final&quot;, </span><br><span class="line">                &quot;serial&quot;: 0</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;version_info&quot;: [</span><br><span class="line">                2, </span><br><span class="line">                6, </span><br><span class="line">                6, </span><br><span class="line">                &quot;final&quot;, </span><br><span class="line">                0</span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_python_version&quot;: &quot;2.6.6&quot;, </span><br><span class="line">        &quot;ansible_selinux&quot;: false, </span><br><span class="line">        &quot;ansible_service_mgr&quot;: &quot;upstart&quot;, </span><br><span class="line">        &quot;ansible_ssh_host_key_dsa_public&quot;: &quot;AAAAB3NzaC1kc3MAAACBAKOv91aUcemUhm61/jFfJpGMzX3dLgIsB/OR3Lnmif6auk7p988B6SVPttdYJZOItwKCAfruQ9M1AAEdqkRWYLWrbc6bhW9GEbJuzCzX65l+Y7b0a11DPHiajLiBg2guCcGgtfzRCVVQU4fJYq5bAMEn4yAHFATqzOi3r6sc+DIrAAAAFQDRRDvw4Y6dfZE6HA+sCkWYOWaYqQAAAIAf8KH81rbsaUOSARJooK+PukNqnp1OoT5l9c5HTZdUTSBOhvZbL+dJ75rtdeDoQRRd3P6EiQXnNdvG2Oq9pvOgpBnkstJHSCHvaDnY61ROMUUm5nc5NTxN7Si/6TBoBv1Fwfxco3wfjeAbP5ysWcYlJjcL0pAysmq1kuHFEUKOdgAAAIEAnZr2Ph9SGCgK/wuZfGnqC+mkpBpG2KTHj20rRhH1zJe7srJp2XI+smVQXyhDJ15+ChOLLEVYOw8HOef3YyJzLYW3jWAWjDegAiPKBYICLTlOqtK1U8nWDocI+nIcAsLdP2SNvDx8JR//rJq3WlHa0d069r1uGgsMgItpdaWCFpo=&quot;, </span><br><span class="line">        &quot;ansible_ssh_host_key_rsa_public&quot;: &quot;AAAAB3NzaC1yc2EAAAABIwAAAQEAn//HP/nZQ/N4JvIh49zYrA+g17FwCcxpDNWF5bQT+suU757PwA91gWtbG5dF0a3pYgMr/Ob3+tYTRrA/v+SkyQ5gcqUzwfYSstv7dEc+75jxUaq/STKnD8TLRcXIHkH02fK/H634nsZfsChFmUqh6gs07pdHeWE7kdGqupokzfTQOzbFBSQVpCOZ653Hkl3drwniawmXNyyZReKqtefmuKxbejfji7R4WUQpg56Cvl4gY0KD3uIE3MQsVm/DDfA/YbnW7S8uqRmrC7JS7T6q34U+9O6BRZf6YsiG+cv5oSc7XgnetIlv/UW2pDSoJQMhAlhLodY9pqg4ebvz/irjtQ==&quot;, </span><br><span class="line">        &quot;ansible_swapfree_mb&quot;: 0, </span><br><span class="line">        &quot;ansible_swaptotal_mb&quot;: 0, </span><br><span class="line">        &quot;ansible_system&quot;: &quot;Linux&quot;, </span><br><span class="line">        &quot;ansible_system_capabilities&quot;: [], </span><br><span class="line">        &quot;ansible_system_capabilities_enforced&quot;: &quot;False&quot;, </span><br><span class="line">        &quot;ansible_system_vendor&quot;: &quot;VMware, Inc.&quot;, </span><br><span class="line">        &quot;ansible_uptime_seconds&quot;: 34566, </span><br><span class="line">        &quot;ansible_user_dir&quot;: &quot;/root&quot;, </span><br><span class="line">        &quot;ansible_user_gecos&quot;: &quot;root&quot;, </span><br><span class="line">        &quot;ansible_user_gid&quot;: 0, </span><br><span class="line">        &quot;ansible_user_id&quot;: &quot;root&quot;, </span><br><span class="line">        &quot;ansible_user_shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">        &quot;ansible_user_uid&quot;: 0, </span><br><span class="line">        &quot;ansible_userspace_architecture&quot;: &quot;x86_64&quot;, </span><br><span class="line">        &quot;ansible_userspace_bits&quot;: &quot;64&quot;, </span><br><span class="line">        &quot;ansible_virtualization_role&quot;: &quot;guest&quot;, </span><br><span class="line">        &quot;ansible_virtualization_type&quot;: &quot;VMware&quot;, </span><br><span class="line">        &quot;module_setup&quot;: true</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;172.18.252.116&quot;, </span><br><span class="line">            &quot;192.168.8.13&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_all_ipv6_addresses&quot;: [</span><br><span class="line">            &quot;fe80::20c:29ff:fe23:dba5&quot;, </span><br><span class="line">            &quot;fe80::20c:29ff:fe23:dbaf&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_architecture&quot;: &quot;x86_64&quot;, </span><br><span class="line">        &quot;ansible_bios_date&quot;: &quot;07/02/2015&quot;, </span><br><span class="line">        &quot;ansible_bios_version&quot;: &quot;6.00&quot;, </span><br><span class="line">        &quot;ansible_cmdline&quot;: &#123;</span><br><span class="line">            &quot;KEYBOARDTYPE&quot;: &quot;pc&quot;, </span><br><span class="line">            &quot;KEYTABLE&quot;: &quot;us&quot;, </span><br><span class="line">            &quot;LANG&quot;: &quot;en_US.UTF-8&quot;, </span><br><span class="line">            &quot;SYSFONT&quot;: &quot;latarcyrheb-sun16&quot;, </span><br><span class="line">            &quot;quiet&quot;: true, </span><br><span class="line">            &quot;rd_NO_DM&quot;: true, </span><br><span class="line">            &quot;rd_NO_LUKS&quot;: true, </span><br><span class="line">            &quot;rd_NO_LVM&quot;: true, </span><br><span class="line">            &quot;rd_NO_MD&quot;: true, </span><br><span class="line">            &quot;rhgb&quot;: true, </span><br><span class="line">            &quot;ro&quot;: true, </span><br><span class="line">            &quot;root&quot;: &quot;UUID=840675ee-da1d-49fc-a8b6-1a3b6cf60d42&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_date_time&quot;: &#123;</span><br><span class="line">            &quot;date&quot;: &quot;2017-10-30&quot;, </span><br><span class="line">            &quot;day&quot;: &quot;30&quot;, </span><br><span class="line">            &quot;epoch&quot;: &quot;1509373858&quot;, </span><br><span class="line">            &quot;hour&quot;: &quot;22&quot;, </span><br><span class="line">            &quot;iso8601&quot;: &quot;2017-10-30T14:30:58Z&quot;, </span><br><span class="line">            &quot;iso8601_basic&quot;: &quot;20171030T223058630164&quot;, </span><br><span class="line">            &quot;iso8601_basic_short&quot;: &quot;20171030T223058&quot;, </span><br><span class="line">            &quot;iso8601_micro&quot;: &quot;2017-10-30T14:30:58.630319Z&quot;, </span><br><span class="line">            &quot;minute&quot;: &quot;30&quot;, </span><br><span class="line">            &quot;month&quot;: &quot;10&quot;, </span><br><span class="line">            &quot;second&quot;: &quot;58&quot;, </span><br><span class="line">            &quot;time&quot;: &quot;22:30:58&quot;, </span><br><span class="line">            &quot;tz&quot;: &quot;CST&quot;, </span><br><span class="line">            &quot;tz_offset&quot;: &quot;+0800&quot;, </span><br><span class="line">            &quot;weekday&quot;: &quot;Monday&quot;, </span><br><span class="line">            &quot;weekday_number&quot;: &quot;1&quot;, </span><br><span class="line">            &quot;weeknumber&quot;: &quot;44&quot;, </span><br><span class="line">            &quot;year&quot;: &quot;2017&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_default_ipv4&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;172.18.252.116&quot;, </span><br><span class="line">            &quot;alias&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;broadcast&quot;: &quot;172.18.255.255&quot;, </span><br><span class="line">            &quot;gateway&quot;: &quot;172.18.0.1&quot;, </span><br><span class="line">            &quot;interface&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:23:db:a5&quot;, </span><br><span class="line">            &quot;mtu&quot;: 1500, </span><br><span class="line">            &quot;netmask&quot;: &quot;255.255.0.0&quot;, </span><br><span class="line">            &quot;network&quot;: &quot;172.18.0.0&quot;, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_default_ipv6&quot;: &#123;&#125;, </span><br><span class="line">        &quot;ansible_devices&quot;: &#123;</span><br><span class="line">            &quot;sda&quot;: &#123;</span><br><span class="line">                &quot;holders&quot;: [], </span><br><span class="line">                &quot;host&quot;: &quot;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;, </span><br><span class="line">                &quot;model&quot;: &quot;VMware Virtual S&quot;, </span><br><span class="line">                &quot;partitions&quot;: &#123;</span><br><span class="line">                    &quot;sda1&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;8388608&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;4.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;2048&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;86061bf6-eda8-4277-939d-f45c73fe3d27&quot;</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda2&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;104857600&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;50.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;8390656&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;840675ee-da1d-49fc-a8b6-1a3b6cf60d42&quot;</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda3&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;104857600&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;50.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;113248256&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;5675ce63-c9a2-4957-8793-e0755927322f&quot;</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda4&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;2&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;1.00 KB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;218105856&quot;, </span><br><span class="line">                        &quot;uuid&quot;: null</span><br><span class="line">                    &#125;, </span><br><span class="line">                    &quot;sda5&quot;: &#123;</span><br><span class="line">                        &quot;holders&quot;: [], </span><br><span class="line">                        &quot;sectors&quot;: &quot;41943040&quot;, </span><br><span class="line">                        &quot;sectorsize&quot;: 512, </span><br><span class="line">                        &quot;size&quot;: &quot;20.00 GB&quot;, </span><br><span class="line">                        &quot;start&quot;: &quot;218109952&quot;, </span><br><span class="line">                        &quot;uuid&quot;: &quot;1ec30f49-a41a-4ef7-836f-ff231c6b20bb&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                &quot;removable&quot;: &quot;0&quot;, </span><br><span class="line">                &quot;rotational&quot;: &quot;1&quot;, </span><br><span class="line">                &quot;sas_address&quot;: null, </span><br><span class="line">                &quot;sas_device_handle&quot;: null, </span><br><span class="line">                &quot;scheduler_mode&quot;: &quot;cfq&quot;, </span><br><span class="line">                &quot;sectors&quot;: &quot;419430400&quot;, </span><br><span class="line">                &quot;sectorsize&quot;: &quot;512&quot;, </span><br><span class="line">                &quot;size&quot;: &quot;200.00 GB&quot;, </span><br><span class="line">                &quot;support_discard&quot;: &quot;0&quot;, </span><br><span class="line">                &quot;vendor&quot;: &quot;VMware,&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;sr0&quot;: &#123;</span><br><span class="line">                &quot;holders&quot;: [], </span><br><span class="line">                &quot;host&quot;: &quot;IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)&quot;, </span><br><span class="line">                &quot;model&quot;: &quot;VMware IDE CDR10&quot;, </span><br><span class="line">                &quot;partitions&quot;: &#123;&#125;, </span><br><span class="line">                &quot;removable&quot;: &quot;1&quot;, </span><br><span class="line">                &quot;rotational&quot;: &quot;1&quot;, </span><br><span class="line">                &quot;sas_address&quot;: null, </span><br><span class="line">                &quot;sas_device_handle&quot;: null, </span><br><span class="line">                &quot;scheduler_mode&quot;: &quot;cfq&quot;, </span><br><span class="line">                &quot;sectors&quot;: &quot;7757824&quot;, </span><br><span class="line">                &quot;sectorsize&quot;: &quot;2048&quot;, </span><br><span class="line">                &quot;size&quot;: &quot;14.80 GB&quot;, </span><br><span class="line">                &quot;support_discard&quot;: &quot;0&quot;, </span><br><span class="line">                &quot;vendor&quot;: &quot;NECVMWar&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_distribution&quot;: &quot;CentOS&quot;, </span><br><span class="line">        &quot;ansible_distribution_major_version&quot;: &quot;6&quot;, </span><br><span class="line">        &quot;ansible_distribution_release&quot;: &quot;Final&quot;, </span><br><span class="line">        &quot;ansible_distribution_version&quot;: &quot;6.9&quot;, </span><br><span class="line">        &quot;ansible_dns&quot;: &#123;</span><br><span class="line">            &quot;nameservers&quot;: [</span><br><span class="line">                &quot;172.18.0.1&quot;</span><br><span class="line">            ], </span><br><span class="line">            &quot;search&quot;: [</span><br><span class="line">                &quot;magedu.com&quot;, </span><br><span class="line">                &quot;haiyun.com&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_domain&quot;: &quot;genericreverse.com&quot;, </span><br><span class="line">        &quot;ansible_env&quot;: &#123;</span><br><span class="line">            &quot;G_BROKEN_FILENAMES&quot;: &quot;1&quot;, </span><br><span class="line">            &quot;HOME&quot;: &quot;/root&quot;, </span><br><span class="line">            &quot;LANG&quot;: &quot;en_US.UTF-8&quot;, </span><br><span class="line">            &quot;LESSOPEN&quot;: &quot;||/usr/bin/lesspipe.sh %s&quot;, </span><br><span class="line">            &quot;LOGNAME&quot;: &quot;root&quot;, </span><br><span class="line">            &quot;LS_COLORS&quot;: &quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz=01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:&quot;, </span><br><span class="line">            &quot;MAIL&quot;: &quot;/var/mail/root&quot;, </span><br><span class="line">            &quot;PATH&quot;: &quot;/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin&quot;, </span><br><span class="line">            &quot;PWD&quot;: &quot;/root&quot;, </span><br><span class="line">            &quot;SHELL&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">            &quot;SHLVL&quot;: &quot;2&quot;, </span><br><span class="line">            &quot;SSH_CLIENT&quot;: &quot;192.168.8.11 56942 22&quot;, </span><br><span class="line">            &quot;SSH_CONNECTION&quot;: &quot;192.168.8.11 56942 192.168.8.13 22&quot;, </span><br><span class="line">            &quot;SSH_TTY&quot;: &quot;/dev/pts/1&quot;, </span><br><span class="line">            &quot;TERM&quot;: &quot;xterm&quot;, </span><br><span class="line">            &quot;USER&quot;: &quot;root&quot;, </span><br><span class="line">            &quot;_&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_eth0&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true, </span><br><span class="line">            &quot;device&quot;: &quot;eth0&quot;, </span><br><span class="line">            &quot;features&quot;: &#123;</span><br><span class="line">                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;generic_receive_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;generic_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;highdma&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;loopback&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;netns_local&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;rx_vlan_filter&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ip_generic&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv4&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv6&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_unneeded&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_lockless&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_scatter_gather_fraglist&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_tcp6_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_ecn_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;udp_fragmentation_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;vlan_challenged&quot;: &quot;off [fixed]&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;172.18.252.116&quot;, </span><br><span class="line">                &quot;broadcast&quot;: &quot;172.18.255.255&quot;, </span><br><span class="line">                &quot;netmask&quot;: &quot;255.255.0.0&quot;, </span><br><span class="line">                &quot;network&quot;: &quot;172.18.0.0&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;fe80::20c:29ff:fe23:dba5&quot;, </span><br><span class="line">                    &quot;prefix&quot;: &quot;64&quot;, </span><br><span class="line">                    &quot;scope&quot;: &quot;link&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:23:db:a5&quot;, </span><br><span class="line">            &quot;module&quot;: &quot;e1000&quot;, </span><br><span class="line">            &quot;mtu&quot;: 1500, </span><br><span class="line">            &quot;pciid&quot;: &quot;0000:02:01.0&quot;, </span><br><span class="line">            &quot;promisc&quot;: false, </span><br><span class="line">            &quot;speed&quot;: 1000, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_eth1&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true, </span><br><span class="line">            &quot;device&quot;: &quot;eth1&quot;, </span><br><span class="line">            &quot;features&quot;: &#123;</span><br><span class="line">                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;generic_receive_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;generic_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;highdma&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;loopback&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;netns_local&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;rx_vlan_filter&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ip_generic&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv4&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv6&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_unneeded&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_lockless&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_scatter_gather_fraglist&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_tcp6_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_ecn_segmentation&quot;: &quot;off&quot;, </span><br><span class="line">                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_vlan_offload&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;udp_fragmentation_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;vlan_challenged&quot;: &quot;off [fixed]&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;192.168.8.13&quot;, </span><br><span class="line">                &quot;broadcast&quot;: &quot;192.168.8.255&quot;, </span><br><span class="line">                &quot;netmask&quot;: &quot;255.255.255.0&quot;, </span><br><span class="line">                &quot;network&quot;: &quot;192.168.8.0&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;fe80::20c:29ff:fe23:dbaf&quot;, </span><br><span class="line">                    &quot;prefix&quot;: &quot;64&quot;, </span><br><span class="line">                    &quot;scope&quot;: &quot;link&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;macaddress&quot;: &quot;00:0c:29:23:db:af&quot;, </span><br><span class="line">            &quot;module&quot;: &quot;e1000&quot;, </span><br><span class="line">            &quot;mtu&quot;: 1500, </span><br><span class="line">            &quot;pciid&quot;: &quot;0000:02:02.0&quot;, </span><br><span class="line">            &quot;promisc&quot;: false, </span><br><span class="line">            &quot;speed&quot;: 1000, </span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_fips&quot;: false, </span><br><span class="line">        &quot;ansible_form_factor&quot;: &quot;Other&quot;, </span><br><span class="line">        &quot;ansible_fqdn&quot;: &quot;204-74-211-183.genericreverse.com&quot;, </span><br><span class="line">        &quot;ansible_gather_subset&quot;: [</span><br><span class="line">            &quot;hardware&quot;, </span><br><span class="line">            &quot;network&quot;, </span><br><span class="line">            &quot;virtual&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_hostname&quot;: &quot;centos6&quot;, </span><br><span class="line">        &quot;ansible_interfaces&quot;: [</span><br><span class="line">            &quot;lo&quot;, </span><br><span class="line">            &quot;eth1&quot;, </span><br><span class="line">            &quot;eth0&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_kernel&quot;: &quot;2.6.32-696.el6.x86_64&quot;, </span><br><span class="line">        &quot;ansible_lo&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true, </span><br><span class="line">            &quot;device&quot;: &quot;lo&quot;, </span><br><span class="line">            &quot;features&quot;: &#123;</span><br><span class="line">                &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;generic_receive_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;generic_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;highdma&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;loopback&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;netns_local&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;receive_hashing&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_checksumming&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_filter&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;rx_vlan_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;scatter_gather&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tcp_segmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ip_generic&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv4&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_ipv6&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksum_unneeded&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_checksumming&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_lockless&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_scatter_gather_fraglist&quot;: &quot;on [fixed]&quot;, </span><br><span class="line">                &quot;tx_tcp6_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_tcp_ecn_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_tcp_segmentation&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;tx_vlan_offload&quot;: &quot;off [fixed]&quot;, </span><br><span class="line">                &quot;udp_fragmentation_offload&quot;: &quot;on&quot;, </span><br><span class="line">                &quot;vlan_challenged&quot;: &quot;on [fixed]&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1&quot;, </span><br><span class="line">                &quot;broadcast&quot;: &quot;host&quot;, </span><br><span class="line">                &quot;netmask&quot;: &quot;255.0.0.0&quot;, </span><br><span class="line">                &quot;network&quot;: &quot;127.0.0.0&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;::1&quot;, </span><br><span class="line">                    &quot;prefix&quot;: &quot;128&quot;, </span><br><span class="line">                    &quot;scope&quot;: &quot;host&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;mtu&quot;: 65536, </span><br><span class="line">            &quot;promisc&quot;: false, </span><br><span class="line">            &quot;type&quot;: &quot;loopback&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_lvm&quot;: &#123;</span><br><span class="line">            &quot;lvs&quot;: &#123;&#125;, </span><br><span class="line">            &quot;vgs&quot;: &#123;&#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_machine&quot;: &quot;x86_64&quot;, </span><br><span class="line">        &quot;ansible_machine_id&quot;: &quot;4216c081cfdf095a74b92fee0000003e&quot;, </span><br><span class="line">        &quot;ansible_memfree_mb&quot;: 547, </span><br><span class="line">        &quot;ansible_memory_mb&quot;: &#123;</span><br><span class="line">            &quot;nocache&quot;: &#123;</span><br><span class="line">                &quot;free&quot;: 844, </span><br><span class="line">                &quot;used&quot;: 136</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;real&quot;: &#123;</span><br><span class="line">                &quot;free&quot;: 547, </span><br><span class="line">                &quot;total&quot;: 980, </span><br><span class="line">                &quot;used&quot;: 433</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;swap&quot;: &#123;</span><br><span class="line">                &quot;cached&quot;: 0, </span><br><span class="line">                &quot;free&quot;: 0, </span><br><span class="line">                &quot;total&quot;: 0, </span><br><span class="line">                &quot;used&quot;: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_memtotal_mb&quot;: 980, </span><br><span class="line">        &quot;ansible_mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda2&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 49005813760, </span><br><span class="line">                &quot;size_total&quot;: 52710469632, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda3&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/app&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 49971777536, </span><br><span class="line">                &quot;size_total&quot;: 52710469632, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda1&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/boot&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 3830882304, </span><br><span class="line">                &quot;size_total&quot;: 4093313024, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;device&quot;: &quot;/dev/sda5&quot;, </span><br><span class="line">                &quot;fstype&quot;: &quot;ext4&quot;, </span><br><span class="line">                &quot;mount&quot;: &quot;/script&quot;, </span><br><span class="line">                &quot;options&quot;: &quot;rw&quot;, </span><br><span class="line">                &quot;size_available&quot;: 19883814912, </span><br><span class="line">                &quot;size_total&quot;: 21003628544, </span><br><span class="line">                &quot;uuid&quot;: &quot;N/A&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_nodename&quot;: &quot;centos6.haiyun.com&quot;, </span><br><span class="line">        &quot;ansible_os_family&quot;: &quot;RedHat&quot;, </span><br><span class="line">        &quot;ansible_pkg_mgr&quot;: &quot;yum&quot;, </span><br><span class="line">        &quot;ansible_processor&quot;: [</span><br><span class="line">            &quot;GenuineIntel&quot;, </span><br><span class="line">            &quot;Intel(R) Core(TM) i5-6300HQ CPU @ 2.30GHz&quot;, </span><br><span class="line">            &quot;GenuineIntel&quot;, </span><br><span class="line">            &quot;Intel(R) Core(TM) i5-6300HQ CPU @ 2.30GHz&quot;</span><br><span class="line">        ], </span><br><span class="line">        &quot;ansible_processor_cores&quot;: 1, </span><br><span class="line">        &quot;ansible_processor_count&quot;: 2, </span><br><span class="line">        &quot;ansible_processor_threads_per_core&quot;: 1, </span><br><span class="line">        &quot;ansible_processor_vcpus&quot;: 2, </span><br><span class="line">        &quot;ansible_product_name&quot;: &quot;VMware Virtual Platform&quot;, </span><br><span class="line">        &quot;ansible_product_serial&quot;: &quot;VMware-56 4d b7 19 7b a2 0d 80-50 6a 56 da 9c 23 db a5&quot;, </span><br><span class="line">        &quot;ansible_product_uuid&quot;: &quot;564DB719-7BA2-0D80-506A-56DA9C23DBA5&quot;, </span><br><span class="line">        &quot;ansible_product_version&quot;: &quot;None&quot;, </span><br><span class="line">        &quot;ansible_python&quot;: &#123;</span><br><span class="line">            &quot;executable&quot;: &quot;/usr/bin/python&quot;, </span><br><span class="line">            &quot;has_sslcontext&quot;: false, </span><br><span class="line">            &quot;type&quot;: &quot;CPython&quot;, </span><br><span class="line">            &quot;version&quot;: &#123;</span><br><span class="line">                &quot;major&quot;: 2, </span><br><span class="line">                &quot;micro&quot;: 6, </span><br><span class="line">                &quot;minor&quot;: 6, </span><br><span class="line">                &quot;releaselevel&quot;: &quot;final&quot;, </span><br><span class="line">                &quot;serial&quot;: 0</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;version_info&quot;: [</span><br><span class="line">                2, </span><br><span class="line">                6, </span><br><span class="line">                6, </span><br><span class="line">                &quot;final&quot;, </span><br><span class="line">                0</span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;ansible_python_version&quot;: &quot;2.6.6&quot;, </span><br><span class="line">        &quot;ansible_selinux&quot;: false, </span><br><span class="line">        &quot;ansible_service_mgr&quot;: &quot;upstart&quot;, </span><br><span class="line">        &quot;ansible_ssh_host_key_dsa_public&quot;: &quot;AAAAB3NzaC1kc3MAAACBAPRIWDZiqPIc5FmjLpNJ/9QHSfvMiMv3TxfSiUKsqO3XpX9RAyo+AriszHCydkLS2+44kkzSxEFpGxluDfTkbamOcAs44jJzT7vNU9H8nvMWGGU8YyqiA4Tgp0HbwGGx0mQkqBNaugBicwO1TX8/byHwYtJyuOfXStsQVvChARvhAAAAFQDmEZtIwR11CVBLllpeoyYFLQzfLwAAAIBCnrDJIUeqgzS0iqUt//vOvD4pxajtpbKht4YKiRuOOghSAICpsOaed9SDNEyF12SRnxMeGHazC8pJWscEXh35smEtBG62MakqThYBUKeycIgm3x/M+9s5GKzDCavDzNbjB/8Vi+pvQicQ2E84OO2FYHPhTPdC4kAT+z/NSK1VjAAAAIBNiJTkKRkF8cjMPHnjTYDzy+Q/QcVQIZrUIyIC/TfXDxVypY5d37HZYBPE8PzxmvCCd5VQqr4p6uDvtGHfi2bOENBK/KG3sgU1N7VJ7V9fmNqOBV2EYcDpSkRIQjUFBdXXWdzJOdgw3BWJ8HWAHbwQduZQn+XabUlaiP6F46EZjg==&quot;, </span><br><span class="line">        &quot;ansible_ssh_host_key_rsa_public&quot;: &quot;AAAAB3NzaC1yc2EAAAABIwAAAQEA6dR/9agjYJTDK3qmM+YPpjDVApbmOGntmVbnrQlu2i+wXb7ueedTckV9m+w0OUBuuxgosEhRAOIwM/gsi1nw5WAJCENXUJVPj2fo7Aw0U6xsrwPAuTD574/lB2q8byQPgJIksaTKmMrtZgewmbYXOjhb017lIyJkBCTebOl3bFf76GarC8oYfW3ZCATm7B0bNmw51hJmbn4Q44uGQlF0Eamuq8+tKgkT28xoCBevgnks064zWOrn4HjWeNXyf+TXpx0YgA4d8MzRjq4E/ayA1AoIZSXTBS9eVZlxPe31Y+1zVwjBJe2WURbFldOwGK9f9rpOruNmXAdrP/qEHBDxsw==&quot;, </span><br><span class="line">        &quot;ansible_swapfree_mb&quot;: 0, </span><br><span class="line">        &quot;ansible_swaptotal_mb&quot;: 0, </span><br><span class="line">        &quot;ansible_system&quot;: &quot;Linux&quot;, </span><br><span class="line">        &quot;ansible_system_capabilities&quot;: [], </span><br><span class="line">        &quot;ansible_system_capabilities_enforced&quot;: &quot;False&quot;, </span><br><span class="line">        &quot;ansible_system_vendor&quot;: &quot;VMware, Inc.&quot;, </span><br><span class="line">        &quot;ansible_uptime_seconds&quot;: 34568, </span><br><span class="line">        &quot;ansible_user_dir&quot;: &quot;/root&quot;, </span><br><span class="line">        &quot;ansible_user_gecos&quot;: &quot;root&quot;, </span><br><span class="line">        &quot;ansible_user_gid&quot;: 0, </span><br><span class="line">        &quot;ansible_user_id&quot;: &quot;root&quot;, </span><br><span class="line">        &quot;ansible_user_shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">        &quot;ansible_user_uid&quot;: 0, </span><br><span class="line">        &quot;ansible_userspace_architecture&quot;: &quot;x86_64&quot;, </span><br><span class="line">        &quot;ansible_userspace_bits&quot;: &quot;64&quot;, </span><br><span class="line">        &quot;ansible_virtualization_role&quot;: &quot;guest&quot;, </span><br><span class="line">        &quot;ansible_virtualization_type&quot;: &quot;VMware&quot;, </span><br><span class="line">        &quot;module_setup&quot;: true</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Ansible常用模块二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ansible常用模块一</title>
      <link href="/2017/10/30/Ansible-configure1/"/>
      <url>/2017/10/30/Ansible-configure1/</url>
      <content type="html"><![CDATA[<h3 id="模块帮助"><a href="#模块帮助" class="headerlink" title="模块帮助"></a>模块帮助</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ansible-doc -l      # 获取列表</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible-doc -l        # 列出模块</span><br><span class="line">a10_server                         Manage A10 Networks AX/SoftAX/Thunder/vThunder devices</span><br><span class="line">a10_service_group                  Manage A10 Networks devices&apos; service groups           </span><br><span class="line">a10_virtual_server                 Manage A10 Networks devices&apos; virtual servers          </span><br><span class="line">acl                                Sets and retrieves file ACL information.              </span><br><span class="line">add_host                           add a host (and alternatively a group) to the ansible-...</span><br><span class="line">airbrake_deployment                Notify airbrake about app deployments                 </span><br><span class="line">alternatives                       Manages alternative programs for common commands      </span><br><span class="line">apache2_mod_proxy                  Set and/or get members&apos; attributes of an Apache httpd ...</span><br><span class="line">apache2_module                     enables/disables a module of the Apache2 webserver    </span><br><span class="line">apk                                Manages apk packages                                  </span><br><span class="line">apt                                Manages apt-packages                                  </span><br><span class="line">apt_key                            Add or remove an apt key                              </span><br><span class="line">apt_repository                     Add and remove APT repositories                       </span><br><span class="line">apt_rpm                            apt_rpm package manager                               </span><br><span class="line">asa_acl                            Manage access-lists on a Cisco ASA                    </span><br><span class="line">asa_command                        Run arbitrary commands on Cisco ASA devices.          </span><br><span class="line">asa_config                         Manage Cisco ASA configuration sections               </span><br><span class="line">assemble                           Assembles a configuration file from fragments         </span><br><span class="line">assert                             Asserts given expressions are true                    </span><br><span class="line">async_status                       Obtain status of asynchronous task                    </span><br><span class="line">at                                 Schedule the execution of a command or script file via...</span><br><span class="line">atomic_host                        Manage the atomic host platform                       </span><br><span class="line">atomic_image                       Manage the container images on the atomic host platfor...</span><br><span class="line">authorized_key                     Adds or removes an SSH authorized key                 </span><br><span class="line">。。。省略后面内容</span><br><span class="line"></span><br><span class="line">ansible-doc -s  module_name     # 获取指定模块的使用信息</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible-doc -s at     # -s 指定查看at模块的帮助</span><br><span class="line">- name: Schedule the execution of a command or script file via the at command.</span><br><span class="line">  action: at</span><br><span class="line">      command                # A command to be executed in the future.</span><br><span class="line">      count=                 # The count of units in the future to execute the command or</span><br><span class="line">                               script file.</span><br><span class="line">      script_file            # An existing script file to be executed in the future.</span><br><span class="line">      state                  # The state dictates if the command or script file should be</span><br><span class="line">                               evaluated as present(added) or</span><br><span class="line">                               absent(deleted).</span><br><span class="line">      unique                 # If a matching job is present a new job will not be added.</span><br><span class="line">      units=                 # The type of units in the future to execute the command or</span><br><span class="line">                               script file.</span><br></pre></td></tr></table></figure><h3 id="ansible命令"><a href="#ansible命令" class="headerlink" title="ansible命令"></a>ansible命令</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args] [options]</code></p><h4 id=""><a href="#" class="headerlink" title=""></a><host-pattern></host-pattern></h4><p><code>&lt;host-pattern&gt;</code>指明管控主机，以模式形式表示或者直接给定<code>IP</code>，必须事先定义在文件中；<code>all</code>设置所有</p><h4 id="f-forks"><a href="#f-forks" class="headerlink" title="[-f forks]"></a>[-f forks]</h4><p><code>[-f forks]</code>：指明每批管控多少主机，默认为5个主机一批次</p><h4 id="m-module-name"><a href="#m-module-name" class="headerlink" title="[-m module_name]"></a>[-m module_name]</h4><p><code>[-m module_name]</code>：使用何种模块管理操作，所有的操作都需要通过模块来指定</p><h4 id="a-args"><a href="#a-args" class="headerlink" title="[-a args]"></a>[-a args]</h4><p><code>[-a args]</code>：指明模块专用参数；<code>args</code>一般为<code>key=value</code>格式</p><h3 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h3><p><code>command</code> ：命令模块，默认模块，用于在远程执行命令。</p><h4 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s command</span><br><span class="line">- name: Executes a command on a remote node</span><br><span class="line">  action: command</span><br><span class="line">      chdir                  # cd into this directory before running the command</span><br><span class="line">      creates                # a filename or (since 2.0) glob pattern, when it already exists, this step will *not* be run.</span><br><span class="line">      executable             # change the shell used to execute the command. Should be an absolute path to the executable.</span><br><span class="line">      free_form=             # the command module takes a free form command to run.  There is no parameter actually named &apos;free form&apos;. See the examples!</span><br><span class="line">      removes                # a filename or (since 2.0) glob pattern, when it does not exist, this step will *not* be run.</span><br><span class="line">      warn                   # if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false.</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -a &quot;date&quot;        # 因为command是默认模块，所以可以不用指定</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Mon Oct 30 19:21:52 CST 2017</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Mon Oct 30 19:21:53 CST 2017</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m command -a &quot;/bin/echo hello world&quot;        # 执行命令echo hello world  </span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m command -a &quot;useradd testuser&quot;         # 执行命令添加用户testuser</span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m command -a &quot;userdel -r  testuser&quot;     # 执行命令删除testuser</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible 192.168.8.12 -m command -a &quot;echo hello&quot;       # 也可以指定主机IP来使用</span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h3><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><p><code>state</code>：</p><ul><li><code>present</code>：安装(默认)</li><li><code>absent</code>：移除</li></ul><h4 id="帮助信息-1"><a href="#帮助信息-1" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s cron</span><br><span class="line">- name: Manage cron.d and crontab entries.</span><br><span class="line">  action: cron</span><br><span class="line">      backup                 # If set, create a backup of the crontab before it is modified. The location of the backup is returned in the `backup_file&apos; variable by this module.</span><br><span class="line">      cron_file              # If specified, uses this file instead of an individual user&apos;s crontab. If this is a relative path, it is interpreted with respect to /etc/cron.d. (If it is</span><br><span class="line">                               absolute, it will typically be /etc/crontab). To use the `cron_file&apos; parameter you must specify the `user&apos; as well.</span><br><span class="line">      day                    # Day of the month the job should run ( 1-31, *, */2, etc )</span><br><span class="line">      disabled               # If the job should be disabled (commented out) in the crontab. Only has effect if state=present</span><br><span class="line">      env                    # If set, manages a crontab&apos;s environment variable. New variables are added on top of crontab. &quot;name&quot; and &quot;value&quot; parameters are the name and the value of</span><br><span class="line">                               environment variable.</span><br><span class="line">      hour                   # Hour when the job should run ( 0-23, *, */2, etc )</span><br><span class="line">      insertafter            # Used with `state=present&apos; and `env&apos;. If specified, the environment variable will be inserted after the declaration of specified environment variable.</span><br><span class="line">      insertbefore           # Used with `state=present&apos; and `env&apos;. If specified, the environment variable will be inserted before the declaration of specified environment variable.</span><br><span class="line">      job                    # The command to execute or, if env is set, the value of environment variable. Required if state=present.</span><br><span class="line">      minute                 # Minute when the job should run ( 0-59, *, */2, etc )</span><br><span class="line">      month                  # Month of the year the job should run ( 1-12, *, */2, etc )</span><br><span class="line">      name                   # Description of a crontab entry or, if env is set, the name of environment variable. Required if state=absent. Note that if name is not set and state=present,</span><br><span class="line">                               then a new crontab entry will always be created, regardless of existing ones.</span><br><span class="line">      reboot                 # If the job should be run at reboot. This option is deprecated. Users should use special_time.</span><br><span class="line">      special_time           # Special time specification nickname.</span><br><span class="line">      state                  # Whether to ensure the job or environment variable is present or absent.</span><br><span class="line">      user                   # The specific user whose crontab should be modified.</span><br><span class="line">      weekday                # Day of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m cron  -a &quot;minute=&quot;*/10&quot; job=&apos;/bin/bash /etc/backup.sh&apos; name=&apos;This is a bakcup cron&apos;&quot;       # 指定每10分钟执行/etc/backup.sh，name为This is a bakcup cron</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: [</span><br><span class="line">        &quot;This is a bakcup cron&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: [</span><br><span class="line">        &quot;This is a bakcup cron&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;crontab -l&quot;          # 查看执行状态已经执行成功</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">#Ansible: This is a bakcup cron</span><br><span class="line">*/10 * * * * /bin/bash /etc/backup.sh</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">#Ansible: This is a bakcup cron</span><br><span class="line">*/10 * * * * /bin/bash /etc/backup.sh</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m cron -a &quot;minute=&apos;*/10&apos; job=&apos;/bin/bash /etc/backup.sh&apos; name=&apos;This is a bakcup cron&apos; state=&apos;absent&apos;&quot;        # 删除此计划任务，删除和创建的state是不同，创建为present，删除为absent，其它都是相同的。</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: []</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;crontab -l&quot;          # 计划任务已经被删除</span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h3><h4 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li><code>name</code>：指明创建用户的名字</li></ul><h4 id="帮助信息-2"><a href="#帮助信息-2" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s user</span><br><span class="line">- name: Manage user accounts</span><br><span class="line">  action: user</span><br><span class="line">      append                 # If `yes&apos;, will only add groups, not set them to just the list in `groups&apos;.</span><br><span class="line">      comment                # Optionally sets the description (aka `GECOS&apos;) of user account.</span><br><span class="line">      createhome             # Unless set to `no&apos;, a home directory will be made for the user when the account is created or if the home directory does not exist.</span><br><span class="line">      expires                # An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on Linux and FreeBSD.</span><br><span class="line">      force                  # When used with `state=absent&apos;, behavior is as with `userdel --force&apos;.</span><br><span class="line">      generate_ssh_key       # Whether to generate a SSH key for the user in question. This will *not* overwrite an existing SSH key.</span><br><span class="line">      group                  # Optionally sets the user&apos;s primary group (takes a group name).</span><br><span class="line">      groups                 # Puts the user in this comma-delimited list of groups. When set to the empty string (&apos;groups=&apos;), the user is removed from all groups except the primary group.</span><br><span class="line">      home                   # Optionally set the user&apos;s home directory.</span><br><span class="line">      login_class            # Optionally sets the user&apos;s login class for FreeBSD, OpenBSD and NetBSD systems.</span><br><span class="line">      move_home              # If set to `yes&apos; when used with `home=&apos;, attempt to move the user&apos;s home directory to the specified directory if it isn&apos;t there already.</span><br><span class="line">      name=                  # Name of the user to create, remove or modify.</span><br><span class="line">      non_unique             # Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.</span><br><span class="line">      password               # Optionally set the user&apos;s password to this crypted value.  See the user example in the github examples directory for what this looks like in a playbook. See</span><br><span class="line">                               http://docs.ansible.com/ansible/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module for details on various ways to</span><br><span class="line">                               generate these password values. Note on Darwin system, this value has to be cleartext. Beware of security issues.</span><br><span class="line">      remove                 # When used with `state=absent&apos;, behavior is as with `userdel --remove&apos;.</span><br><span class="line">      seuser                 # Optionally sets the seuser type (user_u) on selinux enabled systems.</span><br><span class="line">      shell                  # Optionally set the user&apos;s shell.</span><br><span class="line">      skeleton               # Optionally set a home skeleton directory. Requires createhome option!</span><br><span class="line">      ssh_key_bits           # Optionally specify number of bits in SSH key to create.</span><br><span class="line">      ssh_key_comment        # Optionally define the comment for the SSH key.</span><br><span class="line">      ssh_key_file           # Optionally specify the SSH key filename. If this is a relative filename then it will be relative to the user&apos;s home directory.</span><br><span class="line">      ssh_key_passphrase     # Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no passphrase.</span><br><span class="line">      ssh_key_type           # Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host.</span><br><span class="line">      state                  # Whether the account should exist or not, taking action if the state is different from what is stated.</span><br><span class="line">      system                 # When creating an account, setting this to `yes&apos; makes the user a system account.  This setting cannot be changed on existing users.</span><br><span class="line">      uid                    # Optionally sets the `UID&apos; of the user.</span><br><span class="line">      update_password        # `always&apos; will update passwords if they differ.  `on_create&apos; will only set the password for newly created users.</span><br></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m user -a &quot;name=&apos;mysql&apos; shell=&apos;/sbin/nologin&apos; uid=&apos;2222&apos; &quot;      # 创建用户mysql，shell为/sbin/nologin，uid为2222</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 2222, </span><br><span class="line">    &quot;home&quot;: &quot;/home/mysql&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;mysql&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/sbin/nologin&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: false, </span><br><span class="line">    &quot;uid&quot;: 2222</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 2222, </span><br><span class="line">    &quot;home&quot;: &quot;/home/mysql&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;mysql&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/sbin/nologin&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: false, </span><br><span class="line">    &quot;uid&quot;: 2222</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m user -a &quot;name=&apos;test&apos; system=&quot;yes&quot;   uid=&apos;321&apos; &quot;       # 创建test用户为系统用户UID为321</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 321, </span><br><span class="line">    &quot;home&quot;: &quot;/home/test&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: true, </span><br><span class="line">    &quot;uid&quot;: 321</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 321, </span><br><span class="line">    &quot;home&quot;: &quot;/home/test&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: true, </span><br><span class="line">    &quot;uid&quot;: 321</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;id test&quot;         # 查看test用户ID信息，321是对的</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">uid=321(test) gid=321(test) groups=321(test)</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">uid=321(test) gid=321(test) groups=321(test)</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m user -a &quot;name=&apos;test&apos; state=&apos;absent&apos;&quot;          # 删除用户tset</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;force&quot;: false, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;remove&quot;: false, </span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;force&quot;: false, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;remove&quot;: false, </span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;id test&quot;         # 确认用户被删除</span><br><span class="line">192.168.8.13 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">id: test: No such user</span><br><span class="line"></span><br><span class="line">192.168.8.12 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">id: test: no such user</span><br></pre></td></tr></table></figure><h3 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h3><h4 id="帮助信息-3"><a href="#帮助信息-3" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s group</span><br><span class="line">- name: Add or remove groups</span><br><span class="line">  action: group</span><br><span class="line">      gid                    # Optional `GID&apos; to set for the group.</span><br><span class="line">      name=                  # Name of the group to manage.</span><br><span class="line">      state                  # Whether the group should be present or not on the remote host.</span><br><span class="line">      system                 # If `yes&apos;, indicates that the group created is a system group.</span><br></pre></td></tr></table></figure><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1  -m group -a &quot;name=&apos;test&apos; gid=&apos;456&apos; system=&apos;yes&apos; state=&apos;present&apos;&quot;        # 添加组test，gid为456，是系统组</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;gid&quot;: 456, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;gid&quot;: 456, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;getent group test&quot;           # test用户已创建</span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">test<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">456:</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">test<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">456:</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m group -a &quot;name=&apos;test&apos; state=&apos;absent&apos;&quot;     # 删除test组</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;getent group test&quot;           # 组已经被删除</span><br><span class="line">192.168.8.13 | FAILED | rc=2 &gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">192.168.8.12 | FAILED | rc=2 &gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h3><p>用来复制文件。</p><h4 id="帮助信息-4"><a href="#帮助信息-4" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]#  ansible-doc -s copy</span><br><span class="line">- name: Copies files to remote locations.</span><br><span class="line">  action: copy</span><br><span class="line">      backup                 # Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.</span><br><span class="line">      content                # When used instead of &apos;src&apos;, sets the contents of a file directly to the specified value. This is for simple values, for anything complex or with formatting</span><br><span class="line">                               please switch to the template module.</span><br><span class="line">      dest=                  # Remote absolute path where the file should be copied to. If src is a directory, this must be a directory too.</span><br><span class="line">      directory_mode         # When doing a recursive copy set the mode for the directories. If this is not set we will use the system defaults. The mode is only set on directories which are</span><br><span class="line">                               newly created, and will not affect those that already existed.</span><br><span class="line">      follow                 # This flag indicates that filesystem links, if they exist, should be followed.</span><br><span class="line">      force                  # the default is `yes&apos;, which will replace the remote file when contents are different than the source. If `no&apos;, the file will only be transferred if the</span><br><span class="line">                               destination does not exist.</span><br><span class="line">      group                  # name of the group that should own the file/directory, as would be fed to `chown&apos;</span><br><span class="line">      mode                   # mode the file or directory should be. For those used to `/usr/bin/chmod&apos; remember that modes are actually octal numbers (like 0644). Leaving off the leading</span><br><span class="line">                               zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx&apos;</span><br><span class="line">                               or `u=rw,g=r,o=r&apos;).</span><br><span class="line">      owner                  # name of the user that should own the file/directory, as would be fed to `chown&apos;</span><br><span class="line">      remote_src             # If False, it will search for src at originating/master machine, if True it will go to the remote/target machine for the src. Default is False. Currently</span><br><span class="line">                               remote_src does not support recursive copying.</span><br><span class="line">      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range&apos;. `_default&apos; feature works as for `seuser&apos;.</span><br><span class="line">      serole                 # role part of SELinux file context, `_default&apos; feature works as for `seuser&apos;.</span><br><span class="line">      setype                 # type part of SELinux file context, `_default&apos; feature works as for `seuser&apos;.</span><br><span class="line">      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default&apos;, it will use the `user&apos; portion of the policy if available</span><br><span class="line">      src                    # Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends</span><br><span class="line">                               with &quot;/&quot;, only inside contents of that directory are copied to destination. Otherwise, if it does not end with &quot;/&quot;, the directory</span><br><span class="line">                               itself with all contents is copied. This behavior is similar to Rsync.</span><br><span class="line">      unsafe_writes          # Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just</span><br><span class="line">                               broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in</span><br><span class="line">                               an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which</span><br><span class="line">                               you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption.</span><br><span class="line">      validate               # The validation command to run before copying into place. The path to the file to validate is passed in via &apos;%s&apos; which must be present as in the example below.</span><br><span class="line">                               The command is passed securely so shell features like expansion and pipes won&apos;t work.</span><br></pre></td></tr></table></figure><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m copy -a &apos;src=/etc/issue dest=/tmp/issue.test owner=root mode=600&apos;     # 复制/etc/issue文件到/tmp/issue.test，属主为root，权限为600</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;checksum&quot;: &quot;4bcf51306f70feaba156df3a40057c7f39291b0e&quot;, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/issue.test&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;md5sum&quot;: &quot;311289dd6930cf0c2c1239db2005977c&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0600&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;size&quot;: 87, </span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1509368382.57-193403017102094/source&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;checksum&quot;: &quot;4bcf51306f70feaba156df3a40057c7f39291b0e&quot;, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/issue.test&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;md5sum&quot;: &quot;311289dd6930cf0c2c1239db2005977c&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0600&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;size&quot;: 87, </span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1509368382.61-233451926726318/source&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;ls -l /tmp/issue.test&quot;       # 查看上面拷贝的issue.text文件，权限是600，属主600，ok</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">-rw------- 1 root root 87 Oct 30 20:59 /tmp/issue.test</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">-rw------- 1 root root 87 Oct 30 20:59 /tmp/issue.test</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m copy -a &apos;content=&quot;hello world\nwww.ihaiyun.cc\n&quot; dest=&apos;/tmp/file&apos;&apos;        # 生成文本内容到指定文件</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;checksum&quot;: &quot;fbc4006923a9a0d66b58d32f363b6b00e33d71db&quot;, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/file&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;md5sum&quot;: &quot;7efb37bf97c9e50207309ec306f2b261&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0644&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;size&quot;: 27, </span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1509369457.92-279733809519544/source&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;checksum&quot;: &quot;fbc4006923a9a0d66b58d32f363b6b00e33d71db&quot;, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/file&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;md5sum&quot;: &quot;7efb37bf97c9e50207309ec306f2b261&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0644&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;size&quot;: 27, </span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1509369457.91-73533303521348/source&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &quot;cat /tmp/file&quot;       # 查看生成的文本，ok</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">hello world</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">hello world</span><br><span class="line">www.ihaiyun.cc</span><br></pre></td></tr></table></figure><h3 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h3><p>用来设定文件属性。</p><h4 id="帮助信息-5"><a href="#帮助信息-5" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s file</span><br><span class="line">- name: Sets attributes of files</span><br><span class="line">  action: file</span><br><span class="line">      follow                 # This flag indicates that filesystem links, if they exist, should be followed.</span><br><span class="line">      force                  # force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to</span><br><span class="line">                               unlink the &quot;path&quot; file and create symlink to the &quot;src&quot; file in place of it).</span><br><span class="line">      group                  # name of the group that should own the file/directory, as would be fed to `chown&apos;</span><br><span class="line">      mode                   # mode the file or directory should be. For those used to `/usr/bin/chmod&apos; remember that modes are actually octal numbers (like 0644). Leaving off the leading</span><br><span class="line">                               zero will likely have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx&apos;</span><br><span class="line">                               or `u=rw,g=r,o=r&apos;).</span><br><span class="line">      owner                  # name of the user that should own the file/directory, as would be fed to `chown&apos;</span><br><span class="line">      path=                  # path to the file being managed.  Aliases: `dest&apos;, `name&apos;</span><br><span class="line">      recurse                # recursively set the specified file attributes (applies only to state=directory)</span><br><span class="line">      selevel                # level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range&apos;. `_default&apos; feature works as for `seuser&apos;.</span><br><span class="line">      serole                 # role part of SELinux file context, `_default&apos; feature works as for `seuser&apos;.</span><br><span class="line">      setype                 # type part of SELinux file context, `_default&apos; feature works as for `seuser&apos;.</span><br><span class="line">      seuser                 # user part of SELinux file context. Will default to system policy, if applicable. If set to `_default&apos;, it will use the `user&apos; portion of the policy if available</span><br><span class="line">      src                    # path of the file to link to (applies only to `state=link&apos;). Will accept absolute, relative and nonexisting paths. Relative paths are not expanded.</span><br><span class="line">      state                  # If `directory&apos;, all immediate subdirectories will be created if they do not exist, since 1.7 they will be created with the supplied permissions. If `file&apos;, the</span><br><span class="line">                               file will NOT be created if it does not exist, see the [copy] or [template] module if you want that behavior.  If `link&apos;, the</span><br><span class="line">                               symbolic link will be created or changed. Use `hard&apos; for hardlinks. If `absent&apos;, directories will be recursively deleted, and</span><br><span class="line">                               files or symlinks will be unlinked. Note that [file] will not fail if the `path&apos; does not exist as the state did not change. If</span><br><span class="line">                               `touch&apos; (new in 1.4), an empty file will be created if the `path&apos; does not exist, while an existing file or directory will</span><br><span class="line">                               receive updated file access and modification times (similar to the way `touch` works from the command line).</span><br><span class="line">      unsafe_writes          # Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just</span><br><span class="line">                               broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in</span><br><span class="line">                               an unsafe manner. This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which</span><br><span class="line">                               you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption.</span><br></pre></td></tr></table></figure><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m file -a &apos;path=&quot;/tmp/file&quot; owner=&quot;mysql&quot; group=&quot;mysql&quot; mode=&quot;400&quot;&apos;         # 修改/tmp/file文件，用户和组为mysql，权限为400</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;gid&quot;: 2222, </span><br><span class="line">    &quot;group&quot;: &quot;mysql&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0400&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;mysql&quot;, </span><br><span class="line">    &quot;path&quot;: &quot;/tmp/file&quot;, </span><br><span class="line">    &quot;size&quot;: 27, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 2222</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;gid&quot;: 2222, </span><br><span class="line">    &quot;group&quot;: &quot;mysql&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0400&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;mysql&quot;, </span><br><span class="line">    &quot;path&quot;: &quot;/tmp/file&quot;, </span><br><span class="line">    &quot;size&quot;: 27, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 2222</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -a &apos;ls -l /tmp/file&apos;         # 查看/tmp/file文件，用户和组为mysql，权限为400</span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">-r-------- 1 mysql mysql 27 Oct 30 21:17 /tmp/file</span><br><span class="line"></span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">-r-------- 1 mysql mysql 27 Oct 30 21:17 /tmp/file</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ansible web1 -m file -m file -a &apos;src=&quot;/etc/fstab&quot; path=&quot;/tmp/fstab&quot; state=&quot;link&quot;&apos;         # 创建符号链接文件</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/fstab&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0777&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;size&quot;: 10, </span><br><span class="line">    &quot;src&quot;: &quot;/etc/fstab&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;link&quot;, </span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/fstab&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0777&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;size&quot;: 10, </span><br><span class="line">    &quot;src&quot;: &quot;/etc/fstab&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;link&quot;, </span><br><span class="line">    &quot;uid&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">[root@centos6 ~]# ansible web1 -a &apos;ls -l /tmp/fstab&apos;        # 确认创建</span><br><span class="line">192.168.8.13 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">lrwxrwxrwx 1 root root 10 Oct 30 21:31 /tmp/fstab -&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line">192.168.8.12 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">lrwxrwxrwx 1 root root 10 Oct 30 21:31 /tmp/fstab -&gt; /etc/fstab</span><br></pre></td></tr></table></figure><h3 id="ping模块"><a href="#ping模块" class="headerlink" title="ping模块"></a>ping模块</h3><p>测试远程主机的连通性。</p><h4 id="帮助信息-6"><a href="#帮助信息-6" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible-doc -s ping</span><br><span class="line">- name: Try to connect to host, verify a usable python and return `pong&apos; on success.</span><br><span class="line">  action: ping</span><br></pre></td></tr></table></figure><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m ping          # 测试如果能ping同就pong</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Ansible常用模块一 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ansible安装与使用</title>
      <link href="/2017/10/30/Ansible-Install/"/>
      <url>/2017/10/30/Ansible-Install/</url>
      <content type="html"><![CDATA[<h3 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h3><p>编辑(或创建)<code>/etc/ansible/hosts</code> 并在其中加入一个或多个远程系统.你的<code>public SSH key</code>必须在这些系统的<code>authorized_keys</code>中:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ssh-keygen -t rsa             # 创建密钥</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">9e:f9:9b:5b:48:51:d8:2b:c3:81:df:f6:b8:2c:3e:b9 root@centos7.haiyun.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|         . o.    |</span><br><span class="line">|        . o..    |</span><br><span class="line">|         o.o .   |</span><br><span class="line">|          =.+    |</span><br><span class="line">|        S .+ o   |</span><br><span class="line">|       . + .. .  |</span><br><span class="line">|        + .o..   |</span><br><span class="line">|         .+oo    |</span><br><span class="line">|         .E*     |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ssh-copy-id 192.168.8.14          # 将公钥拷贝到要管理的主机</span><br><span class="line">The authenticity of host &apos;192.168.8.14 (192.168.8.14)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 64:c7:ef:02:89:b1:33:af:14:0f:83:5b:83:f1:01:c4.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;192.168.8.14&apos; (RSA) to the list of known hosts.</span><br><span class="line">root@192.168.8.14&apos;s password: </span><br><span class="line">Now try logging into the machine, with &quot;ssh &apos;192.168.8.14&apos;&quot;, and check in:</span><br><span class="line"></span><br><span class="line">  .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">to make sure we haven&apos;t added extra keys that you weren&apos;t expecting.</span><br></pre></td></tr></table></figure><h3 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h3><h4 id="配置aliyun-epel-yum源"><a href="#配置aliyun-epel-yum源" class="headerlink" title="配置aliyun epel yum源"></a>配置aliyun epel yum源</h4><p><strong>注意：</strong> 安装<code>Ansible</code>可以通过<code>yum</code>的方式或源码编译安装。<code>yum</code>安装是使用<code>epel</code>源的。下面是关于<code>aliyun</code> <code>epel</code> 的<code>yum</code>配置。大家根据自己的服务器版本自行选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 yum.repos.d]# wget -O /etc/yum.repos.d/epel-6.repo http://mirrors.aliyun.com/repo/epel-6.repo          # 下载centos6的epel yum源</span><br><span class="line">--2017-10-30 17:26:45--  http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line">Resolving mirrors.aliyun.com... 111.7.187.235, 111.7.187.217, 111.7.187.219, ...</span><br><span class="line">Connecting to mirrors.aliyun.com|111.7.187.235|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1083 (1.1K) [application/octet-stream]</span><br><span class="line">Saving to: “/etc/yum.repos.d/epel-6.repo”</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 1,083       --.-K/s   in 0s      </span><br><span class="line"></span><br><span class="line">2017-10-30 17:26:47 (91.2 MB/s) - “/etc/yum.repos.d/epel-6.repo” saved [1083/1083]</span><br><span class="line"></span><br><span class="line">[root@centos6 yum.repos.d]# wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo          # 下载centos7的epel yum源</span><br><span class="line">--2017-10-30 17:27:04--  http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">Resolving mirrors.aliyun.com... 111.7.187.217, 111.7.187.219, 111.7.187.234, ...</span><br><span class="line">Connecting to mirrors.aliyun.com|111.7.187.217|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1084 (1.1K) [application/octet-stream]</span><br><span class="line">Saving to: “/etc/yum.repos.d/epel-7.repo”</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 1,084       --.-K/s   in 0s      </span><br><span class="line"></span><br><span class="line">2017-10-30 17:27:04 (176 MB/s) - “/etc/yum.repos.d/epel-7.repo” saved [1084/1084]</span><br><span class="line"></span><br><span class="line">[root@centos6 yum.repos.d]# cat epel-6.repo             # 查看6的epel源</span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch</span><br><span class="line">baseurl=http://mirrors.aliyun.com/epel/6/$basearch</span><br><span class="line">        http://mirrors.aliyuncs.com/epel/6/$basearch</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line"> </span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Debug</span><br><span class="line">baseurl=http://mirrors.aliyun.com/epel/6/$basearch/debug</span><br><span class="line">        http://mirrors.aliyuncs.com/epel/6/$basearch/debug</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line">gpgcheck=0</span><br><span class="line"> </span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Source</span><br><span class="line">baseurl=http://mirrors.aliyun.com/epel/6/SRPMS</span><br><span class="line">        http://mirrors.aliyuncs.com/epel/6/SRPMS</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[root@centos6 yum.repos.d]# cat epel-7.repo         # 查看7的epel源</span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch</span><br><span class="line">baseurl=http://mirrors.aliyun.com/epel/7/$basearch</span><br><span class="line">        http://mirrors.aliyuncs.com/epel/7/$basearch</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"> </span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch - Debug</span><br><span class="line">baseurl=http://mirrors.aliyun.com/epel/7/$basearch/debug</span><br><span class="line">        http://mirrors.aliyuncs.com/epel/7/$basearch/debug</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=0</span><br><span class="line"> </span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch - Source</span><br><span class="line">baseurl=http://mirrors.aliyun.com/epel/7/SRPMS</span><br><span class="line">        http://mirrors.aliyuncs.com/epel/7/SRPMS</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=0</span><br><span class="line">[root@centos6 yum.repos.d]#</span><br></pre></td></tr></table></figure><h4 id="安装Ansible"><a href="#安装Ansible" class="headerlink" title="安装Ansible"></a>安装Ansible</h4><p>此处，采用<code>yum</code>方式来安装<code>ansible</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# yum install -y ansible     </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# yum info ansible      # 查看ansible相关信息</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">file://misc/cd/repodata/repomd.xml: [Errno 14] Could not open/read file://misc/cd/repodata/repomd.xml</span><br><span class="line">Trying other mirror.</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : ansible</span><br><span class="line">Arch        : noarch</span><br><span class="line">Version     : 2.2.1.0</span><br><span class="line">Release     : 1.el6</span><br><span class="line">Size        : 22 M</span><br><span class="line">Repo        : installed</span><br><span class="line">From repo   : epel</span><br><span class="line">Summary     : SSH-based configuration management, deployment, and task execution system</span><br><span class="line">URL         : http://ansible.com</span><br><span class="line">License     : GPLv3+</span><br><span class="line">Description : </span><br><span class="line">            : Ansible is a radically simple model-driven configuration management,</span><br><span class="line">            : multi-node deployment, and remote task execution system. Ansible works</span><br><span class="line">            : over SSH and does not require any software or daemons to be installed</span><br><span class="line">            : on remote nodes. Extension modules can be written in any language and</span><br><span class="line">            : are transferred to managed machines automatically.</span><br></pre></td></tr></table></figure><h3 id="使用ansible"><a href="#使用ansible" class="headerlink" title="使用ansible"></a>使用ansible</h3><h4 id="导入公钥"><a href="#导入公钥" class="headerlink" title="导入公钥"></a>导入公钥</h4><p><a href="http://www.ihaiyun.cc/2017/10/30/Expect-Copy-Ssh-Key-2017-10-30/">关于导入公钥大家可以参考我的另外一篇博客：批量拷贝SSH密钥</a></p><h4 id="定义Host-Inventory"><a href="#定义Host-Inventory" class="headerlink" title="定义Host Inventory"></a>定义Host Inventory</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# vim /etc/ansible/hosts </span><br><span class="line"></span><br><span class="line"># This is the default ansible &apos;hosts&apos; file.</span><br><span class="line">#</span><br><span class="line"># It should live in /etc/ansible/hosts</span><br><span class="line">#</span><br><span class="line">#   - Comments begin with the &apos;#&apos; character</span><br><span class="line">#   - Blank lines are ignored</span><br><span class="line">#   - Groups of hosts are delimited by [header] elements</span><br><span class="line">#   - You can enter hostnames or ip addresses</span><br><span class="line">#   - A hostname/ip can be a member of multiple groups</span><br><span class="line"></span><br><span class="line"># Ex 1: Ungrouped hosts, specify before any group headers.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[web1]</span><br><span class="line">192.168.8.12 </span><br><span class="line">192.168.8.13</span><br></pre></td></tr></table></figure><h4 id="第一条命令"><a href="#第一条命令" class="headerlink" title="第一条命令"></a>第一条命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ansible web1 -m ping      # 对web1定义的主机ping一下，如果成功了就返回pong</span><br><span class="line">192.168.8.12 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">192.168.8.13 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Ansible安装与使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>脚本实例四：批量拷贝SSH密钥</title>
      <link href="/2017/10/30/Expect-Copy-Ssh-Key/"/>
      <url>/2017/10/30/Expect-Copy-Ssh-Key/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通常管理<code>Linux</code>服务器时，使用 <code>SSH Key</code>管理可能会更方便一点。如果机器特别多的话，那么<code>cp</code>密钥又是个问题。利用<code>expect</code>就可以实现批量<code>cp</code>密钥。</p><a id="more"></a><h3 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# vim expect.sh             # 此脚本使用来创建密钥，安装expect</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"># File name:    expect.sh</span><br><span class="line"># Revision:     2.0</span><br><span class="line"># Date:         2017-10-30 11:02:54</span><br><span class="line"># Author:       houhaiyun</span><br><span class="line"># Email:        houhaiyun18@163.com</span><br><span class="line"># Website:      http://www.ihaiyun.cc/</span><br><span class="line"># Copyright:    @2017 haiyun</span><br><span class="line"># License:      LGPL v3</span><br><span class="line"># Description:  </span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions        # 使用系统的functions函数</span><br><span class="line"></span><br><span class="line">null=&apos;/dev/null&apos;        # 定义变量null=/dev/null</span><br><span class="line"></span><br><span class="line">CHK () &#123;        # 定义检查脚本</span><br><span class="line">    if [ $? -eq 0 ] ; then      </span><br><span class="line">        action &quot;$1&quot;  /bin/true</span><br><span class="line">    else</span><br><span class="line">        action &quot;$1&quot; /bin/false</span><br><span class="line">    fi  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Install_expect () &#123;     # 安装expect脚本</span><br><span class="line">    rpm -q expect &amp;&gt; $null</span><br><span class="line">    </span><br><span class="line">    if [ $? -ne 0 ] ; then </span><br><span class="line">        yum  install -y expect &amp;&gt; $null</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    CHK &quot;Install expect&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SSH-Key () &#123;        # 定义生成ssh-key</span><br><span class="line">    if [ -f ~/.ssh/id_rsa ] ; then </span><br><span class="line">    return 2</span><br><span class="line">    fi  </span><br><span class="line">    ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa &amp;&gt; $null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    CHK &quot;Generating public/private rsa key pair&quot;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">Copy () &#123;       # 通过调用expect脚本来实现cp密钥到你定义的主机</span><br><span class="line">    for i in &#123;11..14&#125; ; do</span><br><span class="line">    /usr/bin/expect expect root 192.168.8.$i &amp;&gt; $null</span><br><span class="line">    CHK &quot;Copy ssh-key 192.168.8.$i&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Install_expect</span><br><span class="line">SSH-Key</span><br><span class="line">Copy</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# vim expect        # except脚本如下</span><br><span class="line"></span><br><span class="line">#!/usr/bin/expect</span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"># File name:    except</span><br><span class="line"># Revision:     2.0</span><br><span class="line"># Date:         2017-10-30 11:24:45</span><br><span class="line"># Author:       houhaiyun</span><br><span class="line"># Email:        houhaiyun18@163.com</span><br><span class="line"># Website:      http://www.ihaiyun.cc/</span><br><span class="line"># Copyright:    @2017 haiyun</span><br><span class="line"># License:      LGPL v3</span><br><span class="line"># Description:  </span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">if &#123; $argc != 2 &#125; &#123;         # 判断输入参数，如果不等于2就提示用法</span><br><span class="line">    send_user &quot;usage: expect expect user ip \n&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set user [lindex $argv 0]       # 定义变量user</span><br><span class="line">set ip [lindex $argv 1]         # 定义变量ip</span><br><span class="line">set password &quot;haiyun&quot;           # 定义密码为haiyun</span><br><span class="line"></span><br><span class="line">spawn ssh-copy-id   $user@$ip       # 执行命令ssh-copy-id</span><br><span class="line">expect &#123;</span><br><span class="line">    &quot;yes/no&quot;    &#123;send &quot;yes\r&quot;;exp_continue&#125;         # 捕获yes/no，捕获到后输入回车</span><br><span class="line">    &quot;*password&quot; &#123;send &quot;$password\r&quot;&#125;                # 捕获到password输入密码</span><br><span class="line">&#125;</span><br><span class="line">expect eof          # 结束</span><br></pre></td></tr></table></figure><h3 id="脚本使用"><a href="#脚本使用" class="headerlink" title="脚本使用"></a>脚本使用</h3><p><strong>注意：</strong>  上面是两个脚本。通过<code>expect.sh</code>来调用<code>expect</code>。所以需要将两个脚本放到同一目录下。当然也可以放到不同目录，那就需要修改一下了。</p><p>本脚任然不够完善，大家可以根据需求来自行修改。也可以给我留言哦，帮助别人解决困难和痛苦是人生最大的幸福和快乐<code>^_^</code>。</p><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><p>通过以上两个脚本来实现对<code>192.168.8.11-14</code>的批量密钥拷贝。</p><center><img src="https://houhaiyun.github.io/img/images/Expect-Copy-Ssh-Key-1.gif" title="脚本执行"></center><h3 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h3><p>脚本内容如下，拷贝即可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# vim expect</span><br><span class="line"></span><br><span class="line">#!/usr/bin/expect</span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"># File name:    except</span><br><span class="line"># Revision:     2.0</span><br><span class="line"># Date:         2017-10-30 11:24:45</span><br><span class="line"># Author:       houhaiyun</span><br><span class="line"># Email:        houhaiyun18@163.com</span><br><span class="line"># Website:      http://www.ihaiyun.cc/</span><br><span class="line"># Copyright:    @2017 haiyun</span><br><span class="line"># License:      LGPL v3</span><br><span class="line"># Description:  </span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">if &#123; $argc != 2 &#125; &#123; </span><br><span class="line">    send_user &quot;usage: expect expect user ip \n&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set user [lindex $argv 0]  </span><br><span class="line">set ip [lindex $argv 1]</span><br><span class="line">#set file [lindex $argv 2]</span><br><span class="line">set password &quot;haiyun&quot;</span><br><span class="line"></span><br><span class="line">spawn ssh-copy-id   $user@$ip </span><br><span class="line">expect &#123;</span><br><span class="line">    &quot;yes/no&quot;    &#123;send &quot;yes\r&quot;;exp_continue&#125;</span><br><span class="line">    &quot;*password&quot; &#123;send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# vim expect.sh </span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"># File name:    expect.sh</span><br><span class="line"># Revision:     2.0</span><br><span class="line"># Date:         2017-10-30 11:02:54</span><br><span class="line"># Author:       houhaiyun</span><br><span class="line"># Email:        houhaiyun18@163.com</span><br><span class="line"># Website:      http://www.ihaiyun.cc/</span><br><span class="line"># Copyright:    @2017 haiyun</span><br><span class="line"># License:      LGPL v3</span><br><span class="line"># Description:  </span><br><span class="line">#——————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">null=&apos;/dev/null&apos;</span><br><span class="line"></span><br><span class="line">CHK () &#123;</span><br><span class="line">    if [ $? -eq 0 ] ; then </span><br><span class="line">        action &quot;$1&quot;  /bin/true</span><br><span class="line">    else</span><br><span class="line">        action &quot;$1&quot; /bin/false</span><br><span class="line">    fi  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Install_expect () &#123;</span><br><span class="line">    rpm -q expect &amp;&gt; $null</span><br><span class="line">    </span><br><span class="line">    if [ $? -ne 0 ] ; then </span><br><span class="line">        yum  install -y expect &amp;&gt; $null</span><br><span class="line">    fi  </span><br><span class="line">    </span><br><span class="line">    CHK &quot;Install expect&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SSH-Key () &#123;</span><br><span class="line">    if [ -f ~/.ssh/id_rsa ] ; then </span><br><span class="line">    return 2</span><br><span class="line">    fi  </span><br><span class="line">    ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa &amp;&gt; $null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    CHK &quot;Generating public/private rsa key pair&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Copy () &#123;</span><br><span class="line">    for i in &#123;11..14&#125; ; do</span><br><span class="line">    /usr/bin/expect expect root 192.168.8.$i &amp;&gt; $null</span><br><span class="line">    CHK &quot;Copy ssh-key 192.168.8.$i&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Install_expect</span><br><span class="line">SSH-Key</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Shell脚本 </category>
          
          <category> 脚本实例四：批量拷贝SSH密钥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本实例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现Nginx+KeepAlived单主模式</title>
      <link href="/2017/10/29/KeepAlived-Danzhu-Nginx/"/>
      <url>/2017/10/29/KeepAlived-Danzhu-Nginx/</url>
      <content type="html"><![CDATA[<h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><center><img src="https://houhaiyun.github.io/img/images/KeepAlived-Danzhu-Nginx-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>功能</th></tr></thead><tbody><tr><td>Nginx+KeepALived(master)</td><td>RIP：192.168.8.138 VIP：192.168.8.8</td><td>实现Nginx高可用</td></tr><tr><td>Nginx+KeepALived(backup)</td><td>RIP：192.168.8.140 VIP：192.168.8.8</td><td>实现Nginx高可用</td></tr><tr><td>Apache1</td><td>RIP：192.168.8.128 VIP：192.168.8.8</td><td>提供web服务</td></tr><tr><td>Apache2</td><td>RIP：192.168.8.136 VIP：192.168.8.8</td><td>提供web服务</td></tr><tr><td>测试调度</td><td>192.168.8.139</td><td>测试客户端(可选)</td></tr></tbody></table><a id="more"></a><h3 id="Real-Server-配置"><a href="#Real-Server-配置" class="headerlink" title="Real Server 配置"></a>Real Server 配置</h3><h4 id="Apache1配置"><a href="#Apache1配置" class="headerlink" title="Apache1配置"></a>Apache1配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@Web1 ~]# hostname Apache1</span><br><span class="line">[root@Apache1 ~]# ifconfig      # 查看IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:47719 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:37888 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:3929892 (3.7 MiB)  TX bytes:5227016 (4.9 MiB)</span><br><span class="line"></span><br><span class="line">[root@Apache1 ~]# yum -y  install httpd</span><br><span class="line">[root@Apache1 ~]# echo `hostname` &gt; /var/www/html/index.html </span><br><span class="line">[root@Apache1 ~]# cat /var/www/html/index.html</span><br><span class="line">Apache1</span><br><span class="line">[root@Apache1 ~]# service httpd start</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@Apache1 ~]# curl 192.168.8.128</span><br><span class="line">Apache1</span><br></pre></td></tr></table></figure><h4 id="Apache2配置"><a href="#Apache2配置" class="headerlink" title="Apache2配置"></a>Apache2配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@Web2 ~]# hostname Apache2</span><br><span class="line">[root@Apache2 ~]# ifconfig </span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:48342 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:38477 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:3981864 (3.7 MiB)  TX bytes:5292854 (5.0 MiB)</span><br><span class="line"></span><br><span class="line">[root@Apache2 ~]# echo `hostname` &gt; /var/www/html/index.html </span><br><span class="line">[root@Apache2 ~]# service httpd start</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@Apache2 ~]# cat /var/www/html/index.html</span><br><span class="line">Apache2</span><br><span class="line">[root@Apache2 ~]# curl 192.168.8.136</span><br><span class="line">Apache2</span><br></pre></td></tr></table></figure><h3 id="Nginx服务器配置"><a href="#Nginx服务器配置" class="headerlink" title="Nginx服务器配置"></a>Nginx服务器配置</h3><p><a href="http://www.ihaiyun.cc/2017/10/28/Nginx-ngx-stream-core-module/">关于Nginx代理，可以参考我的另外一篇文章</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># master配置</span><br><span class="line">[root@master ~]# yum install -y nginx</span><br><span class="line">[root@master ~]# vim /etc/nginx/nginx.conf          # 此处需要注意默认配置文件设置了default_server,我们需要把默认的default_server改成现在的，切记。</span><br><span class="line">http &#123;</span><br><span class="line">    upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.136:80 weight=2 ;</span><br><span class="line">    &#125;   </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://web;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@master ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@master ~]# nginx </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line">[root@backup ~]# yum install -y nginx</span><br><span class="line">[root@backup ~]# vim /etc/nginx/nginx.conf        # 此处需要注意默认配置文件设置了default_server,我们需要把默认的default_server改成现在的，切记。  </span><br><span class="line">http &#123;</span><br><span class="line">    upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.136:80 weight=2 ;</span><br><span class="line">    &#125;   </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://web;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@backup ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@backup ~]# nginx</span><br></pre></td></tr></table></figure><h3 id="编写keepalived通知脚本"><a href="#编写keepalived通知脚本" class="headerlink" title="编写keepalived通知脚本"></a>编写keepalived通知脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># master 脚本：此脚本用来如果发生切换模式就发送邮件给用户</span><br><span class="line">[root@master ~]# vim /etc/keepalived/notify.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">#</span><br><span class="line">contact=&apos;root@localhost&apos;</span><br><span class="line">notify() &#123;</span><br><span class="line">mailsubject=&quot;$(hostname) to be $1, vip floating&quot;</span><br><span class="line">mailbody=&quot;$(date +&apos;%F %T&apos;): vrrp transition, $(hostname) changed to be $1&quot;</span><br><span class="line">echo &quot;$mailbody&quot; | mail -s &quot;$mailsubject&quot; $contact</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">master)</span><br><span class="line">notify master</span><br><span class="line">;;</span><br><span class="line">backup)</span><br><span class="line">notify backup</span><br><span class="line">;;</span><br><span class="line">fault)</span><br><span class="line">notify fault</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $(basename $0) &#123;master|backup|fault&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># backup 脚本：此脚本用来如果发生切换模式就发送邮件给用户。和上面脚本内容是相同的</span><br><span class="line">[root@master ~]# vim /etc/keepalived/notify.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">#</span><br><span class="line">contact=&apos;root@localhost&apos;</span><br><span class="line">notify() &#123;</span><br><span class="line">mailsubject=&quot;$(hostname) to be $1, vip floating&quot;</span><br><span class="line">mailbody=&quot;$(date +&apos;%F %T&apos;): vrrp transition, $(hostname) changed to be $1&quot;</span><br><span class="line">echo &quot;$mailbody&quot; | mail -s &quot;$mailsubject&quot; $contact</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">master)</span><br><span class="line">notify master</span><br><span class="line">;;</span><br><span class="line">backup)</span><br><span class="line">notify backup</span><br><span class="line">;;</span><br><span class="line">fault)</span><br><span class="line">notify fault</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $(basename $0) &#123;master|backup|fault&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="KeepAlived配置"><a href="#KeepAlived配置" class="headerlink" title="KeepAlived配置"></a>KeepAlived配置</h3><h4 id="master配置"><a href="#master配置" class="headerlink" title="master配置"></a>master配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;   </span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;killall -0 nginx &quot;</span><br><span class="line">    interval 1</span><br><span class="line">    weight -20 </span><br><span class="line">    fall 3</span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 100 </span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;   </span><br><span class="line">    notify_master &quot;/etc/keepalived/notify.sh master&quot;</span><br><span class="line">    notify_backup &quot;/etc/keepalived/notify.sh backup&quot;</span><br><span class="line">    notify_fault &quot;/etc/keepalived/notify.sh fault&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="backup配置"><a href="#backup配置" class="headerlink" title="backup配置"></a>backup配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;   </span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;killall -0 nginx &amp;&amp; exit 0 || exit 1&quot;</span><br><span class="line">    interval 1</span><br><span class="line">    weight -20 </span><br><span class="line">    fall 2</span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_down</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;   </span><br><span class="line">    notify_master &quot;/etc/keepalived/notify.sh master&quot;</span><br><span class="line">    notify_backup &quot;/etc/keepalived/notify.sh backup&quot;</span><br><span class="line">    notify_fault &quot;/etc/keepalived/notify.sh fault&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="直接测试"><a href="#直接测试" class="headerlink" title="直接测试"></a>直接测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 在master和backup上面启动keepalived</span><br><span class="line">[root@master ~]# systemctl start keepalived</span><br><span class="line">[root@backup ~]# systemctl start keepalived</span><br><span class="line"></span><br><span class="line">[root@master ~]# ifconfig               # VIP已经飘到master上面了，因为master的优先级高</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 100742  bytes 12189024 (11.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 122068  bytes 10944494 (10.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@User ~]# curl 192.168.8.8         # 测试，可以访问</span><br><span class="line">Apache2</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache1</span><br></pre></td></tr></table></figure><h4 id="停止master上面的nginx测试"><a href="#停止master上面的nginx测试" class="headerlink" title="停止master上面的nginx测试"></a>停止master上面的nginx测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl stop nginx </span><br><span class="line">[root@master ~]# ifconfig           # master上面的VIP已经没有</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 100874  bytes 12201538 (11.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 122295  bytes 10965872 (10.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig           # IP已经飘到backup</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 136056  bytes 16820538 (16.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 167644  bytes 13735575 (13.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@User ~]# curl 192.168.8.8         # 测试，可以访问</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br></pre></td></tr></table></figure><h4 id="启动master上面的nginx测试"><a href="#启动master上面的nginx测试" class="headerlink" title="启动master上面的nginx测试"></a>启动master上面的nginx测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# nginx</span><br><span class="line">[root@master ~]# ifconfig           # IP已经飘回来了</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 101135  bytes 12219498 (11.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 122372  bytes 10975972 (10.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@User ~]# curl 192.168.8.8         # 测试，可以访问</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br></pre></td></tr></table></figure><h4 id="停止master上面的keepalived测试"><a href="#停止master上面的keepalived测试" class="headerlink" title="停止master上面的keepalived测试"></a>停止master上面的keepalived测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl stop keepalived          # IP已经飘没了，是对的</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 101216  bytes 12225968 (11.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 122497  bytes 10988370 (10.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig           # VIP已经切换</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 136290  bytes 16839058 (16.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 167907  bytes 13768733 (13.1 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@User ~]# curl 192.168.8.8         # 测试，可以访问</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache1</span><br><span class="line">[root@User ~]# curl 192.168.8.8</span><br><span class="line">Apache2</span><br></pre></td></tr></table></figure><h4 id="查看发送邮件是否发送成功"><a href="#查看发送邮件是否发送成功" class="headerlink" title="查看发送邮件是否发送成功"></a>查看发送邮件是否发送成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mail               # 在master上面查看邮件，ok</span><br><span class="line">Heirloom Mail version 12.5 7/5/10.  Type ? for help.</span><br><span class="line">&quot;/var/spool/mail/root&quot;: 15 messages 3 new 11 unread</span><br><span class="line">    1 keepalived@localhost  Sun Oct 29 13:32  18/664   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line">    2 keepalived@localhost  Sun Oct 29 13:32  18/644   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line">    3 keepalived@localhost  Sun Oct 29 17:45  18/664   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line">    4 keepalived@localhost  Sun Oct 29 17:45  18/644   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line"> U  5 root                  Sun Oct 29 19:58  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> U  6 root                  Sun Oct 29 20:02  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> U  7 root                  Sun Oct 29 20:12  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> U  8 root                  Sun Oct 29 20:22  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> U  9 root                  Sun Oct 29 20:26  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> U 10 root                  Sun Oct 29 20:28  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> U 11 root                  Sun Oct 29 20:28  19/720   &quot;centos7.haiyum.com to be backup, v&quot;</span><br><span class="line"> U 12 root                  Sun Oct 29 20:29  19/720   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line">&gt;N 13 root                  Sun Oct 29 20:58  18/710   &quot;centos7.haiyum.com to be backup, v&quot;</span><br><span class="line"> N 14 root                  Sun Oct 29 21:00  18/710   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line"> N 15 root                  Sun Oct 29 21:03  18/710   &quot;centos7.haiyum.com to be master, v&quot;</span><br><span class="line">&amp; 15</span><br><span class="line">Message 15:</span><br><span class="line">From root@centos7.haiyum.com  Sun Oct 29 21:03:39 2017</span><br><span class="line">Return-Path: &lt;root@centos7.haiyum.com&gt;</span><br><span class="line">X-Original-To: root@localhost</span><br><span class="line">Delivered-To: root@localhost.haiyum.com</span><br><span class="line">Date: Sun, 29 Oct 2017 21:03:39 +0800</span><br><span class="line">To: root@localhost.haiyum.com</span><br><span class="line">Subject: centos7.haiyum.com to be master, vip floating</span><br><span class="line">User-Agent: Heirloom mailx 12.5 7/5/10</span><br><span class="line">Content-Type: text/plain; charset=us-ascii</span><br><span class="line">From: root@centos7.haiyum.com (root)</span><br><span class="line">Status: R</span><br><span class="line"></span><br><span class="line">2017-10-29 21:03:39: vrrp transition, centos7.haiyum.com changed to be master</span><br><span class="line"></span><br><span class="line">&amp; quit</span><br><span class="line">Held 15 messages in /var/spool/mail/root</span><br><span class="line">You have mail in /var/spool/mail/root</span><br><span class="line"></span><br><span class="line">[root@backup ~]# mail           # 提示命令没找到</span><br><span class="line">bash: mail: command not found</span><br><span class="line">[root@backup ~]# yum install -y mailx       # 安装mailx包</span><br><span class="line">[root@backup ~]# mail           # 查看邮件，ok</span><br><span class="line">Heirloom Mail version 12.5 7/5/10.  Type ? for help.</span><br><span class="line">&quot;/var/spool/mail/root&quot;: 8 messages 8 new</span><br><span class="line">&gt;N  1 keepalived@localhost  Sun Oct 29 13:31  17/646   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line"> N  2 keepalived@localhost  Sun Oct 29 13:31  17/626   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line"> N  3 keepalived@localhost  Sun Oct 29 16:06  17/646   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line"> N  4 keepalived@localhost  Sun Oct 29 16:06  17/626   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line"> N  5 keepalived@localhost  Sun Oct 29 16:08  17/646   &quot;[master] Realserver [192.168.8.136&quot;</span><br><span class="line"> N  6 keepalived@localhost  Sun Oct 29 16:08  17/626   &quot;[master] Realserver [192.168.8.136&quot;</span><br><span class="line"> N  7 keepalived@localhost  Sun Oct 29 17:44  17/646   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line"> N  8 keepalived@localhost  Sun Oct 29 17:44  17/626   &quot;[master] Realserver [192.168.8.128&quot;</span><br><span class="line">&amp; 8</span><br><span class="line">Message  8:</span><br><span class="line">From keepalived@localhost.haiyun.com  Sun Oct 29 17:44:23 2017</span><br><span class="line">Return-Path: &lt;keepalived@localhost.haiyun.com&gt;</span><br><span class="line">X-Original-To: root@localhost</span><br><span class="line">Delivered-To: root@localhost.haiyun.com</span><br><span class="line">Date: Sun, 29 Oct 2017 09:44:23 +0000</span><br><span class="line">From: keepalived@localhost.haiyun.com</span><br><span class="line">Subject: [master] Realserver [192.168.8.128]:80 - UP</span><br><span class="line">X-Mailer: Keepalived</span><br><span class="line">To: root@localhost.haiyun.com</span><br><span class="line">Status: R</span><br><span class="line"></span><br><span class="line">=&gt; CHECK succeed on service &lt;=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&amp; quit</span><br><span class="line">Held 8 messages in /var/spool/mail/root</span><br></pre></td></tr></table></figure><h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><p>如果测试<code>nginx</code>故障失败的话，可能是<code>killall</code>命令没有安装。可以通过<code>yum install psmisc</code>来安装。</p>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> 实现Nginx+KeepAlived单主模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KeepAlived单独记录日志</title>
      <link href="/2017/10/29/KeepAlived-Log/"/>
      <url>/2017/10/29/KeepAlived-Log/</url>
      <content type="html"><![CDATA[<h3 id="查看默认日志"><a href="#查看默认日志" class="headerlink" title="查看默认日志"></a>查看默认日志</h3><p><code>KeepAlived</code>默认是把日志记录<code>/var/log/messages</code>里面的，感觉有点乱，所以还是把日志单独存放比较好。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# tail /var/log/messages         </span><br><span class="line">Oct 29 17:03:12 centos7 Keepalived_vrrp[3170]: Using LinkWatch kernel netlink reflector...</span><br><span class="line">Oct 29 17:03:12 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_2) Entering BACKUP STATE</span><br><span class="line">Oct 29 17:03:12 centos7 Keepalived_vrrp[3170]: VRRP sockpool: [ifindex(3), proto(112), unicast(0), fd(10,11)]</span><br><span class="line">Oct 29 17:03:13 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_1) Transition to MASTER STATE</span><br><span class="line">Oct 29 17:03:13 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_1) Received lower prio advert, forcing new election</span><br><span class="line">Oct 29 17:03:14 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_1) Entering MASTER STATE</span><br><span class="line">Oct 29 17:03:14 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_1) setting protocol VIPs.</span><br><span class="line">Oct 29 17:03:14 centos7 Keepalived_healthcheckers[3169]: Netlink reflector reports IP 192.168.8.8 added</span><br><span class="line">Oct 29 17:03:14 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_1) Sending gratuitous ARPs on ens34 for 192.168.8.8</span><br><span class="line">Oct 29 17:03:19 centos7 Keepalived_vrrp[3170]: VRRP_Instance(VI_1) Sending gratuitous ARPs on ens34 for 192.168.8.8</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/sysconfig/keepalived </span><br><span class="line"></span><br><span class="line"># Options for keepalived. See `keepalived --help&apos; output and keepalived(8) and</span><br><span class="line"># keepalived.conf(5) man pages for a list of all options. Here are the most</span><br><span class="line"># common ones :</span><br><span class="line">#</span><br><span class="line"># --vrrp               -P    Only run with VRRP subsystem.</span><br><span class="line"># --check              -C    Only run with Health-checker subsystem.</span><br><span class="line"># --dont-release-vrrp  -V    Dont remove VRRP VIPs &amp; VROUTEs on daemon stop.</span><br><span class="line"># --dont-release-ipvs  -I    Dont remove IPVS topology on daemon stop.</span><br><span class="line"># --dump-conf          -d    Dump the configuration data.</span><br><span class="line"># --log-detail         -D    Detailed log messages.</span><br><span class="line"># --log-facility       -S    0-7 Set local syslog facility (default=LOG_DAEMON)</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">KEEPALIVED_OPTIONS=&quot;-D -d -S 0&quot;         # 修改此项</span><br></pre></td></tr></table></figure><h3 id="修改-etc-rsuslog-conf"><a href="#修改-etc-rsuslog-conf" class="headerlink" title="修改/etc/rsuslog.conf"></a>修改/etc/rsuslog.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/rsyslog.conf          # 添加一下两行</span><br><span class="line"># Save KeepAlived log.</span><br><span class="line">local0.*                                            /var/log/keepalived.log</span><br></pre></td></tr></table></figure><h3 id="重启日志服务和Keepalived"><a href="#重启日志服务和Keepalived" class="headerlink" title="重启日志服务和Keepalived"></a>重启日志服务和Keepalived</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl restart rsyslog.service keepalived.service</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# tail /var/log/keepalived.log </span><br><span class="line">Oct 29 17:25:19 centos7 Keepalived_vrrp[3568]: Using LinkWatch kernel netlink reflector...</span><br><span class="line">Oct 29 17:25:19 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_2) Entering BACKUP STATE</span><br><span class="line">Oct 29 17:25:19 centos7 Keepalived_vrrp[3568]: VRRP sockpool: [ifindex(3), proto(112), unicast(0), fd(10,11)]</span><br><span class="line">Oct 29 17:25:20 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_1) Transition to MASTER STATE</span><br><span class="line">Oct 29 17:25:20 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_1) Received lower prio advert, forcing new election</span><br><span class="line">Oct 29 17:25:21 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_1) Entering MASTER STATE</span><br><span class="line">Oct 29 17:25:21 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_1) setting protocol VIPs.</span><br><span class="line">Oct 29 17:25:21 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_1) Sending gratuitous ARPs on ens34 for 192.168.8.8</span><br><span class="line">Oct 29 17:25:21 centos7 Keepalived_healthcheckers[3567]: Netlink reflector reports IP 192.168.8.8 added</span><br><span class="line">Oct 29 17:25:26 centos7 Keepalived_vrrp[3568]: VRRP_Instance(VI_1) Sending gratuitous ARPs on ens34 for 192.168.8.8</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> KeepAlived单独记录日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现LVS+KeepAlived双主模式</title>
      <link href="/2017/10/29/KeepAlived-Shuangzhu-LVS/"/>
      <url>/2017/10/29/KeepAlived-Shuangzhu-LVS/</url>
      <content type="html"><![CDATA[<h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><center><img src="https://houhaiyun.github.io/img/images/KeepAlived-Shuangzhu-LVS-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>功能</th></tr></thead><tbody><tr><td>LVS+KeepALived(master/backup)</td><td>RIP：192.168.8.138 VIP：192.168.8.8</td><td>实现LVS高可用</td></tr><tr><td>LVS+KeepALived(backup/master)</td><td>RIP：192.168.8.140 VIP：192.168.8.6</td><td>实现LVS高可用</td></tr><tr><td>Apache1</td><td>RIP：192.168.8.128 VIP：192.168.8.8</td><td>提供web服务</td></tr><tr><td>Apache2</td><td>RIP：192.168.8.136 VIP：192.168.8.8</td><td>提供web服务</td></tr><tr><td>Apache3</td><td>RIP：192.168.8.137 VIP：192.168.8.6</td><td>提供web服务</td></tr><tr><td>Apache4</td><td>RIP：192.168.8.139 VIP：192.168.8.6</td><td>提供web服务</td></tr></tbody></table><a id="more"></a><h3 id="Real-Server配置"><a href="#Real-Server配置" class="headerlink" title="Real Server配置"></a>Real Server配置</h3><h4 id="Apache1配置"><a href="#Apache1配置" class="headerlink" title="Apache1配置"></a>Apache1配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">[root@Web1 ~]# hostname Apache1</span><br><span class="line">[root@Apache1 ~]# cat lvs_dr_rs.sh          # 执行real server 脚本</span><br><span class="line">#!/bin/bash</span><br><span class="line"># Author: haiyun</span><br><span class="line"># Date: 2017-08-13</span><br><span class="line"></span><br><span class="line">vip=&apos;192.168.8.8&apos;</span><br><span class="line">mask=&apos;255.255.255.255&apos;</span><br><span class="line">dev=lo:1</span><br><span class="line">rpm -q httpd &amp;&gt; /dev/null || yum -y install httpd &amp;&gt;/dev/null</span><br><span class="line">service httpd start &amp;&gt; /dev/null &amp;&amp; echo &quot;The httpd Server is Ready!&quot;</span><br><span class="line">echo &quot;&lt;h1&gt;`hostname`&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    ifconfig $dev $vip netmask $mask broadcast $vip up</span><br><span class="line">    #route add -host $vip dev $dev</span><br><span class="line">    echo &quot;The RS Server is Ready!&quot;</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    ifconfig $dev down</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    echo &quot;The RS Server is Canceled!&quot;</span><br><span class="line">    ;;</span><br><span class="line">*) </span><br><span class="line">    echo &quot;Usage: $(basename $0) start|stop&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">[root@Apache1 ~]# bash lvs_dr_rs.sh start</span><br><span class="line">The httpd Server is Ready!</span><br><span class="line">The RS Server is Ready!</span><br><span class="line">[root@Apache1 ~]# ifconfig      # 虚拟IP已经配置</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:32600 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:25885 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:2694652 (2.5 MiB)  TX bytes:3566219 (3.4 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:20 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:20 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:2168 (2.1 KiB)  TX bytes:2168 (2.1 KiB)</span><br><span class="line"></span><br><span class="line">lo:1      Link encap:Local Loopback  </span><br><span class="line">          inet addr:192.168.8.8  Mask:255.255.255.255</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line"></span><br><span class="line">[root@Apache1 ~]# curl 192.168.8.128        # 本地测试，ok</span><br><span class="line">&lt;h1&gt;Apache1&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="Apache2配置"><a href="#Apache2配置" class="headerlink" title="Apache2配置"></a>Apache2配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@Web2 ~]# hostname Apache2</span><br><span class="line">[root@Apache2 ~]# bash lvs_dr_rs.sh start           # 执行real server 脚本，此脚本的内容和Apache1中是相同的</span><br><span class="line">The httpd Server is Ready!</span><br><span class="line">The RS Server is Ready!</span><br><span class="line">[root@Apache2 ~]# ifconfig          # 虚拟IP已经配置</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:32677 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:26075 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:2696522 (2.5 MiB)  TX bytes:3582485 (3.4 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:20 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:20 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:2168 (2.1 KiB)  TX bytes:2168 (2.1 KiB)</span><br><span class="line"></span><br><span class="line">lo:1      Link encap:Local Loopback  </span><br><span class="line">          inet addr:192.168.8.8  Mask:255.255.255.255</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line"></span><br><span class="line">[root@Apache2 ~]# curl 192.168.8.136         # 本地测试，ok</span><br><span class="line">&lt;h1&gt;Apache2&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="Apache3配置"><a href="#Apache3配置" class="headerlink" title="Apache3配置"></a>Apache3配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# hostname Apache3</span><br><span class="line">[root@localhost ~]# bash</span><br><span class="line">[root@Apache3 ~]# cat lvs_dr_rs.sh          # 查看你real server 脚本和Apache1的虚拟IP是不同的</span><br><span class="line">#!/bin/bash</span><br><span class="line">#Author:wangxiaochun</span><br><span class="line">#Date:2017-08-13</span><br><span class="line">vip=&apos;192.168.8.6&apos;       # 虚拟IP已改变</span><br><span class="line">mask=&apos;255.255.255.255&apos;</span><br><span class="line">dev=lo:1</span><br><span class="line">rpm -q httpd &amp;&gt; /dev/null || yum -y install httpd &amp;&gt;/dev/null</span><br><span class="line">service httpd start &amp;&gt; /dev/null &amp;&amp; echo &quot;The httpd Server is Ready!&quot;</span><br><span class="line">echo &quot;&lt;h1&gt;`hostname`&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    ifconfig $dev $vip netmask $mask broadcast $vip up</span><br><span class="line">    #route add -host $vip dev $dev</span><br><span class="line">    echo &quot;The RS Server is Ready!&quot;</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    ifconfig $dev down</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    echo &quot;The RS Server is Canceled!&quot;</span><br><span class="line">    ;;</span><br><span class="line">*) </span><br><span class="line">    echo &quot;Usage: $(basename $0) start|stop&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">[root@Apache3 ~]# bash lvs_dr_rs.sh start</span><br><span class="line">The httpd Server is Ready!</span><br><span class="line">The RS Server is Ready!</span><br><span class="line">[root@Apache3 ~]# ifconfig          # 虚拟IP已配置</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:FC:14:0C  </span><br><span class="line">          inet addr:192.168.8.137  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fefc:140c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:260 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:204 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:28838 (28.1 KiB)  TX bytes:32999 (32.2 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class="line"></span><br><span class="line">lo:1      Link encap:Local Loopback  </span><br><span class="line">          inet addr:192.168.8.6  Mask:255.255.255.255</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line"></span><br><span class="line">[root@Apache3 ~]# curl 192.168.8.137        # 本地访问测试，ok</span><br><span class="line">&lt;h1&gt;Apache3&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="Apache4配置"><a href="#Apache4配置" class="headerlink" title="Apache4配置"></a>Apache4配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@Client ~]# hostname Apache4</span><br><span class="line">[root@Client ~]# bash</span><br><span class="line">[root@Apache4 ~]# bash lvs_dr_rs.sh start       # 执行real server脚本，此脚本的内容和Apache3中是相同的</span><br><span class="line">The httpd Server is Ready!</span><br><span class="line">The RS Server is Ready!</span><br><span class="line"></span><br><span class="line">[root@Apache4 ~]# ifconfig </span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:E3:36:5F  </span><br><span class="line">          inet addr:192.168.8.139  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fee3:365f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1326 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1026 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:121526 (118.6 KiB)  TX bytes:133312 (130.1 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class="line"></span><br><span class="line">lo:1      Link encap:Local Loopback  </span><br><span class="line">          inet addr:192.168.8.6  Mask:255.255.255.255</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line"></span><br><span class="line">[root@Apache4 ~]# curl 192.168.8.139        # 本地访问测试，ok</span><br><span class="line">&lt;h1&gt;Apache4&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="KeepAlived配置"><a href="#KeepAlived配置" class="headerlink" title="KeepAlived配置"></a>KeepAlived配置</h3><h4 id="master-192-168-8-138-配置"><a href="#master-192-168-8-138-配置" class="headerlink" title="master(192.168.8.138)配置"></a>master(192.168.8.138)配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;   </span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 100 </span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.8 80 &#123;</span><br><span class="line">    delay_loop 3 </span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP </span><br><span class="line">    </span><br><span class="line">    sorry_server 127.0.0.1 80  </span><br><span class="line">    </span><br><span class="line">    real_server 192.168.8.128 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">        url &#123;</span><br><span class="line">            path /</span><br><span class="line">            status_code 200 </span><br><span class="line">        &#125;   </span><br><span class="line">        connect_timeout 1</span><br><span class="line">        nb_get_retry 3 </span><br><span class="line">        delay_before_retyr 1</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.136 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 6</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass dsdfuhg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.6/24 dev ens34 label ens34:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.6 80 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    sorry_server 127.0.0.1 80</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.137 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">        url &#123;</span><br><span class="line">            path /</span><br><span class="line">            status_code 200</span><br><span class="line">        &#125;</span><br><span class="line">        connect_timeout 1</span><br><span class="line">        nb_get_retry 3</span><br><span class="line">        delay_before_retyr 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.139 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="backup-192-168-8-140-配置"><a href="#backup-192-168-8-140-配置" class="headerlink" title="backup(192.168.8.140)配置"></a>backup(192.168.8.140)配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;   </span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.8 80 &#123;</span><br><span class="line">    delay_loop 3 </span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP </span><br><span class="line">    </span><br><span class="line">    sorry_server 127.0.0.1 80  </span><br><span class="line">    </span><br><span class="line">    real_server 192.168.8.128 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">        url &#123;</span><br><span class="line">            path /</span><br><span class="line">            status_code 200 </span><br><span class="line">        &#125;   </span><br><span class="line">        connect_timeout 1</span><br><span class="line">        nb_get_retry 3 </span><br><span class="line">        delay_before_retyr 1</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.136 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 6</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass dsdfuhg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.6/24 dev ens34 label ens34:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.6 80 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    sorry_server 127.0.0.1 80</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.137 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">        url &#123;</span><br><span class="line">            path /</span><br><span class="line">            status_code 200</span><br><span class="line">        &#125;</span><br><span class="line">        connect_timeout 1</span><br><span class="line">        nb_get_retry 3</span><br><span class="line">        delay_before_retyr 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.139 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看ipvs规则"><a href="#查看ipvs规则" class="headerlink" title="查看ipvs规则"></a>查看ipvs规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ipvsadm -Ln            # master</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.8.6:80 rr</span><br><span class="line">  -&gt; 192.168.8.137:80             Route   1      0          0         </span><br><span class="line">  -&gt; 192.168.8.139:80             Route   1      0          0         </span><br><span class="line">TCP  192.168.8.8:80 rr</span><br><span class="line">  -&gt; 192.168.8.128:80             Route   1      0          0         </span><br><span class="line">  -&gt; 192.168.8.136:80             Route   1      0          0    </span><br><span class="line"></span><br><span class="line">[root@backup ~]# ipvsadm -Ln        # backup</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.8.6:80 rr</span><br><span class="line">  -&gt; 192.168.8.137:80             Route   1      0          0         </span><br><span class="line">  -&gt; 192.168.8.139:80             Route   1      0          0         </span><br><span class="line">TCP  192.168.8.8:80 rr</span><br><span class="line">  -&gt; 192.168.8.128:80             Route   1      0          0         </span><br><span class="line">  -&gt; 192.168.8.136:80             Route   1      0          0</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ifconfig           # 目前192.168.8.8是在master上面的</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 21907  bytes 2653801 (2.5 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 29003  bytes 2770719 (2.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig       # 目前192.168.8.6是在backup上面的</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 52094  bytes 6502536 (6.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 68423  bytes 5624418 (5.3 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.6  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@Client ~]# curl 192.168.8.8           # 测试192.168.8.8没问题</span><br><span class="line">&lt;h1&gt;Apache2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Apache1&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Apache2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Apache1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@Client ~]# curl 192.168.8.6           # 测试192.168.8.6没问题</span><br><span class="line">&lt;h1&gt;Apache4&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.6</span><br><span class="line">&lt;h1&gt;Apache3&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.6</span><br><span class="line">&lt;h1&gt;Apache4&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.6</span><br><span class="line">&lt;h1&gt;Apache3&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@master ~]# systemctl stop keepalived          # 停止keepalived</span><br><span class="line">[root@master ~]# ifconfig           # 查看IP，已经没有192.168.8.8了</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 23569  bytes 2859248 (2.7 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 30953  bytes 2932185 (2.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig           # 查看IP，已经全部飘到backup上面了</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 54253  bytes 6771078 (6.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 71125  bytes 5855084 (5.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">ens34:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.6  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@Client ~]# curl 192.168.8.6           # 测试访问，依旧可以</span><br><span class="line">&lt;h1&gt;Apache3&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.6</span><br><span class="line">&lt;h1&gt;Apache4&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.6</span><br><span class="line">&lt;h1&gt;Apache3&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.6</span><br><span class="line">&lt;h1&gt;Apache4&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@Client ~]# curl 192.168.8.8           # 测试访问，依旧可以</span><br><span class="line">&lt;h1&gt;Apache2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Apache1&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Apache2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Apache1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> 实现LVS+KeepAlived双主模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现LVS+KeepAlived单主模式</title>
      <link href="/2017/10/29/KeepAlived-Danzhu-LVS/"/>
      <url>/2017/10/29/KeepAlived-Danzhu-LVS/</url>
      <content type="html"><![CDATA[<p>本实验接着上面实现单主的<code>Keepalived</code>继续搭建。</p><h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><center><img src="https://houhaiyun.github.io/img/images/KeepAlived-Danzhu-LVS-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>功能</th></tr></thead><tbody><tr><td>LVS+KeepALived(master)</td><td>RIP：192.168.8.138 VIP：192.168.8.8</td><td>实现LVS高可用</td></tr><tr><td>LVS+KeepALived(backup)</td><td>RIP：192.168.8.140 VIP：192.168.8.8</td><td>实现LVS高可用</td></tr><tr><td>httpd</td><td>RIP：192.168.8.128 VIP：192.168.8.8</td><td>提供web服务</td></tr><tr><td>httpd</td><td>RIP：192.168.8.136 VIP：192.168.8.8</td><td>提供web服务</td></tr><tr><td>测试调度</td><td>192.168.8.139</td><td>测试客户端(可选)</td></tr></tbody></table><a id="more"></a><h3 id="Real-Server配置"><a href="#Real-Server配置" class="headerlink" title="Real Server配置"></a>Real Server配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># web配置</span><br><span class="line">[root@centos6 ~]# yum install -y httpd</span><br><span class="line">[root@centos6 ~]# hostname web1     # 修改主机名为web1</span><br><span class="line">[root@Web1 ~]# vim lvs_dr_rs.sh         # 执行配置Real Server脚本</span><br><span class="line">#!/bin/bash</span><br><span class="line"># Author: haiyun</span><br><span class="line"># Date: 2017-08-13</span><br><span class="line"></span><br><span class="line">vip=&apos;192.168.8.8&apos;</span><br><span class="line">mask=&apos;255.255.255.255&apos;</span><br><span class="line">dev=lo:1</span><br><span class="line">rpm -q httpd &amp;&gt; /dev/null || yum -y install httpd &amp;&gt;/dev/null</span><br><span class="line">service httpd start &amp;&gt; /dev/null &amp;&amp; echo &quot;The httpd Server is Ready!&quot;</span><br><span class="line">echo &quot;&lt;h1&gt;`hostname`&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    ifconfig $dev $vip netmask $mask broadcast $vip up</span><br><span class="line">    #route add -host $vip dev $dev</span><br><span class="line">    echo &quot;The RS Server is Ready!&quot;</span><br><span class="line">    ;;  </span><br><span class="line">stop)</span><br><span class="line">    ifconfig $dev down</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    echo &quot;The RS Server is Canceled!&quot;</span><br><span class="line">    ;;  </span><br><span class="line">*) </span><br><span class="line">    echo &quot;Usage: $(basename $0) start|stop&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;  </span><br><span class="line">esac</span><br><span class="line">[root@Web1 ~]# service httpd start      </span><br><span class="line">Starting httpd:                                            [  OK  ] </span><br><span class="line">[root@Web1 ~]# curl 192.168.8.128       # 本地测试可以访问</span><br><span class="line">&lt;h1&gt;Web1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line">[root@centos6 ~]# yum install -y httpd</span><br><span class="line">[root@centos6 ~]# hostname web2</span><br><span class="line">[root@Web2 ~]# vim lvs_dr_rs.sh         # 执行配置Real Server脚本</span><br><span class="line">#!/bin/bash</span><br><span class="line"># Author: haiyun</span><br><span class="line"># Date: 2017-08-13</span><br><span class="line"></span><br><span class="line">vip=&apos;192.168.8.8&apos;</span><br><span class="line">mask=&apos;255.255.255.255&apos;</span><br><span class="line">dev=lo:1</span><br><span class="line">rpm -q httpd &amp;&gt; /dev/null || yum -y install httpd &amp;&gt;/dev/null</span><br><span class="line">service httpd start &amp;&gt; /dev/null &amp;&amp; echo &quot;The httpd Server is Ready!&quot;</span><br><span class="line">echo &quot;&lt;h1&gt;`hostname`&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    ifconfig $dev $vip netmask $mask broadcast $vip up</span><br><span class="line">    #route add -host $vip dev $dev</span><br><span class="line">    echo &quot;The RS Server is Ready!&quot;</span><br><span class="line">    ;;  </span><br><span class="line">stop)</span><br><span class="line">    ifconfig $dev down</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    echo &quot;The RS Server is Canceled!&quot;</span><br><span class="line">    ;;  </span><br><span class="line">*) </span><br><span class="line">    echo &quot;Usage: $(basename $0) start|stop&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;  </span><br><span class="line">esac</span><br><span class="line">[root@Web2 ~]# service httpd start      </span><br><span class="line">Starting httpd:                                            [  OK  ] </span><br><span class="line">[root@Web2 ~]# curl 192.168.8.136       # 本地测试可以访问</span><br><span class="line">&lt;h1&gt;Web2&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="Keepalived配置"><a href="#Keepalived配置" class="headerlink" title="Keepalived配置"></a>Keepalived配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># Master配置</span><br><span class="line">[root@master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.8 80 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    sorry_server 127.0.0.1 80</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.128 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">        url &#123;</span><br><span class="line">            path /</span><br><span class="line">            status_code 200</span><br><span class="line">        &#125;</span><br><span class="line">        connect_timeout 1</span><br><span class="line">        nb_get_retry 3</span><br><span class="line">        delay_before_retyr 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.136 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line"></span><br><span class="line">[root@backup ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.8.8 80 &#123;</span><br><span class="line">    delay_loop 3 </span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP </span><br><span class="line">    </span><br><span class="line">    sorry_server 127.0.0.1 80  </span><br><span class="line">    </span><br><span class="line">    real_server 192.168.8.128 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">        url &#123;</span><br><span class="line">            path /</span><br><span class="line">            status_code 200 </span><br><span class="line">        &#125;   </span><br><span class="line">        connect_timeout 1</span><br><span class="line">        nb_get_retry 3 </span><br><span class="line">        delay_before_retyr 1</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.136 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 在客户端测试访问，ok</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web1&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@master ~]# ifconfig               # 现在VIP是在master上面</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17133  bytes 2118339 (2.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 24290  bytes 2165669 (2.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@master ~]# systemctl stop keepalived      # 停止master的keepalived</span><br><span class="line">[root@master ~]# ifconfig           # 已经没有虚拟IP</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17523  bytes 2165286 (2.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 24796  bytes 2209771 (2.1 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig           # VIP已经飘逸到了backup上面</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 21342  bytes 2330926 (2.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 20514  bytes 1801946 (1.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@Client ~]# curl 192.168.8.8           # 再次测试依旧可以访问</span><br><span class="line">&lt;h1&gt;Web1&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web2&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web1&lt;/h1&gt;</span><br><span class="line">[root@Client ~]# curl 192.168.8.8</span><br><span class="line">&lt;h1&gt;Web2&lt;/h1&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> 实现LVS+KeepAlived单主模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现KeepAlived单主模式</title>
      <link href="/2017/10/29/KeepAlived-Danzhu/"/>
      <url>/2017/10/29/KeepAlived-Danzhu/</url>
      <content type="html"><![CDATA[<h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><h4 id="配置IP及主机名"><a href="#配置IP及主机名" class="headerlink" title="配置IP及主机名"></a>配置IP及主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ifconfig ens34         # 192.168.8.138是master</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 237  bytes 21347 (20.8 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 153  bytes 21995 (21.4 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@master ~]# hostname       # 主机名也已修改为master</span><br><span class="line">master</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig ens34         # 192.168.8.140是backup</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 145  bytes 13493 (13.1 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 99  bytes 13701 (13.3 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@backup ~]# hostname       # 主机名也已修改为backup</span><br><span class="line">backup</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="关闭防火墙和SELINUX"><a href="#关闭防火墙和SELINUX" class="headerlink" title="关闭防火墙和SELINUX"></a>关闭防火墙和SELINUX</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># master配置</span><br><span class="line">[root@master ~]# getenforce         # 查看SELINUX已经禁用，如果没关闭，使用命令 setenforce 0来先临时关闭</span><br><span class="line">Disabled</span><br><span class="line">[root@master ~]# systemctl status iptables      # 防火墙也已经关闭</span><br><span class="line">Unit iptables.service could not be found.</span><br><span class="line">[root@master ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line">[root@backup ~]# getenforce </span><br><span class="line">Disabled</span><br><span class="line">[root@backup ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></table></figure><h4 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># master配置</span><br><span class="line">[root@master ~]# ntpdate            # 使用ntpdate同步时间</span><br><span class="line">bash: ntpdate: command not found</span><br><span class="line">[root@master ~]# yum install ntpdate        # 安装ntpdate</span><br><span class="line"></span><br><span class="line">[root@master ~]# ntpdate 172.18.0.1         # master同步时间</span><br><span class="line">28 Oct 21:55:22 ntpdate[9397]: step time server 172.18.0.1 offset 62.614049 sec</span><br><span class="line">[root@master ~]# date</span><br><span class="line">Sat Oct 28 21:55:25 CST 2017</span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line">[root@backup ~]# yum install -y ntpdate     </span><br><span class="line">[root@backup ~]# ntpdate 172.18.0.1         # backup同步时间</span><br><span class="line">28 Oct 22:04:19 ntpdate[9397]: step time server 172.18.0.1 offset 62.614049 sec</span><br><span class="line">[root@backup ~]# date</span><br><span class="line">Sat Oct 28 22:04:35 CST 2017</span><br></pre></td></tr></table></figure><h3 id="配置KeepAlived"><a href="#配置KeepAlived" class="headerlink" title="配置KeepAlived"></a>配置KeepAlived</h3><h4 id="安装KeepAlived"><a href="#安装KeepAlived" class="headerlink" title="安装KeepAlived"></a>安装KeepAlived</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># master配置</span><br><span class="line">[root@master ~]# yum install -y keepalived</span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line">[root@backup ~]# yum install -y keepalived</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>使用192.168.8.8来当<code>VIP</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># master配置</span><br><span class="line">[root@master ~]# cp -a  /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak     # 先备份配置文件</span><br><span class="line">[root@master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;   </span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 100 </span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># backup配置</span><br><span class="line">[root@backup ~]# cp -a  /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><br><span class="line">[root@backup ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     root@localhost</span><br><span class="line">   &#125;   </span><br><span class="line">   notification_email_from keepalived@localhost</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id master</span><br><span class="line">   vrrp_mcast_group 224.18.100.100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens34</span><br><span class="line">    virtual_router_id 8</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass psdfuhg</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># master启动</span><br><span class="line">[root@master ~]# systemctl start keepalived</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># backup启动</span><br><span class="line">[root@backup ~]# systemctl start keepalived</span><br><span class="line"></span><br><span class="line">[root@master ~]# ifconfig       # 在master查看IP已经配置上IP地址</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 753  bytes 66263 (64.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1603  bytes 155108 (151.4 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.8  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@backup ~]# ifconfig           # 在backup查看IP地址，没有变化ok</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4160  bytes 321764 (314.2 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2840  bytes 377028 (368.1 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/KeepAlived-Danzhu-1.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> 实现KeepAlived单主模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Keepalived配置文件</title>
      <link href="/2017/10/29/KeepAlived-Configuration-File/"/>
      <url>/2017/10/29/KeepAlived-Configuration-File/</url>
      <content type="html"><![CDATA[<h3 id="Keepalived的配置文件"><a href="#Keepalived的配置文件" class="headerlink" title="Keepalived的配置文件"></a>Keepalived的配置文件</h3><p><code>keepalived</code>只有一个配置文件<code>keepalived.conf</code>，里面主要包括以下几个配置区域，分别是<code>global_defs</code>、<code>static_ipaddress</code>、<code>static_routes</code>、<code>vrrp_script</code>、<code>vrrp_instance</code>和<code>virtual_server</code>。</p><a id="more"></a><h4 id="global-defs区域"><a href="#global-defs区域" class="headerlink" title="global_defs区域"></a>global_defs区域</h4><p>主要是配置故障发生时的通知对象以及机器标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;                       # 全局配置</span><br><span class="line">   notification_email &#123;             # 通告邮件的用户</span><br><span class="line">     root@localhost                 # 指定keepalived在发生切换时需要发送email到的对象，一行一个</span><br><span class="line">   &#125;   </span><br><span class="line">   # 邮件服务器配置</span><br><span class="line">   notification_email_from keepalived@localhost         # 指定发件人</span><br><span class="line">   smtp_server 127.0.0.1            # smtp 服务器地址</span><br><span class="line">   smtp_connect_timeout 30          # smtp 服务器连接超时时间</span><br><span class="line">   router_id master                 # 标识本节点的字符串,通常为hostname,但不一定非得是hostname,故障发生时,邮件通知会用到</span><br><span class="line">   vrrp_mcast_group4 224.0.0.18     # 同一个组播域，ipv4的默认组播域，如果没有指定这里使用224.0.0.18</span><br><span class="line">   vrrp_mcast_group6 ff02::12       # ipv6多播地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static-ipaddress和static-routes区域"><a href="#static-ipaddress和static-routes区域" class="headerlink" title="static_ipaddress和static_routes区域"></a>static_ipaddress和static_routes区域</h4><p><code>static_ipaddress</code>和<code>static_routes</code>区域配置的是是本节点的<code>IP</code>和路由信息。如果你的机器上已经配置了<code>IP</code>和路由，那么这两个区域可以不用配置。其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static_ipaddress &#123;</span><br><span class="line">    10.210.214.163/24 brd 10.210.214.255 dev eth0</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">static_routes &#123;</span><br><span class="line">    10.0.0.0/8 via 10.210.214.1 dev eth0</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vrrp-instance和vrrp-sync-group区域"><a href="#vrrp-instance和vrrp-sync-group区域" class="headerlink" title="vrrp_instance和vrrp_sync_group区域"></a>vrrp_instance和vrrp_sync_group区域</h4><p><code>vrrp_instance</code>用来定义对外提供服务的VIP区域及其相关属性。</p><p><code>vrrp_rsync_group</code>用来定义<code>vrrp_intance</code>组，使得这个组内成员动作一致。举个例子来说明一下其功能：</p><ul><li>两个<code>vrrp_instance</code>同属于一个<code>vrrp_rsync_group</code>，那么其中一个<code>vrrp_instance</code>发生故障切换时，另一个<code>vrrp_instance</code>也会跟着切换（即使这个<code>instance</code>没有发生故障）。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">vrrp_sync_group VG_1 &#123; </span><br><span class="line">    group &#123;</span><br><span class="line">    VI_1 # name of vrrp_instance (below)</span><br><span class="line">    VI_2 # One for each moveable IP.</span><br><span class="line">    &#125;</span><br><span class="line">    notify_master /path/to_master.sh    # notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。</span><br><span class="line">    notify_backup /path/to_backup.sh</span><br><span class="line">    notify_fault &quot;/path/fault.sh VG_1&quot;</span><br><span class="line">    notify /path/notify.sh          # notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = &quot;GROUP&quot;|&quot;INSTANCE&quot;，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。</span><br><span class="line">    smtp_alert              # smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;        # 实例名称     </span><br><span class="line">    state MASTER            # 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER,因此该项其实没有实质用途。</span><br><span class="line">    interface ens34         # 节点固有IP（非VIP）的网卡，用来发VRRP包做心跳检测 </span><br><span class="line">    virtual_router_id 8     # 虚拟路由ID,取值在0-255之间,用来区分多个instance的VRRP组播,同一网段内ID不能重复;主备必须为一样;</span><br><span class="line">    priority 100            # 用来选举master的,要成为master那么这个选项的值最好高于其他机器,该项取值范围是1-255(在此范围之外会被识别成默认值100)</span><br><span class="line">    lvs_sync_daemon_interface       # 绑定lvs syncd的网卡。</span><br><span class="line">    garp_master_delay       # 当切为主状态后多久更新ARP缓存，默认5秒。</span><br><span class="line">    track_interface         # 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）</span><br><span class="line">    dont_track_primary      # 忽略VRRP网卡错误。（默认未设置）</span><br><span class="line">    advert_int 1            # 检查间隔默认为1秒,即1秒进行一次master选举(可以认为是健康查检时间间隔)</span><br><span class="line">    authentication &#123;        # 认证区域,认证类型有PASS和HA（IPSEC）,推荐使用PASS(密码只识别前8位)</span><br><span class="line">        auth_type PASS      # 认证区域,认证类型有PASS和HA（IPSEC）,推荐使用PASS(密码只识别前8位)</span><br><span class="line">        auth_pass psdfuhg   # PASS认证密码</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.8.8/24 dev ens34 label ens34:0      # 虚拟VIP地址，允许有多个</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    virtual_routes &#123;        # 虚拟路由，当IP漂过来之后需要添加的路由信息。</span><br><span class="line">        172.16.0.0/12 via 10.210.214.1</span><br><span class="line">        192.168.1.0/24 via 192.168.1.1 dev eth1</span><br><span class="line">        default via 202.102.152.1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    preempt_delay 300        # 启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。</span><br><span class="line">    </span><br><span class="line">    debug：debug级别</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    notify_master /path/to_master.sh    # notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。</span><br><span class="line">    notify_backup /path/to_backup.sh</span><br><span class="line">    notify_fault &quot;/path/fault.sh VG_1&quot;</span><br><span class="line">    notify /path/notify.sh          # notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = &quot;GROUP&quot;|&quot;INSTANCE&quot;，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。</span><br><span class="line">    smtp_alert              # smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。</span><br><span class="line">    </span><br><span class="line">    nopreempt           # 设置不抢占，允许一个priority比较低的节点作为master，即使有priority更高的节点启动。</span><br><span class="line">    # 首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），</span><br><span class="line">    其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。</span><br><span class="line">    我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，</span><br><span class="line">    当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，</span><br><span class="line">    然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。</span><br><span class="line">    </span><br><span class="line">    当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。</span><br><span class="line">    </span><br><span class="line">    track interface         # 跟踪接口，设置额外的监控，里面任意一块网卡出现问题，都会进入故障(FAULT)状态，例如，用nginx做均衡器的时候，内网必须正常工作，如果内网出问题了，这个均衡器也就无法运作了，所以必须对内外网同时做健康检查</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vrrp-script区域"><a href="#vrrp-script区域" class="headerlink" title="vrrp_script区域"></a>vrrp_script区域</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_httpd &#123;</span><br><span class="line">    script &quot;/etc/keepalived/check_and_start_httpd.sh&quot;   # apache httpd 服务检测并试图重启</span><br><span class="line">    interval 2                    # 每2s检查一次</span><br><span class="line">    weight -5                     # 检测失败（脚本返回非0）则优先级减少5个值</span><br><span class="line">    fall 3                        # 如果连续失败次数达到此值，则认为服务器已down</span><br><span class="line">    rise 2                        # 如果连续成功次数达到此值，则认为服务器已up</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="virtual-server-group和virtual-server区域"><a href="#virtual-server-group和virtual-server区域" class="headerlink" title="virtual_server_group和virtual_server区域"></a>virtual_server_group和virtual_server区域</h4><p><code>virtual_server_group</code>一般在超大型的LVS中用到，一般<code>LVS</code>用不着这东西，因此不多说。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">virtual_server 192.168.8.8 80 &#123;</span><br><span class="line">    delay_loop 3            # 检查后端服务器的时间间隔（单位秒）</span><br><span class="line">    lb_algo rr              # 后端调试算法（load balancing algorithm）</span><br><span class="line">    lb_kind DR              #  LVS调度类型NAT/DR/TUN。</span><br><span class="line">    protocol TCP            # 服务协议，进支持TCP</span><br><span class="line">    </span><br><span class="line">    sorry_server 127.0.0.1 80       # 当所有real server宕掉时，sorry server顶替</span><br><span class="line">    </span><br><span class="line">    real_server 192.168.8.128 80 &#123;      # real_server 真正提供服务的服务器</span><br><span class="line">        weight 1            # weight 权重</span><br><span class="line">        HTTP_GET | SSL_GET &#123;          # 健康检查的方式，N多种方式</span><br><span class="line">        url &#123;</span><br><span class="line">            path /          # path 请求real serserver上的路径。</span><br><span class="line">            status_code 200 # digest/status_code 分别表示用genhash算出的结果和http状态码</span><br><span class="line">        &#125;   </span><br><span class="line">        connect_ip 192.168.8.128    # 向当前RS的哪个IP地址发起健康状态检测请求</span><br><span class="line">        connect_port 80     # 健康检查，如果端口通则认为服务器正常</span><br><span class="line">        bindto 192.168.8.138    # 发出健康状态检测请求时使用的源地址</span><br><span class="line">        bind_port 12340         # 发出健康状态检测请求时使用的源端口</span><br><span class="line">        connect_timeout     # 超时时长</span><br><span class="line">        nb_get_retry 3      # 重试次数</span><br><span class="line">        delay_before_retyr 1        # 下次重试的时间延迟</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    real_server 192.168.8.136 80 &#123;</span><br><span class="line">            weight 1</span><br><span class="line">            HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path /</span><br><span class="line">                status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 1</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retyr 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    track_script &#123;                # 引用VRRP脚本，即在 vrrp_script 部分指定的名字。定期运行它们来改变优先级，并最终引发主备切换。</span><br><span class="line">        chk_httpd          </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://outofmemory.cn/wiki/keepalived-configuration" target="_blank" rel="noopener">keepalived工作原理和配置说明</a></p>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> Keepalived配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Keepalived简介</title>
      <link href="/2017/10/29/KeepAlived/"/>
      <url>/2017/10/29/KeepAlived/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/KeepAlived-1.jpg" title="KeepAlived"></center><h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><p><a href="http://www.keepalived.org/" target="_blank" rel="noopener">官网：http://www.keepalived.org/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">What is Keepalived ?</span><br><span class="line">Keepalived is a routing software written in C. The main goal of this project is to provide simple and robust facilities for loadbalancing and high-availability to Linux system and Linux based infrastructures. Loadbalancing framework relies on well-known and widely used Linux Virtual Server (IPVS) kernel module providing Layer4 loadbalancing. Keepalived implements a set of checkers to dynamically and adaptively maintain and manage loadbalanced server pool according their health. On the other hand high-availability is achieved by VRRP protocol. VRRP is a fundamental brick for router failover. In addition, Keepalived implements a set of hooks to the VRRP finite state machine providing low-level and high-speed protocol interactions. Keepalived frameworks can be used independently or all together to provide resilient infrastructures.</span><br><span class="line"></span><br><span class="line">Keepalived is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>Keepalived</code>是用C编写的路由软件。该项目的主要目标是为<code>Linux</code>系统和基于<code>Linux</code>的基础设施提供简单而强大的负载平衡和高可用性设施。 负载平衡框架依赖于众所周知的广泛使用的<code>Linux</code>虚拟服务器（<code>IPVS</code>）内核模块，提供<code>Layer4</code>负载平衡。<code>Keepalived</code>实现了一组检查器，以动态和自适应地维护和管理负载平衡的服务器池，以保证其健康。另一方面<code>VRRP</code>实现了高可用性 协议。<code>VRRP</code>是路由器故障切换的基础。此外，<code>Keepalived</code>实现了一组钩子到<code>VRRP</code>有限状态机，提供低级和高速协议交互。<code>Keepalived</code>框架可以单独使用或全部使用，以提供弹性的基础设施。</p><h4 id="VRRP简介"><a href="#VRRP简介" class="headerlink" title="VRRP简介"></a>VRRP简介</h4><p>虚拟路由冗余协议(<code>Virtual Router Redundancy Protocol</code>，简称<code>VRRP</code>)是由<code>IETF</code>提出的解决局域网中配置静态网关出现单点失效现象的路由协议。</p><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p><code>Keepalived</code>采用是模块化设计，不同模块实现不同的功能，<code>keepalived</code>主要有三个模块，分别是<code>core</code>、<code>check</code>和<code>vrrp</code>。 <code>core</code>：是<code>keepalived</code>的核心，负责主进程的启动和维护，全局配置文件的加载解析等 <code>check</code>： 负责<code>healthchecker</code>(健康检查)，包括了各种健康检查方式，以及对应的配置的解析包括LVS的配置解析；<br>可基于脚本检查对<code>IPVS</code>后端服务器健康状况进行检查。 <code>vrrp</code>：<code>VRRPD</code>子进程，<code>VRRPD</code>子进程就是来实现<code>VRRP</code>协议的</p><p>以上是主要组件；下面是其他库： <code>libipfwc</code>：<code>iptables/ipchains</code>库，配置<code>LVS</code>会用到 <code>libipvs*</code>：配置LVS会用到。<br><strong>注意</strong>，<code>keepalived</code>和<code>LVS</code>完全是两码事，各司其职相互配合。</p><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><center><img src="https://houhaiyun.github.io/img/images/KeepAlived-2.jpg" title="KeepAlived架构图"></center><p><code>Keepalived</code>启动后会有三个进程:</p><ul><li>父进程：内存管理，子进程管理等等</li><li>子进程：<code>vrrpd</code>子进程</li><li>子进程：<code>healthchecker</code>子进程</li></ul><p>由上图可知，两个子进程都被系统<code>WatchDog</code>看管，两个子进程各自实现自己的事，<code>healthchecker</code>子进程实现检查各自服务器的健康程度，例如<code>HTTP</code>，<code>LVS</code>等等，如果<code>healthchecker</code>子进程检查到<code>MASTER</code>上服务不可用，就会通知本机上的兄弟<code>VRRP</code>子进程，让他删除通告，并且去掉虚拟<code>IP</code>，转换为<code>BACKUP</code>状态</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><code>keepalived</code>是一个类似于<code>layer3, 4 &amp; 5</code>交换机制的软件，也就是第3层、第4层和第5层交换,分别工作在<code>IP/TCP</code>协议栈的<code>IP层</code>、<code>TCP层</code>、<code>应用层</code>，原理分别如下： <code>Layer3</code>： <code>Keepalived</code>使用<code>Layer3</code>的方式工作式时，<code>Keepalived</code>会定期向服务器群中的服务器发送一个<code>ICMP</code>的数据包（既<code>Ping</code>）,如果发现某台服务的<code>IP</code>地址没有激活，<code>Keepalived</code>便报告这台服务器失效，并将它从服务器群中剔除(这种情况的典型例子是某台服务器被非法关机)。<code>Layer3</code>方式是以服务器的<code>IP</code>地址是否有效作为服务器工作正常与否的标准。 <code>Layer4</code>: <code>Layer4</code>主要以<code>TCP</code>端口的状态来决定服务器工作正常与否。如<code>web server</code>的服务端口一般是<code>80</code>，如果<code>Keepalived</code>检测到<code>80</code>端口没有启动，则<code>Keepalived</code>将把这台服务器从服务器群中剔除。 <code>Layer5</code>： <code>Layer5</code>就是工作在具体的应用层了，比<code>Layer3</code>,<code>Layer4</code>要复杂，在网络上占用的带宽也要大一些。<code>Keepalived</code>将根据用户的设定检查服务器相应服务是否运行正常，如果没有正常运行，则<code>Keepalived</code>将把服务器从服务器群中剔除。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.userzr.com/57.html" target="_blank" rel="noopener">Keepalived原理</a></p>]]></content>
      
      <categories>
          
          <category> 高可用 </category>
          
          <category> Keepalived简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KeepAlived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块  ngx_stream_core_module</title>
      <link href="/2017/10/28/Nginx-ngx-stream-core-module/"/>
      <url>/2017/10/28/Nginx-ngx-stream-core-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>所述<code>ngx_stream_upstream_module</code>模块（<code>1.9.0</code>）被用于定义可以由被引用的服务器组<code>proxy_pass</code>指令。</p><h3 id="upstream-name-…"><a href="#upstream-name-…" class="headerlink" title="upstream name { … }"></a>upstream name { … }</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:upstream name &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:stream</span><br></pre></td></tr></table></figure></p><p>定义一组服务器。服务器可以在不同端口上侦听。另外，监听<code>TCP</code>和<code>UNIX</code>域套接字的服务器可以混合使用。</p><a id="more"></a><h3 id="模块-ngx-stream-proxy-module"><a href="#模块-ngx-stream-proxy-module" class="headerlink" title="模块 ngx_stream_proxy_module"></a>模块 ngx_stream_proxy_module</h3><p>可实现代理基于<code>TCP</code>，<code>UDP</code>(1.9.13), <code>UNIX-domain sockets</code>的数据流</p><h4 id="proxy-pass-address"><a href="#proxy-pass-address" class="headerlink" title="proxy_pass address;"></a>proxy_pass address;</h4><p>指定后端服务器地址</p><h4 id="proxy-timeout-timeout"><a href="#proxy-timeout-timeout" class="headerlink" title="proxy_timeout timeout;"></a>proxy_timeout timeout;</h4><p>无数据传输时，保持连接状态的超时时长,默认为10m</p><h4 id="proxy-connect-timeout-time"><a href="#proxy-connect-timeout-time" class="headerlink" title="proxy_connect_timeout time;"></a>proxy_connect_timeout time;</h4><p>设置<code>nginx</code>与被代理的服务器尝试建立连接的超时时长;默认为<code>60s</code></p><h3 id="实现反向代理3306端口的Mysql服务"><a href="#实现反向代理3306端口的Mysql服务" class="headerlink" title="实现反向代理3306端口的Mysql服务"></a>实现反向代理3306端口的Mysql服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># 192.168.8.128的配置</span><br><span class="line">[root@128 ~]# yum install -y mysql-server           # 安装mysql数据库</span><br><span class="line">[root@128 ~]# service mysqld start              # 启动mysql数据库</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br><span class="line">[root@128 ~]# mysql         # 连接Mysql请注意128的mysql版本为5.1</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER test IDENTIFIED BY &apos;centos&apos; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 192.168.8.138的配置</span><br><span class="line">[root@138 ~]# yum -y  install mariadb-server         # 安装Mariadb数据库</span><br><span class="line">[root@138 ~]# systemctl start mariadb               # 启动Mariadb数据库</span><br><span class="line">[root@138 ~]# mysql                 # 连接Mariadb请注意138的Mariadb版本为5.5</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; CREATE USER test IDENTIFIED BY &apos;centos&apos; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Nginx服务的配置</span><br><span class="line">[root@nginx ~]# vim /etc/nginx/nginx.conf           # 添加一下行</span><br><span class="line">stream &#123;</span><br><span class="line">    upstream mysqlser &#123;         # 此处人可以指定调度算法ip_hash等</span><br><span class="line">        server 192.168.8.128:3306;</span><br><span class="line">        server 192.168.8.138:3306;</span><br><span class="line">    &#125;   </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 192.168.8.140:3306;          # 定义一个server，指定监听本地IP192.168.8.140的3306端口</span><br><span class="line">        proxy_pass mysqlser ;           # 转发到本地的网络组mysqlser</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@nginx ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@nginx ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">[root@nginx ~]# yum install -y  mariadb             # 安装mysql客户端          </span><br><span class="line">[root@nginx ~]# mysql -utest -pcentos -h 192.168.8.140      # 连接测试，应该是已经连接上192.168.8.128上面的mysql5.1了</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; Bye</span><br><span class="line">[root@nginx ~]# mysql -utest -pcentos -h 192.168.8.140      # 连接测试，应该是已经连接上192.168.8.138上面的mysql5.5了</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; Bye</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块  ngx_stream_core_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx编译安装模块（非重装）</title>
      <link href="/2017/10/28/Nginx-make2/"/>
      <url>/2017/10/28/Nginx-make2/</url>
      <content type="html"><![CDATA[<h3 id="添加mail模块"><a href="#添加mail模块" class="headerlink" title="添加mail模块"></a>添加mail模块</h3><h4 id="查看本地已经编译的模块"><a href="#查看本地已经编译的模块" class="headerlink" title="查看本地已经编译的模块"></a>查看本地已经编译的模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@centos7 sbin]# ./nginx -V</span><br><span class="line">nginx version: HaiYunNginx/6.6.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx </span><br><span class="line">--conf-path=/etc/nginx/nginx.conf </span><br><span class="line">--error-log-path=/var/log/nginx/error.log </span><br><span class="line">--http-log-path=/var/log/nginx/access.log</span><br><span class="line">--pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock</span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy </span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi</span><br><span class="line">--pid-path=/run/nginx.pid --with-http_mp4_module --with-http_gunzip_module</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp</span><br><span class="line">--with-stream_ssl_module --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module</span><br><span class="line">--with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="configure脚本"><a href="#configure脚本" class="headerlink" title="configure脚本"></a>configure脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# ./configure --prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --pid-path=/run/nginx.pid \</span><br><span class="line">--with-http_mp4_module --with-http_gunzip_module --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --with-stream_ssl_module --user=nginx \</span><br><span class="line">--group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module \</span><br><span class="line">--with-http_stub_status_module --with-threads --with-file-aio \</span><br><span class="line">--with-mail  # 添加mail模块</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在添加模块的时候，一定要把这些之前编译的模块带上，不然你编译的只有你想提价的模块，之前的模块不会编译。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# make</span><br></pre></td></tr></table></figure><p>注意：不要<code>make install</code>，不然就相当于重装了。</p><h4 id="替换Nginx二进制文件"><a href="#替换Nginx二进制文件" class="headerlink" title="替换Nginx二进制文件"></a>替换Nginx二进制文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# cp -a /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak      # 替换前先备份一下    </span><br><span class="line">[root@centos7 nginx-1.13.6]# cp ./objs/nginx /usr/local/nginx/sbin/         # 替换nginx程序</span><br><span class="line">cp: overwrite ‘/usr/local/nginx/sbin/nginx’? y</span><br></pre></td></tr></table></figure><h4 id="启动nginx，并查看编译选项"><a href="#启动nginx，并查看编译选项" class="headerlink" title="启动nginx，并查看编译选项"></a>启动nginx，并查看编译选项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# /usr/local/nginx/sbin/nginx </span><br><span class="line">[root@centos7 nginx-1.13.6]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: HaiYunNginx/6.6.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx </span><br><span class="line">--conf-path=/etc/nginx/nginx.conf </span><br><span class="line">--error-log-path=/var/log/nginx/error.log </span><br><span class="line">--http-log-path=/var/log/nginx/access.log </span><br><span class="line">--pid-path=/var/run/nginx.pid </span><br><span class="line">--lock-path=/var/run/nginx.lock </span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy </span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi </span><br><span class="line">--pid-path=/run/nginx.pid --with-http_mp4_module </span><br><span class="line">--with-http_gunzip_module --http-scgi-temp-path=/var/cache/nginx/scgi_temp</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --with-stream_ssl_module </span><br><span class="line">--user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module </span><br><span class="line">--with-http_dav_module --with-http_stub_status_module </span><br><span class="line">--with-threads --with-file-aio --with-mail    # 已经添加成功</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx编译安装模块（非重装） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx编译安装</title>
      <link href="/2017/10/28/Nginx-make/"/>
      <url>/2017/10/28/Nginx-make/</url>
      <content type="html"><![CDATA[<h3 id="安装必备软件包"><a href="#安装必备软件包" class="headerlink" title="安装必备软件包"></a>安装必备软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum -y install  openssl-devel pcre-devel      # 安装必备包</span><br><span class="line">[root@centos7 nginx-1.10.3]# yum install gcc make gcc-c++       # 安装编译工具</span><br></pre></td></tr></table></figure><h3 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h3><p>目前最新的版本是<code>1.13.6</code>，先来尝个鲜。（生产中可不要这么干！）</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# wget  http://nginx.org/download/nginx-1.13.6.tar.gz       # 下载源码包</span><br><span class="line">--2017-10-28 19:16:52--  http://nginx.org/download/nginx-1.13.6.tar.gz</span><br><span class="line">Resolving nginx.org (nginx.org)... 95.211.80.227, 206.251.255.63, 2001:1af8:4060:a004:21::e3, ...</span><br><span class="line">Connecting to nginx.org (nginx.org)|95.211.80.227|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 989760 (967K) [application/octet-stream]</span><br><span class="line">Saving to: ‘nginx-1.13.6.tar.gz’</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 989,760      424KB/s   in 2.3s   </span><br><span class="line"></span><br><span class="line">2017-10-28 19:16:55 (424 KB/s) - ‘nginx-1.13.6.tar.gz’ saved [989760/989760]</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ls</span><br><span class="line">nginx-1.13.6.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# tar xf nginx-1.13.6.tar.gz -C /usr/local/src/         # 解压到/usr/local/src/目录下</span><br></pre></td></tr></table></figure><h3 id="修改隐藏Nginx版本号"><a href="#修改隐藏Nginx版本号" class="headerlink" title="修改隐藏Nginx版本号"></a>修改隐藏Nginx版本号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cd /usr/local/src/nginx-1.13.6/src/core/</span><br><span class="line">[root@centos7 core]# vim nginx.h</span><br><span class="line">/*</span><br><span class="line"> * Copyright (C) Igor Sysoev</span><br><span class="line"> * Copyright (C) Nginx, Inc.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ifndef _NGINX_H_INCLUDED_</span><br><span class="line">#define _NGINX_H_INCLUDED_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define nginx_version      1013006</span><br><span class="line">#define NGINX_VERSION      &quot;6.6.6&quot;              # 自定义版本</span><br><span class="line">#define NGINX_VER          &quot;HaiYunNginx/&quot; NGINX_VERSION         # Server自定义</span><br><span class="line"></span><br><span class="line">#ifdef NGX_BUILD</span><br><span class="line">#define NGINX_VER_BUILD    NGINX_VER &quot; (&quot; NGX_BUILD &quot;)&quot;</span><br><span class="line">#else</span><br><span class="line">#define NGINX_VER_BUILD    NGINX_VER</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#define NGINX_VAR          &quot;NGINX&quot;</span><br><span class="line">#define NGX_OLDPID_EXT     &quot;.oldbin&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#endif /* _NGINX_H_INCLUDED_ */</span><br></pre></td></tr></table></figure><h3 id="添加nginx用户"><a href="#添加nginx用户" class="headerlink" title="添加nginx用户"></a>添加nginx用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# useradd -r -s /sbin/nologin -m -d   /var/lib/nginx nginx       # 添加用户nginx</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# ./configure --prefix=/usr/local/nginx \        # 开始编译安装</span><br><span class="line">&gt; --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">&gt; --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">&gt; --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">&gt; --pid-path=/var/run/nginx.pid \</span><br><span class="line">&gt; --lock-path=/var/run/nginx.lock \</span><br><span class="line">&gt; --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \</span><br><span class="line">&gt; --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \</span><br><span class="line">&gt; --pid-path=/run/nginx.pid \</span><br><span class="line">&gt; --with-http_mp4_module \</span><br><span class="line">&gt; --with-http_gunzip_module \</span><br><span class="line">&gt; --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">&gt;  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">&gt;  --with-stream_ssl_module \</span><br><span class="line">&gt; --user=nginx \</span><br><span class="line">&gt; --group=nginx \</span><br><span class="line">&gt; --with-http_ssl_module \</span><br><span class="line">&gt; --with-http_v2_module \</span><br><span class="line">&gt; --with-http_dav_module \</span><br><span class="line">&gt; --with-http_stub_status_module \</span><br><span class="line">&gt; --with-threads \</span><br><span class="line">&gt; --with-file-aio \</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">[root@centos7 nginx-1.13.6]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="编译参数说明"><a href="#编译参数说明" class="headerlink" title="编译参数说明"></a>编译参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \</span><br><span class="line">--pid-path=/run/nginx.pid \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line"> --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line"> --with-stream_ssl_module \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx \ # 安装目录</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \ # 指定配置文件路径</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \ # 错误日志</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \ # 访问日志</span><br><span class="line">--pid-path=/var/run/nginx.pid \ # pid路径</span><br><span class="line">--lock-path=/var/run/nginx.lock \   #  锁文件安装位置</span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy \   作为代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \ 作为fastcgi代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line">--with-http_mp4_module \    # 启用MP4视频</span><br><span class="line">--with-http_gunzip_module \ # 启用压缩</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \ # 作为scgi反代服务器，服务器响应报文的临时文件存放路径</span><br><span class="line"> --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \# 作为uwsgi代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line">--with-stream_ssl_module \ # 启用stream模块的ssl</span><br><span class="line">--user=nginx \  # 指明以那个身份运行worker进程，主控master进程一般由root运行</span><br><span class="line">--group=nginx \ # 组</span><br><span class="line">--with-http_ssl_module \ # 启用ssl</span><br><span class="line">--with-http_v2_module \ # 支持http2.0</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \   # 异步非阻塞</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@centos7 sbin]# ls</span><br><span class="line">nginx</span><br><span class="line">[root@centos7 sbin]# ./nginx        # 启动nginx，提示找不到目录</span><br><span class="line">nginx: [emerg] mkdir() &quot;/var/lib/nginx/tmp/proxy&quot; failed (2: No such file or directory)</span><br><span class="line">[root@centos7 sbin]# mkdir -p /var/lib/nginx/tmp/proxy  # 创建目录</span><br><span class="line">[root@centos7 sbin]# ./nginx        # 再次启动，还是提示缺少目录</span><br><span class="line">nginx: [emerg] mkdir() &quot;/var/cache/nginx/uwsgi_temp&quot; failed (2: No such file or directory)</span><br><span class="line">[root@centos7 sbin]# mkdir -p /var/cache/nginx/uwsgi_temp   # 创建目录</span><br><span class="line">[root@centos7 sbin]# ./nginx</span><br><span class="line">[root@centos7 sbin]# ss -tnul       # 80端口已经开启</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0              ::1:323                         :::*                  </span><br><span class="line">udp   UNCONN     0      0               :::34463                       :::*                  </span><br><span class="line">tcp   LISTEN     0      128              *:80                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:22                           *:*                  </span><br><span class="line"></span><br><span class="line">[root@centos7 sbin]# curl -I localhost</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: HaiYunNginx/6.6.6           # 已经修改为我们想要的版本了，呵呵~~~</span><br><span class="line">Date: Sat, 28 Oct 2017 12:07:24 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Sat, 28 Oct 2017 12:01:53 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f471b1-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="查看已经编译模块"><a href="#查看已经编译模块" class="headerlink" title="查看已经编译模块"></a>查看已经编译模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 sbin]# ./nginx -V</span><br><span class="line">nginx version: HaiYunNginx/6.6.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --pid-path=/run/nginx.pid --with-http_mp4_module --with-http_gunzip_module --http-scgi-temp-path=/var/cache/nginx/scgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --with-stream_ssl_module --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx编译安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块  ngx_http_upstream_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-upstream-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-upstream-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该<code>ngx_http_upstream_module</code>模块用于定义可由<code>proxy_pass</code>， <code>fastcgi_pass</code>， <code>uwsgi_pass</code>， <code>scgi_pass</code>和<code>memcached_pa​​ss</code>指令引用的服务器组。</p><p>用于将多个服务器定义成服务器组，而由<code>proxy_pass,fastcgi_pass</code>等指令进行引用</p><h3 id="upstream-name-…"><a href="#upstream-name-…" class="headerlink" title="upstream name { … }"></a>upstream name { … }</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:upstream name &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>定义一组服务器。服务器可以在不同端口上侦听。另外，监听<code>TCP</code>和<code>UNIX</code>域套接字的服务器可以混合使用。</p><p>定义后端服务器组，会引入一个新的上下文,默认调度算法是wrr</p><h3 id="server-address-parameters"><a href="#server-address-parameters" class="headerlink" title="server address [parameters];"></a>server address [parameters];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:server address [parameters];</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br></pre></td></tr></table></figure></p><p>定义 服务器<code>address</code>和其他<code>parameters</code>服务器。可以将该地址指定为具有可选端口的域名或IP地址，或者指定为“ <code>unix:</code>”前缀之后指定的<code>UNIX</code>域套接字路径。如果未指定端口，则使用端口80。解析为多个<code>IP</code>地址的域名一次定义多个服务器。</p><p>在<code>upstream</code>上下文中<code>server</code>成员，以及相关的参数； ·<code>Context:upstream address·</code>的表示格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unix:/PATH/TO/SOME_SOCK_FILE</span><br><span class="line">IP[:PORT]</span><br><span class="line">HOSTNAME[:PORT]</span><br></pre></td></tr></table></figure></p><h4 id="parameters："><a href="#parameters：" class="headerlink" title="parameters："></a>parameters：</h4><ul><li><code>weight=number</code> 权重，默认为1</li><li><code>max_conns</code> 连接后端报务器最大并发活动连接数， 1.11.5后支持</li><li><code>max_fails=number</code> 失败尝试最大次数；超出此处指定的次数时， server将被标记为不可用,默认为<code>1</code></li><li><code>fail_timeout=time</code> 后端服务器标记为不可用状态的连接超时时长，默认<code>10s</code></li><li><code>backup</code> 将服务器标记为“备用”，即所有服务器均不可用时才启用</li><li><code>down</code> 标记为“不可用”，配合<code>ip_hash</code>使用，实现灰度发布</li></ul><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash;"></a>ip_hash;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ip_hash;</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br></pre></td></tr></table></figure></p><p>指定组应该使用根据客户端IP地址在服务器之间分配请求的负载平衡方法。客户端<code>IPv4</code>地址或整个<code>IPv6</code>地址的前三个八位字节被用作散列密钥。该方法确保来自同一客户端的请求将始终传递到同一服务器，除非此服务器不可用。在后一种情况下，客户端请求将被传递到另一个服务器。很可能，它将始终是同一台服务器。</p><p>源地址hash调度方法</p><h3 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn;"></a>least_conn;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:least_conn;</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br><span class="line">This directive appeared in versions 1.3.1 and 1.2.2.</span><br></pre></td></tr></table></figure></p><p>指定一个组应该使用负载平衡方法，其中请求被传递到具有最少数量的活动连接的服务器，同时考虑服务器的权重。如果有几个这样的服务器，则依次使用加权循环平衡方法。</p><p>最少连接调度算法，当<code>server</code>拥有不同的权重时其为<code>wlc</code>，当所有后端主机连接数相同时，则使用<code>wrr</code>，适用于长连接</p><h3 id="hash-key-consistent"><a href="#hash-key-consistent" class="headerlink" title="hash key [consistent];"></a>hash key [consistent];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:hash key [consistent];</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br><span class="line">This directive appeared in version 1.7.2.</span><br></pre></td></tr></table></figure></p><p>基于指定的<code>key</code>的<code>hash</code>表来实现对请求的调度，此处的<code>key</code>可以直接文本、变量或二者组合</p><p>作用：将请求分类，同一类请求将发往同一个<code>upstream server</code>，使用<code>consistent</code>参数，将使用<code>ketama</code>一致性<code>hash</code>算法，适用于后端是<code>Cache</code>服务器（如<code>varnish</code>）时使用</p><ul><li><code>hash $request_uri consistent;</code></li><li><code>hash $remote_addr;</code></li></ul><h3 id="keepalive-连接数N"><a href="#keepalive-连接数N" class="headerlink" title="keepalive 连接数N;"></a>keepalive 连接数N;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive connections;</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br></pre></td></tr></table></figure></p><p>为每个<code>worker</code>进程保留的空闲的长连接数量,可节约<code>nginx</code>端口，并减少连接管理的消耗</p><h3 id="health-check-parameters"><a href="#health-check-parameters" class="headerlink" title="health_check [parameters];"></a>health_check [parameters];</h3><ul><li><code>health_check [parameters];</code></li><li>健康状态检测机制；只能用于location上下文</li></ul><p>常用参数：</p><ul><li><code>interval=time</code>检测的频率，默认为5秒</li><li><code>fails=number</code>：判定服务器不可用的失败检测次数；默认为1次</li><li><code>passes=number</code>：判定服务器可用的失败检测次数；默认为1次</li><li><code>uri=uri</code>：做健康状态检测测试的目标<code>uri</code>；默认为/</li><li><code>match=NAME</code>：健康状态检测的结果评估调用此处指定的<code>match</code>配置块注意：仅对<code>nginx plus</code>有效</li></ul><p><strong>注意：此项仅对商业版nginx有效</strong></p><h3 id="match-name-…"><a href="#match-name-…" class="headerlink" title="match name { … }"></a>match name { … }</h3><p>对<code>backend server</code>做健康状态检测时，定义其结果判断机制；只能用于<code>http</code>上下文</p><p>常用的参数：</p><ul><li><code>status code[ code ...]</code>: 期望的响应状态码</li><li><code>header HEADER[operator value]</code>：期望存在响应首部，也可对期望的响应首部的值基于比较操作符和值进行比较<code>body</code>：期望响应报文的主体部分应该有的内容</li></ul><p><strong>注意：此项仅对商业版nginx有效</strong></p><h3 id="实现upstream"><a href="#实现upstream" class="headerlink" title="实现upstream"></a>实现upstream</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/nginx.conf        # 修改主配置文件</span><br><span class="line">upstream web &#123;          #定义一个网络组，名称为web，网络组定义了两台server，分别为192.168.8.128和192.168.8.138</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf     # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://web;              # 定义访问本地的web根目录就代理到网络组web</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第一台server的配置</span><br><span class="line">[root@138 ~]# ifconfig ens34</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 76396  bytes 13285907 (12.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 74734  bytes 17770296 (16.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@138 ~]# yum install -y httpd</span><br><span class="line">[root@fast-cgi ~]# echo &quot;192.168.8.138&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@138 ~]# systemctl start httpd</span><br><span class="line">[root@138 ~]# ss -tnul          # 80端口已经打开</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line"></span><br><span class="line">tcp   LISTEN     0      128              *:9000                         *:*                  </span><br><span class="line">tcp   LISTEN     0      128             :::80                          :::*                  </span><br><span class="line">tcp   LISTEN     0      128             :::22                          :::*                  </span><br><span class="line">tcp   LISTEN     0      100            ::1:25                          :::*      </span><br><span class="line">[root@138 ~]# curl 192.168.8.138        # 本地测试可以访问</span><br><span class="line">192.168.8.138</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第二台server的配置</span><br><span class="line">[root@128 ~]# ifconfig eth1</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:5031 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:4554 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:843593 (823.8 KiB)  TX bytes:1662926 (1.5 MiB)</span><br><span class="line">[root@128 ~]# yum install -y httpd</span><br><span class="line">[root@128 ~]# echo &quot;192.168.8.128&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@128 ~]# service httpd start</span><br><span class="line">Starting httpd:                             [  OK  ]</span><br><span class="line">[root@128 ~]# ss -tnul      # 80端口已经打开</span><br><span class="line">Netid State      Recv-Q Send-Q            Local Address:Port              Peer Address:Port </span><br><span class="line">udp   UNCONN     0      0                             *:68                           *:*     </span><br><span class="line">tcp   LISTEN     0      50                            *:3306                         *:*     </span><br><span class="line">tcp   LISTEN     0      128                          :::80                          :::*     </span><br><span class="line">tcp   LISTEN     0      128                          :::22                          :::*     </span><br><span class="line">tcp   LISTEN     0      128                           *:22                           *:*     </span><br><span class="line">tcp   LISTEN     0      100                         ::1:25                          :::*     </span><br><span class="line">tcp   LISTEN     0      100                   127.0.0.1:25                           *:*   </span><br><span class="line">[root@128 ~]# curl 192.168.8.128        # 本地测试可以访问</span><br><span class="line">192.168.8.128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done       #访问测试，ok</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br></pre></td></tr></table></figure><h3 id="实现upstream，定义Nginx为sorry-server"><a href="#实现upstream，定义Nginx为sorry-server" class="headerlink" title="实现upstream，定义Nginx为sorry server"></a>实现upstream，定义Nginx为sorry server</h3><p>我们还是接着上面的实验来做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改nginx的主配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;        # 定义本地服务器81端口为backup服务器，相当于sorry server</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# echo &quot;Soryy! 我们的服务器宕机了！正在抢修中...&quot; &gt; /app/website2/index.html        #修改默认页面的内容</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf     # 修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://web; </span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 81 ;</span><br><span class="line">    server_name www.b.com ; </span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    error_log /var/log/nginx/b.com.error.log  ;   </span><br><span class="line">    access_log /var/log/nginx/b.com.access.log main ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">[root@138 ~]# systemctl stop httpd      # 停止138的httpd服务</span><br><span class="line">[root@128 ~]# service httpd stop        # 停止128的httpd服务</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140        #访问测试，ok</span><br><span class="line">Soryy! 我们的服务器宕机了！正在抢修中...</span><br><span class="line"></span><br><span class="line">[root@138 ~]# systemctl start httpd         # 启动138的httpd服务</span><br><span class="line">[root@128 ~]# service httpd start       # 启动128的httpd服务</span><br><span class="line">Starting httpd:                             [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done       # 访问测试，一切正常</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br></pre></td></tr></table></figure><h3 id="实现ip-hash，针对源地址永久调度到一台后部web-server"><a href="#实现ip-hash，针对源地址永久调度到一台后部web-server" class="headerlink" title="实现ip_hash，针对源地址永久调度到一台后部web server"></a>实现ip_hash，针对源地址永久调度到一台后部web server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;</span><br><span class="line">        ip_hash ;           # 添加ip_hash</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done           # 测试，都调度到一台web server了</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br></pre></td></tr></table></figure><h3 id="实现least-conn，根据服务器的真实负载来调度"><a href="#实现least-conn，根据服务器的真实负载来调度" class="headerlink" title="实现least_conn，根据服务器的真实负载来调度"></a>实现least_conn，根据服务器的真实负载来调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;</span><br><span class="line">        least_conn ;            # 添加least_conn</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done           # 访问测试，ok</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br></pre></td></tr></table></figure><h3 id="实现hash根据用户的URI来调度"><a href="#实现hash根据用户的URI来调度" class="headerlink" title="实现hash根据用户的URI来调度"></a>实现hash根据用户的URI来调度</h3><p>此项可以配合缓存服务器来使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;</span><br><span class="line">        hash  $request_uri ;            # 添加hash key基于URI</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">[root@138 ~]# for i in &#123;1..5&#125; ; do echo &quot;$i.html 193.168.8.138&quot; &gt; /var/www/html/$i.html  ; done     # 在138上面创建5个测试页面</span><br><span class="line">[root@138 ~]# ls /var/www/html/</span><br><span class="line">1.html  2.html  3.html  4.html  5.html  blog  index.html</span><br><span class="line">[root@138 ~]# cat /var/www/html/1.html </span><br><span class="line">1.html 193.168.8.138</span><br><span class="line"></span><br><span class="line">[root@128 ~]# for i in &#123;1..5&#125; ; do echo &quot;$i.html 193.168.8.128&quot; &gt; /var/www/html/$i.html  ; done     # 在128上面创建5个测试页面</span><br><span class="line">[root@128 ~]# ls /var/www/html/</span><br><span class="line">1.html  2.html  3.html  4.html  5.html  index.html</span><br><span class="line">[root@128 ~]# cat /var/www/html/1.html </span><br><span class="line">1.html 193.168.8.128</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..5&#125; ; do curl 192.168.8.140/1.html ; done     # 测试访问，1.html都已经调度到128这台server</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..5&#125; ; do curl 192.168.8.140/3.html ; done     # 测试访问，3.html都已经调度到138这台server</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br></pre></td></tr></table></figure></p><h3 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><p>作用：一致性hash算法（<code>DHT</code>）通过减少影响范围的方式解决了增减服务器导致的数据散列问题，从而解决了分布式环境下负载均衡问题，如果存在热点数据，那么通过增添节点的方式，对热点区间进行划分，将压力分配至其他服务器。重新达到负载均衡的状态。  </p><p>一致性哈希基本解决了在<code>P2P</code>环境中最为关键的问题——如何在动态的网络拓扑中分布存储和路由。每个节点仅需维护少量相邻节点的信息，并且在节点加入/退出系统时，仅有相关的少量节点参与到拓扑的维护中。所有这一切使得一致性哈希成为第一个实用的<code>DHT</code>算法。</p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块  ngx_http_upstream_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LNAMP搭建WordPress</title>
      <link href="/2017/10/27/Nginx-LNAMP/"/>
      <url>/2017/10/27/Nginx-LNAMP/</url>
      <content type="html"><![CDATA[<h3 id="使用nginx-php-fpm-mariadb-apache-搭建wordpress"><a href="#使用nginx-php-fpm-mariadb-apache-搭建wordpress" class="headerlink" title="使用nginx+ php-fpm + mariadb + apache 搭建wordpress"></a>使用nginx+ php-fpm + mariadb + apache 搭建wordpress</h3><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><center><img src="https://houhaiyun.github.io/img/images/Nginx-LNAMP-1.jpg" title="拓扑图"></center><a id="more"></a><table><thead><tr><th>服务</th><th>IP</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>192.168.8.140</td><td>反向代理</td></tr><tr><td>Apache</td><td>192.168.8.138</td><td>web服务</td></tr><tr><td>Mysql</td><td>192.168.8.128</td><td>存储数据</td></tr><tr><td>Php-fpm</td><td>192.168.8.138</td><td>解析php文件</td></tr></tbody></table><h4 id="安装配置数据库服务器"><a href="#安装配置数据库服务器" class="headerlink" title="安装配置数据库服务器"></a>安装配置数据库服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql ~]# yum -y  install mysql-server        # 安装mysql数据库</span><br><span class="line">[root@Mysql ~]# service mysqld start        # 启动mysql数据库</span><br><span class="line">Initializing MySQL database:  Installing MySQL system tables...</span><br><span class="line">OK</span><br><span class="line">Filling help tables...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">/usr/bin/mysqladmin -u root password &apos;new-password&apos;</span><br><span class="line">/usr/bin/mysqladmin -u root -h Mysql password &apos;new-password&apos;</span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br><span class="line"></span><br><span class="line">which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">See the manual for more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MySQL daemon with:</span><br><span class="line">cd /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line">You can test the MySQL daemon with mysql-test-run.pl</span><br><span class="line">cd /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems with the /usr/bin/mysqlbug script!</span><br><span class="line"></span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@Mysql ~]# mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE DATABASE wpdb;        # 为wordpress创建数据库</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; GRANT ALL ON  wpdb.* TO wpuser@&apos;192.168.8.%&apos; IDENTIFIED BY &apos;centos&apos;;     # 为wordpress创建用户并授权</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; SHOW DATABASES;      # 查看数据库</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| test               |</span><br><span class="line">| wpdb               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="配置php服务器"><a href="#配置php服务器" class="headerlink" title="配置php服务器"></a>配置php服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# vim /etc/php-fpm.d/www.conf      # 修改php配置文件</span><br><span class="line">listen = 9000       # 指定监听所有IP的9000端口</span><br><span class="line">listen.allowed_clients = 127.0.0.1,192.168.8.140    # 允许192.168.8.140使用php</span><br><span class="line"># 注意：上面两项在本实验中并不是必须的。如果apache和php-fpm不再同一台服务器上面就需要配置了。</span><br></pre></td></tr></table></figure><h3 id="安装配置Apache服务器"><a href="#安装配置Apache服务器" class="headerlink" title="安装配置Apache服务器"></a>安装配置Apache服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# yum install -y httpd</span><br><span class="line">[root@fast-cgi ~]# systemctl start httpd</span><br><span class="line">[root@fast-cgi ~]# vim /etc/httpd/conf/httpd.conf       # 修改主配置文件添加以下行</span><br><span class="line">DirectoryIndex index.php</span><br><span class="line">ProxyRequests Off </span><br><span class="line">ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1</span><br></pre></td></tr></table></figure><h3 id="测试链接数据库"><a href="#测试链接数据库" class="headerlink" title="测试链接数据库"></a>测试链接数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi php]# yum install -y php-mysql</span><br><span class="line">[root@fast-cgi php]# systemctl restart php-fpm</span><br><span class="line">[root@fast-cgi php]# cat mysql.php </span><br><span class="line">&lt;?php</span><br><span class="line">$mysqli=new mysqli(&quot;192.168.8.128&quot;,&quot;wpuser&quot;,&quot;centos&quot;);</span><br><span class="line">if(mysqli_connect_errno())&#123;</span><br><span class="line">echo &quot;no&quot;;</span><br><span class="line">$mysqli=null;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;OK! &quot;;</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line">?&gt;</span><br><span class="line">[root@fast-cgi ~]# curl 192.168.8.140/mysql.php         # 测试连接，ok</span><br><span class="line">OK!</span><br></pre></td></tr></table></figure><h3 id="下载并配置wordpress"><a href="#下载并配置wordpress" class="headerlink" title="下载并配置wordpress"></a>下载并配置wordpress</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# wget https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz</span><br><span class="line">--2017-10-27 20:04:06--  https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz</span><br><span class="line">Resolving cn.wordpress.org (cn.wordpress.org)... 66.155.40.250, 66.155.40.249</span><br><span class="line">Connecting to cn.wordpress.org (cn.wordpress.org)|66.155.40.250|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 8641990 (8.2M) [application/octet-stream]</span><br><span class="line">Saving to: ‘wordpress-4.8.1-zh_CN.tar.gz’</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 8,641,990   3.09MB/s   in 2.7s   </span><br><span class="line"></span><br><span class="line">2017-10-27 20:04:10 (3.09 MB/s) - ‘wordpress-4.8.1-zh_CN.tar.gz’ saved [8641990/8641990]</span><br><span class="line"></span><br><span class="line">[root@fast-cgi ~]# tar -xf wordpress-4.8.1-zh_CN.tar.gz -C /var/www/html/</span><br><span class="line">[root@fast-cgi ~]# cd /var/www/html/</span><br><span class="line">[root@fast-cgi html]# ls</span><br><span class="line">wordpress</span><br><span class="line">[root@fast-cgi html]# mv wordpress/ blog</span><br><span class="line">[root@fast-cgi html]# ls</span><br><span class="line">blog</span><br><span class="line">[root@fast-cgi blog]# mv wp-config-sample.php wp-config.php</span><br><span class="line">[root@fast-cgi blog]# vim  wp-config.php      # 修改wordpress配置文件</span><br><span class="line">define(&apos;DB_NAME&apos;, &apos;wpdb&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库用户名 */</span><br><span class="line">define(&apos;DB_USER&apos;, &apos;wpuser&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库密码 */</span><br><span class="line">define(&apos;DB_PASSWORD&apos;, &apos;centos&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL主机 */</span><br><span class="line">define(&apos;DB_HOST&apos;, &apos;192.168.8.128&apos;);</span><br><span class="line"></span><br><span class="line">/** 创建数据表时默认的文字编码 */</span><br><span class="line">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</span><br><span class="line"></span><br><span class="line">/** 数据库整理类型。如不确定请勿更改 */</span><br><span class="line">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</span><br></pre></td></tr></table></figure><h3 id="Nginx代理服务器配置"><a href="#Nginx代理服务器配置" class="headerlink" title="Nginx代理服务器配置"></a>Nginx代理服务器配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install -y nginx      # 安装nginx服务</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改代理服务器的配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /blog  &#123;       # 定义只要访问/blog目录就跳转到http://192.168.8.138/blog目录</span><br><span class="line">        proxy_pass http://192.168.8.138 ;       </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>搞定！</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-LNAMP-2.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> LNAMP搭建WordPress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_fastcgi_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-fastcgi-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-fastcgi-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该<code>ngx_http_fastcgi_module</code>模块允许将请求传递给<code>FastCGI</code>服务器。</p><h3 id="fastcgi-pass-address"><a href="#fastcgi-pass-address" class="headerlink" title="fastcgi_pass address;"></a>fastcgi_pass address;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_pass address;</span><br><span class="line">Default:—</span><br><span class="line">Context:location, if in location</span><br></pre></td></tr></table></figure></p><p>设置<code>FastCGI</code>服务器的地址。地址可以指定为域名或<code>IP</code>地址，端口号：</p><a id="more"></a><h3 id="fastcgi-index-name"><a href="#fastcgi-index-name" class="headerlink" title="fastcgi_index name;"></a>fastcgi_index name;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_index name;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p><code>fastcgi</code>默认的主页资源</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;</span><br></pre></td></tr></table></figure><p>和“ /page.php”请求，SCRIPT_FILENAME参数将等于“ /home/www/scripts/php/page.php”，并且“ /”请求将等于“ /home/www/scripts/php/index.php”。</p><h3 id="fastcgi-param-parameter-value-if-not-empty"><a href="#fastcgi-param-parameter-value-if-not-empty" class="headerlink" title="fastcgi_param parameter value [if_not_empty];"></a>fastcgi_param parameter value [if_not_empty];</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_param parameter value [if_not_empty];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设置传递给 <code>FastCGI</code>服务器的参数值，可以是文本，变量或组合</p><p>以下示例显示了PHP的最低要求设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param SCRIPT_FILENAME / home / www / scripts / php $ fastcgi_script_name; </span><br><span class="line">fastcgi_param QUERY_STRING $ query_string;</span><br></pre></td></tr></table></figure></p><h3 id="实现fast-cgi"><a href="#实现fast-cgi" class="headerlink" title="实现fast-cgi"></a>实现fast-cgi</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# yum -y install php php-fpm mariadb-server</span><br><span class="line"></span><br><span class="line">[root@fast-cgi ~]# vim /etc/php-fpm.d/www.conf          #修改fast-cgi配置文件</span><br><span class="line">listen = 9000           # 监听所有IP的9000端口</span><br><span class="line">listen.allowed_clients = 127.0.0.1,192.168.8.140        # 允许192.168.8.140控制fast-cgi</span><br><span class="line"></span><br><span class="line">[root@fast-cgi ~]# systemctl start php-fpm          # 启动php-fpm程序</span><br><span class="line">[root@fast-cgi ~]# mkdir /app/php</span><br><span class="line">[root@fast-cgi ~]# vim /app/php/test.php        # 编写php测试页</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改代理服务器的配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;        # 定义处理.php结尾的服务器</span><br><span class="line">        fastcgi_index index.php ;           # 默认fastcgi的默认主页资源</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /app/php$fastcgi_script_name;     # /app/php代表fastcgi服务器php网页的根目录</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    proxy_cache proxycache ; </span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><p>测试访问，ok</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-fastcgi-module-1.gif" title="测试访问"></center><h3 id="通过-pm-status和-ping来获取fpm-server状态信息"><a href="#通过-pm-status和-ping来获取fpm-server状态信息" class="headerlink" title="通过/pm_status和/ping来获取fpm server状态信息"></a>通过/pm_status和/ping来获取fpm server状态信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# vim /etc/php-fpm.d/www.conf          # 修改fast-cgi的配置文件</span><br><span class="line">ping.path = /ping       # 开启ping</span><br><span class="line">pm.status_path = /status    # 开启status</span><br><span class="line">[root@fast-cgi ~]# systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改nginx代理服务器的配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;</span><br><span class="line">        fastcgi_index index.php ;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /app/php$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;   </span><br><span class="line">    location ~* ^/(status|ping)$ &#123;          # 定义如果访问stats和ping目录就转发到php来处理</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl 192.168.8.140/status      # 测试状态</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          258</span><br><span class="line">accepted conn:        4</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     0</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       4</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      5</span><br><span class="line">max active processes: 1</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl 192.168.8.140/ping        # 测试ping，ok</span><br><span class="line">pong</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl http://192.168.8.140/status?xml       # 测试status，以xml格式显示</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;status&gt;</span><br><span class="line">&lt;pool&gt;www&lt;/pool&gt;</span><br><span class="line">&lt;process-manager&gt;dynamic&lt;/process-manager&gt;</span><br><span class="line">&lt;start-time&gt;1509102758&lt;/start-time&gt;</span><br><span class="line">&lt;start-since&gt;476&lt;/start-since&gt;</span><br><span class="line">&lt;accepted-conn&gt;12344&lt;/accepted-conn&gt;</span><br><span class="line">&lt;listen-queue&gt;0&lt;/listen-queue&gt;</span><br><span class="line">&lt;max-listen-queue&gt;124&lt;/max-listen-queue&gt;</span><br><span class="line">&lt;listen-queue-len&gt;128&lt;/listen-queue-len&gt;</span><br><span class="line">&lt;idle-processes&gt;7&lt;/idle-processes&gt;</span><br><span class="line">&lt;active-processes&gt;1&lt;/active-processes&gt;</span><br><span class="line">&lt;total-processes&gt;8&lt;/total-processes&gt;</span><br><span class="line">&lt;max-active-processes&gt;8&lt;/max-active-processes&gt;</span><br><span class="line">&lt;max-children-reached&gt;0&lt;/max-children-reached&gt;</span><br><span class="line">&lt;slow-requests&gt;0&lt;/slow-requests&gt;</span><br><span class="line">&lt;/status&gt;</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl http://192.168.8.140/status?json      # 以json格式显示</span><br><span class="line">&#123;&quot;pool&quot;:&quot;www&quot;,&quot;process manager&quot;:&quot;dynamic&quot;,&quot;start time&quot;:1509102758,&quot;start since&quot;:508,&quot;accepted conn&quot;:12346,&quot;listen queue&quot;:0,&quot;max listen queue&quot;:124,&quot;listen queue len&quot;:128,&quot;idle processes&quot;:7,&quot;active processes&quot;:1,&quot;total processes&quot;:8,&quot;max active processes&quot;:8,&quot;max children reached&quot;:0,&quot;slow requests&quot;:0&#125;</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl http://192.168.8.140/status?full          # 完整格式显示</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">accepted conn:        12347</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     124</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       7</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      8</span><br><span class="line">max active processes: 8</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19275</span><br><span class="line">state:                Running</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             1925</span><br><span class="line">request duration:     175</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?full</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19276</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             1667</span><br><span class="line">request duration:     109</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19277</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             1748</span><br><span class="line">request duration:     188</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?php</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19278</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             2057</span><br><span class="line">request duration:     268</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?xml</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19279</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             2157</span><br><span class="line">request duration:     173</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?json</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19281</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:18:50 +0800</span><br><span class="line">start since:          204</span><br><span class="line">requests:             1717</span><br><span class="line">request duration:     139</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19282</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:19:01 +0800</span><br><span class="line">start since:          193</span><br><span class="line">requests:             678</span><br><span class="line">request duration:     737</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19283</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:19:07 +0800</span><br><span class="line">start since:          187</span><br><span class="line">requests:             398</span><br><span class="line">request duration:     320</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br></pre></td></tr></table></figure><h3 id="fastcgi-cache-path-path…"><a href="#fastcgi-cache-path-path…" class="headerlink" title="fastcgi_cache_path path…;"></a>fastcgi_cache_path path…;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br></pre></td></tr></table></figure></p><p>定义<code>fastcgi</code>的缓存；</p><ul><li><code>path</code> 缓存位置为磁盘上的文件系统</li><li><code>max_size=size</code><ul><li>磁盘<code>path</code>路径中用于缓存数据的缓存空间上限</li></ul></li><li><code>levels=levels</code>：缓存目录的层级数量，以及每一级的目录数量</li><li><code>levels=ONE:TWO:THREE</code></li></ul><p>示例：<code>leves=1:2:2</code></p><ul><li><code>keys_zone=name:size</code><ul><li><code>k/v</code>映射的内存空间的名称及大小</li></ul></li><li><code>inactive=time`</code><ul><li>非活动时长</li></ul></li></ul><h3 id="fastcgi-cache-zone-off"><a href="#fastcgi-cache-zone-off" class="headerlink" title="fastcgi_cache zone | off;"></a>fastcgi_cache zone | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache zone | off;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_cache off;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义用于缓存的共享内存区域。相同的区域可以在几个地方使用。参数值可以包含变量（1.7.9）。该<code>off</code>参数禁用从先前配置级别继承的缓存。</p><p>调用指定的缓存空间来缓存数据</p><h3 id="fastcgi-cache-key-string"><a href="#fastcgi-cache-key-string" class="headerlink" title="fastcgi_cache_key string;"></a>fastcgi_cache_key string;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_key string;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义用作缓存项的<code>key</code>的字符串<br>示例：<code>fastcgi_cache_key $request_rui;</code></p><h3 id="fastcgi-cache-methods-GET-HEAD-POST-…"><a href="#fastcgi-cache-methods-GET-HEAD-POST-…" class="headerlink" title="fastcgi_cache_methods GET | HEAD | POST …;"></a>fastcgi_cache_methods GET | HEAD | POST …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_methods GET | HEAD | POST ...;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_cache_methods GET HEAD;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 0.7.59.</span><br></pre></td></tr></table></figure></p><p>为哪些请求方法使用缓存</p><p>如果客户端请求方法在此指令中列出，则响应将被缓存。<code>“ GET”</code>和<code>“ HEAD”</code>方法总是添加到列表中，尽管建议明确指定它们。</p><h3 id="fastcgi-cache-min-uses-number"><a href="#fastcgi-cache-min-uses-number" class="headerlink" title="fastcgi_cache_min_uses number;"></a>fastcgi_cache_min_uses number;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_min_uses number;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_cache_min_uses 1;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>缓存空间中的缓存项在<code>inactive</code>定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项</p><h3 id="fastcgi-keep-conn-on-off"><a href="#fastcgi-keep-conn-on-off" class="headerlink" title="fastcgi_keep_conn on | off;"></a>fastcgi_keep_conn on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_keep_conn on | off;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_keep_conn off;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 1.1.4.</span><br></pre></td></tr></table></figure></p><p>收到后端服务器响应后， <code>fastcgi</code>服务器是否关闭连接，建议启用长连接</p><h3 id="fastcgi-cache-valid-code-…-time"><a href="#fastcgi-cache-valid-code-…-time" class="headerlink" title="fastcgi_cache_valid [code …] time;"></a>fastcgi_cache_valid [code …] time;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_valid [code ...] time;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>不同的响应码各自的缓存时长</p><h3 id="实现fastcgi缓存"><a href="#实现fastcgi缓存" class="headerlink" title="实现fastcgi缓存"></a>实现fastcgi缓存</h3><p>还是使用上面的实验环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir -p  /var/cache/nginx/fcgi_cache        # 创建缓存目录</span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/nginx.conf        # 在nginx主配置文件中添加如下，是在http中</span><br><span class="line">http &#123;</span><br><span class="line">    fastcgi_cache_path /var/cache/nginx/fcgi_cache</span><br><span class="line">    levels=1:1:2 keys_zone=fcgicache:20m</span><br><span class="line">    inactive=120s max_size=1g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;</span><br><span class="line">        fastcgi_index index.php ;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /app/php$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_cache fcgicache ;</span><br><span class="line">        fastcgi_cache_key $request_uri; </span><br><span class="line">        fastcgi_cache_valid 301 1h ;</span><br><span class="line">        fastcgi_cache_valid any 1m ;</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/test.php</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body &#123;background-color: #ffffff; color: #000000;&#125;</span><br><span class="line">body, td, th, h1, h2 &#123;font-family: sans-serif;&#125;</span><br><span class="line">pre &#123;margin: 0px; font-family: monospace;&#125;</span><br><span class="line">a:link &#123;color: #000099; text-decoration: none; background-color: #ffffff;&#125;</span><br><span class="line">a:hover &#123;text-decoration: underline;&#125;</span><br><span class="line">table &#123;border-collapse: collapse;&#125;</span><br><span class="line">.center &#123;text-align: center;&#125;</span><br><span class="line">.center table &#123; margin-left: auto; margin-right: auto; text-align: left;&#125;</span><br><span class="line">.center th &#123; text-align: center !important; &#125;</span><br><span class="line">td, th &#123; border: 1px solid #000000; font-size: 75%; vertical-align: baseline;&#125;</span><br><span class="line">h1 &#123;font-size: 150%;&#125;</span><br><span class="line">h2 &#123;font-size: 125%;&#125;</span><br><span class="line">.p &#123;text-align: left;&#125;</span><br><span class="line">.e &#123;background-color: #ccccff; font-weight: bold; color: #000000;&#125;</span><br><span class="line">.h &#123;background-color: #9999cc; font-weight: bold; color: #000000;&#125;</span><br><span class="line">.v &#123;background-color: #cccccc; color: #000000;&#125;</span><br><span class="line">.vr &#123;background-color: #cccccc; text-align: right; color: #000000;&#125;</span><br><span class="line">img &#123;float: right; border: 0px;&#125;</span><br><span class="line">hr &#123;width: 600px; background-color: #cccccc; border: 0px; height: 1px; color: #000000;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;title&gt;phpinfo()&lt;/title&gt;&lt;meta name=&quot;ROBOTS&quot; content=&quot;NOINDEX,NOFOLLOW,NOARCHIVE&quot; /&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;table border=&quot;0&quot; cellpadding=&quot;3&quot; width=&quot;600&quot;&gt;</span><br><span class="line">&lt;tr class=&quot;h&quot;&gt;&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;http://www.php.net/&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;/test.php?=PHPE9568F34-D428-11d2-A769-00AA001ACF42&quot; alt=&quot;PHP Logo&quot; /&gt;&lt;/a&gt;&lt;h1 class=&quot;p&quot;&gt;PHP Version 5.4.16&lt;/h1&gt;</span><br><span class="line">&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;&lt;br /&gt;</span><br><span class="line">。。。省略</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# cd /var/cache/nginx/fcgi_cache/      ＃进入缓存目录</span><br><span class="line">[root@Nginx-Server fcgi_cache]# ls      # 已经缓存</span><br><span class="line">1  7  b</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server fcgi_cache]# tree        #查看目录结构</span><br><span class="line">.</span><br><span class="line">├── 1</span><br><span class="line">│   └── a</span><br><span class="line">│       └── ed</span><br><span class="line">│           └── 05d649e04370121f2343846df6b2eda1</span><br><span class="line">├── 7</span><br><span class="line">│   └── 5</span><br><span class="line">│       └── 6f</span><br><span class="line">│           └── 1c4d0ba4e0548244739027d15ed56f57</span><br><span class="line">└── b</span><br><span class="line">    └── d</span><br><span class="line">        └── 77</span><br><span class="line">            └── bf6813c2bc0becb369a8d8367b6b77db</span><br><span class="line"></span><br><span class="line">9 directories, 3 files</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server fcgi_cache]# ll      </span><br><span class="line">total 0</span><br><span class="line">drwx------ 3 nginx nginx 15 Oct 27 21:21 1</span><br><span class="line">drwx------ 3 nginx nginx 15 Oct 27 21:21 7</span><br><span class="line">drwx------ 3 nginx nginx 15 Oct 27 21:21 b</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_fastcgi_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_headers_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-headers-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-headers-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该<code>ngx_http_headers_module</code>模块允许将<code>“Expires”和“Cache-Control”</code>头字段以及任意字段添加到响应头。</p><p>向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值</p><h3 id="add-header-name-value-always"><a href="#add-header-name-value-always" class="headerlink" title="add_header name value [always];"></a>add_header name value [always];</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:add_header name value [always];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果响应代码等于200,201（1.3.10），204,206,301,302,303,304,307（1.1.16,1.0.13）或308（1.13），则将指定的字段添加到响应头部.0）。该值可以包含变量。</p><p>可能有几个add_header指令。当且仅当add_header 在当前级别上没有定义指令时，这些指令将从上一级继承 。</p><p>如果always指定了参数（1.7.5），则将添加头字段，而不管响应代码如何。</p><p>添加自定义首部</p><h3 id="add-trailer-name-value-always"><a href="#add-trailer-name-value-always" class="headerlink" title="add_trailer name value [always];"></a>add_trailer name value [always];</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:add_trailer name value [always];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, if in location</span><br><span class="line">This directive appeared in version 1.13.2.</span><br></pre></td></tr></table></figure></p><p>将响应代码等于200，201，206，301，302，303，307或308的指定字段添加到响应的结尾。该值可以包含变量。</p><p>可能有几个add_trailer指令。当且仅当add_trailer 在当前级别上没有定义指令时，这些指令将从上一级继承 。</p><p>如果always指定了参数，则无论响应代码如何，都将添加指定的字段。</p><p>添加自定义响应信息的尾部</p><h3 id="实现add-header-name"><a href="#实现add-header-name" class="headerlink" title="实现add_header name"></a>实现add_header name</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;</span><br><span class="line">        proxy_pass http://192.168.8.136;</span><br><span class="line">        add_header X-via $server_addr ;</span><br><span class="line">        add_header X-cache $upstream_cache_status;</span><br><span class="line">        add_header X-Accel $server_name ;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_cache proxycache ; </span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl -I  http://192.168.8.140/html/        # 查看访问包头，添加成功</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 09:22:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 503737</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Last-Modified: Fri, 27 Oct 2017 08:52:43 GMT</span><br><span class="line">ETag: &quot;2205a0-7afb9-55c836975649a&quot;</span><br><span class="line">X-via: 192.168.8.140</span><br><span class="line">X-cache: HIT</span><br><span class="line">X-Accel: www.a.com</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="实现add-trailer-name"><a href="#实现add-trailer-name" class="headerlink" title="实现add_trailer name"></a>实现add_trailer name</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;</span><br><span class="line">        proxy_pass http://192.168.8.136;</span><br><span class="line">        add_header X-via $server_addr ;</span><br><span class="line">        add_header X-cache $upstream_cache_status;</span><br><span class="line">        add_header X-Accel $server_name ;</span><br><span class="line">        add_header Via $server_addr ;</span><br><span class="line">        add_header Cache $upstream_cache_status;  </span><br><span class="line">        add_header Accel $server_name ;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_cache proxycache ; </span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line">[root@Nginx-Server ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl -I  http://192.168.8.140/html/        # 查看头部，已经添加</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 09:25:00 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 503737</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Last-Modified: Fri, 27 Oct 2017 08:52:43 GMT</span><br><span class="line">ETag: &quot;2205a0-7afb9-55c836975649a&quot;</span><br><span class="line">X-via: 192.168.8.140</span><br><span class="line">X-cache: MISS</span><br><span class="line">X-Accel: www.a.com</span><br><span class="line">Via: 192.168.8.140</span><br><span class="line">Cache: MISS</span><br><span class="line">Accel: www.a.com</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_headers_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_proxy_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-proxy-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-proxy-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>The ngx_http_proxy_module module allows passing requests to another server.</p><p>该<code>ngx_http_proxy_module</code>模块允许将请求传递给另一个服务器。</p><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass" target="_blank" rel="noopener">官网帮助文档：http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass</a></p><a id="more"></a><h3 id="proxy-pass-URL"><a href="#proxy-pass-URL" class="headerlink" title="proxy_pass URL;"></a>proxy_pass URL;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_pass URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:location, if in location, limit_except</span><br></pre></td></tr></table></figure></p><p>设置代理服务器的协议和地址以及位置应映射到的可选<code>URI</code>。作为协议，可以指定<code>“ http”</code>或<code>“ https”</code>。该地址可以指定为域名或<code>IP</code>地址，也可以指定为可选端口：</p><h4 id="实现反向代理服务"><a href="#实现反向代理服务" class="headerlink" title="实现反向代理服务"></a>实现反向代理服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@Apache ~]# ifconfig eth1      # 查看Real Server的IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:216 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:153 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:22726 (22.1 KiB)  TX bytes:23032 (22.4 KiB)</span><br><span class="line">[root@Apache ~]# yum install -y httpd        # 安装httpd服务</span><br><span class="line">[root@Apache ~]# service httpd start    </span><br><span class="line">[root@Apache ~]# echo &quot;Apache server 192.168.8.136&quot; &gt; /var/www/html/index.html </span><br><span class="line">[root@Apache ~]# curl localhost</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location / &#123; </span><br><span class="line">        proxy_pass http://192.168.8.136 ; </span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl www.a.com       # 访问测试，ok</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line">[root@Apache ~]# tail -1  /var/log/httpd/access_log         # 查看APache服务器的日志，apache认为是代理服务器访问的</span><br><span class="line">192.168.8.140 - - [27/Oct/2017:14:19:30 +0800] &quot;GET / HTTP/1.0&quot; 200 28 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure><h4 id="实现访问以-php结尾的文件都代理到192-168-8-136"><a href="#实现访问以-php结尾的文件都代理到192-168-8-136" class="headerlink" title="实现访问以.php结尾的文件都代理到192.168.8.136"></a>实现访问以.php结尾的文件都代理到192.168.8.136</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 我们接着上面的实验来做</span><br><span class="line">[root@Apache ~]# yum install -y php</span><br><span class="line">[root@Apache ~]# service httpd restart</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@Apache ~]# vim /var/www/html/a.php        # 编写php页面</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>本地访问php测试，可以访问</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-proxy-module-1.jpg" title="测试访问"></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        proxy_pass http://192.168.8.136 ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><p>访问测试，ok</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-proxy-module-2.jpg" title="测试访问"></center><h4 id="代理服务器加-和不加-的区别？"><a href="#代理服务器加-和不加-的区别？" class="headerlink" title="代理服务器加/和不加/的区别？"></a>代理服务器加/和不加/的区别？</h4><h5 id="不加"><a href="#不加" class="headerlink" title="不加/"></a>不加/</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@Apache ~]# mkdir /var/www/html/html/          #创建测试文件夹</span><br><span class="line">[root@Apache ~]# echo &quot;This is test file&quot; &gt; /var/www/html/html/index.html       # 创建测试文件</span><br><span class="line">[root@Apache ~]# cat /var/www/html/html/index.html</span><br><span class="line">This is test file</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_pass http://192.168.8.136;        # 先来个不加/的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl www.a.com/html/     # 访问测试，看到的是192.168.8.136/html/index.html的内容</span><br><span class="line">This is test file</span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.136/html/     # 直接访问192.168.8.136/html和上面效果是相同的</span><br><span class="line">This is test file</span><br><span class="line"># 由此我们可以得出：不加/的话，访问的就是代理服务和location中定义的路径的组合。</span><br><span class="line"># 例如：</span><br><span class="line">location /img &#123;</span><br><span class="line">    proxy_pass http://192.168.8.136 ; </span><br><span class="line">&#125;</span><br><span class="line"># 那么，我们访问的应该是那个目录呢？ 当然是http://192.168.8.8.136/img了。</span><br></pre></td></tr></table></figure><h5 id="加"><a href="#加" class="headerlink" title="加/"></a>加/</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_pass http://192.168.8.136/;       # 注意：这次我们加/了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl www.a.com/html/     # 访问测试，看到的是192.168.8.136/index.html的内容</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.136       # 直接访问192.168.8.136和上面效果是相同的</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line"># 由此，我们得出，如果加上/的话，访问的就是加上/后的内容了，和location中定义的路径已经被替换为/了。</span><br><span class="line"># 例如</span><br><span class="line">location /img &#123;</span><br><span class="line">    proxy_pass http://192.168.8.136/; </span><br><span class="line">&#125;</span><br><span class="line"># 上面这个例子，应该访问那个路径呢？ 当然是http://192.168.8.136/了。</span><br><span class="line"></span><br><span class="line">如果location定义其uri时使用了正则表达式的模式，则proxy_pass之后必须不能使用uri; 用户请求时传递的uri将直</span><br><span class="line">接附加代理到的服务的之后server &#123;</span><br><span class="line">    ...</span><br><span class="line">    server_name HOSTNAME;</span><br><span class="line">    location ~|~* /uri/ &#123;</span><br><span class="line">    proxy_pass http://host; 不能加/</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">http://HOSTNAME/uri/ --&gt; http://host/uri/</span><br></pre></td></tr></table></figure><h3 id="proxy-set-header-field-value"><a href="#proxy-set-header-field-value" class="headerlink" title="proxy_set_header field value;"></a>proxy_set_header field value;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_set_header field value;</span><br><span class="line">Default:</span><br><span class="line">proxy_set_header Host $proxy_host;</span><br><span class="line">proxy_set_header Connection close;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设定发往后端主机的请求报文的请求首部的值</p><p>设定发往后端主机的请求报文的请求首部的值</p><ul><li><code>Context: http, server, location</code></li><li><code>proxy_set_header X-Real-IP $remote_addr;</code></li><li><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code><br>标准格式如下：</li><li><code>X-Forwarded-For: client1, proxy1, proxy2</code></li><li><code>$remote_addr</code>是一个变量代表<code>client address</code></li><li><code>X-Forwarded-For</code>也是一个变量代表“X-Forwarded-For”客户机请求头域，$remote_addr附加变量，用逗号分隔。如果客户端请求头中不存在“X-Forwarded-For”字段，则该$proxy_add_x_forwarded_for变量等于该$remote_addr变量。</li></ul><h4 id="实现proxy-set-header-field-value"><a href="#实现proxy-set-header-field-value" class="headerlink" title="实现proxy_set_header field value;"></a>实现proxy_set_header field value;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;     # 添加真实服务器地址</span><br><span class="line">        proxy_pass http://192.168.8.136/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Apache ~]# vim /etc/httpd/conf/httpd.conf         # 修改apache服务的配置文件</span><br><span class="line">LogFormat &quot;%&#123;Real-server&#125;i %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; Nginx-proxy        # 定义一个新的日志格式，使apache能够识别代理服务器发过来的真实IP</span><br><span class="line">CustomLog logs/access_log Nginx-proxy       # 使用新的服务器IP</span><br><span class="line"></span><br><span class="line">[root@Apache ~]# service httpd restart</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# ifconfig eth1      # 测试客户端IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3446 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1197 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:316040 (308.6 KiB)  TX bytes:93833 (91.6 KiB)</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl 192.168.8.140/html/       # 测试访问代理服务器</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line">[root@Apache ~]# tail -1 /var/log/httpd/access_log      # 查看Apache的访问日志，已经将真实服务器的iP添加进来</span><br><span class="line">192.168.8.128 192.168.8.140 - - [27/Oct/2017:15:56:20 +0800] &quot;GET // HTTP/1.0&quot; 200 28 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;</span><br></pre></td></tr></table></figure><h3 id="proxy-cache-use-stale-error"><a href="#proxy-cache-use-stale-error" class="headerlink" title="proxy_cache_use_stale error"></a>proxy_cache_use_stale error</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off ...;</span><br><span class="line">Default:</span><br><span class="line">proxy_cache_use_stale off;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>在被代理的后端服务器出现哪种情况下，可以真接使用过期的缓存响应客户端</p><h3 id="proxy-cache-methods-GET-HEAD-POST-…"><a href="#proxy-cache-methods-GET-HEAD-POST-…" class="headerlink" title="proxy_cache_methods GET | HEAD | POST …;"></a>proxy_cache_methods GET | HEAD | POST …;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_methods GET | HEAD | POST ...;</span><br><span class="line">Default:</span><br><span class="line">proxy_cache_methods GET HEAD;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 0.7.59.</span><br></pre></td></tr></table></figure></p><p>如果客户端请求方法在此指令中列出，则响应将被缓存。<code>“ GET”</code>和<code>“HEAD”</code>方法总是添加到列表中，尽管建议明确指定它们。</p><h3 id="proxy-hide-header-field"><a href="#proxy-hide-header-field" class="headerlink" title="proxy_hide_header field;"></a>proxy_hide_header field;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_hide_header field;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>默认情况下，<code>nginx</code>不会将代理服务器的响应中的头字段<code>“Date”</code>，<code>“Server”</code>，<code>“X-Pad”</code>和<code>“X-Accel -...”</code>传递给客户端。该<code>proxy_hide_header</code>指令设置不会传递的其他字段。如果相反，需要允许字段的传递，则可以使用<code>proxy_pass_header</code>指令。</p><p>用于隐藏后端服务器特定的响应首部</p><h3 id="proxy-connect-timeout-time"><a href="#proxy-connect-timeout-time" class="headerlink" title="proxy_connect_timeout time;"></a>proxy_connect_timeout time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_connect_timeout time;</span><br><span class="line">Default:</span><br><span class="line">proxy_connect_timeout 60s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义与后端服务器建立连接的超时时长，如超时会出现502错误，默认为60s，一般不建议超出75s，</p><h3 id="proxy-send-timeout-time"><a href="#proxy-send-timeout-time" class="headerlink" title="proxy_send_timeout time;"></a>proxy_send_timeout time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_send_timeout time;</span><br><span class="line">Default:</span><br><span class="line">proxy_send_timeout 60s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设置将代理服务器发送请求的超时时间。超时仅在两个连续的写入操作之间设置，而不是传输整个请求。如果代理服务器在此时间内没有收到任何内容，则连接被关闭。</p><p>把请求发送给后端服务器的超时时长；默认为60s</p><h3 id="proxy-read-timeout-time"><a href="#proxy-read-timeout-time" class="headerlink" title="proxy_read_timeout time;"></a>proxy_read_timeout time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_read_timeout time;</span><br><span class="line">Default:</span><br><span class="line">proxy_read_timeout 60s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义从代理服务器读取响应的超时。超时仅在两个连续读操作之间设置，而不是传输整个响应。如果代理的服务器在此时间内没有传输任何内容，则连接被关闭。</p><p>等待后端服务器发送响应报文的超时时长， 默认为60s</p><h3 id="proxy-cache-key-string"><a href="#proxy-cache-key-string" class="headerlink" title="proxy_cache_key string;"></a>proxy_cache_key string;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_key string;</span><br><span class="line">Default:</span><br><span class="line">proxy_cache_key $scheme$proxy_host$request_uri;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><ul><li>缓存中用于“键”的内容</li><li>默认值：<code>proxy_cache_key $scheme$proxy_host$request_uri;</code></li></ul><h3 id="proxy-cache-valid-code-…-time"><a href="#proxy-cache-valid-code-…-time" class="headerlink" title="proxy_cache_valid [code …] time;"></a>proxy_cache_valid [code …] time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_valid [code ...] time;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><ul><li>定义对特定响应码的响应内容的缓存时长</li><li>定义在http{…}中</li><li>示例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现代理缓存"><a href="#实现代理缓存" class="headerlink" title="实现代理缓存"></a>实现代理缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">[root@Apache ~]# cp /var/log/messages /var/www/html/html/index.html &amp;&amp; chmod a+r /var/www/html/html/index.html       # 准备测试网页</span><br><span class="line">[root@Apache ~]# ll -h /var/www/html/html/index.html</span><br><span class="line">-rw-r--r-- 1 root root 492K Oct 27 16:52 /var/www/html/html/index.html</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# ab -c 100 -n 2000 http://192.168.8.140/html/       # 没启用缓存功能测试，平均每秒170个</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.140 (be patient)</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 1200 requests</span><br><span class="line">Completed 1400 requests</span><br><span class="line">Completed 1600 requests</span><br><span class="line">Completed 1800 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Finished 2000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.10.2</span><br><span class="line">Server Hostname:        192.168.8.140</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /html/</span><br><span class="line">Document Length:        503737 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   11.739 seconds</span><br><span class="line">Complete requests:      2000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      1008004000 bytes</span><br><span class="line">HTML transferred:       1007474000 bytes</span><br><span class="line">Requests per second:    170.38 [#/sec] (mean)</span><br><span class="line">Time per request:       586.938 [ms] (mean)</span><br><span class="line">Time per request:       5.869 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          83857.12 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    4  38.9      1    1001</span><br><span class="line">Processing:    48  573 240.2    554    1986</span><br><span class="line">Waiting:        2  280 207.4    306    1076</span><br><span class="line">Total:         54  577 243.8    557    1987</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    557</span><br><span class="line">  66%    605</span><br><span class="line">  75%    641</span><br><span class="line">  80%    670</span><br><span class="line">  90%    775</span><br><span class="line">  95%   1014</span><br><span class="line">  98%   1419</span><br><span class="line">  99%   1521</span><br><span class="line"> 100%   1987 (longest request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# mkdir -p  /var/cache/nginx/proxy_cache       # 创建缓存目录</span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/nginx.conf        # 在http配置定义缓存信</span><br><span class="line">http &#123;</span><br><span class="line">    proxy_cache_path /var/cache/nginx/proxy_cache</span><br><span class="line">    levels=1:1:2 keys_zone=proxycache:20m</span><br><span class="line">    inactive=120s max_size=1g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 调用缓存功能，需要定义在相应的配置段</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;</span><br><span class="line">        proxy_pass http://192.168.8.136;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_cache proxycache ;</span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@CLIENT ~]# ab -c 100 -n 2000 http://192.168.8.140/html/       # 速度已经明显加快，平均每秒294个，已经快了一倍多</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.140 (be patient)</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 1200 requests</span><br><span class="line">Completed 1400 requests</span><br><span class="line">Completed 1600 requests</span><br><span class="line">Completed 1800 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Finished 2000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.10.2</span><br><span class="line">Server Hostname:        192.168.8.140</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /html/</span><br><span class="line">Document Length:        503737 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   6.794 seconds</span><br><span class="line">Complete requests:      2000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      1008004000 bytes</span><br><span class="line">HTML transferred:       1007474000 bytes</span><br><span class="line">Requests per second:    294.36 [#/sec] (mean)</span><br><span class="line">Time per request:       339.718 [ms] (mean)</span><br><span class="line">Time per request:       3.397 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          144881.64 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   11   5.1     10      50</span><br><span class="line">Processing:   229  328  32.3    316     440</span><br><span class="line">Waiting:        1   13   8.6     11      52</span><br><span class="line">Total:        241  339  32.7    329     454</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    329</span><br><span class="line">  66%    346</span><br><span class="line">  75%    354</span><br><span class="line">  80%    367</span><br><span class="line">  90%    378</span><br><span class="line">  95%    408</span><br><span class="line">  98%    432</span><br><span class="line">  99%    433</span><br><span class="line"> 100%    454 (longest request)</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# cd /var/cache/nginx/proxy_cache/     # 查看缓存目录</span><br><span class="line">[root@Nginx-Server proxy_cache]# tree       # 可以看到目录其实就是去文件的后1，1，2</span><br><span class="line">.</span><br><span class="line">└── f</span><br><span class="line">    └── f</span><br><span class="line">        └── ed</span><br><span class="line">            └── 2232907628d080965cf7017637f5edff</span><br><span class="line"></span><br><span class="line">3 directories, 1 file</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_proxy_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_rewrite_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-rewrite-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-rewrite-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>官网的介绍：</strong></p><p><code>The ngx_http_rewrite_module module is used to change request URI using PCRE regular expressions, return redirects, and conditionally select configurations.</code></p><p>将用户请求的<code>URI</code>基于<code>PCRE regex</code>所描述的模式进行检查，而后完成重定向替换</p><a id="more"></a><h3 id="rewrite-regex-replacement-flag"><a href="#rewrite-regex-replacement-flag" class="headerlink" title="rewrite regex replacement [flag];"></a>rewrite regex replacement [flag];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:rewrite regex replacement [flag];</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure></p><ul><li>如果指定的正则表达式与请求<code>URI</code>匹配，则<code>URI</code>将按照<code>replacement</code>字符串中的指定进行更改。该<code>rewrite</code>指令在其在配置文件中出现的顺序顺序地执行。可以使用标志终止对伪指令的进一步处理。如果替换字符串以<code>“ http://”，“ https://”</code>或<code>“ $scheme”</code>开头，则处理停止，并将重定向返回给客户端。</li><li>将用户请求的<code>URI</code>基于<code>regex</code>所描述的模式进行检查，匹配到时将其替换为<code>replacement</code>指定的新的<code>URI</code></li><li>注意：如果在同一级配置块中存在多个<code>rewrite</code>规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查</li><li>隐含有循环机制,但不超过10次；如果超过，提示500响应码， <code>[flag]</code>所表示的标志位用于控制此循环机制</li><li>如果<code>replacement</code>是以<code>http://</code>或<code>https://</code>开头，则替换结果会直接以重向返回给客户端</li><li>301：永久重定向</li></ul><h4 id="flag"><a href="#flag" class="headerlink" title="[flag]"></a>[flag]</h4><ul><li><code>last</code>：重写完成后停止对当前<code>URI</code>在当前<code>location</code>中后续的其它重写操作，而后对新的<code>URI</code>启动新一轮重写检查；提前重启新一轮循环</li><li><code>break</code>：重写完成后停止对当前<code>URI</code>在当前<code>location</code>中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在<code>location</code>中使用</li><li><code>redirect</code>：临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新<code>URI</code>给客户端，由客户端重新发起请求；不能以<code>http://</code>或<code>https://</code>开头，使用相对路径，状态码： 302</li><li><code>permanent</code>:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求，状态码：301</li></ul><h3 id="return-code-text"><a href="#return-code-text" class="headerlink" title="return code [text];"></a>return code [text];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:return code [text];</span><br><span class="line">return code URL;</span><br><span class="line">return URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure></p><p>停止处理，并返回给客户端指定的响应码</p><h3 id="rewrite-log-on-off"><a href="#rewrite-log-on-off" class="headerlink" title="rewrite_log on | off;"></a>rewrite_log on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:rewrite_log on | off;</span><br><span class="line">Default:</span><br><span class="line">rewrite_log off;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure></p><p>是否开启重写日志, 发送至<code>error_log</code>（<code>notice level</code>）</p><h3 id="set-variable-value"><a href="#set-variable-value" class="headerlink" title="set $variable value;"></a>set $variable value;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:set $variable value;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure></p><p>用户自定义变量（注意：变量定义和调用都要以<code>$</code>开头）</p><h3 id="if-condition-…"><a href="#if-condition-…" class="headerlink" title="if (condition) { … }"></a>if (condition) { … }</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:if (condition) &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure></p><ul><li>指定的<code>condition</code>被评估。如果为<code>true</code>，则在该大括号内指定的此模块指令将被执行，并且请求被分配给该<code>if</code>指令内的配置 。<code>if</code>指令内的配置继承自以前的配置级别。</li><li>引入新的上下文,条件满足时，执行配置块中的配置指令</li></ul><h4 id="比较操作符："><a href="#比较操作符：" class="headerlink" title="比较操作符："></a>比较操作符：</h4><ul><li><code>==</code>相同</li><li><code>!=</code> 不同</li><li><code>~</code>：模式匹配，区分字符大小写</li><li><code>~*</code>：模式匹配，不区分字符大小写</li><li><code>!~</code>：模式不匹配，区分字符大小写</li><li><code>!~*</code>：模式不匹配，不区分字符大小写</li></ul><h4 id="文件及目录存在性判断："><a href="#文件及目录存在性判断：" class="headerlink" title="文件及目录存在性判断："></a>文件及目录存在性判断：</h4><ul><li><code>-e</code>, <code>!-e</code> 存在（包括文件，目录，软链接）</li><li><code>-f</code>, <code>!-f</code> 文件</li><li><code>-d</code>, <code>!-d</code> 目录</li><li><code>-x</code>, <code>!-x</code> 执行</li></ul><h3 id="实现last跳转：bj目录下面的任何文件都跳转到beijing"><a href="#实现last跳转：bj目录下面的任何文件都跳转到beijing" class="headerlink" title="实现last跳转：bj目录下面的任何文件都跳转到beijing"></a>实现last跳转：bj目录下面的任何文件都跳转到beijing</h3><p>服务器内部跳转，在浏览器是看不到任何变化的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir /app/website1/beijing         #创建跳转目录</span><br><span class="line">[root@Nginx-Server ~]# cat /app/website1/beijing/index.html </span><br><span class="line">bi --&gt; beijing</span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf         #修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ;  </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123;</span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 last ;   </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/bj/index.html     # 注意已经跳转，因为我们是没有bj这个目录的</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-rewrite-module-1.gif" title="测试访问"></center><h3 id="实现break跳转"><a href="#实现break跳转" class="headerlink" title="实现break跳转"></a>实现break跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 break ;          # break跳转</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/bj/           # 已经跳转</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><h3 id="实现redirect-302临时重定向"><a href="#实现redirect-302临时重定向" class="headerlink" title="实现redirect 302临时重定向"></a>实现redirect 302临时重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 redirect ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl  -I  192.168.8.140/bj/      # 查看响应头部信息，已经是302重定向</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 00:51:30 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 161</span><br><span class="line">Location: http://192.168.8.140/beijing/</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl   192.168.8.140/bj/     # 直接访问bj目录会提示302</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;302 Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Nginx-Server ~]# curl -L   192.168.8.140/bj/      # 需要加上-L来跟踪重定向</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-rewrite-module-2.gif" title="测试访问"></center><h3 id="实现permanent-301永久重定向"><a href="#实现permanent-301永久重定向" class="headerlink" title="实现permanent 301永久重定向"></a>实现permanent 301永久重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -I 192.168.8.140/bj/</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 01:01:23 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 185</span><br><span class="line">Location: http://192.168.8.140/beijing/</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -L 192.168.8.140/bj/</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><h3 id="return实现禁止访问某个资源，并返回状态码"><a href="#return实现禁止访问某个资源，并返回状态码" class="headerlink" title="return实现禁止访问某个资源，并返回状态码"></a>return实现禁止访问某个资源，并返回状态码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    location /admin &#123;           # 定义当访问/admin目录时，返回信息&quot;access denied&quot;，且状态码为403</span><br><span class="line">        return 403 &quot;access denied&quot; ; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/admin     # 已经看到定义的拒绝信息</span><br><span class="line">access denied[root@Nginx-Server ~]# </span><br><span class="line">[root@Nginx-Server ~]# curl -I  192.168.8.140/admin     # 状态码为403</span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 01:16:22 GMT</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">Content-Length: 13</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h3 id="return实现跳转到新的URL"><a href="#return实现跳转到新的URL" class="headerlink" title="return实现跳转到新的URL"></a>return实现跳转到新的URL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    location /admin &#123;</span><br><span class="line">        return 403 &quot;access denied&quot; ;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /return &#123;          # 当访问/return时，就跳转到http://www.ihaiyun.cc/</span><br><span class="line">        return http://www.ihaiyun.cc/ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -I 192.168.8.140/return     # 已经可以跳转</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 01:22:09 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 161</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http://www.ihaiyun.cc/</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-rewrite-module-3.gif" title="测试访问"></center><h3 id="开启重写日志"><a href="#开启重写日志" class="headerlink" title="开启重写日志"></a>开启重写日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    location /admin &#123;</span><br><span class="line">        return 403 &quot;access denied&quot; ;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /return &#123;</span><br><span class="line">        return http://www.ihaiyun.cc/ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rewrite_log on ;            # 开启重写日志</span><br><span class="line">    error_log /var/log/nginx/return.log ;       # 定义error_log存放位置，因为rewrite_log默认发送到error_log中</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">    </span><br><span class="line">[root@CLIENT ~]# curl -L 192.168.8.140/bj/      # 访问测试</span><br><span class="line">bi --&gt; beijing</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# tail /var/log/nginx/return.log       # 查看日志</span><br><span class="line">2017/10/27 09:38:11 [error] 2536#0: *4 open() &quot;/app/website1/bj&quot; failed (2: No such file or directory), client: 192.168.8.128, server: www.a.com, request: &quot;GET /bj HTTP/1.1&quot;, host: &quot;192.168.8.140&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_rewrite_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_referer_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-referer-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-referer-module/</url>
      <content type="html"><![CDATA[<h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><p>The ngx_http_referer_module module is used to block access to a site for requests with invalid values in the “Referer” header field. It should be kept in mind that fabricating a request with an appropriate “Referer” field value is quite easy, and so the intended purpose of this module is not to block such requests thoroughly but to block the mass flow of requests sent by regular browsers. It should also be taken into consideration that regular browsers may not send the “Referer” field even for valid requests.</p><p>该<code>ngx_http_referer_module</code>模块用于在<code>“Referer”</code>标题字段中阻止对具有无效值的请求的站点访问。应该记住，使用适当的<code>“Referer”</code>字段值制造请求是非常容易的，因此本模块的预期目的不是彻底阻止这些请求，而是阻止常规浏览器发送的请求的大量流量。还应该考虑到，即使有效的请求，常规浏览器也可能不会发送<code>“Referer”</code>字段。</p><h3 id="valid-referers-none-blocked-server-names-string-…"><a href="#valid-referers-none-blocked-server-names-string-…" class="headerlink" title="valid_referers none | blocked | server_names | string …;"></a>valid_referers none | blocked | server_names | string …;</h3><a id="more"></a><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:valid_referers none | blocked | server_names | string ...;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure></p><p>定义<code>referer</code>首部的合法可用值，不能匹配的将是非法值</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>none</code>：请求报文首部没有<code>referer</code>首部</li><li><code>blocked</code>：请求报文有<code>referer</code>首部，但无有效值</li><li><code>server_names</code>：参数，其可以有值作为主机名或主机名模式</li><li><code>arbitrary_string</code>：任意字符串，但可使用<code>*</code>作通配符</li><li><code>regular expression</code>：被指定的正则表达式模式匹配到的字符串,要使用<code>~</code>开头，例如：<code>~.*\.magedu\.com</code></li></ul><h3 id="理解什么是referer？"><a href="#理解什么是referer？" class="headerlink" title="理解什么是referer？"></a>理解什么是referer？</h3><p><code>HTTP Referer</code>是<code>header</code>的一部分，当浏览器向<code>web</code>服务器发送请求的时候，一般会带上<code>Referer</code>，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p><h3 id="模拟盗链现象"><a href="#模拟盗链现象" class="headerlink" title="模拟盗链现象"></a>模拟盗链现象</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 定义两台虚拟主机，wwww.a.com（默认）和www.b.com；分别定义了access_log和error_log。</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 创建配置文件，用来定义虚拟主机   </span><br><span class="line"></span><br><span class="line">server &#123;            # 第一台虚拟主机</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;            # 第二台虚拟主机</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.b.com ;</span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    error_log /var/log/nginx/b.com.error.log  ; </span><br><span class="line">    access_log /var/log/nginx/b.com.access.log main ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="准备访问资源"><a href="#准备访问资源" class="headerlink" title="准备访问资源"></a>准备访问资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir -p  /app/website&#123;1,2&#125;</span><br><span class="line">[root@Nginx-Server app]# cd /app/</span><br><span class="line">[root@Nginx-Server app]# echo &quot;website1&quot; &gt; /app/website1/index.html </span><br><span class="line">[root@Nginx-Server app]# echo &quot;website2&quot; &gt; /app/website2/index.html </span><br><span class="line">[root@Nginx-Server app]# find /  -name &quot;*.jpg&quot;      # find几个图片</span><br><span class="line">/usr/share/backgrounds/morning.jpg</span><br><span class="line">/usr/share/backgrounds/night.jpg</span><br><span class="line">/usr/share/backgrounds/day.jpg</span><br><span class="line">/usr/share/backgrounds/default.jpg</span><br><span class="line">/usr/share/kde4/apps/ksplash/Themes/CentOS7/2560x1600/background.jpg</span><br><span class="line">/usr/share/wallpapers/CentOS7/contents/images/2560x1600.jpg</span><br><span class="line">[root@Nginx-Server app]# cp /usr/share/wallpapers/CentOS7/contents/images/2560x1600.jpg /app/website1/aa.jpg        # cp图片</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server app]# cd website2/</span><br><span class="line">[root@Nginx-Server website2]# vim dao.html      #编写盗链html文件，图片是指向www.a.com的</span><br><span class="line">&lt;img src=http://www.a.com/a.jpg&gt;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server app]# tree       # 目录结构，注意b站点中是没有图片文件</span><br><span class="line">.</span><br><span class="line">├── website1</span><br><span class="line">│   ├── aa.jpg</span><br><span class="line">│   ├── a.jpg</span><br><span class="line">│   └── index.html</span><br><span class="line">└── website2</span><br><span class="line">    ├── dao.html</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">2 directories, 5 files</span><br></pre></td></tr></table></figure><h4 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# nginx -t         # 检查配置文件，ok</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop        # 停止nginx服务</span><br><span class="line">[root@Nginx-Server ~]# nginx        # 启动nginx服务</span><br></pre></td></tr></table></figure><ol><li>测试<a href="http://www.a.com/a.jpg" target="_blank" rel="noopener">www.a.com/a.jpg</a></li><li>访问<a href="http://www.b.com/dao.html" target="_blank" rel="noopener">www.b.com/dao.html</a></li><li>查看图片来源</li></ol><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-referer-module-1.gif" title="测试访问"></center><h4 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# tail -1  /var/log/nginx/a.com.access.log         # 查看a的日志，从日志可以看出referer是http://www.b.com/dao.html，这肯定是有问题的。</span><br><span class="line">192.168.8.100 - - [27/Oct/2017:11:07:48 +0800] &quot;GET /a.jpg HTTP/1.1&quot; 304 0 &quot;http://www.b.com/dao.html&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="实现防盗链"><a href="#实现防盗链" class="headerlink" title="实现防盗链"></a>实现防盗链</h3><p>上面的实验我们已经实现了盗链，现在我们来阻止盗链，呵呵~~~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">    valid_referers none blocked server_names</span><br><span class="line">               *.a.com a\.com.* www\.a\.com.*</span><br><span class="line">               ~\.google\.</span><br><span class="line">               ~\.baidu\.;</span><br><span class="line"></span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 403 &quot;禁止盗链！！！&quot; ;</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    location / &#123; </span><br><span class="line">         </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    listen 81 ;</span><br><span class="line">    server_name www.b.com ; </span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    error_log /var/log/nginx/b.com.error.log  ;   </span><br><span class="line">    access_log /var/log/nginx/b.com.access.log main ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><ol><li>在b站点已经无法查看图片</li><li>在a站点依旧可以查看</li></ol><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-referer-module-2.gif" title="测试访问"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://baike.baidu.com/item/HTTP_REFERER/5358396?fr=aladdin" target="_blank" rel="noopener">百度百科：HTTP_REFERER</a></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_referer_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_ssl_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-ssl-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-ssl-module/</url>
      <content type="html"><![CDATA[<h3 id="Syntax-ssl-on-off"><a href="#Syntax-ssl-on-off" class="headerlink" title="Syntax:    ssl on | off;"></a>Syntax:    ssl on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl on | off;</span><br><span class="line">Default:</span><br><span class="line">ssl off;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>为指定虚拟机启用HTTPS protocol， 建议用listen指令代替</p><a id="more"></a><h3 id="ssl-certificate-file"><a href="#ssl-certificate-file" class="headerlink" title="ssl_certificate file;"></a>ssl_certificate file;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_certificate file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>当前虚拟主机使用PEM格式的证书文件</p><h3 id="ssl-certificate-key-file"><a href="#ssl-certificate-key-file" class="headerlink" title="ssl_certificate_key file;"></a>ssl_certificate_key file;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_certificate_key file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>当前虚拟主机上与其证书匹配的私钥文件</p><h3 id="ssl-protocols-SSLv2-…"><a href="#ssl-protocols-SSLv2-…" class="headerlink" title="ssl_protocols [SSLv2] …;"></a>ssl_protocols [SSLv2] …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];</span><br><span class="line">Default:</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>支持<code>ssl</code>协议版本，默认为后三个</p><h3 id="ssl-session-cache-off-none-…"><a href="#ssl-session-cache-off-none-…" class="headerlink" title="ssl_session_cache off | none …;"></a>ssl_session_cache off | none …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_session_cache off | none | [builtin[:size]] [shared:name:size];</span><br><span class="line">Default:</span><br><span class="line">ssl_session_cache none;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>设置存储会话参数的高速缓存的类型和大小。缓存可以是以下类型之一：</p><ul><li><code>off</code><ul><li>严格禁止使用会话缓存：<code>nginx</code>明确告诉客户端会话可能不被重用。</li></ul></li><li><code>none</code><ul><li>会话缓存的使用被轻轻地禁止：<code>nginx</code>告诉客户端会话可能被重用，但实际上并没有将会话参数存储在缓存中。</li></ul></li><li><code>builtin</code><ul><li>一个内置<code>OpenSSL</code>的缓存; 仅由一个工作进程使用。缓存大小在会话中指定。如果没有给出大小，则等于<code>20480</code>次会话。使用内置缓存可能会导致内存碎片。</li></ul></li><li><code>shared</code><ul><li>在所有工作进程之间共享缓存。缓存大小以字节为单位指定; 一兆字节可以存储约4000个会话。每个共享缓存应具有任意名称。具有相同名称的缓存可用于多个虚拟服务器。</li></ul></li><li>两种缓存类型可以同时使用，例如：<ul><li><code>ssl_session_cache builtin:1000 shared:SSL:10m;</code></li></ul></li><li>但只使用共享缓存而不使用内置缓存应该更有效率。<ul><li><code>builtin[:size]</code>：使用<code>OpenSSL</code>内建缓存，为每worker进程私有</li><li><code>[shared:name:size]</code>：在各<code>worker</code>之间使用一个共享的缓存73</li></ul></li></ul><h3 id="ssl-session-timeout-time"><a href="#ssl-session-timeout-time" class="headerlink" title="ssl_session_timeout time;"></a>ssl_session_timeout time;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_session_timeout time;</span><br><span class="line">Default:</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>客户端连接可以复用<code>ssl session cache</code>中缓存的<code>ssl</code>参数的有效时长，默认<code>5m</code></p><h3 id="实现SSL"><a href="#实现SSL" class="headerlink" title="实现SSL"></a>实现SSL</h3><h4 id="1-创建证书"><a href="#1-创建证书" class="headerlink" title="1. 创建证书"></a>1. 创建证书</h4><p><a href="http://blog.csdn.net/hai__yun/article/details/77921134" target="_blank" rel="noopener">关于创建证书可以查看我的另外一篇博客：http://blog.csdn.net/hai__yun/article/details/77921134</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cd /etc/pki/tls/certs/</span><br><span class="line">[root@Nginx-Server certs]# make nginx.crt</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl genrsa -aes128 2048 &gt; nginx.key</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...........................+++</span><br><span class="line">....+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase:</span><br><span class="line">Verifying - Enter pass phrase:</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl req -utf8 -new -key nginx.key -x509 -days 365 -out nginx.crt -set_serial 0</span><br><span class="line">Enter pass phrase for nginx.key:</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN  </span><br><span class="line">State or Province Name (full name) []:BJ</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:haiyun</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.a.com</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure><h4 id="2-解密私钥"><a href="#2-解密私钥" class="headerlink" title="2. 解密私钥"></a>2. 解密私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# ls</span><br><span class="line">ca-bundle.crt        make-dummy-cert  nginx.crt  renew-dummy-cert</span><br><span class="line">ca-bundle.trust.crt  Makefile         nginx.key</span><br><span class="line">[root@Nginx-Server certs]# openssl rsa -in nginx.key -out nginx.key </span><br><span class="line">Enter pass phrase for nginx.key:</span><br><span class="line">writing RSA key</span><br><span class="line">[root@Nginx-Server certs]# ls</span><br><span class="line">ca-bundle.crt        make-dummy-cert  nginx.crt  renew-dummy-cert</span><br><span class="line">ca-bundle.trust.crt  Makefile         nginx.key</span><br></pre></td></tr></table></figure><h4 id="3-创建证书目录和拷贝证书"><a href="#3-创建证书目录和拷贝证书" class="headerlink" title="3. 创建证书目录和拷贝证书"></a>3. 创建证书目录和拷贝证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# mkdir /etc/nginx/ssl         # 创建存放证书目录</span><br><span class="line">[root@Nginx-Server certs]# cp nginx.* /etc/nginx/ssl/       </span><br><span class="line">[root@Nginx-Server certs]# ls /etc/nginx/ssl/</span><br><span class="line">nginx.crt  nginx.key</span><br></pre></td></tr></table></figure><h4 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl  default_server ; </span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    gzip on; </span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_min_length 64; </span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_types text/xml text/css application/javascript ;</span><br><span class="line">        </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动服务，测试"><a href="#启动服务，测试" class="headerlink" title="启动服务，测试"></a>启动服务，测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nginx: configuration file /etc/nginx/nginx.conf test failed</span><br><span class="line">[root@Nginx-Server ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@Nginx-Server ~]# ss -tnul             # 查看端口是否打开</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0        127.0.0.1:323                          *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:50190                        *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:68                           *:*                  </span><br><span class="line">udp   UNCONN     0      0              ::1:323                         :::*                  </span><br><span class="line">udp   UNCONN     0      0               :::31402                       :::*                  </span><br><span class="line">tcp   LISTEN     0      128              *:80                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:22                           *:*                  </span><br><span class="line">tcp   LISTEN     0      100      127.0.0.1:25                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:443                          *:*                  </span><br><span class="line">tcp   LISTEN     0      128             :::80                          :::*                  </span><br><span class="line">tcp   LISTEN     0      128             :::22                          :::*                  </span><br><span class="line">tcp   LISTEN     0      100            ::1:25                          :::*</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-ssl-module-1.gif" title="测试访问"></center><h3 id="实现多虚拟主机支持https"><a href="#实现多虚拟主机支持https" class="headerlink" title="实现多虚拟主机支持https"></a>实现多虚拟主机支持https</h3><h4 id="1-创建证书-1"><a href="#1-创建证书-1" class="headerlink" title="1. 创建证书"></a>1. 创建证书</h4><p>上面实验已经创建一个虚拟主机了，所以我们就直接用了。这次再创建一个就OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cd /etc/pki/tls/certs/</span><br><span class="line">[root@Nginx-Server certs]# make nginx2.crt</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl genrsa -aes128 2048 &gt; nginx2.key</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.....................+++</span><br><span class="line">........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase:</span><br><span class="line">Verifying - Enter pass phrase:</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl req -utf8 -new -key nginx2.key -x509 -days 365 -out nginx2.crt -set_serial 0</span><br><span class="line">Enter pass phrase for nginx2.key:</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BJ</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:haiyun</span><br><span class="line">Organizational Unit Name (eg, section) []:cto</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.b.com</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure></p><h4 id="2-解密私钥-1"><a href="#2-解密私钥-1" class="headerlink" title="2. 解密私钥"></a>2. 解密私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# openssl rsa -in nginx2.key -out nginx2.key </span><br><span class="line">Enter pass phrase for nginx2.key:</span><br><span class="line">writing RSA key</span><br><span class="line">[root@Nginx-Server certs]# ls</span><br><span class="line">ca-bundle.crt        make-dummy-cert  nginx2.crt  nginx.crt  renew-dummy-cert</span><br><span class="line">ca-bundle.trust.crt  Makefile         nginx2.key  nginx.key</span><br></pre></td></tr></table></figure><h4 id="3-拷贝证书"><a href="#3-拷贝证书" class="headerlink" title="3. 拷贝证书"></a>3. 拷贝证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# cp nginx2.* /etc/nginx/ssl/</span><br><span class="line">[root@Nginx-Server certs]# ls /etc/nginx/ssl/</span><br><span class="line">nginx2.crt  nginx2.key  nginx.crt  nginx.key</span><br></pre></td></tr></table></figure><h4 id="4-创建访问目录"><a href="#4-创建访问目录" class="headerlink" title="4. 创建访问目录"></a>4. 创建访问目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cat /app/website2/index.html         # 注意此文件是需要创建</span><br><span class="line">Nginx-Server --&gt; website2</span><br></pre></td></tr></table></figure><h4 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5. 修改配置文件"></a>5. 修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl  default_server ; </span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl  ;</span><br><span class="line">    server_name www.b.com ;</span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx2.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx2.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-配置hosts文件"><a href="#6-配置hosts文件" class="headerlink" title="6. 配置hosts文件"></a>6. 配置hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.140 www.a.com www.b.com</span><br></pre></td></tr></table></figure><h4 id="7-启动服务，测试"><a href="#7-启动服务，测试" class="headerlink" title="7. 启动服务，测试"></a>7. 启动服务，测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@Nginx-Server ~]# ss -tnul             # 端口已监听</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0        127.0.0.1:323                          *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:50190                        *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:68                           *:*                  </span><br><span class="line">udp   UNCONN     0      0              ::1:323                         :::*                  </span><br><span class="line">udp   UNCONN     0      0               :::31402                       :::*                  </span><br><span class="line">tcp   LISTEN     0      128              *:80                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:22                           *:*                  </span><br><span class="line">tcp   LISTEN     0      100      127.0.0.1:25                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:443                          *:*                  </span><br><span class="line">tcp   LISTEN     0      128             :::80                          :::*                  </span><br><span class="line">tcp   LISTEN     0      128             :::22                          :::*                  </span><br><span class="line">tcp   LISTEN     0      100            ::1:25                          :::*      </span><br><span class="line">[root@Nginx-Server ~]# curl -k https://www.a.com/       # 可以访问，ok</span><br><span class="line">Nginx-Server --&gt; website1   </span><br><span class="line">[root@Nginx-Server ~]# curl -k https://www.b.com/       # 可以访问，ok</span><br><span class="line">Nginx-Server --&gt; website2</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_ssl_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_gzip_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-gzip-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-gzip-module/</url>
      <content type="html"><![CDATA[<h3 id="gzip-on-off"><a href="#gzip-on-off" class="headerlink" title="gzip on | off;"></a>gzip on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip on | off;</span><br><span class="line">Default:</span><br><span class="line">gzip off;</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure></p><p><a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip" target="_blank" rel="noopener">帮助文档：http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip</a></p><a id="more"></a><ul><li><code>nginx</code>对于代理服务器请求的响应报文，在何种条件下启用压缩功能</li></ul><ul><li><code>off</code>：对被代理的请求不启用压缩</li></ul><ul><li><code>expired,no-cache</code>, <code>no-store</code>， <code>private</code>：对代理服务器请求的响应报文首部<code>Cache-Control</code>值任何一个，启用压缩功能</li></ul><h3 id="gzip-comp-level-level"><a href="#gzip-comp-level-level" class="headerlink" title="gzip_comp_level level;"></a>gzip_comp_level level;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip_comp_level level;</span><br><span class="line">Default:</span><br><span class="line">gzip_comp_level 1;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>指定压缩比，范围是1-9</p><h3 id="gzip-min-length-length"><a href="#gzip-min-length-length" class="headerlink" title="gzip_min_length length;"></a>gzip_min_length length;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip_min_length length;</span><br><span class="line">Default:</span><br><span class="line">gzip_min_length 20;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>指定小于多少字节就取消压缩，因为文件特别小的话，压缩完成后，也许比原文件大，呵呵。</p><h3 id="gzip-proxied-off-expired-…"><a href="#gzip-proxied-off-expired-…" class="headerlink" title="gzip_proxied off | expired …;"></a>gzip_proxied off | expired …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">句法：gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;</span><br><span class="line">默认：</span><br><span class="line">gzip_proxied关闭</span><br><span class="line">语境：http，server，location</span><br></pre></td></tr></table></figure></p><p>根据请求和响应，启用或禁用代理请求的响应。请求被代理的事实由“Via”请求头字段的存在确定。该指令接受多个参数：</p><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ul><li><code>off</code><ul><li>禁用所有代理请求的压缩，忽略其他参数;</li></ul></li><li><code>expired</code><ul><li>如果响应头包含具有禁用缓存的值的<code>“Expires”</code>字段，则启用压缩;</li></ul></li><li><code>no-cache</code> <ul><li>如果响应头包含<code>“Cache-Control”</code>字段和<code>“ no-cache”</code>参数，则启用压缩。</li></ul></li><li><code>no-store</code><ul><li>如果响应头包含<code>“Cache-Control”</code>字段和<code>“ no-store”</code>参数，则启用压缩。</li></ul></li><li><code>private</code><ul><li>如果响应头包含<code>“Cache-Control”</code>字段和<code>“ private”</code>参数，则启用压缩。</li></ul></li><li><code>no_last_modified</code><ul><li>如果响应头不包含<code>“Last-Modified”</code>字段，则启用压缩;</li></ul></li><li><code>no_etag</code><ul><li>如果响应头不包含<code>“ETag”</code>字段，则启用压缩;</li></ul></li><li><code>auth</code><ul><li>如果请求头包含<code>“auth”</code>字段，则启用压缩;</li></ul></li><li><code>any</code><ul><li>为所有代理的请求启用压缩。</li></ul></li></ul><h3 id="gzip-types-mime-type-…"><a href="#gzip-types-mime-type-…" class="headerlink" title="gzip_types mime-type …;"></a>gzip_types mime-type …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip_types mime-type ...;</span><br><span class="line">Default:</span><br><span class="line">gzip_types text/html;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>Enables gzipping of responses for the specified MIME types in addition to “text/html”. The special value “*” matches any MIME type (0.8.29). Responses with the “text/html” type are always compressed.</p><h4 id="查看Nginx的MIME类型"><a href="#查看Nginx的MIME类型" class="headerlink" title="查看Nginx的MIME类型"></a>查看Nginx的MIME类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cat /etc/nginx/mime.types</span><br><span class="line"></span><br><span class="line">types &#123;</span><br><span class="line">    text/html                             html htm shtml;</span><br><span class="line">    text/css                              css;</span><br><span class="line">    text/xml                              xml;</span><br><span class="line">    image/gif                             gif;</span><br><span class="line">    image/jpeg                            jpeg jpg;</span><br><span class="line">    application/javascript                js;</span><br><span class="line">    application/atom+xml                  atom;</span><br><span class="line">    application/rss+xml                   rss;</span><br><span class="line"></span><br><span class="line">    text/mathml                           mml;</span><br><span class="line">    text/plain                            txt;</span><br><span class="line">    text/vnd.sun.j2me.app-descriptor      jad;</span><br><span class="line">    text/vnd.wap.wml                      wml;</span><br><span class="line">    text/x-component                      htc;</span><br><span class="line"></span><br><span class="line">    image/png                             png;</span><br><span class="line">    image/tiff                            tif tiff;</span><br><span class="line">    image/vnd.wap.wbmp                    wbmp;</span><br><span class="line">    image/x-icon                          ico;</span><br><span class="line">    image/x-jng                           jng;</span><br><span class="line">    image/x-ms-bmp                        bmp;</span><br><span class="line">    image/svg+xml                         svg svgz;</span><br><span class="line">    image/webp                            webp;</span><br><span class="line"></span><br><span class="line">    application/font-woff                 woff;</span><br><span class="line">    application/java-archive              jar war ear;</span><br><span class="line">    application/json                      json;</span><br><span class="line">    application/mac-binhex40              hqx;</span><br><span class="line">    application/msword                    doc;</span><br><span class="line">    application/pdf                       pdf;</span><br><span class="line">    application/postscript                ps eps ai;</span><br><span class="line">    application/rtf                       rtf;</span><br><span class="line">    application/vnd.apple.mpegurl         m3u8;</span><br><span class="line">    application/vnd.ms-excel              xls;</span><br><span class="line">    application/vnd.ms-fontobject         eot;</span><br><span class="line">    application/vnd.ms-powerpoint         ppt;</span><br><span class="line">    application/vnd.wap.wmlc              wmlc;</span><br><span class="line">    application/vnd.google-earth.kml+xml  kml;</span><br><span class="line">    application/vnd.google-earth.kmz      kmz;</span><br><span class="line">    application/x-7z-compressed           7z;</span><br><span class="line">    application/x-cocoa                   cco;</span><br><span class="line">    application/x-java-archive-diff       jardiff;</span><br><span class="line">    application/x-java-jnlp-file          jnlp;</span><br><span class="line">    application/x-makeself                run;</span><br><span class="line">    application/x-perl                    pl pm;</span><br><span class="line">    application/x-pilot                   prc pdb;</span><br><span class="line">    application/x-rar-compressed          rar;</span><br><span class="line">    application/x-redhat-package-manager  rpm;</span><br><span class="line">    application/x-sea                     sea;</span><br><span class="line">    application/x-shockwave-flash         swf;</span><br><span class="line">    application/x-stuffit                 sit;</span><br><span class="line">    application/x-tcl                     tcl tk;</span><br><span class="line">    application/x-x509-ca-cert            der pem crt;</span><br><span class="line">    application/x-xpinstall               xpi;</span><br><span class="line">    application/xhtml+xml                 xhtml;</span><br><span class="line">    application/xspf+xml                  xspf;</span><br><span class="line">    application/zip                       zip;</span><br><span class="line"></span><br><span class="line">    application/octet-stream              bin exe dll;</span><br><span class="line">    application/octet-stream              deb;</span><br><span class="line">    application/octet-stream              dmg;</span><br><span class="line">    application/octet-stream              iso img;</span><br><span class="line">    application/octet-stream              msi msp msm;</span><br><span class="line"></span><br><span class="line">    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx;</span><br><span class="line">    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          xlsx;</span><br><span class="line">    application/vnd.openxmlformats-officedocument.presentationml.presentation  pptx;</span><br><span class="line"></span><br><span class="line">    audio/midi                            mid midi kar;</span><br><span class="line">    audio/mpeg                            mp3;</span><br><span class="line">    audio/ogg                             ogg;</span><br><span class="line">    audio/x-m4a                           m4a;</span><br><span class="line">    audio/x-realaudio                     ra;</span><br><span class="line"></span><br><span class="line">    video/3gpp                            3gpp 3gp;</span><br><span class="line">    video/mp2t                            ts;</span><br><span class="line">    video/mp4                             mp4;</span><br><span class="line">    video/mpeg                            mpeg mpg;</span><br><span class="line">    video/quicktime                       mov;</span><br><span class="line">    video/webm                            webm;</span><br><span class="line">    video/x-flv                           flv;</span><br><span class="line">    video/x-m4v                           m4v;</span><br><span class="line">    video/x-mng                           mng;</span><br><span class="line">    video/x-ms-asf                        asx asf;</span><br><span class="line">    video/x-ms-wmv                        wmv;</span><br><span class="line">    video/x-msvideo                       avi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现Nginx压缩功能"><a href="#实现Nginx压缩功能" class="headerlink" title="实现Nginx压缩功能"></a>实现Nginx压缩功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir /app/website1</span><br><span class="line">[root@Nginx-Server ~]# ll -h /var/log/messages </span><br><span class="line">-rw-------. 1 root root 568K Oct 26 19:11 /var/log/messages</span><br><span class="line">[root@Nginx-Server ~]# cp /var/log/messages /app/website1/gzip.html &amp;&amp; chmod a+r /app/website1/gzip.html</span><br><span class="line">[root@Nginx-Server ~]# ll -h /app/website1/gzip.html</span><br><span class="line">-rw-r--r-- 1 root root 568K Oct 26 19:16 /app/website1/gzip.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -I 192.168.8.140/gzip.html      # 直接测试</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Thu, 26 Oct 2017 11:19:24 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 580711  </span><br><span class="line">Last-Modified: Thu, 26 Oct 2017 11:16:58 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f1c42a-8dc67&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# ll  /app/website1/gzip.html          # 可以看到，并没有压缩</span><br><span class="line">-rw-r--r-- 1 root root 580711 Oct 26 19:16 /app/website1/gzip.html</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf         # 修改配置文件，启用压缩功能</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server ; </span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    gzip on; </span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_min_length 64; </span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_types text/xml text/css application/javascript;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@Nginx-Server ~]# curl -I --compressed 192.168.8.140/gzip.html         # 再次测试</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Thu, 26 Oct 2017 11:27:35 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Last-Modified: Thu, 26 Oct 2017 11:16:58 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: W/&quot;59f1c42a-8dc67&quot;</span><br><span class="line">Content-Encoding: gzip          # 已经压缩</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_gzip_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块ngx_http_stub_status_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-stub-status-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-stub-status-module/</url>
      <content type="html"><![CDATA[<h3 id="模块ngx-http-stub-status-module"><a href="#模块ngx-http-stub-status-module" class="headerlink" title="模块ngx_http_stub_status_module"></a>模块ngx_http_stub_status_module</h3><p>用于输出nginx的基本状态信息</p><a id="more"></a><h3 id="实现nginx的基本状态信息"><a href="#实现nginx的基本状态信息" class="headerlink" title="实现nginx的基本状态信息"></a>实现nginx的基本状态信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        auth_basic &quot;Admin&quot; ;</span><br><span class="line">        auth_basic_user_file /etc/nginx/.passwd ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    location /status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    allow 192.168.8.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140/status/</span><br><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 1 1 1</span><br></pre></td></tr></table></figure><h3 id="status信息"><a href="#status信息" class="headerlink" title="status信息"></a>status信息</h3><ul><li>Active connections:当前状态，活动状态的连接数</li><li>accepts：统计总值，已经接受的客户端请求的总数</li><li>handled：统计总值，已经处理完成的客户端请求的总数</li><li>requests：统计总值，客户端发来的总的请求数</li><li>Reading：当前状态，正在读取客户端请求报文首部的连接的连接数</li><li>Writing：当前状态，正在向客户端发送响应报文过程中的连接数</li><li>Waiting：当前状态，正在等待客户端发出请求的空闲连接数</li></ul>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块ngx_http_stub_status_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_log_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-log-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-log-module/</url>
      <content type="html"><![CDATA[<h3 id="ngx-http-log-module模块"><a href="#ngx-http-log-module模块" class="headerlink" title="ngx_http_log_module模块"></a>ngx_http_log_module模块</h3><p>指定日志格式记录请求</p><h3 id="1、-log-format-name-string-…"><a href="#1、-log-format-name-string-…" class="headerlink" title="1、 log_format name string …;"></a>1、 log_format name string …;</h3><p>string可以使用nginx核心模块及其它模块内嵌的变量</p><a id="more"></a><h3 id="2、-access-log-path-format-buffer-size-gzip-level-flush-time-if-condition"><a href="#2、-access-log-path-format-buffer-size-gzip-level-flush-time-if-condition" class="headerlink" title="2、 access_log path [format [buffer=size] [gzip[=level]][flush=time] [if=condition]];"></a>2、 access_log path [format [buffer=size] [gzip[=level]][flush=time] [if=condition]];</h3><ul><li>access_log off;</li><li>访问日志文件路径，格式及相关的缓冲的配置<ul><li>buffer=size</li><li>flush=time</li></ul></li></ul><h3 id="实现自定义日志"><a href="#实现自定义日志" class="headerlink" title="实现自定义日志"></a>实现自定义日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 注意在http中添加</span><br><span class="line">http &#123;</span><br><span class="line"> log_format test &apos;$remote_addr-$remote_user [$time_local] &apos;</span><br><span class="line">                            &apos;&quot;$request&quot; $status $bytes_sent &apos;</span><br><span class="line">                            &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$gzip_ratio&quot;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 定义日志</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    access_log /var/log/nginx/nginx-access.log test buffer=32k ;        # 定义日志的路径和缓冲的配置</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        auth_basic &quot;Admin&quot; ;</span><br><span class="line">        auth_basic_user_file /etc/nginx/.passwd ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# tail -5 /var/log/nginx/nginx-access.log       # 测试</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="3、-open-log-file-cache-max-N-inactive-time"><a href="#3、-open-log-file-cache-max-N-inactive-time" class="headerlink" title="3、 open_log_file_cache max=N [inactive=time]"></a>3、 open_log_file_cache max=N [inactive=time]</h3><ul><li>[min_uses=N] [valid=time];</li><li>open_log_file_cache off;</li><li>缓存各日志文件相关的元数据信息</li><li>max：缓存的最大文件描述符数量</li><li>min_uses：在inactive指定的时长内访问大于等于此值方</li><li>可被当作活动项<ul><li>inactive：非活动时长</li><li>valid：验正缓存中各缓存项是否为活动项的时间间隔</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_log_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_auth_basic_module</title>
      <link href="/2017/10/25/Nginx-http-auth-basic-module/"/>
      <url>/2017/10/25/Nginx-http-auth-basic-module/</url>
      <content type="html"><![CDATA[<h3 id="ngx-http-auth-basic-module模块"><a href="#ngx-http-auth-basic-module模块" class="headerlink" title="ngx_http_auth_basic_module模块"></a>ngx_http_auth_basic_module模块</h3><p>实现基于用户的访问控制，使用basic机制进行用户认证</p><ol><li>auth_basic string | off;</li><li>auth_basic_user_file file;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /admin/ &#123;</span><br><span class="line">auth_basic &quot;Admin Area&quot;;</span><br><span class="line">auth_basic_user_file /etc/nginx/.ngxpasswd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h4 id="用户口令："><a href="#用户口令：" class="headerlink" title="用户口令："></a>用户口令：</h4><ol><li>明文文本：格式name:password:comment</li><li>加密文本：由htpasswd命令实现(httpd-tools所提供)</li></ol><h3 id="实现基于用户的访问控制"><a href="#实现基于用户的访问控制" class="headerlink" title="实现基于用户的访问控制"></a>实现基于用户的访问控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        auth_basic &quot;Admin&quot; ;         # 指定提示语</span><br><span class="line">        auth_basic_user_file /etc/nginx/.passwd ;       # 指定密码文件</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# htpasswd -c -m /etc/nginx/.passwd user1       # 创建用户和文件</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user user1</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140/admin/     # 访问测试，需要验证</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;401 Authorization Required&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;401 Authorization Required&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><center><img src="https://houhaiyun.github.io/img/images/Nginx-http-auth-basic-module-1.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_auth_basic_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_access_module</title>
      <link href="/2017/10/25/Nginx-http-access-module/"/>
      <url>/2017/10/25/Nginx-http-access-module/</url>
      <content type="html"><![CDATA[<h3 id="ngx-http-access-module模块"><a href="#ngx-http-access-module模块" class="headerlink" title="ngx_http_access_module模块"></a>ngx_http_access_module模块</h3><p>实现基于ip的访问控制功能</p><a id="more"></a><ol><li>allow address | CIDR | unix: | all;</li><li>deny address | CIDR | unix: | all;<ul><li>http, server, location, limit_except</li><li>自上而下检查，一旦匹配，将生效，条件严格的置前</li></ul></li></ol><h3 id="实现访问控制"><a href="#实现访问控制" class="headerlink" title="实现访问控制"></a>实现访问控制</h3><p>允许192.168.8.128访问/admin目录，其它全部拒绝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">            allow 192.168.8.128/32 ;</span><br><span class="line">            deny all ;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ifconfig eth1         # 128测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:13630 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:11400 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:8834196 (8.4 MiB)  TX bytes:968772 (946.0 KiB)</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.140/admin/</span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br><span class="line">    </span><br><span class="line">[root@centos6 ~]# ifconfig eth1     # 其它测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:290 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:233 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:32163 (31.4 KiB)  TX bytes:31517 (30.7 KiB)</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.140/admin/     # 已经被拒绝</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_access_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置文件2</title>
      <link href="/2017/10/25/Nginx-configure2/"/>
      <url>/2017/10/25/Nginx-configure2/</url>
      <content type="html"><![CDATA[<h3 id="http协议相关的配置结构"><a href="#http协议相关的配置结构" class="headerlink" title="http协议相关的配置结构"></a>http协议相关的配置结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    ... 各server的公共配置</span><br><span class="line">    server &#123; 每个server用于定义一个虚拟主机</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        server_name 虚拟主机名</span><br><span class="line">        root 主目录</span><br><span class="line">        alias 路径别名</span><br><span class="line">        location [OPERATOR] URL &#123; 指定URL的特性</span><br><span class="line">            ...</span><br><span class="line">            if CONDITION &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="核心模块：ngx-http-core-module"><a href="#核心模块：ngx-http-core-module" class="headerlink" title="核心模块：ngx_http_core_module"></a>核心模块：ngx_http_core_module</h3><h3 id="与套接字相关的配置："><a href="#与套接字相关的配置：" class="headerlink" title="与套接字相关的配置："></a>与套接字相关的配置：</h3><h4 id="1-虚拟主机"><a href="#1-虚拟主机" class="headerlink" title="1. 虚拟主机"></a>1. 虚拟主机</h4><h5 id="1-配置一个基于IP的虚拟主机"><a href="#1-配置一个基于IP的虚拟主机" class="headerlink" title="1. 配置一个基于IP的虚拟主机"></a>1. 配置一个基于IP的虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir /app/wesite&#123;1..3&#125;       # 创建虚拟主机目录</span><br><span class="line">[root@centos7 ~]# ls /app/</span><br><span class="line">wesite1  wesite2  wesite3</span><br><span class="line">[root@centos7 ~]# echo website1 &gt; /app/wesite1/index.html       # 创建虚拟主机测试网页</span><br><span class="line">[root@centos7 ~]# echo website2 &gt; /app/wesite2/index.html</span><br><span class="line">[root@centos7 ~]# echo website3 &gt; /app/wesite3/index.html</span><br><span class="line">[root@centos7 ~]# cd /app/</span><br><span class="line">[root@centos7 app]# tree            # 目录结构如下</span><br><span class="line">.</span><br><span class="line">├── wesite1</span><br><span class="line">│   └── index.html</span><br><span class="line">├── wesite2</span><br><span class="line">│   └── index.html</span><br><span class="line">└── wesite3</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">3 directories, 3 files</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ifconfig ens34:0 192.168.8.141 up     # 配置虚拟IP</span><br><span class="line">[root@centos7 ~]# ifconfig ens34:1 192.168.8.142 up</span><br><span class="line">[root@centos7 ~]# ifconfig ens34:2 192.168.8.143 up</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ifconfig          # 查看IP地址</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 15474  bytes 1341411 (1.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 15674  bytes 9744197 (9.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.141  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">ens34:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.142  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">ens34:2: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.143  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 此配置文件是不存在的，需要手动创建。为什么，此配置文件能生效呢？因为此配置文件是include在/etc/nginx/nginx.conf文件中的</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.141:80 ;</span><br><span class="line">    server_name  _;  </span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.142:80 ;</span><br><span class="line">    server_name  _;  </span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.143:80 ;</span><br><span class="line">    server_name  _;  </span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl 192.168.8.141        # 测试访问，ok</span><br><span class="line">website1</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.142</span><br><span class="line">website2</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.143</span><br><span class="line">website3</span><br></pre></td></tr></table></figure><h5 id="2-配置一个基于域名的虚拟主机"><a href="#2-配置一个基于域名的虚拟主机" class="headerlink" title="2. 配置一个基于域名的虚拟主机"></a>2. 配置一个基于域名的虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cat /etc/hosts            # 添加hosts文件</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.140 www.a.com  www.b.com www.c.com</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s  stop </span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl www.a.com        # 测试访问，ok</span><br><span class="line">website1</span><br><span class="line">[root@centos7 ~]# curl www.b.com </span><br><span class="line">website2</span><br><span class="line">[root@centos7 ~]# curl www.c.com </span><br><span class="line">website3</span><br></pre></td></tr></table></figure><h5 id="3-配置一个基于端口的虚拟主机"><a href="#3-配置一个基于端口的虚拟主机" class="headerlink" title="3. 配置一个基于端口的虚拟主机"></a>3. 配置一个基于端口的虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:81 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:82 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:83 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t              # 检查配置文件，ok</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140:81         # 测试访问，ok</span><br><span class="line">website1</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140:82</span><br><span class="line">website2</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140:83</span><br><span class="line">website3</span><br></pre></td></tr></table></figure><h4 id="2-listen-PORT"><a href="#2-listen-PORT" class="headerlink" title="2.  listen PORT"></a>2.  listen PORT</h4><p> listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE<br>listen address[:port] [default_server] [ssl] [http2 | spdy]<br>[backlog=number] [rcvbuf=size] [sndbuf=size]</p><h5 id="1-default-server-设定为默认虚拟主机"><a href="#1-default-server-设定为默认虚拟主机" class="headerlink" title="1. default_server 设定为默认虚拟主机"></a>1. default_server 设定为默认虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 将上面搭建的虚拟主机的www.a.com设置为虚拟主机</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改nginx主配置文件</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;         # 主配置文件设置了默认虚拟机，所以我们要将此项删除掉</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 default_server ;          # 将www.a.com设置为虚拟主机</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx         </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140        # 测试访问，192.168.8.140已经配置为，默认虚拟主机</span><br><span class="line">website1</span><br></pre></td></tr></table></figure><h5 id="2-ssl-限制仅能够通过ssl连接提供服务"><a href="#2-ssl-限制仅能够通过ssl连接提供服务" class="headerlink" title="2. ssl 限制仅能够通过ssl连接提供服务"></a>2. ssl 限制仅能够通过ssl连接提供服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl ;      # 使虚拟主机提供ssl加密</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-backlog-number-超过并发连接数后，新请求进入后援队列的长度"><a href="#3-backlog-number-超过并发连接数后，新请求进入后援队列的长度" class="headerlink" title="3. backlog=number 超过并发连接数后，新请求进入后援队列的长度"></a>3. backlog=number 超过并发连接数后，新请求进入后援队列的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rcvbuf=size 接收缓冲区大小</span><br><span class="line">sndbuf=size 发送缓冲区大小</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>(1) 基于port；<ul><li>listen PORT; 指令监听在不同的端口</li></ul></li><li>(2) 基于ip的虚拟主机<ul><li>listen IP:PORT; IP 地址不同</li></ul></li><li>(3) 基于hostname<ul><li>server_name fqdn; 指令指向不同的主机名</li></ul></li></ul><h4 id="3-server-name-name"><a href="#3-server-name-name" class="headerlink" title="3.  server_name name"></a>3.  server_name name</h4><ul><li>虚拟主机的主机名称后可跟多个由空白字符分隔的字符串</li><li>支持*通配任意长度的任意字符<ul><li>server_name <em>.magedu.com <a href="http://www.magedu" target="_blank" rel="noopener">www.magedu</a>.</em></li></ul></li><li>支持~起始的字符做正则表达式模式匹配，性能原因慎用<ul><li>server_name ~^www\d+.magedu.com$</li><li>\d 表示 [0-9]</li></ul></li></ul><p><strong>匹配优先级机制从高到低：</strong></p><ul><li>(1) 首先是字符串精确匹配 如： <a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a></li><li>(2) 左侧<em>通配符 如： </em>.magedu.com</li><li>(3) 右侧<em>通配符 如： <a href="http://www.magedu" target="_blank" rel="noopener">www.magedu</a>.</em></li><li>(4) 正则表达式 如： ~^.*.magedu.com$</li><li>(5) default_server</li></ul><h4 id="4-tcp-nodelay-on-off"><a href="#4-tcp-nodelay-on-off" class="headerlink" title="4. tcp_nodelay on | off;"></a>4. tcp_nodelay on | off;</h4><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:sendfile on | off;</span><br><span class="line">Default:</span><br><span class="line">sendfile off;</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure></p><ul><li>在keepalived模式下的连接是否启用TCP_NODELAY选项</li><li>当为off时，延迟发送，合并多个请求后再发送</li><li>默认On时，不延迟发送</li><li>可用于： http, server, location</li><li>此项设置并不建议改为off，延迟发送会降低用户的体验</li></ul><h4 id="5-sendfile-on-off"><a href="#5-sendfile-on-off" class="headerlink" title="5. sendfile on | off;"></a>5. sendfile on | off;</h4><p>是否启用sendfile功能，在内核中封装报文直接发送，默认Off</p><h5 id="启动sendfile"><a href="#启动sendfile" class="headerlink" title="启动sendfile"></a>启动sendfile</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    sendfile on ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-server-tokens-on-off-build-string"><a href="#6-server-tokens-on-off-build-string" class="headerlink" title="6. server_tokens on | off | build | string"></a>6. server_tokens on | off | build | string</h4><p><strong>官网帮助：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:server_tokens on | off | build | string;</span><br><span class="line">Default:</span><br><span class="line">server_tokens on;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure><p>是否在响应报文的Server首部显示nginx版本</p><h5 id="实现隐藏版本号"><a href="#实现隐藏版本号" class="headerlink" title="实现隐藏版本号"></a>实现隐藏版本号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# curl -I localhost         #我们默认访问是会显示版本号的</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 00:52:37 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 3700</span><br><span class="line">Last-Modified: Mon, 31 Oct 2016 12:37:02 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;58173aee-e74&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]#  vim /etc/nginx/nginx.conf        # 编辑配置文件，添加到http中隐藏其版本号。</span><br><span class="line">server_tokens off;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop </span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line">[root@centos7 ~]# curl -I localhost         # 重启后再次测试</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx           # 已经不再啊显示版本号</span><br><span class="line">Date: Wed, 25 Oct 2017 00:53:18 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 3700</span><br><span class="line">Last-Modified: Mon, 31 Oct 2016 12:37:02 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;58173aee-e74&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="定义路径相关的配置"><a href="#定义路径相关的配置" class="headerlink" title="定义路径相关的配置"></a>定义路径相关的配置</h3><h4 id="1-root"><a href="#1-root" class="headerlink" title="1. root"></a>1. root</h4><p>设置web资源的路径映射；用于指明请求的URL所对应的文档的目录路径，可用于http, server, location, if in location</p><h5 id="定义路径web资源的路径"><a href="#定义路径web资源的路径" class="headerlink" title="定义路径web资源的路径"></a>定义路径web资源的路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]#  vim /etc/nginx/nginx.conf        # 编辑配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    sendfile on ;</span><br><span class="line">    root         /app/wesite1;          #定义资源的路径为/app/website1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-location-uri-…"><a href="#2-location-uri-…" class="headerlink" title="2.  location [ = | ~ | ~* | ^~ ] uri { … }"></a>2.  location [ = | ~ | ~* | ^~ ] uri { … }</h4><ul><li><code>location @name { ... }</code></li><li>在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射；ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置</li></ul><h5 id="定义location"><a href="#定义location" class="headerlink" title="定义location"></a>定义location</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir -p /app/admin/admin         # 创建访问目录</span><br><span class="line">[root@centos7 ~]# echo &quot;admin--&gt; Path: /app/admin/admin&quot; &gt; /app/admin/admin/index.html      # 创建测试页面</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 编辑配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        root /app/admin/ ; </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl www.a.com/admin/         # 访问的路径是/app/admin/admin</span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br></pre></td></tr></table></figure><p>由上面的实验可以看出，location中定义的路径是相对于location中的root中所定义的路径的</p><h4 id="3-：对URI做精确匹配；"><a href="#3-：对URI做精确匹配；" class="headerlink" title="3. =：对URI做精确匹配；"></a>3. =：对URI做精确匹配；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.magedu.com/" target="_blank" rel="noopener">http://www.magedu.com/</a> 匹配</li><li><a href="http://www.magedu.com/index.html" target="_blank" rel="noopener">http://www.magedu.com/index.html</a> 不匹配</li><li>^~：对URI的最左边部分做匹配检查，不区分字符大小写</li><li>~：对URI做正则表达式模式匹配，区分字符大小写</li><li>~*：对URI做正则表达式模式匹配，不区分字符大小写</li><li>不带符号：匹配起始于此uri的所有的uri</li><li>匹配优先级从高到低：</li><li>=, ^~, ～/～*, 不带符号</li></ul><h5 id="location定义和匹配"><a href="#location定义和匹配" class="headerlink" title="location定义和匹配"></a>location定义和匹配</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 ;</span><br><span class="line">    service_name www.ihaiyun.cc ; </span><br><span class="line">    location = / &#123;</span><br><span class="line">        [ configuration A ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        [ configuration B ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /documents/ &#123;</span><br><span class="line">        [ configuration C ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ^~ /images/ &#123;</span><br><span class="line">        [ configuration D ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">        [ configuration E ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一段关于location的定义，下面我们来匹配：</p><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc将会匹配那个呢？" target="_blank" rel="noopener">http://www.ihaiyun.cc将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration A</code>中的内容了。为什么呢？因为：利用排除法来解决此问题，首先我们访问的是/，就把后面的三项都排除了，最后就剩下A和B了。=比不带符号的优先级要高，所以就是A了。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/index.html将会匹配那个呢？">http://www.ihaiyun.cc/index.html将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration B</code>中的内容了。为什么呢？因为：指定了路径。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/documents/index.html将会匹配那个呢？">http://www.ihaiyun.cc/documents/index.html将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration C</code>中的内容了。为什么呢？因为：指定了路径。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/documents/images/test.jpg将会匹配那个呢？">http://www.ihaiyun.cc/documents/images/test.jpg将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration D</code>中的内容了。为什么呢？因为：指定了路径。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/documents/test.jpg将会匹配那个呢？">http://www.ihaiyun.cc/documents/test.jpg将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration E</code>中的内容了。为什么呢？因为：只有E能配置到此URL，且没有比E优先级高的location</li></ul><h4 id="4-alias-path"><a href="#4-alias-path" class="headerlink" title="4.  alias path;"></a>4.  alias path;</h4><p>路径别名，文档映射的另一种机制；仅能用于location上下文</p><h5 id="实现路径别名"><a href="#实现路径别名" class="headerlink" title="实现路径别名"></a>实现路径别名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 编辑配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# echo &quot;admin Path: --&gt; /app/admin&quot; &gt; /app/admin/index.html</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line">[root@centos7 ~]# curl www.a.com/ad/         # 测试访问可以看到访问的是，/app/admin/</span><br><span class="line">admin Path: --&gt; /app/admin</span><br></pre></td></tr></table></figure><h5 id="alias和root的区别、"><a href="#alias和root的区别、" class="headerlink" title="alias和root的区别、"></a>alias和root的区别、</h5><ul><li>alias：定义了路径别名，别名可以随意定义，别名是不存在的，访问的真实路径为alias后面定义的路径</li><li>root：定义了路径的父路径，父路径和定义的路径组合成为一个完整的路径。</li></ul><p><strong>注意</strong> ： location中使用root指令和alias指令的意义不同</p><ul><li>(a) root，给定的路径对应于location中的/uri/左侧的/</li><li>(b) alias，给定的路径对应于location中的/uri/右侧的/</li></ul><h4 id="5-index-file-…"><a href="#5-index-file-…" class="headerlink" title="5. index file …;"></a>5. index file …;</h4><p>指定默认网页资源，注意： ngx_http_index_module模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 添加默认index.php资源</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    index index.html;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6-error-page-code-…-response-uri"><a href="#6-error-page-code-…-response-uri" class="headerlink" title="6. error_page code … [=[response]] uri;"></a>6. error_page code … [=[response]] uri;</h4><ul><li>模块： ngx_http_core_module</li><li>定义错误页， 以指定的响应状态码进行响应</li><li>可用位置： http, server, location, if in location</li><li>error_page 404 /404.html</li><li>error_page 404 =200 /404.html</li></ul><h5 id="定义错误页面，返回指定结果"><a href="#定义错误页面，返回指定结果" class="headerlink" title="定义错误页面，返回指定结果"></a>定义错误页面，返回指定结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    error_page 404 /404.html ;      # 定义访问指定的404错误页面</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">[root@centos7 ~]# echo &quot;页面跑丢了！&quot; &gt; /app/wesite1/404.html       # 创建404界面</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx         </span><br><span class="line">[root@centos7 ~]# curl www.a.com/asdf.txxt      # 测试访问asdf.txt是不存在的，已经是我们自定义的404页面</span><br><span class="line">页面跑丢了！</span><br><span class="line">[root@centos7 ~]# curl -I  www.a.com/asdf.txxt      # 查看状态码还是404</span><br><span class="line">HTTP/1.1 404 Not Found</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 06:11:03 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 19</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f02ad7-13&quot;</span><br></pre></td></tr></table></figure><h5 id="定义错误页面，指定为返回状态码为200-ok"><a href="#定义错误页面，指定为返回状态码为200-ok" class="headerlink" title="定义错误页面，指定为返回状态码为200 ok"></a>定义错误页面，指定为返回状态码为200 ok</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    error_page 404 =200 /404.html ;     # 定义状态码由404转换为200</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t      </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl www.a.com/asdfkl.asdf        # 测试访问</span><br><span class="line">页面跑丢了！</span><br><span class="line">[root@centos7 ~]# curl -I  www.a.com/asdfkl.asdf        # 查看状态码已经是200，这么做的好处是可以防止浏览器页面劫持</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 06:19:07 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 19</span><br><span class="line">Last-Modified: Wed, 25 Oct 2017 06:10:31 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f02ad7-13&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h4 id="7-try-files-file-…-uri"><a href="#7-try-files-file-…-uri" class="headerlink" title="7. try_files file … uri;"></a>7. try_files file … uri;</h4><ul><li><code>try_files file ... =code;</code></li><li>按顺序检查文件是否存在，返回第一个找到的文件或文件夹（结尾加斜线表示为文件夹），如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123; try_files $uri /images/default.gif; &#125;</span><br><span class="line">location / &#123; try_files $uri $uri/index.html $uri.html =404; &#125;</span><br></pre></td></tr></table></figure><h5 id="实现目录下找不到文件，返回默认文件"><a href="#实现目录下找不到文件，返回默认文件" class="headerlink" title="实现目录下找不到文件，返回默认文件"></a>实现目录下找不到文件，返回默认文件</h5><p><strong>注：</strong> try_files的文件路径是相对于上面定义的root目录的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /admin/ &#123;</span><br><span class="line">        try_files $uri /admin/default.html ;        # 指定如果找不到URI中的文件就返回default.html文件</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# mkdir /app/wesite1/admin      # 创建访问目录</span><br><span class="line">[root@centos7 ~]# cd /app/wesite1/admin/</span><br><span class="line">[root@centos7 admin]# ls</span><br><span class="line">default.html  index.html  test.html </span><br><span class="line">[root@centos7 admin]# cat default.html          # 创建三个test文件</span><br><span class="line">This is default file!</span><br><span class="line">[root@centos7 admin]# cat index.html </span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br><span class="line">[root@centos7 admin]# cat test.html </span><br><span class="line">this is a test file!</span><br><span class="line"></span><br><span class="line">[root@centos7 admin]# nginx -s stop</span><br><span class="line">[root@centos7 admin]# nginx </span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/         # 测试，此时就需要手动指定默认网页了</span><br><span class="line">This is default file!</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/index.html       </span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/test.html</span><br><span class="line">this is a test file!</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/asdfjlk      # 随便输入一个文件，返回的是默认文件</span><br><span class="line">This is default file!</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/s123kjsdfjk</span><br><span class="line">This is default file!</span><br></pre></td></tr></table></figure><h5 id="定义查找多个资源，如果找不到就返回404页面"><a href="#定义查找多个资源，如果找不到就返回404页面" class="headerlink" title="定义查找多个资源，如果找不到就返回404页面"></a>定义查找多个资源，如果找不到就返回404页面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    error_page 404 =200 /404.html ;         </span><br><span class="line">    </span><br><span class="line">    location /admin/ &#123;</span><br><span class="line">        try_files $uri $uri/index =404;     # 定义了如果第一个uri找不着，就找第二个uri，第二个uri也找不着的话，那么就返回404页面，且状态为成功</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 admin]# nginx -s stop</span><br><span class="line">[root@centos7 admin]# nginx </span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/index.html       # 页面可以找着是正常的</span><br><span class="line">admin--&gt; Path: /app/admin/admin </span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/asdfjklasd       # 访问不存在的资源，返回404</span><br><span class="line">页面跑丢了！</span><br><span class="line">[root@centos7 admin]# curl -I  www.a.com/admin/asdfjklasd       # 状态码是200，OK的</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 07:04:54 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 19</span><br><span class="line">Last-Modified: Wed, 25 Oct 2017 06:10:31 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f02ad7-13&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="定义客户端请求的相关配置"><a href="#定义客户端请求的相关配置" class="headerlink" title="定义客户端请求的相关配置"></a>定义客户端请求的相关配置</h3><h4 id="8-keepalive-timeout-timeout-header-timeout"><a href="#8-keepalive-timeout-timeout-header-timeout" class="headerlink" title="8 keepalive_timeout timeout [header_timeout];"></a>8 keepalive_timeout timeout [header_timeout];</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive_timeout timeout [header_timeout];</span><br><span class="line">Default:</span><br><span class="line">keepalive_timeout 75s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设定保持连接超时时长， 0表示禁止长连接， 默认为75s</p><h5 id="测试超时时间"><a href="#测试超时时间" class="headerlink" title="测试超时时间"></a>测试超时时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf     # 查看主配置文件，默认就是支持keepalive的，65s</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# date &amp;&amp; telnet 192.168.8.140 80  ; date       # 通过telnet测试</span><br><span class="line">Wed Oct 25 15:15:50 CST 2017</span><br><span class="line">Trying 192.168.8.140...</span><br><span class="line">Connected to 192.168.8.140.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">HOST: www.a.com</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 07:16:11 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 9</span><br><span class="line">Last-Modified: Wed, 25 Oct 2017 02:11:13 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59eff2c1-9&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">website1</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">Wed Oct 25 15:17:51 CST 2017</span><br></pre></td></tr></table></figure><h4 id="9-keepalive-requests-number"><a href="#9-keepalive-requests-number" class="headerlink" title="9.  keepalive_requests number;"></a>9.  keepalive_requests number;</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive_requests number;</span><br><span class="line">Default:</span><br><span class="line">keepalive_requests 100;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 0.8.0.</span><br></pre></td></tr></table></figure></p><p>在一次长连接上所允许请求的资源的最大数量默认为100</p><h5 id="定义长连接上所允许请求的资源的最大数量默认为1000"><a href="#定义长连接上所允许请求的资源的最大数量默认为1000" class="headerlink" title="定义长连接上所允许请求的资源的最大数量默认为1000"></a>定义长连接上所允许请求的资源的最大数量默认为1000</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 定义长连接最大资源数为1000个，只是为了测试哦</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin/ &#123;</span><br><span class="line">        try_files $uri $uri/index =404; </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-keepalive-disable-none-browser-…"><a href="#10-keepalive-disable-none-browser-…" class="headerlink" title="10. keepalive_disable none | browser …"></a>10. keepalive_disable none | browser …</h4><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive_disable none | browser ...;</span><br><span class="line">Default:</span><br><span class="line">keepalive_disable msie6;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>对哪种浏览器禁用长连接</p><h4 id="11-send-timeout-time"><a href="#11-send-timeout-time" class="headerlink" title="11. send_timeout time;"></a>11. send_timeout time;</h4><p>向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非整个响应过程的传输时长    </p><h4 id="12-client-body-buffer-size-size"><a href="#12-client-body-buffer-size-size" class="headerlink" title="12. client_body_buffer_size size;"></a>12. client_body_buffer_size size;</h4><p>用于接收每个客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由client_body_temp_path指令所定义的位置</p><h4 id="13-client-body-temp-path-path-level1-level2-level3"><a href="#13-client-body-temp-path-path-level1-level2-level3" class="headerlink" title="13. client_body_temp_path path [level1 [level2[level3]]];"></a>13. client_body_temp_path path [level1 [level2[level3]]];</h4><ul><li>设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量</li><li>目录名为16进制的数字；</li><li>client_body_temp_path /var/tmp/client_body 1 2 2</li><li>1 1级目录占1位16进制，即2^4=16个目录 0-f</li><li>2 2级目录占2位16进制，即2^8=256个目录 00-ff</li><li>2 3级目录占2位16进制， 即2^8=256个目录 00-ff</li></ul><h3 id="对客户端进行限制的相关配置"><a href="#对客户端进行限制的相关配置" class="headerlink" title="对客户端进行限制的相关配置"></a>对客户端进行限制的相关配置</h3><h4 id="1-limit-rate-rate"><a href="#1-limit-rate-rate" class="headerlink" title="1. limit_rate rate;"></a>1. limit_rate rate;</h4><p>限制响应给客户端的传输速率，单位是bytes/second<br>默认值0表示无限制</p><h4 id="2-限制客户端除了GET之外的其它请求方法"><a href="#2-限制客户端除了GET之外的其它请求方法" class="headerlink" title="2. 限制客户端除了GET之外的其它请求方法"></a>2. 限制客户端除了GET之外的其它请求方法</h4><ul><li>limit_except method … { … }，仅用于location</li><li>限制客户端使用除了指定的请求方法之外的其它方法<br>method:GET, HEAD, POST, PUT, DELETE，MKCOL, COPY, MOVE, OPTIONS, PROPFIND,PROPPATCH, LOCK, UNLOCK, PATCH</li></ul><h5 id="实现限制主机使用除了GET之外的其它指令"><a href="#实现限制主机使用除了GET之外的其它指令" class="headerlink" title="实现限制主机使用除了GET之外的其它指令"></a>实现限制主机使用除了GET之外的其它指令</h5><p>实现允许192.168.8.128这台主机使用除了GET之外的其它指令，其它全部拒绝。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      #修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        limit_except GET &#123;</span><br><span class="line">            allow 192.168.8.128/32 ;</span><br><span class="line">            deny all ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ifconfig eth1         # 128测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:13630 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:11400 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:8834196 (8.4 MiB)  TX bytes:968772 (946.0 KiB)</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl -XPUT 192.168.8.140/admin/       # 测试PUT，状态码为：405 其实允许的只是服务器端不支持此方法</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;405 Not Allowed&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;405 Not Allowed&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl -XPUT 192.168.8.140/admin/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ifconfig eth1     # 136测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:290 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:233 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:32163 (31.4 KiB)  TX bytes:31517 (30.7 KiB)</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl -XPUT 192.168.8.140/admin/       # 测试put，状态码为403，已经被拒绝</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="文件操作优化的配置"><a href="#文件操作优化的配置" class="headerlink" title="文件操作优化的配置"></a>文件操作优化的配置</h3><h4 id="1-aio-on-off-threads-pool"><a href="#1-aio-on-off-threads-pool" class="headerlink" title="1. aio on | off | threads[=pool];"></a>1. aio on | off | threads[=pool];</h4><p>是否启用aio功能；异步IO</p><h4 id="2-directio-size-off"><a href="#2-directio-size-off" class="headerlink" title="2. directio size | off;"></a>2. directio size | off;</h4><p>同步IO，</p><p>是否同步（直接）写磁盘，而非写缓存，在Linux主机启用O_DIRECT标记， 则文件大于等于给定大小时使用，例如directio 4m</p><h4 id="3-open-file-cache-off"><a href="#3-open-file-cache-off" class="headerlink" title="3. open_file_cache off;"></a>3. open_file_cache off;</h4><ul><li>open_file_cache max=N [inactive=time];</li><li>nginx可以缓存以下三种信息：</li><li>(1) 文件元数据：文件的描述符、文件大小和最近一次的修改时间</li><li>(2) 打开的目录结构</li><li>(3) 没有找到的或者没有权限访问的文件的相关信息</li><li>max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现管理inactive=time：缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项， 将被删除</li></ul><h4 id="4-open-file-cache-errors-on-off"><a href="#4-open-file-cache-errors-on-off" class="headerlink" title="4. open_file_cache_errors on | off;"></a>4. open_file_cache_errors on | off;</h4><ul><li>是否缓存查找时发生错误的文件一类的信息</li><li>默认值为off</li></ul><h4 id="5-open-file-cache-min-uses-number"><a href="#5-open-file-cache-min-uses-number" class="headerlink" title="5. open_file_cache_min_uses number;"></a>5. open_file_cache_min_uses number;</h4><ul><li>open_file_cache指令的inactive参数指定的时长内，至少被命中此处指定的次数方可被归类为活动项</li><li>默认值为1</li></ul><h4 id="6-open-file-cache-valid-time"><a href="#6-open-file-cache-valid-time" class="headerlink" title="6. open_file_cache_valid time;"></a>6. open_file_cache_valid time;</h4><p>缓存项有效性的检查频率<br>默认值为60s</p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置文件</title>
      <link href="/2017/10/25/Nginx-configure/"/>
      <url>/2017/10/25/Nginx-configure/</url>
      <content type="html"><![CDATA[<h3 id="配置文件组成部分"><a href="#配置文件组成部分" class="headerlink" title="配置文件组成部分"></a>配置文件组成部分</h3><ul><li>主配置文件： nginx.conf<ul><li>子配置文件 include conf.d/*.conf</li></ul></li><li>fastcgi， uwsgi， scgi等协议相关的配置文件</li><li>mime.types：支持的mime类型</li></ul><a id="more"></a><h4 id="主配置文件的配置指令"><a href="#主配置文件的配置指令" class="headerlink" title="主配置文件的配置指令"></a>主配置文件的配置指令</h4><p><code>directive value [value2 ...];</code>     (directive：指令)</p><ul><li>注意：</li></ul><ol><li>指令必须以分号结尾</li><li>支持使用配置变量<ul><li>自建变量：由Nginx模块引入，可直接引用</li><li>自定义变量：由用户使用set命令定义<ul><li><code>set variable_name value;</code></li></ul></li><li>引用变量：<code>$variable_name</code></li></ul></li></ol><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">main block：主配置段，即全局配置段，对http,mail都有效</span><br><span class="line">    event &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; 事件驱动相关的配置</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; http/https 协议相关配置段</span><br><span class="line"></span><br><span class="line">mail &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; mail 协议相关配置段</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; stream 服务器相关配置段</span><br></pre></td></tr></table></figure><h4 id="http协议相关的配置结构"><a href="#http协议相关的配置结构" class="headerlink" title="http协议相关的配置结构"></a>http协议相关的配置结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    ... 各server的公共配置</span><br><span class="line">    server &#123; 每个server用于定义一个虚拟主机</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        server_name 虚拟主机名</span><br><span class="line">        root 主目录</span><br><span class="line">        alias 路径别名</span><br><span class="line">        location [OPERATOR] URL &#123; 指定URL的特性</span><br><span class="line">            ...</span><br><span class="line">            if CONDITION &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx全局配置分类："><a href="#Nginx全局配置分类：" class="headerlink" title="Nginx全局配置分类："></a>Nginx全局配置分类：</h3><p><strong>Main全局配置段常见的配置指令分类：</strong></p><ul><li>正常运行必备的配置</li><li>优化性能相关的配置</li><li>用于调试及定位问题相关的配置</li><li>事件驱动相关的配置</li><li>帮助文档<ul><li><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></li></ul></li></ul><h3 id="Nginx全局配置main：正常运行必备的配置"><a href="#Nginx全局配置main：正常运行必备的配置" class="headerlink" title="Nginx全局配置main：正常运行必备的配置"></a>Nginx全局配置main：正常运行必备的配置</h3><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html" target="_blank" rel="noopener">帮助文档：http://nginx.org/en/docs/http/ngx_http_core_module.html</a></p><h4 id="1-user"><a href="#1-user" class="headerlink" title="1. user"></a>1. user</h4><p><a href="http://nginx.org/en/docs/ngx_core_module.html#user" target="_blank" rel="noopener">官网帮助：http://nginx.org/en/docs/ngx_core_module.html#user</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">官网帮助：如下</span><br><span class="line">Syntax:user user [group];</span><br><span class="line">Default:</span><br><span class="line">user nobody nobody;</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>指定worker进程的运行身份，如组不指定，默认和用户名同名</p><h4 id="2-pid-PATH-TO-PID-FILE"><a href="#2-pid-PATH-TO-PID-FILE" class="headerlink" title="2. pid /PATH/TO/PID_FILE"></a>2. pid /PATH/TO/PID_FILE</h4><p>指定存储nginx主进程PID的文件路径</p><p>yum安装默认的PID文件路径为：<code>pid /run/nginx.pid;</code></p><h5 id="查看PID文件"><a href="#查看PID文件" class="headerlink" title="查看PID文件"></a>查看PID文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# ss -tnul      # 端口已经打开</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0          127.0.0.1:323                            *:*                  </span><br><span class="line">tcp   LISTEN     0      128                *:80                             *:*                  </span><br><span class="line">tcp   LISTEN     0      128               :::80                            :::*                  </span><br><span class="line">tcp   LISTEN     0      128               :::22                            :::*                  </span><br><span class="line">[root@centos7 ~]# cat  /run/nginx.pid </span><br><span class="line">11278</span><br><span class="line">[root@centos7 ~]# ps -ef | grep nginx       # 主进程的PID为11278</span><br><span class="line">root      11253   1431  0 22:43 pts/0    00:00:00 vim /etc/nginx/nginx.conf</span><br><span class="line">root      11278      1  0 22:45 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx     11279  11278  0 22:45 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11280  11278  0 22:45 ?        00:00:00 nginx: worker process</span><br><span class="line">root      11292  11257  0 22:46 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-include-file-mask"><a href="#3-include-file-mask" class="headerlink" title="3. include file | mask"></a>3. include file | mask</h4><p><a href="http://nginx.org/en/docs/ngx_core_module.html#include" target="_blank" rel="noopener">官网帮助：http://nginx.org/en/docs/ngx_core_module.html#include</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:include file | mask;</span><br><span class="line">Default:—</span><br><span class="line">Context:any</span><br></pre></td></tr></table></figure></p><p>指明包含进来的其它配置文件片断</p><h5 id="指定绝对路径"><a href="#指定绝对路径" class="headerlink" title="指定绝对路径"></a>指定绝对路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">include /usr/share/nginx/modules/*.conf;        # 此处就是一个绝对路径</span><br></pre></td></tr></table></figure><h5 id="指定相对路径"><a href="#指定相对路径" class="headerlink" title="指定相对路径"></a>指定相对路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">include vhost/a.conf;           # 此处就是一个绝对路径，这个相对路径是不存在的</span><br><span class="line">[root@centos7 ~]# nginx -t      # 检查配置文件，提示我们配置文件不存在，需要创建，由此我们知道了，nginx是以/etc/nginx/这个目录下作为相对路径的开始</span><br><span class="line">nginx: [emerg] open() &quot;/etc/nginx/vhost/a.conf&quot; failed (2: No such file or directory) in /etc/nginx/nginx.conf:12</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test failed</span><br></pre></td></tr></table></figure><h5 id="相对路径的路径"><a href="#相对路径的路径" class="headerlink" title="相对路径的路径"></a>相对路径的路径</h5><p>yum安装的相对路径的路径为：<code>/etc/nginx/</code></p><h4 id="4-load-module-file"><a href="#4-load-module-file" class="headerlink" title="4. load_module file"></a>4. load_module file</h4><ul><li>模块加载配置文件： <code>/usr/share/nginx/modules/*.conf</code></li><li>指明要装载的动态模块路径: <code>/usr/lib64/nginx/modules</code></li></ul><h5 id="查看-usr-share-nginx-modules下的配置文件"><a href="#查看-usr-share-nginx-modules下的配置文件" class="headerlink" title="查看/usr/share/nginx/modules下的配置文件"></a>查看/usr/share/nginx/modules下的配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx]# ls /usr/share/nginx/modules       # 查看/usr/share/nginx/modules下的配置文件</span><br><span class="line">mod-http-geoip.conf         mod-http-perl.conf         mod-mail.conf</span><br><span class="line">mod-http-image-filter.conf  mod-http-xslt-filter.conf  mod-stream.conf</span><br><span class="line"></span><br><span class="line">[root@centos7 nginx]# cat /usr/share/nginx/modules/mod-mail.conf        # 随便查看一个配置文件，加载了一个模块</span><br><span class="line">load_module &quot;/usr/lib64/nginx/modules/ngx_mail_module.so&quot;;</span><br></pre></td></tr></table></figure><h3 id="Nginx全局配置main：性能优化相关的配置："><a href="#Nginx全局配置main：性能优化相关的配置：" class="headerlink" title="Nginx全局配置main：性能优化相关的配置："></a>Nginx全局配置main：性能优化相关的配置：</h3><h4 id="1-worker-processes-number-auto"><a href="#1-worker-processes-number-auto" class="headerlink" title="1.  worker_processes number | auto"></a>1.  worker_processes number | auto</h4><p><a href="http://nginx.org/en/docs/ngx_core_module.html#worker_processes" target="_blank" rel="noopener">官网帮助：http://nginx.org/en/docs/ngx_core_module.html#worker_processes</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[link](http://note.youdao.com/)</span><br><span class="line">Syntax:worker_processes number | auto;</span><br><span class="line">Default:</span><br><span class="line">worker_processes 1;</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>worker进程的数量；通常应该为当前主机的cpu的物理核心数</p><h5 id="查看当前主机CPU的物理核心数"><a href="#查看当前主机CPU的物理核心数" class="headerlink" title="查看当前主机CPU的物理核心数"></a>查看当前主机CPU的物理核心数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# lscpu | grep &quot;^CPU(s)&quot;</span><br><span class="line">CPU(s):                2</span><br></pre></td></tr></table></figure><h5 id="配置worker-processes-number"><a href="#配置worker-processes-number" class="headerlink" title="配置worker_processes number"></a>配置worker_processes number</h5><ul><li>官网对<code>worker_processes</code> 给出的解释如下：<ul><li><code>最优值取决于许多因素，包括（但不限于）CPU内核数，存储数据的硬盘驱动器数量以及加载模式。当有疑问时，将其设置为可用CPU内核的数量将是一个好的开始（值“ auto”将尝试自动检测它）。</code></li><li>worker进程的数量；通常应该为当前主机的cpu的物理核心数</li></ul></li></ul><p><strong>注意</strong>：下面的实验仅用于实验，具体还得根据情况而定哦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# !lscpu        # 查看当前主机CPU的物理核心数</span><br><span class="line">lscpu | grep &quot;^CPU(s)&quot;</span><br><span class="line">CPU(s):                2</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 我们故意将值调大，用于测试哦</span><br><span class="line">worker_processes 4;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop         </span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# !ps       # 查看进程开启数量已经开启4个进程</span><br><span class="line">ps -ef | grep nginx</span><br><span class="line">root      11253   1431  0 22:43 pts/0    00:00:00 vim /etc/nginx/nginx.conf</span><br><span class="line">root      11412      1  0 23:24 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx     11413  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11414  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11415  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11416  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">root      11418  11257  0 23:24 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="2-worker-cpu-affinity-cpumask-…"><a href="#2-worker-cpu-affinity-cpumask-…" class="headerlink" title="2. worker_cpu_affinity cpumask …"></a>2. worker_cpu_affinity cpumask …</h4><p>官网帮助：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_cpu_affinity cpumask ...;</span><br><span class="line">worker_cpu_affinity auto [cpumask];</span><br><span class="line">Default:—</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>将工作流程绑定到一组CPU。每个CPU组由允许的CPU的位掩码表示。应为每个工作进程定义一个单独的集合。默认情况下，工作进程没有绑定到任何特定的CPU。</p><h4 id="CPU-MASK"><a href="#CPU-MASK" class="headerlink" title="CPU MASK"></a>CPU MASK</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU MASK： </span><br><span class="line">00000001： 0号CPU</span><br><span class="line">00000010： 1号CPU</span><br><span class="line">00000100： 2号CPU</span><br><span class="line">10000000： 8号CPU</span><br><span class="line">那么n号CPU就是，n后面跟n-1个0</span><br></pre></td></tr></table></figure><h4 id="将workeri进程绑定CPU"><a href="#将workeri进程绑定CPU" class="headerlink" title="将workeri进程绑定CPU"></a>将workeri进程绑定CPU</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">worker_cpu_affinity auto [cpumask] 提高缓存命中率</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000;        # 将进程绑定到0号，1号，2号，3号CPU上面</span><br><span class="line">worker_cpu_affinity 0101 1010;          # 将进程绑定到0号和2号 2号和4号CPU上面；</span><br></pre></td></tr></table></figure><h4 id="3-worker-priority-number"><a href="#3-worker-priority-number" class="headerlink" title="3. worker_priority number"></a>3. worker_priority number</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_priority number;</span><br><span class="line">Default:</span><br><span class="line">worker_priority 0;</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>指定worker进程的nice值，设定worker进程优先级： [-20,20]；数越小代表者优先级越高。</p><h5 id="修改worker-priority"><a href="#修改worker-priority" class="headerlink" title="修改worker_priority"></a>修改worker_priority</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">worker_priority -10;</span><br></pre></td></tr></table></figure><h4 id="4-worker-rlimit-nofile-number"><a href="#4-worker-rlimit-nofile-number" class="headerlink" title="4. worker_rlimit_nofile number"></a>4. worker_rlimit_nofile number</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_rlimit_nofile number;</span><br><span class="line">Default:—</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>worker进程所能够打开的文件数量上限,如65535</p><p>变化对打开文件的最大数量的限制（rlimit_nofile）工作流程。用来增加限制而无需重新启动的主要过程。</p><h5 id="修改worker-rlimit-nofile-number"><a href="#修改worker-rlimit-nofile-number" class="headerlink" title="修改worker_rlimit_nofile number"></a>修改worker_rlimit_nofile number</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure><h3 id="Nginx事件驱动相关的配置"><a href="#Nginx事件驱动相关的配置" class="headerlink" title="Nginx事件驱动相关的配置"></a>Nginx事件驱动相关的配置</h3><h4 id="1-worker-connections-number"><a href="#1-worker-connections-number" class="headerlink" title="1. worker_connections number"></a>1. worker_connections number</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_connections number;</span><br><span class="line">Default:</span><br><span class="line">worker_connections 512;</span><br><span class="line">Context:events</span><br></pre></td></tr></table></figure></p><p>每个worker进程所能够打开的最大并发连接数数量，如10240</p><p>总最大并发数： worker_processes * worker_connections</p><h5 id="将worker-connections-number调大"><a href="#将worker-connections-number调大" class="headerlink" title="将worker_connections number调大"></a>将worker_connections number调大</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件，将值调为102400</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-use-method"><a href="#2-use-method" class="headerlink" title="2. use method"></a>2. use method</h4><p>指明并发连接请求的处理方法,默认自动选择最优方法<br><code>use epoll;</code></p><h5 id="将并发连接请求的处理方法调为epoll"><a href="#将并发连接请求的处理方法调为epoll" class="headerlink" title="将并发连接请求的处理方法调为epoll"></a>将并发连接请求的处理方法调为epoll</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-accept-mutex-on-off-互斥"><a href="#3-accept-mutex-on-off-互斥" class="headerlink" title="3. accept_mutex on | off 互斥"></a>3. accept_mutex on | off 互斥</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:accept_mutex on | off;</span><br><span class="line">Default:</span><br><span class="line">accept_mutex off;</span><br><span class="line">Context:events</span><br></pre></td></tr></table></figure></p><p>处理新的连接请求的方法； on指由各个worker轮流处理新请求，Off指每个新请求的到达都会通知(唤醒)所有的worker进程，但只有一个进程可获得连接，造成“惊群”，影响性能，默认on</p><h5 id="启用accept-mutex"><a href="#启用accept-mutex" class="headerlink" title="启用accept_mutex"></a>启用accept_mutex</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">    use epoll;</span><br><span class="line">    accept_mutex on ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx：调试和定位问题"><a href="#Nginx：调试和定位问题" class="headerlink" title="Nginx：调试和定位问题"></a>Nginx：调试和定位问题</h3><h4 id="1-daemon-on-off"><a href="#1-daemon-on-off" class="headerlink" title="1. daemon on|off"></a>1. daemon on|off</h4><p>是否以守护进程方式运行nignx，默认是守护进程方式</p><h4 id="修改为非守护进程运行nginx"><a href="#修改为非守护进程运行nginx" class="headerlink" title="修改为非守护进程运行nginx"></a>修改为非守护进程运行nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">daemon off ;</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx         # 启动nginx就在前台运行了</span><br><span class="line"></span><br><span class="line">^C[root@centos7 ~]#             # Ctrl+C就停止了</span><br></pre></td></tr></table></figure><h4 id="2-master-process-on-off"><a href="#2-master-process-on-off" class="headerlink" title="2. master_process on|off"></a>2. master_process on|off</h4><p>是否以master/worker模型运行nginx；默认为on，off 将不启动worker</p><h5 id="修改nginx不以master-worker模型启动"><a href="#修改nginx不以master-worker模型启动" class="headerlink" title="修改nginx不以master/worker模型启动"></a>修改nginx不以master/worker模型启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">master_process off ;</span><br><span class="line">[root@centos7 ~]# nginx             # 只启动了master进程</span><br><span class="line">[root@centos7 ~]# ps -ef | grep nginx</span><br><span class="line">root       2117   2077  0 08:47 pts/0    00:00:00 vim /etc/nginx/nginx.conf</span><br><span class="line">root       2390      1  0 09:42 ?        00:00:00 nginx</span><br><span class="line">root       2392   2120  0 09:43 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-error-log-file-level"><a href="#3-error-log-file-level" class="headerlink" title="3. error_log file [level]"></a>3. error_log file [level]</h4><p>错误日志文件及其级别；出于调试需要， 可设定为debug；但debug仅在编译时使用了“–with-debug”选项时才有效<br>方式： file /path/logfile;</p><ul><li><p>stderr:发送到标准错误</p><ul><li>syslog:server-address[,parameter=values]:发送到syslog</li></ul></li><li><p>memory:size 内存</p><ul><li>level:debug|info|notice|warn|error|crit|alter|emerg</li></ul></li></ul><h5 id="将日志级别调为debug"><a href="#将日志级别调为debug" class="headerlink" title="将日志级别调为debug"></a>将日志级别调为debug</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">error_log /var/log/nginx/error.log debug ;</span><br><span class="line">[root@centos7 ~]# nginx -s stop </span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# tail /var/log/nginx/error.log </span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246F24010, unused: 1</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246F25020, unused: 3068</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 close http connection: 13</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 event timer del: 13: 1508896505040</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 reusable connection: 0</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246E759D0</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246EB3040, unused: 128</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: timer delta: 1</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: worker cycle</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: epoll timer: -1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LVS调度算法</title>
      <link href="/2017/10/21/Linux-LVS-suanfa/"/>
      <url>/2017/10/21/Linux-LVS-suanfa/</url>
      <content type="html"><![CDATA[<h3 id="LVS的调度算法分为静态与动态两类："><a href="#LVS的调度算法分为静态与动态两类：" class="headerlink" title="LVS的调度算法分为静态与动态两类："></a>LVS的调度算法分为静态与动态两类：</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-suanfa-1.jpg" title="LVS调度算法"></center><a id="more"></a><h4 id="1-静态算法（4种）：只根据算法进行调度-而不考虑后端服务器的实际连接情况和负载情况"><a href="#1-静态算法（4种）：只根据算法进行调度-而不考虑后端服务器的实际连接情况和负载情况" class="headerlink" title="1.静态算法（4种）：只根据算法进行调度 而不考虑后端服务器的实际连接情况和负载情况"></a>1.静态算法（4种）：只根据算法进行调度 而不考虑后端服务器的实际连接情况和负载情况</h4><blockquote><p>①.RR：轮叫调度（Round Robin）<br>　 调度器通过”轮叫”调度算法将外部请求按顺序轮流分配到集群中的真实服务器上，它均等地对待每一台服务器，而不管服务器上实际的连接数和系统负载｡</p><p>②.WRR：加权轮叫（Weight RR）<br>　 调度器通过“加权轮叫”调度算法根据真实服务器的不同处理能力来调度访问请求。这样可以保证处理能力强的服务器处理更多的访问流量。调度器可以自动问询真实服务器的负载情况,并动态地调整其权值。</p><p>③.DH：目标地址散列调度（Destination Hash ）<br>　 根据请求的目标IP地址，作为散列键(HashKey)从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。</p><p>④.SH：源地址 hash（Source Hash）<br>　 源地址散列”调度算法根据请求的源IP地址，作为散列键(HashKey)从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空｡</p></blockquote><h4 id="2-动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求"><a href="#2-动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求" class="headerlink" title="2.动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求"></a>2.动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求</h4><blockquote><p>①.LC：最少链接（Least Connections）<br>　 调度器通过”最少连接”调度算法动态地将网络请求调度到已建立的链接数最少的服务器上。如果集群系统的真实服务器具有相近的系统性能，采用”最小连接”调度算法可以较好地均衡负载。</p><p>②.WLC：加权最少连接(默认采用的就是这种)（Weighted Least Connections）<br>　 在集群系统中的服务器性能差异较大的情况下，调度器采用“加权最少链接”调度算法优化负载均衡性能，具有较高权值的服务器将承受较大比例的活动连接负载｡调度器可以自动问询真实服务器的负载情况,并动态地调整其权值。</p><p>③.SED：最短延迟调度（Shortest Expected Delay ）<br>　 在WLC基础上改进，Overhead = （ACTIVE+1）*256/加权，不再考虑非活动状态，把当前处于活动状态的数目+1来实现，数目最小的，接受下次请求，+1的目的是为了考虑加权的时候，非活动连接过多缺陷：当权限过大的时候，会倒置空闲服务器一直处于无连接状态。</p><p>④.NQ永不排队/最少队列调度（Never Queue Scheduling NQ）<br>　 无需队列。如果有台 realserver的连接数＝0就直接分配过去，不需要再进行sed运算，保证不会有一个主机很空间。在SED基础上无论+几，第二次一定给下一个，保证不会有一个主机不会很空闲着，不考虑非活动连接，才用NQ，SED要考虑活动状态连接，对于DNS的UDP不需要考虑非活动连接，而httpd的处于保持状态的服务就需要考虑非活动连接给服务器的压力。</p><p>⑤.LBLC：基于局部性的最少链接（locality-Based Least Connections）<br>　 基于局部性的最少链接”调度算法是针对目标IP地址的负载均衡，目前主要用于Cache集群系统｡该算法根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器;若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则用“最少链接”的原则选出一个可用的服务器，将请求发送到该服务器｡</p><p>⑥. LBLCR：带复制的基于局部性最少连接（Locality-Based Least Connections with Replication）<br>　 带复制的基于局部性最少链接”调度算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统｡它与LBLC算法的不同之处是它要维护从一个目标IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射｡该算法根据请求的目标IP地址找出该目标IP地址对应的服务器组，按”最小连接”原则从服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按“最小连接”原则从这个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器｡同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p></blockquote><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.178linux.com/13570" target="_blank" rel="noopener">本文来自：Linux运维部落-LVS原理详解</a></p>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> LVS调度算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LVS负载均衡技术</title>
      <link href="/2017/10/21/Linux-LVS/"/>
      <url>/2017/10/21/Linux-LVS/</url>
      <content type="html"><![CDATA[<h3 id="LVS-集群的通用结构"><a href="#LVS-集群的通用结构" class="headerlink" title="LVS 集群的通用结构"></a>LVS 集群的通用结构</h3><p><code>LVS</code>集群采用 <code>IP</code> 负载均衡技术，属于 <code>IP</code> 层的交换（<code>L4</code>） , 具有很好的吞吐率。调度器分析客户端到服务器的 <code>IP</code> 报头信息， 将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器， <code>LVS</code> 集群系统的通用结构如图所示， 主要包含四大部分：</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-1.jpg" title="LVS 集群的通用结构"></center><p><strong>负载调度器</strong>（<code>load balancer</code>），它是整个集群对外面的前端机，负责将客户的请求发送到一组服务器上执行，而客户认为服务是来自一个 <code>IP</code> 地址上的。当客户请求到达时，调度器只根据负载情况从服务器池中选出一个服务器，将该请求转发到选出的服务器，并记录这个调度；当这个请求的其他报文到达，也会被转发到前面选出的服务器。因为所有的操作都是在操作系统核心空间中将完成的，它的调度开销很小，所以具有很高的吞吐率</p><p><strong>服务器池</strong>（<code>server pool</code>），是一组真正执行客户请求的服务器，执行的任务有<code>WEB</code>、 <code>MAIL</code>、 <code>FTP</code> 和 <code>DNS</code> 等。服务器池的结点数目是可变的， 当整个系统收到的负载超过目前所有结点的处理能力时，可以在服务器池中增加服务器来满足不断增长的请求负载。对大多数网络服务来说，结点与结点间不存在很强的相关性，所以整个系统的性能可以随着服务器池的结点数目增加而线性增长</p><p><strong>后端存储</strong>（<code>backend storage</code>），它为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相同的内容，提供相同的服务。</p><p><strong><code>Graphic Monitor</code></strong> 是为系统管理员提供整个集群系统的监视器，它可以监视系统中每个结点的状况。</p><h3 id="IP-负载均衡技术"><a href="#IP-负载均衡技术" class="headerlink" title="IP 负载均衡技术"></a>IP 负载均衡技术</h3><p>在已有的 <code>IP</code> 负载均衡技术中有三种（据说还有第四种<code>lvs-fullnat</code>，本文中不会涉及），一是通过网络地址转换实现虚拟服务器的 <code>VS/NAT</code> 技术（<code>Virtual Server via Network Address Translation</code>）， 二是通过直接路由的 <code>VS/DR</code> 技术（<code>Virtual Server via Direct Routing</code>），三是通过 <code>IP</code> 隧道实现虚拟服务器的 <code>VS/TUN</code> 技术（<code>Virtual Server via IP Tunneling</code>）。</p><h3 id="通过NAT实现虚拟服务器（VS-NAT）"><a href="#通过NAT实现虚拟服务器（VS-NAT）" class="headerlink" title="通过NAT实现虚拟服务器（VS/NAT）"></a>通过NAT实现虚拟服务器（VS/NAT）</h3><p><code>VS/NAT</code> 的体系结构如下图所示， 在一组服务器前有一个调度器，它们是通过 Switch 相连接的。这些服务器提供相同的网络服务、相同的内容，即不管请求被发送到哪一台服务器，执行结果是一样的。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-2.jpg" title="VS/NAT 的体系结构"></center><h4 id="通过如下的VS-NAT配置为例，来了解报文的结构："><a href="#通过如下的VS-NAT配置为例，来了解报文的结构：" class="headerlink" title="通过如下的VS/NAT配置为例，来了解报文的结构："></a>通过如下的VS/NAT配置为例，来了解报文的结构：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-3.jpg" title="报文的结构"></center><h3 id="通过直接路由实现虚拟服务器（VS-DR）"><a href="#通过直接路由实现虚拟服务器（VS-DR）" class="headerlink" title="通过直接路由实现虚拟服务器（VS/DR）"></a>通过直接路由实现虚拟服务器（VS/DR）</h3><p>在 <code>VS/NAT</code> 的集群系统中，请求和响应的数据报文都需要通过负载调度器，当真实服务器的数目在 10 台和 20 台之间时，负载调度器将成为整个集群系统的新瓶颈。大多数 <code>Internet</code> 服务都有这样的特点：请求报文较短而响应报文往往含大量的数据。如果能将请求和响应分开处理，即在负载调度器中只负责调度请求而响应直接返回给客户，将极大地提高整个集群系统的吞吐量。 <code>VS/DR</code> 的体系结构如下图所示：调度器和服务器组都必须在物理上有一个网卡通过不分断的局域相连，如通过交换机或者高速的 HUB 相连。 <code>VIP</code> 地址为调度器和服务器组共享，调度器配置的 <code>VIP</code> 地址是对外可见的，用于接收虚拟服务的请求报文；所有的服务器把 <code>VIP</code> 地址配置在各自的 <code>Non-ARP</code> 网络设备上，它对外面是不可见的，只是用于处理目标地址为 <code>VIP</code> 的网络请求。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-4.jpg" title="通过直接路由实现虚拟服务器（VS/DR）"></center><h4 id="通过如下的VS-DR配置为例，来了解报文的结构："><a href="#通过如下的VS-DR配置为例，来了解报文的结构：" class="headerlink" title="通过如下的VS/DR配置为例，来了解报文的结构："></a>通过如下的VS/DR配置为例，来了解报文的结构：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-5.jpg" title="VS/DR配置"></center><h3 id="通过-IP-隧道实现虚拟服务器（VS-TUN）"><a href="#通过-IP-隧道实现虚拟服务器（VS-TUN）" class="headerlink" title="通过 IP 隧道实现虚拟服务器（VS/TUN）"></a>通过 IP 隧道实现虚拟服务器（VS/TUN）</h3><p>跟 <code>VS/DR</code> 方法相同， <code>VS/TUN</code> 多数 <code>Internet</code> 服务的非对称特点，负载调度器中只负责调度请求，而服务器直接将响应返回给客户，可以极大地提高整个集群系统的吞吐量。 <code>IP</code> 隧道（<code>IP tunneling</code>）是将一个 <code>IP</code> 报文封装在另一个 <code>IP</code>报文的技术，这可以使得目标为一个 IP 地址的数据报文能被封装和转发到另一个<code>IP</code> 地址。我们利用 <code>IP</code> 隧道技术将请求报文封装转发给后端服务器，响应报文能从后端服务器直接返回给客户。但在这里，后端服务器有一组而非一个，所以我们不可能静态地建立一一对应的隧道，而是动态地选择一台服务器，将请求报文封装和转发给选出的服务器。这样，我们可以利用 <code>IP</code> 隧道的原理将一组服务器上的网络服务组成在一个 <code>IP</code> 地址上的虚拟网络服务。 <code>VS/TUN</code> 的体系结构如图 3.3 所示，各个服务器将 <code>VIP</code> 地址配置在自己的 <code>IP</code> 隧道设备上。 <code>VS/TUN</code> 的体系结构如图 1.7 所示</p><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-6.jpg" title="通过 IP 隧道实现虚拟服务器（VS/TUN）"></center><h3 id="三种IP负载均衡技术比较"><a href="#三种IP负载均衡技术比较" class="headerlink" title="三种IP负载均衡技术比较"></a>三种IP负载均衡技术比较</h3><p>三种 IP 负载均衡技术的优缺点归纳在下表中：</p><table><thead><tr><th></th><th>VS/NAT</th><th>VS/DR</th><th>VS/TUN</th></tr></thead><tbody><tr><td>Server</td><td>any</td><td>Non-arp device</td><td>Tunneling</td></tr><tr><td>server network</td><td>private</td><td>LAN</td><td>LAN/WAN</td></tr><tr><td>server number</td><td>low (10~20)</td><td>High (100)</td><td>High (100)</td></tr><tr><td>server gateway</td><td>load balancer</td><td>Own router</td><td>own route</td></tr></tbody></table><p><code>VS/NAT</code> 的<strong>优点</strong>是服务器可以运行任何支持 <code>TCP/IP</code> 的操作系统，它只需要一个 <code>IP</code> 地址配置在调度器上，服务器组可以用私有的 <code>IP</code> 地址。<strong>缺点</strong>是它的伸缩能力有限，当服务器结点数目升到 20 时，调度器本身有可能成为系统的新瓶颈，因为在 <code>VS/NAT</code> 中请求和响应报文都需要通过负载调度器。</p><p><code>VS/DR</code> <strong>优点</strong>是负载调度器可以处理大量的请求， 因为调度器只处理客户到服务器端的连接，响应数据可以直接从独立的网络路由返回给客户， 这可以极大地提高 <code>LVS</code> 集群系统的伸缩性。 <strong>缺点</strong>是要求负载调度器与实际服务器都有块网卡连在同一物理网段上，服务器网络设备（或者设备别名）不作 <code>ARP</code> 响，或者能将报文重定向（<code>Redirec</code>）到本地的 <code>Socket</code> 端口上。</p><p><code>VS/TUN</code> 的<strong>优点</strong>是负载调度器可以处理大量的请求，它甚至可以调度百台以上的服务器（同等规模的服务器），而它不会成为系统的瓶颈，因为负载调度器只请求调度到不同的后端服务器，后端服务器将应答的数据直接返回给用户。<strong>缺点</strong>是 <code>VS/TUN</code> 技术有 <code>IP</code> 隧道的开销并且对服务器有要求，即所有的服务器必须支持“<code>IP Tunneling</code>”或者“<code>IP Encapsulation</code>”协议。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.linuxvirtualserver.org/" target="_blank" rel="noopener">本文多数内容来自：LVS 官方站点</a></p>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> LVS负载均衡技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SNAT与DNAT</title>
      <link href="/2017/10/21/Linux-iptables-SNAT/"/>
      <url>/2017/10/21/Linux-iptables-SNAT/</url>
      <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-iptables-SNAT-1.jpg" title="拓扑图"></center><a id="more"></a><h4 id="局域网主机"><a href="#局域网主机" class="headerlink" title="局域网主机"></a>局域网主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@LAN-host ~]# ifconfig eth1            # 查看IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:154351 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9823 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:220149822 (209.9 MiB)  TX bytes:959486 (936.9 KiB)</span><br><span class="line">[root@LAN-host ~]# ip route             # 查看路由，配置SNAT、DNAT都需要将忘光指向192.168.8.140</span><br><span class="line">192.168.8.0/24 dev eth1  proto kernel  scope link  src 192.168.8.128 </span><br><span class="line">169.254.0.0/16 dev eth1  scope link  metric 1003 </span><br><span class="line">default via 192.168.8.140 dev eth1</span><br></pre></td></tr></table></figure><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@Firewalld ~]# ifconfig        # 查看IP</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.251.146  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        inet6 fe80::250:56ff:fe34:70b8  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:34:70:b8  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 106496  bytes 8353964 (7.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 493  bytes 42866 (41.8 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4622  bytes 397342 (388.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2833  bytes 324367 (316.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 68  bytes 5876 (5.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 68  bytes 5876 (5.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# echo 1 &gt; /proc/sys/net/ipv4/ip_forward          # 开启防火墙的路由功能</span><br><span class="line">[root@Firewalld ~]# cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="互联网主机"><a href="#互联网主机" class="headerlink" title="互联网主机"></a>互联网主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@WAN-host ~]# ifconfig ens33           # 查看IP</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.252.112  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:242e  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:2e  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 301840  bytes 27336566 (26.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3790  bytes 497705 (486.0 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">[root@WAN-host ~]# ping 192.168.8.128 -c 1          # 在互联网主机是无法ping通局域网主机的</span><br><span class="line">PING 192.168.8.128 (192.168.8.128) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">--- 192.168.8.128 ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, 100% packet loss, time 0ms</span><br></pre></td></tr></table></figure><h3 id="SNAT策略"><a href="#SNAT策略" class="headerlink" title="SNAT策略"></a>SNAT策略</h3><h4 id="SNAT工作原理"><a href="#SNAT工作原理" class="headerlink" title="SNAT工作原理"></a>SNAT工作原理</h4><p><code>SNAT</code>：<strong>将请求报文的源地址替换为防火墙所定义的源地址。</strong></p><center><img src="https://houhaiyun.github.io/img/images/Linux-iptables-SNAT-2.jpg" title="SNAT工作原理"></center><h4 id="配置SNAT"><a href="#配置SNAT" class="headerlink" title="配置SNAT"></a>配置SNAT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 访问互联网80端口时，将源IP转换为防火墙的IP</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A POSTROUTING -s 192.168.8.0/24 -j SNAT --to-source 172.18.251.146</span><br><span class="line">        # 定义规则：将192.168.8.0网段访问外部IP时，转换为172.18.251.146</span><br><span class="line">[root@Firewalld ~]# iptables -vnL POSTROUTING -t nat </span><br><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    1    84 SNAT       all  --  *      *       192.168.8.0/24       0.0.0.0/0            to:172.18.251.146</span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# ping -c 2 172.18.252.112         # 在内网主机ping互联网主机，是可以ping通的</span><br><span class="line">PING 172.18.252.112 (172.18.252.112) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.252.112: icmp_seq=1 ttl=63 time=0.596 ms</span><br><span class="line">64 bytes from 172.18.252.112: icmp_seq=2 ttl=63 time=1.31 ms</span><br><span class="line"></span><br><span class="line">--- 172.18.252.112 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1005ms</span><br><span class="line">rtt min/avg/max/mdev = 0.596/0.955/1.314/0.359 ms</span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# tcpdump -i ens33 icmp -nn        # 通过tcpdump抓包查看，可以看到是172.18.251.146去ping172.18.252.112的</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on ens33, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">22:45:17.891996 IP 172.18.251.146 &gt; 172.18.252.112: ICMP echo request, id 20754, seq 1, length 64</span><br><span class="line">22:45:17.892047 IP 172.18.252.112 &gt; 172.18.251.146: ICMP echo reply, id 20754, seq 1, length 64</span><br><span class="line">22:45:18.894542 IP 172.18.251.146 &gt; 172.18.252.112: ICMP echo request, id 20754, seq 2, length 64</span><br><span class="line">22:45:18.894586 IP 172.18.252.112 &gt; 172.18.251.146: ICMP echo reply, id 20754, seq 2, length 64</span><br><span class="line">^C</span><br><span class="line">4 packets captured</span><br><span class="line">4 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# curl 172.18.252.112</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# tail -1 /var/log/httpd/access_log       # 查看http服务访问日志，可以看到是172.18.251.146去访问172.18.252.112的 </span><br><span class="line">172.18.251.146 - - [20/Oct/2017:22:47:14 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;</span><br></pre></td></tr></table></figure><h3 id="拨号SNAT策略"><a href="#拨号SNAT策略" class="headerlink" title="拨号SNAT策略"></a>拨号SNAT策略</h3><p><strong>拨号SNAT策略主要是为了解决通过拨号上网IP地址不固定的状况。拨号SNAT的效率没有固定IP SNAT策略效率高。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 访问互联网80端口时，将源IP转换为防火墙的IP</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A POSTROUTING -s 192.168.8.0/24 -j MASQUERADE      # 修改后面为MASQUERADE策略，解决了拨号上网IP不固定的情况</span><br><span class="line">[root@Firewalld ~]# iptables -vnL POSTROUTING -t nat        # 查看nat表</span><br><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 MASQUERADE  all  --  *      *       192.168.8.0/24       0.0.0.0/0        </span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# curl 172.18.252.112      # 在局域网主机访问测试</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# tail -1 /var/log/httpd/access_log            # 查看日志</span><br><span class="line">172.18.251.146 - - [20/Oct/2017:23:04:32 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;</span><br></pre></td></tr></table></figure><h3 id="DNAT策略"><a href="#DNAT策略" class="headerlink" title="DNAT策略"></a>DNAT策略</h3><h4 id="DNAT工作原理"><a href="#DNAT工作原理" class="headerlink" title="DNAT工作原理"></a>DNAT工作原理</h4><p><code>DNAT</code>：<strong>将请求报文的目标地址替换为防火墙所定义的目标地址。</strong></p><center><img src="https://houhaiyun.github.io/img/images/Linux-iptables-SNAT-3.jpg" title="DNAT工作原理"></center><h4 id="配置DNAT"><a href="#配置DNAT" class="headerlink" title="配置DNAT"></a>配置DNAT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 将访问防火墙的80端口转发到局域网的80端口</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A PREROUTING -s 0/0 -d 0/0 -p tcp --dport 80 -j DNAT --to-destination 192.168.8.128          # 将外网访问防火墙的80端口转发给内网</span><br><span class="line">[root@Firewalld ~]# iptables -vnL -t nat </span><br><span class="line">Chain PREROUTING (policy ACCEPT 1 packets, 207 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    1    60 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:192.168.8.128</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 1 packets, 207 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 1 packets, 60 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# curl 172.18.251.146      # 在互联主机测试访问防火墙的80端口</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# tail -1 /var/log/httpd/access_log        # 查看日志</span><br><span class="line">172.18.252.112 - - [20/Oct/2017:13:26:35 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure><h3 id="转发REDIRECT"><a href="#转发REDIRECT" class="headerlink" title="转发REDIRECT"></a>转发REDIRECT</h3><p><strong>将访问本地端口请求，转发到本地的其它端口。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 将访问本地1234端口转发到本地的80端口</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A PREROUTING -d 0/0 -p tcp --dport 1234 -j REDIRECT --to-port 80       # 基于上面实验的基础，配置端口转发，当访问本地1234端口时就转发到本地的80端口</span><br><span class="line">[root@Firewalld ~]# iptables -vnL -t nat </span><br><span class="line">Chain PREROUTING (policy ACCEPT 105 packets, 19073 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    8   480 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:192.168.8.128</span><br><span class="line">    1    60 REDIRECT   tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 redir ports 80</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 102 packets, 18181 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 4 packets, 304 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 4 packets, 304 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination  </span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# curl 172.18.251.146:1234         # 可以访问</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line">[root@LAN_host ~]# tail -1 /var/log/httpd/access_log        # 查看访问日志</span><br><span class="line">172.18.252.112 - - [21/Oct/2017:21:36:19 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Iptables </category>
          
          <category> SNAT与DNAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SNAT与DNAT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现基于SSL的FTPS</title>
      <link href="/2017/10/16/FTP-SSL/"/>
      <url>/2017/10/16/FTP-SSL/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/FTP-SSL-1.jpg" title="ftps"></center><h3 id="查看是否支持SSL"><a href="#查看是否支持SSL" class="headerlink" title="查看是否支持SSL"></a>查看是否支持SSL</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ldd `which vsftpd`</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007fff729c8000)</span><br><span class="line">libssl.so.10 =&gt; /lib64/libssl.so.10 (0x00007f6358444000)</span><br><span class="line">libwrap.so.0 =&gt; /lib64/libwrap.so.0 (0x00007f6358239000)</span><br><span class="line">libnsl.so.1 =&gt; /lib64/libnsl.so.1 (0x00007f635801f000)</span><br><span class="line">libpam.so.0 =&gt; /lib64/libpam.so.0 (0x00007f6357e10000)</span><br><span class="line">libcap.so.2 =&gt; /lib64/libcap.so.2 (0x00007f6357c0b000)</span><br><span class="line">libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f6357a06000)</span><br><span class="line">libcrypto.so.10 =&gt; /lib64/libcrypto.so.10 (0x00007f635761c000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f635725b000)</span><br><span class="line">libgssapi_krb5.so.2 =&gt; /lib64/libgssapi_krb5.so.2 (0x00007f635700c000)</span><br><span class="line">libkrb5.so.3 =&gt; /lib64/libkrb5.so.3 (0x00007f6356d25000)</span><br><span class="line">libcom_err.so.2 =&gt; /lib64/libcom_err.so.2 (0x00007f6356b21000)</span><br><span class="line">libk5crypto.so.3 =&gt; /lib64/libk5crypto.so.3 (0x00007f63568ee000)</span><br><span class="line">libz.so.1 =&gt; /lib64/libz.so.1 (0x00007f63566d8000)</span><br><span class="line">libaudit.so.1 =&gt; /lib64/libaudit.so.1 (0x00007f63564b0000)</span><br><span class="line">libattr.so.1 =&gt; /lib64/libattr.so.1 (0x00007f63562aa000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f63588e4000)</span><br><span class="line">libkrb5support.so.0 =&gt; /lib64/libkrb5support.so.0 (0x00007f635609b000)</span><br><span class="line">libkeyutils.so.1 =&gt; /lib64/libkeyutils.so.1 (0x00007f6355e97000)</span><br><span class="line">libresolv.so.2 =&gt; /lib64/libresolv.so.2 (0x00007f6355c7c000)</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f6355a60000)</span><br><span class="line">libcap-ng.so.0 =&gt; /lib64/libcap-ng.so.0 (0x00007f6355859000)</span><br><span class="line">libselinux.so.1 =&gt; /lib64/libselinux.so.1 (0x00007f6355632000)</span><br><span class="line">libpcre.so.1 =&gt; /lib64/libpcre.so.1 (0x00007f63553d1000)</span><br><span class="line">[root@centos7 ~]# ldd `which vsftpd` | grep libssl          # 支持的</span><br><span class="line">libssl.so.10 =&gt; /lib64/libssl.so.10 (0x00007f69c6fe5000)</span><br></pre></td></tr></table></figure><h3 id="创建自签名证书"><a href="#创建自签名证书" class="headerlink" title="创建自签名证书"></a>创建自签名证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cd /etc/pki/tls/certs</span><br><span class="line">[root@centos7 certs]# make vsftpd.pem</span><br><span class="line">umask 77 ; \</span><br><span class="line">PEM1=`/bin/mktemp /tmp/openssl.XXXXXX` ; \</span><br><span class="line">PEM2=`/bin/mktemp /tmp/openssl.XXXXXX` ; \</span><br><span class="line">/usr/bin/openssl req -utf8 -newkey rsa:2048 -keyout $PEM1 -nodes -x509 -days 365 -out $PEM2 -set_serial 0 ; \</span><br><span class="line">cat $PEM1 &gt;  vsftpd.pem ; \</span><br><span class="line">echo &quot;&quot;    &gt;&gt; vsftpd.pem ; \</span><br><span class="line">cat $PEM2 &gt;&gt; vsftpd.pem ; \</span><br><span class="line">rm -f $PEM1 $PEM2</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">.........................................+++</span><br><span class="line">.......................................................+++</span><br><span class="line">writing new private key to &apos;/tmp/openssl.7gPwj6&apos;</span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:haiyun.com</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.ihaiyun.cc</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 certs]# openssl x509 -in vsftpd.pem -noout -text          # 查看证书</span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 0 (0x0)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C=CN, ST=beijing, L=haidian, O=haiyun.com, OU=opt, CN=www.ihaiyun.cc</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Oct 13 07:10:13 2017 GMT</span><br><span class="line">            Not After : Oct 13 07:10:13 2018 GMT</span><br><span class="line">        Subject: C=CN, ST=beijing, L=haidian, O=haiyun.com, OU=opt, CN=www.ihaiyun.cc</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:d3:7d:40:95:ed:7b:c1:a2:ed:88:6e:bd:0c:c6:</span><br><span class="line">                    7d:24:d1:5e:b3:f1:d5:9a:ef:6b:83:95:89:13:64:</span><br><span class="line">                    7b:91:12:60:c9<img class="github-emoji" title="cd" alt="cd" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4bf.png?v8" height="20" width="20">32:ed:2c:fe:48:48:9f:bb:d7:</span><br><span class="line">                    b3:48:5f:b4:5a:1e:74:d1:d1:71:37:e6:7b:9c:bc:</span><br><span class="line">                    df:ce:a4:64:f4:8e:bd:23:0e:13:5d:54:a3:94:90:</span><br><span class="line">                    6c:6f:34:bb:b3:8a:ab:57:f0:95:d0:95:18:1d:24:</span><br><span class="line">                    20:cb:fd:4f:57:9a:62:c6:7c:0e:78:10:3a:9c:56:</span><br><span class="line">                    46:3a:3f:b8:6a:88:d5:c6:43:88:a2:8b:5d:96:d6:</span><br><span class="line">                    a3:7e:8f:47:bb:d5:95:3d:6a:4f:1c:f7:a6:a4:2d:</span><br><span class="line">                    65:7e:c6:23:fd:b4:e5:a8:a5:1a:e4:0f:2c:27:d5:</span><br><span class="line">                    bc:b0:2e:51:50:8e:8f:cf:b9:ea:e6:4c:5c:24:05:</span><br><span class="line">                    d1:76:68:32:3e:23:38:02:81:9d:a2:40:c8:ca:91:</span><br><span class="line">                    b9:ee:4b:e5:bb:75:06:09:7f:9b:47:6e:c3:3f:e1:</span><br><span class="line">                    b4:48:ad:39:c8:7d:ab:a0:61:1c:bb:c5:ba:f5:e2:</span><br><span class="line">                    9c:3e:e4:34:d0:7e:f8:8c:51:0d:e8:0c:c4:66:6f:</span><br><span class="line">                    3a:44:a9:e2:56:be:1e:26:f3:d5:18:0a:86:4e:22:</span><br><span class="line">                    bd:ac:a6:12:25:b6:56:7c:fb:9b:25:02:01:17:e4:</span><br><span class="line">                    a7:7d</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                48:F2:61:FD:CD:29:64:49:18:14:7B:E5:DF:A5:DC:CC:69:1C:44:C4</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:48:F2:61:FD:CD:29:64:49:18:14:7B:E5:DF:A5:DC:CC:69:1C:44:C4</span><br><span class="line"></span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:TRUE</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         08:a0:5d:34:eb:05:f8:75:f2:15:5e:38:0b:cf:1d:86:7d:8e:</span><br><span class="line">         cb:f9:b5:7e:b3:15:1b:b5:b2:4b:e4:d8:64:09:c4:71:9b:17:</span><br><span class="line">         67:12:7d:24:6b:af:cb:22:6b:08:6f:e9:af:35:5e:54:5f:43:</span><br><span class="line">         38:57:3c:8c:c5:ac:28:43:cf:6c:9b:1e:46:28:e3:6a:05:f3:</span><br><span class="line">         70:0e:d1:26:2e:44:2c:4b:c6:26:70:82:a3:97:f6:fc:ea:1d:</span><br><span class="line">         76:19:f7:96:3d:76:9a:95:19:5b:14:7f:4f:e0:87:18:df:cb:</span><br><span class="line">         79:20:b4:f2:f7:e1:b9:aa:ae:3b:0d:b2:98:e4:76:ee:35:77:</span><br><span class="line">         f3:e4:03:7c:77:47:47:e4:78:6b:1a:45:04:1a:37:ca:f5:58:</span><br><span class="line">         e3:a5:8e:07:31:0d:2c:cc:79:d5:00:1c:85:a5:00:8f:f1:fa:</span><br><span class="line">         20:bb:4e:1e:a0:3a:64:55:d4:76:04:75:85:6d:de:24:bb:54:</span><br><span class="line">         56:bb:62:3d:1b:49:90:36:af:09:3d:df:56:28:e7:c8:f5:e6:</span><br><span class="line">         ee:ca:0f:43:00:c7:1a:f3:d4:56:24:5e:da:73:73:0c:ed:6b:</span><br><span class="line">         d8:82:47:3e:6c:5d:3c:23:03:e4:8d:43:31:e9:c4:c5:df:90:</span><br><span class="line">         79:c3:c9:fb:cd:44:45:8d:27:a7:e6:30:a8:a8:3f:bb:f1:a2:</span><br><span class="line">         ae:c1:f5:a4</span><br></pre></td></tr></table></figure><h3 id="配置vsftpd服务支持SSL"><a href="#配置vsftpd服务支持SSL" class="headerlink" title="配置vsftpd服务支持SSL"></a>配置vsftpd服务支持SSL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">ssl_enable=YES      # 启用SSL</span><br><span class="line">allow_anon_ssl=YES      # 匿名不支持SSL</span><br><span class="line">force_local_logins_ssl=YES      # 本地用户登录加密</span><br><span class="line">force_local_data_ssl=YES        # 本地用户数据传输加密</span><br><span class="line">rsa_cert_file=/etc/pki/tls/certs/vsftpd.pem</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><center><img src="https://houhaiyun.github.io/img/images/FTP-SSL-2.gif" title="测试"></center>]]></content>
      
      <categories>
          
          <category> FTP </category>
          
          <category> 实现基于SSL的FTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vsftp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vsftp常用配置</title>
      <link href="/2017/10/16/FTP-config/"/>
      <url>/2017/10/16/FTP-config/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/FTP-config-1.png" title="vsftp"></center><h3 id="Vsftpd"><a href="#Vsftpd" class="headerlink" title="Vsftpd"></a>Vsftpd</h3><p><code>vsftpd</code>:<code>Very Secure FTP Daemon</code>， <code>CentOS</code>默认FTP服务器。</p><a id="more"></a><ul><li>用户认证配置文件:<code>/etc/pam.d/vsftpd</code></li><li>服务脚本： <code>/usr/lib/systemd/system/vsftpd.service</code> <code>/etc/rc.d/init.d/vsftpd</code></li><li>配置文件:<code>/etc/vsftpd/vsftpd.conf</code><ul><li><code>man 5 vsftpd.conf</code></li><li>格式： <code>option=value</code></li><li>注意： <code>=</code>前后不要有空格</li></ul></li><li>匿名用户（映射为系统用户<code>ftp</code> ）共享文件位置： <code>/var/ftp</code></li><li>系统用户共享文件位置：用户家目录</li><li>虚拟用户共享文件位置：为其映射的系统用户的家目录</li></ul><h3 id="Vsftpd服务配置"><a href="#Vsftpd服务配置" class="headerlink" title="Vsftpd服务配置"></a>Vsftpd服务配置</h3><h3 id="命令端口"><a href="#命令端口" class="headerlink" title="命令端口"></a>命令端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# systemctl start vsftpd        # 启动vsftpd服务</span><br><span class="line">[root@centos7 ~]# ss -tnul          # 默认开启端口为21</span><br><span class="line">Netid  State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">udp    UNCONN     0      0          127.0.0.1:323                            *:*                  </span><br><span class="line">udp    UNCONN     0      0                  *:27830                          *:*                  </span><br><span class="line">udp    UNCONN     0      0                  *:68                             *:*                  </span><br><span class="line">udp    UNCONN     0      0                ::1:323                           :::*                  </span><br><span class="line">udp    UNCONN     0      0                 :::61443                         :::*                  </span><br><span class="line">tcp    LISTEN     0      128                *:22                             *:*                  </span><br><span class="line">tcp    LISTEN     0      100        127.0.0.1:25                             *:*                  </span><br><span class="line">tcp    LISTEN     0      80                :::3306                          :::*                  </span><br><span class="line">tcp    LISTEN     0      32                :::21                            :::*                  </span><br><span class="line">tcp    LISTEN     0      128               :::22                            :::*                  </span><br><span class="line">tcp    LISTEN     0      100              ::1:25                            :::*     </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak      # 备份配置文件</span><br><span class="line">[root@centos7 ~]# cd /etc/vsftpd/</span><br><span class="line">[root@centos7 vsftpd]# ls</span><br><span class="line">ftpusers  user_list  vsftpd.conf  vsftpd.conf.bak  vsftpd_conf_migrate.sh</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# vim vsftpd.conf      # 修改配置文件把端口修改为123</span><br><span class="line">listen_port=123             # 添加此行</span><br><span class="line">[root@centos7 vsftpd]# systemctl restart vsftpd</span><br><span class="line">[root@centos7 vsftpd]# ss -tnul </span><br><span class="line">Netid  State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">udp    UNCONN     0      0          127.0.0.1:323                            *:*                  </span><br><span class="line">udp    UNCONN     0      0                  *:27830                          *:*                  </span><br><span class="line">udp    UNCONN     0      0                  *:68                             *:*                  </span><br><span class="line">udp    UNCONN     0      0                ::1:323                           :::*                  </span><br><span class="line">udp    UNCONN     0      0                 :::61443                         :::*                  </span><br><span class="line">tcp    LISTEN     0      128                *:22                             *:*                  </span><br><span class="line">tcp    LISTEN     0      100        127.0.0.1:25                             *:*                  </span><br><span class="line">tcp    LISTEN     0      80                :::3306                          :::*                  </span><br><span class="line">tcp    LISTEN     0      128               :::22                            :::*                  </span><br><span class="line">tcp    LISTEN     0      100              ::1:25                            :::*                  </span><br><span class="line">tcp    LISTEN     0      32                :::123                           :::*</span><br></pre></td></tr></table></figure><h3 id="主动和被动模式"><a href="#主动和被动模式" class="headerlink" title="主动和被动模式"></a>主动和被动模式</h3><h4 id="配置文件：主动模式端口"><a href="#配置文件：主动模式端口" class="headerlink" title="配置文件：主动模式端口"></a>配置文件：主动模式端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect_from_port_20=YES 主动模式端口为20</span><br><span class="line">ftp_data_port=20 指定主动模式的端口</span><br></pre></td></tr></table></figure><h4 id="实现主动模式端口"><a href="#实现主动模式端口" class="headerlink" title="实现主动模式端口"></a>实现主动模式端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cd /var/ftp/pub/              # 现在ftp服务器上面创建一个大文件</span><br><span class="line">[root@centos7 ftp]# dd if=/dev/zero of=f1 bs=1G count=1</span><br><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">1073741824 bytes (1.1 GB) copied, 15.2404 s, 70.5 MB/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140         # 使用gcentos6区连接ftp服务器</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp              # 使用匿名账户</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls             # 列出</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,42,104).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0        1073741824 Oct 13 01:26 f1</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 pub</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; ?          # 查看帮助</span><br><span class="line">Commands may be abbreviated.  Commands are:</span><br><span class="line"></span><br><span class="line">!debugmdirsendportsite</span><br><span class="line">$dirmgetputsize</span><br><span class="line">accountdisconnectmkdirpwdstatus</span><br><span class="line">appendexitmlsquitstruct</span><br><span class="line">asciiformmodequotesystem</span><br><span class="line">bellgetmodtimerecvsunique</span><br><span class="line">binaryglobmputregettenex</span><br><span class="line">byehashnewerrstatustick</span><br><span class="line">casehelpnmaprhelptrace</span><br><span class="line">cdidlenlistrenametype</span><br><span class="line">cdupimagentransresetuser</span><br><span class="line">chmodlcdopenrestartumask</span><br><span class="line">closelspromptrmdirverbose</span><br><span class="line">crmacdefpassiverunique?</span><br><span class="line">deletemdeleteproxysend</span><br><span class="line">ftp&gt; passive            # 关闭被动模式，就相当于开启主动模式</span><br><span class="line">Passive mode off.</span><br><span class="line">ftp&gt; get f1         # 下载f1文件</span><br><span class="line">local: f1 remote: f1</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Opening BINARY mode data connection for f1 (1073741824 bytes).</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# netstat -anp | grep ftp          # 回到ftp服务器上面查看，已经打开20端口传输数据</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      2186/vsftpd         </span><br><span class="line">tcp6       0 4039920 192.168.8.140:20        192.168.8.128:46817     ESTABLISHED 2222/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:21        192.168.8.128:35124     ESTABLISHED 2220/vsftpd         </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     20963    2220/vsftpd          </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     20964    2222/vsftpd          </span><br><span class="line">unix  2      [ ]         DGRAM                    21608    2220/vsftpd</span><br></pre></td></tr></table></figure><h4 id="使用主动模式的端口为123"><a href="#使用主动模式的端口为123" class="headerlink" title="使用主动模式的端口为123"></a>使用主动模式的端口为123</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">ftp_data_port=123       # 修改主动模式的端口为123</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140         # 再次连接ftp服务器</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; passive        # 开启主动模式</span><br><span class="line">Passive mode off.</span><br><span class="line">ftp&gt; get f1 </span><br><span class="line">local: f1 remote: f1</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Opening BINARY mode data connection for f1 (1073741824 bytes).</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# netstat -anp | grep ftp      # 查看数据传输端口已经为123</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      2248/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:21        192.168.8.128:35126     ESTABLISHED 2249/vsftpd         </span><br><span class="line">tcp6       0 3601472 192.168.8.140:123       192.168.8.128:39712     ESTABLISHED 2251/vsftpd         </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     22784    2249/vsftpd          </span><br><span class="line">unix  2      [ ]         DGRAM                    21760    2249/vsftpd          </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     22785    2251/vsftpd</span><br></pre></td></tr></table></figure><h4 id="被动模式端口范围"><a href="#被动模式端口范围" class="headerlink" title="被动模式端口范围"></a>被动模式端口范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux客户端默认使用被动模式</span><br><span class="line">windows 客户端默认使用主动模式</span><br><span class="line">pasv_min_port=6000 0为随机分配</span><br><span class="line">pasv_max_port=6010</span><br></pre></td></tr></table></figure><h4 id="使用被动模式传输"><a href="#使用被动模式传输" class="headerlink" title="使用被动模式传输"></a>使用被动模式传输</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# !ftp          # 直接访问ftp服务器</span><br><span class="line">ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,193,204).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0        1073741824 Oct 13 01:26 f1</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 pub</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; get f1         # 下载f1文件</span><br><span class="line">local: f1 remote: f1</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,78,255).</span><br><span class="line">150 Opening BINARY mode data connection for f1 (1073741824 bytes).</span><br><span class="line">    </span><br><span class="line">[root@centos7 vsftpd]# netstat -anp | grep ftp      # 在centos7上面查看开启的端口是随机开启的</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      2271/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:20223     :::*                    LISTEN      2272/vsftpd         </span><br><span class="line">tcp6       0 3714120 192.168.8.140:20223     192.168.8.128:44845     ESTABLISHED 2274/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:21        192.168.8.128:35128     ESTABLISHED 2272/vsftpd</span><br><span class="line"></span><br><span class="line">ftp&gt; !rm -f f1      # 删除本地文件f1，加上!可以执行本地命令</span><br><span class="line">ftp&gt; get f1         # 下载f1文件</span><br><span class="line">local: f1 remote: f1</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,73,74).</span><br><span class="line">150 Opening BINARY mode data connection for f1 (1073741824 bytes).</span><br><span class="line">226 Transfer complete.</span><br><span class="line">1073741824 bytes received in 6.76 secs (158891.58 Kbytes/sec)</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# netstat -anp | grep ftp          # 查看端口是随机打开的</span><br><span class="line">tcp6       0      0 192.168.8.140:18762     :::*                    LISTEN      2272/vsftpd         </span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      2271/vsftpd         </span><br><span class="line">tcp6       0 3991160 192.168.8.140:18762     192.168.8.128:58139     ESTABLISHED 2274/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:21        192.168.8.128:35128     ESTABLISHED 2272/vsftpd</span><br></pre></td></tr></table></figure><h4 id="指定被动模式端口范围"><a href="#指定被动模式端口范围" class="headerlink" title="指定被动模式端口范围"></a>指定被动模式端口范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">pasv_min_port=8000      # 最小端口为8000</span><br><span class="line">pasv_max_port=8001      # 最大端口为8001</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# !sys         #重启服务让其生效</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# !ftp          # 连接下载数据</span><br><span class="line">ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; get f1</span><br><span class="line">local: f1 remote: f1</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,31,65).</span><br><span class="line">150 Opening BINARY mode data connection for f1 (1073741824 bytes).</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# netstat -anp | grep ftp      # 查看端口已经是我们打开的8001</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      2289/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:8001      :::*                    LISTEN      2291/vsftpd         </span><br><span class="line">tcp6       0 3844440 192.168.8.140:8001      192.168.8.128:39485     ESTABLISHED 2293/vsftpd         </span><br><span class="line">tcp6       0      0 192.168.8.140:21        192.168.8.128:35130     ESTABLISHED 2291/vsftpd</span><br></pre></td></tr></table></figure><h3 id="使用当地时间"><a href="#使用当地时间" class="headerlink" title="使用当地时间"></a>使用当地时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">use_localtime=YES     # 使用当地时间（默认为NO，使用GMT）</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# !sys</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls         # 看的不是特别明显，因为原来时间就是对的</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,169,47).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0        1073741824 Oct 13 09:26 f1</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 06  2016 pub</span><br><span class="line">226 Directory send OK.</span><br></pre></td></tr></table></figure><h3 id="匿名用户"><a href="#匿名用户" class="headerlink" title="匿名用户"></a>匿名用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES 支持匿名用户</span><br><span class="line">no_anon_password=YES(默认NO) 匿名用户略过口令检查</span><br><span class="line">anon_world_readable_only (默认YES)只能下载全部读的文件</span><br><span class="line">anon_upload_enable=YES 匿名上传，注意:文件系统权限</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES 可删除和修改上传的文件</span><br><span class="line">anon_umask=077 指定匿名上传umask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chown_uploads=YES(默认NO)</span><br><span class="line">chown_username=wang     指定上传文件的默认的所有者</span><br><span class="line">chown_upload_mode=0644  指定上传文件的默认的权限</span><br></pre></td></tr></table></figure><h4 id="使匿名可以用户上传文件"><a href="#使匿名可以用户上传文件" class="headerlink" title="使匿名可以用户上传文件"></a>使匿名可以用户上传文件</h4><p>解决方法为：</p><ol><li>修改配置文件使匿名用户可以上传和创建文件</li><li>因为ftp默认是不支持登陆根就有w权限的，所以在ftp创建一个可以上传的目录，并对其设置ACL，让其拥有rwx权限，就可以了。</li><li>ftp上传文件需要注意：文件系统上面的权限和vsftpd上面配置的权限。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# dd if=/dev/zero of=f2 bs=1G count=1       # 先创建一个测试文件f2</span><br><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">1073741824 bytes (1.1 GB) copied, 14.6191 s, 73.4 MB/s</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140             # 连接ftp</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,176,223).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0        1073741824 Oct 13 01:26 f1</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 pub</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; put f2         # 传输文件失败，权限被拒绝</span><br><span class="line">local: f2 remote: f2</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,173,117).</span><br><span class="line">550 Permission denied.      </span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# !sys</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; put f2         # 上传还是失败</span><br><span class="line">local: f2 remote: f2</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,122,54).</span><br><span class="line">550 Permission denied.</span><br><span class="line"></span><br><span class="line">[root@centos7 ftp]# setfacl -m u:ftp:rwx pub        # 使ftp用户对pub目录拥有rwx权限</span><br><span class="line">[root@centos7 ftp]# ll</span><br><span class="line">total 1048576</span><br><span class="line">-rw-r--r--  1 root root 1073741824 Oct 13 09:26 f1</span><br><span class="line">drwxrwxr-x+ 2 root root          6 Oct 13 10:51 pub</span><br><span class="line">[root@centos7 ftp]# getfacl pub</span><br><span class="line"># file: pub</span><br><span class="line"># owner: root</span><br><span class="line"># group: root</span><br><span class="line">user::rwx</span><br><span class="line">user:ftp:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; cd pub</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; put f2         # 已经可以上传</span><br><span class="line">local: f2 remote: f2</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,122,181).</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">1073741824 bytes sent in 13.4 secs (79893.42 Kbytes/sec)</span><br></pre></td></tr></table></figure></li></ol><h3 id="Linux系统用户"><a href="#Linux系统用户" class="headerlink" title="Linux系统用户"></a>Linux系统用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">guest_enable=YES 所有系统用户都映射成guest用户</span><br><span class="line">guest_username=ftp 配合上面选项才生效，指定guest用户</span><br><span class="line">local_enable=YES 是否允许linux用户登录</span><br><span class="line">write_enable-YES 允许linux用户上传文件</span><br><span class="line">local_umask=022 指定系统用户上传文件的默认权限</span><br><span class="line">local_root=/ftproot 非匿名用户登录所在目录</span><br></pre></td></tr></table></figure><h4 id="所有系统用户都映射成guest用户"><a href="#所有系统用户都映射成guest用户" class="headerlink" title="所有系统用户都映射成guest用户"></a>所有系统用户都映射成guest用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=ftp</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# useradd haiyun</span><br><span class="line">[root@centos7 vsftpd]# passwd haiyun</span><br><span class="line">Changing password for user haiyun.</span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# !sys</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">530 Login incorrect.</span><br><span class="line">Login failed.</span><br><span class="line">ftp&gt; 221 Goodbye.</span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,154,38).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0        1073741824 Oct 13 01:26 f1</span><br><span class="line">drwxrwxr-x    2 0        0              16 Oct 13 02:53 pub</span><br><span class="line">226 Directory send OK.</span><br></pre></td></tr></table></figure><h3 id="禁锢所有系统用户在家目录中"><a href="#禁锢所有系统用户在家目录中" class="headerlink" title="禁锢所有系统用户在家目录中"></a>禁锢所有系统用户在家目录中</h3><p><code>chroot_local_user=YES（默认NO，不禁锢）禁锢系统用户</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ftp&gt; [root@centos6 ~]# ftp 192.168.8.140            # 默认是可以切换到根目录的</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,97,169).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; pwd</span><br><span class="line">257 &quot;/home/haiyun&quot;</span><br><span class="line">ftp&gt; cd /</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,135,197).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxr-xr-x    2 0        0               6 Oct 05 16:31 app</span><br><span class="line">lrwxrwxrwx    1 0        0               7 Oct 05 16:31 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x    4 0        0            4096 Oct 10 13:52 boot</span><br><span class="line">drwxr-xr-x   19 0        0            3200 Oct 13 01:21 dev</span><br><span class="line">drwxr-xr-x   80 0        0            8192 Oct 13 03:21 etc</span><br><span class="line">drwxr-xr-x    3 0        0              20 Oct 13 03:20 home</span><br><span class="line">lrwxrwxrwx    1 0        0               7 Oct 05 16:31 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx    1 0        0               9 Oct 05 16:31 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 media</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 mnt</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 opt</span><br><span class="line">dr-xr-xr-x  128 0        0               0 Oct 13  2017 proc</span><br><span class="line">dr-xr-x---    2 0        0             142 Oct 13 03:20 root</span><br><span class="line">drwxr-xr-x   20 0        0             560 Oct 13 01:29 run</span><br><span class="line">lrwxrwxrwx    1 0        0               8 Oct 05 16:31 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x    2 0        0               6 Oct 05 16:31 script</span><br><span class="line">drwxr-xr-x    2 0        0               6 Nov 05  2016 srv</span><br><span class="line">dr-xr-xr-x   13 0        0               0 Oct 13  2017 sys</span><br><span class="line">drwxrwxrwt    8 0        0             236 Oct 13 02:51 tmp</span><br><span class="line">drwxr-xr-x   13 0        0             155 Oct 05 16:31 usr</span><br><span class="line">drwxr-xr-x   20 0        0             278 Oct 13 01:24 var</span><br><span class="line">226 Directory send OK.</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">chroot_local_user=YES</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# !sys</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root)haiyun   </span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">500 OOPS: vsftpd: refusing to run with writable root inside chroot()</span><br><span class="line">Login failed.</span><br><span class="line">421 Service not available, remote server has closed connection</span><br><span class="line">ftp&gt; [root@centos6 ~]# ftp 192.168.8.140            # 连接失败</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): </span><br><span class="line">530 Permission denied.</span><br><span class="line">Login failed.</span><br><span class="line"></span><br><span class="line">[root@centos7 home]# ll </span><br><span class="line">total 0</span><br><span class="line">drwx------ 2 haiyun haiyun 62 Oct 13 11:20 haiyun</span><br><span class="line">[root@centos7 home]# chmod -w haiyun/           # 去掉w权限就可以了</span><br><span class="line">[root@centos7 home]# ll </span><br><span class="line">total 0</span><br><span class="line">dr-x------ 2 haiyun haiyun 62 Oct 13 11:20 haiyun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,87,198).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; pwd</span><br><span class="line">257 &quot;/&quot;</span><br></pre></td></tr></table></figure></p><h4 id="禁锢或不禁锢特定的系统用户在家目录中，与上面设置功能相反"><a href="#禁锢或不禁锢特定的系统用户在家目录中，与上面设置功能相反" class="headerlink" title="禁锢或不禁锢特定的系统用户在家目录中，与上面设置功能相反"></a>禁锢或不禁锢特定的系统用户在家目录中，与上面设置功能相反</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">当chroot_local_user=YES时，则chroot_list中用户不禁锢</span><br><span class="line">当chroot_local_user=NO时， 则chroot_list中用户禁锢</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 home]# useradd test           # 添加测试用户</span><br><span class="line">[root@centos7 home]# passwd test</span><br><span class="line">Changing password for user test.</span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line">[root@centos7 ftp]# cd /etc/vsftpd/         # 把test用户添加到chroot_list中</span><br><span class="line">[root@centos7 vsftpd]# echo &quot;test&quot; &gt; chroot_list</span><br><span class="line">[root@centos7 vsftpd]# cat chroot_list </span><br><span class="line">test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140         # 连接测试</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; pwd</span><br><span class="line">257 &quot;/&quot;</span><br><span class="line">ftp&gt; 221 Goodbye.</span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140     # 连接测试</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): test</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; pwd</span><br><span class="line">257 &quot;/home/test&quot;</span><br><span class="line">ftp&gt; 221 Goodbye.</span><br></pre></td></tr></table></figure><h3 id="wu-ftp日志：默认启动"><a href="#wu-ftp日志：默认启动" class="headerlink" title="wu-ftp日志：默认启动"></a>wu-ftp日志：默认启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xferlog_enable=YES （默认） 启用记录上传下载日志</span><br><span class="line">xferlog_std_format=YES （默认）使用wu-ftp日志格式</span><br><span class="line">xferlog_file=/var/log/xferlog （默认）可自动生成</span><br></pre></td></tr></table></figure><h4 id="查看wu-ftp日志"><a href="#查看wu-ftp日志" class="headerlink" title="查看wu-ftp日志"></a>查看wu-ftp日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 home]# tail /var/log/xferlog </span><br><span class="line">Fri Oct 13 09:38:48 2017 8 ::ffff:192.168.8.128 1073741824 /f1 b _ o a ? ftp 0 * c</span><br><span class="line">Fri Oct 13 09:39:29 2017 8 ::ffff:192.168.8.128 1073741824 /f1 b _ o a ? ftp 0 * c</span><br><span class="line">Fri Oct 13 09:45:31 2017 9 ::ffff:192.168.8.128 1073741824 /f1 b _ o a ? ftp 0 * c</span><br><span class="line">Fri Oct 13 09:47:48 2017 7 ::ffff:192.168.8.128 1073741824 /f1 b _ o a ? ftp 0 * c</span><br><span class="line">Fri Oct 13 09:51:31 2017 8 ::ffff:192.168.8.128 1073741824 /f1 b _ o a ? ftp 0 * c</span><br><span class="line">Fri Oct 13 10:36:19 2017 1 ::ffff:192.168.8.128 0 /f2 b _ i a ? ftp 0 * i</span><br><span class="line">Fri Oct 13 10:36:23 2017 1 ::ffff:192.168.8.128 0 /f2 b _ i a ? ftp 0 * i</span><br><span class="line">Fri Oct 13 10:48:52 2017 1 ::ffff:192.168.8.128 0 /pub/f2 b _ o a ? ftp 0 * i</span><br><span class="line">Fri Oct 13 10:51:12 2017 2 ::ffff:192.168.8.128 357091608 /pub/f2 b _ i a ? ftp 0 * c</span><br><span class="line">Fri Oct 13 10:54:02 2017 14 ::ffff:192.168.8.128 1073741824 /pub/f2 b _ i a ? ftp 0 * c</span><br></pre></td></tr></table></figure><h3 id="vsftpd日志：默认不启用"><a href="#vsftpd日志：默认不启用" class="headerlink" title="vsftpd日志：默认不启用"></a>vsftpd日志：默认不启用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dual_log_enable=YES 使用vsftpd日志格式，默认不启用</span><br><span class="line">vsftpd_log_file=/var/log/vsftpd.log（默认）可自动生成</span><br></pre></td></tr></table></figure><h4 id="开启vsftpd日志并查看"><a href="#开启vsftpd日志并查看" class="headerlink" title="开启vsftpd日志并查看"></a>开启vsftpd日志并查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">dual_log_enable=YES</span><br><span class="line">vsftpd_log_file=/var/log/vsftpd.log</span><br><span class="line"></span><br><span class="line">[root@centos7 home]# !sys</span><br><span class="line">systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">root@centos6 ~]# ftp 192.168.8.140          # 访问测试</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,254,209).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,73,11).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,225,241).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; get f1</span><br><span class="line">local: f1 remote: f1</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,169,98).</span><br><span class="line">550 Failed to open file.</span><br><span class="line">ftp&gt; 221 Goodbye.</span><br><span class="line"></span><br><span class="line">[root@centos7 home]# tail /var/log/vsftpd.log       # 查看日志</span><br><span class="line">Fri Oct 13 11:42:41 2017 [pid 11671] CONNECT: Client &quot;::ffff:192.168.8.128&quot;</span><br><span class="line">Fri Oct 13 11:42:45 2017 [pid 11670] [haiyun] OK LOGIN: Client &quot;::ffff:192.168.8.128&quot;</span><br><span class="line">Fri Oct 13 11:43:07 2017 [pid 11672] [haiyun] FAIL DOWNLOAD: Client &quot;::ffff:192.168.8.128&quot;, &quot;/home/haiyun/f1&quot;, 0.00Kbyte/sec</span><br></pre></td></tr></table></figure><h3 id="登陆提示信息"><a href="#登陆提示信息" class="headerlink" title="登陆提示信息"></a>登陆提示信息</h3><h4 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftpd_banner=“welcome to mage ftp server&quot;</span><br><span class="line">banner_file=/etc/vsftpd/ftpbanner.txt 优先上面项生效</span><br></pre></td></tr></table></figure><h4 id="方法一，优先生效"><a href="#方法一，优先生效" class="headerlink" title="方法一，优先生效"></a>方法一，优先生效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">ftpd_banner=&quot;Welcome to blah haiyun FTP service.&quot;</span><br><span class="line"></span><br><span class="line">[root@centos7 home]# systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220 &quot;Welcome to blah haiyun FTP service.&quot;</span><br><span class="line">Name (192.168.8.140:root): haiyun</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">banner_file=/etc/vsftpd/ftpbanner.txt</span><br><span class="line"></span><br><span class="line">[root@centos7 vsftpd]# pwd</span><br><span class="line">/etc/vsftpd</span><br><span class="line">[root@centos7 vsftpd]# touch ftpbanner.txt</span><br><span class="line">[root@centos7 vsftpd]# echo &quot;http://www.ihaiyun.cc/&quot;  &gt; ftpbanner.txt</span><br><span class="line"></span><br><span class="line">[root@centos7 home]# systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220-http://www.ihaiyun.cc/</span><br><span class="line">220 </span><br><span class="line">Name (192.168.8.140:root): haiyun </span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><h3 id="目录访问提示信息"><a href="#目录访问提示信息" class="headerlink" title="目录访问提示信息"></a>目录访问提示信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dirmessage_enable=YES (默认)</span><br><span class="line">message_file=.message(默认)信息存放在指定目录下.message</span><br></pre></td></tr></table></figure><h4 id="目录访问提示信息实现"><a href="#目录访问提示信息实现" class="headerlink" title="目录访问提示信息实现"></a>目录访问提示信息实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 查看配置文件，因为此项默认就是开启的</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">message_file=.message       # 此项可以修改文件名</span><br><span class="line"></span><br><span class="line">root@centos7 home]# cd /var/ftp/</span><br><span class="line">[root@centos7 ftp]# mkdir test      # 创建测试目录</span><br><span class="line">[root@centos7 ftp]# echo &quot;This is a test dir&quot; &gt; test/.message       # 测试信息</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ftp 192.168.8.140</span><br><span class="line">Connected to 192.168.8.140 (192.168.8.140).</span><br><span class="line">220-http://www.ihaiyun.cc/</span><br><span class="line">220 </span><br><span class="line">Name (192.168.8.140:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">227 Entering Passive Mode (192,168,8,140,125,170).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0        1073741824 Oct 13 01:26 f1</span><br><span class="line">drwxrwxr-x    2 0        0              16 Oct 13 02:53 pub</span><br><span class="line">drwxr-xr-x    2 0        0              22 Oct 13 03:53 test</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; cd test    </span><br><span class="line">250-This is a test dir          # 已经看到测试信息</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure><h3 id="传输速率：-字节-秒"><a href="#传输速率：-字节-秒" class="headerlink" title="传输速率： 字节/秒"></a>传输速率： 字节/秒</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">传输速率： 字节/秒</span><br><span class="line">anon_max_rate=0 匿名用户的最大传输速率</span><br><span class="line">local_max_rate=0 本地用户的最大传输速率</span><br></pre></td></tr></table></figure><h4 id="传输速率实现"><a href="#传输速率实现" class="headerlink" title="传输速率实现"></a>传输速率实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 vsftpd]# vim /etc/vsftpd/vsftpd.conf      # 修改配置文件</span><br><span class="line">anon_max_rate=1024000</span><br><span class="line">local_max_rate=1024000000</span><br><span class="line"></span><br><span class="line">[root@centos7 ftp]# systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">[root@centos7 ftp]# dd if=/dev/zero of=ftest bs=1024M count=2       # 生成测试文件</span><br><span class="line">2+0 records in</span><br><span class="line">2+0 records out</span><br><span class="line">2147483648 bytes (2.1 GB) copied, 25.5866 s, 83.9 MB/s</span><br><span class="line"></span><br><span class="line">[root@centos7 haiyun]# ln /var/ftp/ftest ftest</span><br><span class="line">[root@centos7 haiyun]# pwd</span><br><span class="line">/home/haiyun</span><br></pre></td></tr></table></figure><h4 id="匿名用户测速"><a href="#匿名用户测速" class="headerlink" title="匿名用户测速"></a>匿名用户测速</h4><center><img src="https://houhaiyun.github.io/img/images/FTP-config-2.gif" title="匿名用户测速"></center><h4 id="普通用户测速"><a href="#普通用户测速" class="headerlink" title="普通用户测速"></a>普通用户测速</h4><center><img src="https://houhaiyun.github.io/img/images/FTP-config-2.gif" title="普通用户测速"></center><h3 id="连接时间：秒为单位"><a href="#连接时间：秒为单位" class="headerlink" title="连接时间：秒为单位"></a>连接时间：秒为单位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=60 主动模式数据连接超时时长</span><br><span class="line">accept_timeout=60 被动模式数据连接超时时长</span><br><span class="line">data_connection_timeout=300 数据连接无数据输超时时长</span><br><span class="line">idle_session_timeout=60 无命令操作超时时长</span><br></pre></td></tr></table></figure><h3 id="优先以文本方式传输"><a href="#优先以文本方式传输" class="headerlink" title="优先以文本方式传输"></a>优先以文本方式传输</h3><ul><li>ascii：文本方式传输数据，可能会破坏数据。例如：把windows的文本文件通过ftp下载到linux上面，会进行转换。那么如果传输一个图片的话可能会把图片破坏。</li><li>binary：二进制方式传输数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br></pre></td></tr></table></figure><h3 id="Centos-6-配置VSFTPD为非独立服务"><a href="#Centos-6-配置VSFTPD为非独立服务" class="headerlink" title="Centos 6 配置VSFTPD为非独立服务"></a>Centos 6 配置VSFTPD为非独立服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# vim /etc/vsftpd/vsftpd.conf       # 修改配置文件</span><br><span class="line">listen=NO</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# cat /etc/xinetd.d/vsftpd          # 此文件默认是不存在的，需要手动写一份</span><br><span class="line">service ftp</span><br><span class="line">&#123;</span><br><span class="line">flags = REUSE</span><br><span class="line">socket_type = stream</span><br><span class="line">wait = no</span><br><span class="line">user = root</span><br><span class="line">server = /usr/sbin/vsftpd</span><br><span class="line">log_on_failure += USERID</span><br><span class="line">disable = no</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ss -tnul </span><br><span class="line">Netid  State      Recv-Q Send-Q          Local Address:Port            Peer Address:Port </span><br><span class="line">udp    UNCONN     0      0                           *:68                         *:*     </span><br><span class="line">tcp    LISTEN     0      128                        :::22                        :::*     </span><br><span class="line">tcp    LISTEN     0      128                         *:22                         *:*     </span><br><span class="line">tcp    LISTEN     0      100                       ::1:25                        :::*     </span><br><span class="line">tcp    LISTEN     0      100                 127.0.0.1:25                         *:*     </span><br><span class="line">[root@centos6 ~]# service xinetd start </span><br><span class="line">Starting xinetd:                                           [  OK  ]</span><br><span class="line">[root@centos6 ~]# ss -tnul          #端口已经打开</span><br><span class="line">Netid  State      Recv-Q Send-Q          Local Address:Port            Peer Address:Port </span><br><span class="line">udp    UNCONN     0      0                           *:68                         *:*     </span><br><span class="line">tcp    LISTEN     0      64                         :::21                        :::*     </span><br><span class="line">tcp    LISTEN     0      128                        :::22                        :::*     </span><br><span class="line">tcp    LISTEN     0      128                         *:22                         *:*     </span><br><span class="line">tcp    LISTEN     0      100                       ::1:25                        :::*     </span><br><span class="line">tcp    LISTEN     0      100                 127.0.0.1:25                         *:*  </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# netstat -anp | grep 21        # 可以看到21端口是有xinetd服务监听的</span><br><span class="line">tcp        0      0 :::21                       :::*                        LISTEN      1891/xinetd         </span><br><span class="line">unix  3      [ ]         DGRAM                    10021  492/udevd   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ftp 192.168.8.128         # </span><br><span class="line">Connected to 192.168.8.128 (192.168.8.128).</span><br><span class="line">220 (vsFTPd 2.2.2)</span><br><span class="line">Name (192.168.8.128:root): ftp</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# netstat -anp | grep 21        # 再次查看21端口是由vsftpd提供服务的</span><br><span class="line">tcp        0      0 192.168.8.128:21            192.168.8.140:46626         ESTABLISHED 1901/vsftpd         </span><br><span class="line">tcp        0      0 :::21                       :::*                        LISTEN      1891/xinetd         </span><br><span class="line">unix  3      [ ]         DGRAM                    10021  492/udevd</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> FTP </category>
          
          <category> Vsftp常用配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vsftp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>httpd-2.2 实现https</title>
      <link href="/2017/10/09/Httpd-https/"/>
      <url>/2017/10/09/Httpd-https/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Httpd-https-1.jpg" title="https"></center><a id="more"></a><h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ol><li>安装mod_ssl模块，使其支持ssl</li><li>为服务器申请数字证书<ul><li>创建私有CA</li><li>在服务器创建证书签署请求</li><li>CA签证</li></ul></li><li>搭建DNS</li><li>修改配置文件</li><li>测试基于https访问响应的主机</li></ol><h3 id="1-安装mod-ssl模块，使其支持ssl"><a href="#1-安装mod-ssl模块，使其支持ssl" class="headerlink" title="1. 安装mod_ssl模块，使其支持ssl"></a>1. 安装mod_ssl模块，使其支持ssl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# yum install -y mod_ssl</span><br><span class="line">[root@centos6 ~]# rpm -ql mod_ssl       # 生成了以下文件</span><br><span class="line">/etc/httpd/conf.d/ssl.conf              # 新生成的配置文件</span><br><span class="line">/usr/lib64/httpd/modules/mod_ssl.so</span><br><span class="line">/var/cache/mod_ssl</span><br><span class="line">/var/cache/mod_ssl/scache.dir</span><br><span class="line">/var/cache/mod_ssl/scache.pag</span><br><span class="line">/var/cache/mod_ssl/scache.sem</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# service httpd reload          # 重新加载配置文件</span><br><span class="line">Reloading httpd:</span><br></pre></td></tr></table></figure><h4 id="直接访问测试"><a href="#直接访问测试" class="headerlink" title="直接访问测试"></a>直接访问测试</h4><p>现在我们已经可以访问了，还有两个问题：站点还未被信任和证书并不是自己的。</p><center><img src="https://houhaiyun.github.io/img/images/Httpd-https-2.gif" title="测试访问"></center><h4 id="问题如下"><a href="#问题如下" class="headerlink" title="问题如下"></a>问题如下</h4><center><img src="https://houhaiyun.github.io/img/images/Httpd-https-3.jpg" title="问题"></center><h3 id="2-为服务器申请数字证书"><a href="#2-为服务器申请数字证书" class="headerlink" title="2. 为服务器申请数字证书"></a>2. 为服务器申请数字证书</h3><h4 id="创建私有CA"><a href="#创建私有CA" class="headerlink" title="创建私有CA"></a>创建私有CA</h4><p><a href="http://blog.csdn.net/hai__yun/article/details/77921134" target="_blank" rel="noopener">关于创建私有CA，可以参考我的另外一篇博客</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# touch /etc/pki/CA/index.txt</span><br><span class="line">[root@centos7 ~]# echo 01 &gt; /etc/pki/CA/serial</span><br><span class="line">[root@centos7 ~]# cd /etc/pki/CA/</span><br><span class="line">[root@centos7 CA]# (umask 066 ; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...................+++</span><br><span class="line">.....................................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">[root@centos7 CA]# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:hlg</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:ihaiyun.com</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:ca.ihaiyun.com</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure></p><h4 id="在服务器创建证书签署请求"><a href="#在服务器创建证书签署请求" class="headerlink" title="在服务器创建证书签署请求"></a>在服务器创建证书签署请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# (umask 066 ; openssl genrsa -out /etc/pki/tls/private/test.key 2048)</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">..........................................................+++</span><br><span class="line">.............................................................................................................................................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">[root@centos6 ~]# openssl req -new -key /etc/pki/tls/private/test.key -days 365 -out /etc/pki/tls/test.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:caoyang</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:ihaiyun.com</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.ihaiyun.com</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">Please enter the following &apos;extra&apos; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line">[root@centos6 tls]# scp test.csr 192.168.8.135:/etc/pki/CA</span><br><span class="line">root@192.168.8.135&apos;s password: </span><br><span class="line">test.csr                                                       100% 1029     1.0KB/s   00:00</span><br></pre></td></tr></table></figure><h4 id="CA签证"><a href="#CA签证" class="headerlink" title="CA签证"></a>CA签证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 CA]# openssl ca -in /etc/pki/CA/test.csr -out /etc/pki/CA/certs/test.crt  </span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">Certificate Details:</span><br><span class="line">        Serial Number: 1 (0x1)</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Oct  9 01:18:33 2017 GMT</span><br><span class="line">            Not After : Oct  9 01:18:33 2018 GMT</span><br><span class="line">        Subject:</span><br><span class="line">            countryName               = CN</span><br><span class="line">            stateOrProvinceName       = beijing</span><br><span class="line">            organizationName          = ihaiyun.com</span><br><span class="line">            organizationalUnitName    = www.ihaiyun.com</span><br><span class="line">            commonName                = www.ihaiyun.com</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:FALSE</span><br><span class="line">            Netscape Comment: </span><br><span class="line">                OpenSSL Generated Certificate</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                A6:59:85:90:9D:84:C4:80:6B:27:E2:A2:57:44:58:FA:69:64:CB:00</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:43:65:C5:B5:03:8E:E9:2E:82:C9:0D:5F:87:72:2D:F1:81:5F:FB:CE</span><br><span class="line"></span><br><span class="line">Certificate is to be certified until Oct  9 01:18:33 2018 GMT (365 days)</span><br><span class="line">Sign the certificate? [y/n]:y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 out of 1 certificate requests certified, commit? [y/n]y</span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><h4 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# mkdir /etc/httpd/ssl          # 新建目录用来存放证书文件</span><br><span class="line">[root@centos7 CA]# scp certs/test.crt 192.168.8.128:/etc/httpd/ssl          # 将证书发送到192.168.8.128</span><br><span class="line">root@192.168.8.128&apos;s password: </span><br><span class="line">test.crt                                                       100% 4507     4.4KB/s   00:00 </span><br><span class="line">[root@centos7 CA]# scp cacert.pem 192.168.8.128:/etc/httpd/ssl              # 将根的证书发送给192.168.8.128</span><br><span class="line">root@192.168.8.128&apos;s password: </span><br><span class="line">cacert.pem                                                     100% 1326     1.3KB/s   00:00</span><br></pre></td></tr></table></figure><h3 id="3-搭建DNS"><a href="#3-搭建DNS" class="headerlink" title="3. 搭建DNS"></a>3. 搭建DNS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/named.conf </span><br><span class="line">options &#123;</span><br><span class="line">//  listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">    listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">    directory   &quot;/var/named&quot;;</span><br><span class="line">    dump-file   &quot;/var/named/data/cache_dump.db&quot;;</span><br><span class="line">    statistics-file &quot;/var/named/data/named_stats.txt&quot;;</span><br><span class="line">    memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</span><br><span class="line">//  allow-query     &#123; localhost; &#125;;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# tail -5 /etc/named.rfc1912.zones </span><br><span class="line">zone &quot;ihaiyun.com&quot; IN &#123;</span><br><span class="line">type master;</span><br><span class="line">file &quot;ihaiyun.com.zone&quot;;</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cp -p /var/named/named.localhost /var/named/ihaiyun.com.zone</span><br><span class="line">[root@centos7 ~]# cat /var/named/ihaiyun.com.zone </span><br><span class="line">$TTL 1D</span><br><span class="line">@IN SOAdns1 admin.ihaiyun.com. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">NSdns1</span><br><span class="line">dns1 A192.168.8.135</span><br><span class="line">www A192.168.8.128</span><br></pre></td></tr></table></figure><h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# cp /etc/pki/tls/private/test.key /etc/httpd/ssl/          # 将key文件cp到/etc/httpd/ssl目录下方便管理</span><br><span class="line">[root@centos6 ~]# vim /etc/httpd/conf.d/ssl.conf</span><br><span class="line">SSLCertificateFile /etc/httpd/ssl/test.crt</span><br><span class="line">SSLCertificateKeyFile /etc/httpd/ssl/test.key</span><br><span class="line">SSLCACertificateFile /etc/httpd/ssl/cacert.pem</span><br><span class="line">[root@centos6 ~]# service httpd restart</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br></pre></td></tr></table></figure><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h3><h4 id="直接访问测试-1"><a href="#直接访问测试-1" class="headerlink" title="直接访问测试"></a>直接访问测试</h4><p>还是提醒我们证书不安全</p><center><img src="https://houhaiyun.github.io/img/images/Httpd-https-4.gif" title="访问测试"></center><h4 id="将根证书导入到测试客户端中"><a href="#将根证书导入到测试客户端中" class="headerlink" title="将根证书导入到测试客户端中"></a>将根证书导入到测试客户端中</h4><p>需要把根证书下载到客户端中，具体怎么下载，相信你们会有办法。导入方法如下：</p><center><img src="https://houhaiyun.github.io/img/images/Httpd-https-5.gif" title="将根证书导入到测试客户端中"></center><h4 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h4><center><img src="https://houhaiyun.github.io/img/images/Httpd-https-6.gif" title="再次测试"></center><p>https已经实现!</p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
          <category> httpd-2.2 实现https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dropbear-轻量级SSH服务器和客户端</title>
      <link href="/2017/09/11/Dropbear/"/>
      <url>/2017/09/11/Dropbear/</url>
      <content type="html"><![CDATA[<h3 id="Dropbear简介"><a href="#Dropbear简介" class="headerlink" title="Dropbear简介"></a>Dropbear简介</h3><p><code>Dropbear</code>是一个相对较小的SSH服务器和客户端。它运行在各种基于<code>POSIX</code>的平台上。<code>Dropbear</code>是一种开源软件，以<code>MIT</code>风格的许可证分发。<code>Dropbear</code>对于“嵌入”型<code>Linux</code>（或其他<code>Unix</code>）系统（如无线路由器）特别有用。——<code>Dropbear</code>官网</p><p><a href="https://matt.ucc.asn.au/dropbear/dropbear.html" target="_blank" rel="noopener">官网：https://matt.ucc.asn.au/dropbear/dropbear.html</a></p><a id="more"></a><h3 id="安装drobear"><a href="#安装drobear" class="headerlink" title="安装drobear"></a>安装drobear</h3><h4 id="1、安装依赖包"><a href="#1、安装依赖包" class="headerlink" title="1、安装依赖包"></a>1、安装依赖包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@A dropbear-2017.75]# yum groupinstall -y "Development tools"#安装开发包组</span><br><span class="line">[root@A dropbear-2017.75]# yum install -y zlib-devel zlib#安装zlib数据压缩库</span><br></pre></td></tr></table></figure><h4 id="2、下载dropbear"><a href="#2、下载dropbear" class="headerlink" title="2、下载dropbear"></a>2、下载dropbear</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# wget https://matt.ucc.asn.au/dropbear/dropbear-2017.75.tar.bz2#通过wget下载</span><br><span class="line">--2017-09-13 11:58:07--  https://matt.ucc.asn.au/dropbear/dropbear-2017.75.tar.bz2</span><br><span class="line">Resolving matt.ucc.asn.au... 130.95.13.18, 2405:3c00:5200<img class="github-emoji" title="100" alt="100" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4af.png?v8" height="20" width="20">:18</span><br><span class="line">Connecting to matt.ucc.asn.au|130.95.13.18|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1623392 (1.5M) [application/x-bzip2]</span><br><span class="line">Saving to: “dropbear-2017.75.tar.bz2”</span><br><span class="line"></span><br><span class="line"><span class="meta">100%</span>[=======================================&gt;] 1,623,392    441K/s   in 3.6s    </span><br><span class="line"></span><br><span class="line">2017-09-13 11:58:13 (441 KB/s) - “dropbear-2017.75.tar.bz2” saved [1623392/1623392]</span><br></pre></td></tr></table></figure><h4 id="3、安装Drobear"><a href="#3、安装Drobear" class="headerlink" title="3、安装Drobear"></a>3、安装Drobear</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@A app]# tar xf dropbear-2017.75.tar.bz2 #解压</span><br><span class="line">[root@A app]# ls#查看解压后的目录</span><br><span class="line">dropbear-2017.75  dropbear-2017.75.tar.bz2</span><br><span class="line">[root@A app]# cd dropbear-2017.75/#切换到解压后的目录中</span><br><span class="line">[root@A dropbear-2017.75]# ./configure#开始检查环境，并生成makefile文件</span><br><span class="line">。。。省略部分内容</span><br><span class="line">configure: creating ./config.status</span><br><span class="line">config.status: creating Makefile</span><br><span class="line">config.status: creating libtomcrypt/Makefile</span><br><span class="line">config.status: creating libtommath/Makefile</span><br><span class="line">config.status: creating config.h</span><br><span class="line">configure: </span><br><span class="line">configure: Using bundled libtomcrypt and libtommath</span><br><span class="line">configure: </span><br><span class="line">configure: Now edit options.h to choose features.</span><br><span class="line">[root@A dropbear-2017.75]# make#根据Makefile文件，构建应用程序dropbear</span><br><span class="line">[root@A dropbear-2017.75]# make install #开始安装，复制文件到相应路径</span><br><span class="line">install -d /usr/local/sbin</span><br><span class="line">install dropbear /usr/local/sbin</span><br><span class="line">install -d /usr/local/share/man/man8</span><br><span class="line">install -m 644 ./dropbear.8 /usr/local/share/man/man8/dropbear.8</span><br><span class="line">install -d /usr/local/bin</span><br><span class="line">install dbclient /usr/local/bin</span><br><span class="line">install -d /usr/local/share/man/man1</span><br><span class="line">if test -e dbclient.1; then install -m 644 dbclient.1 /usr/local/share/man/man1/dbclient.1; fi</span><br><span class="line">install -d /usr/local/bin</span><br><span class="line">install dropbearkey /usr/local/bin</span><br><span class="line">install -d /usr/local/share/man/man1</span><br><span class="line">if test -e dropbearkey.1; then install -m 644 dropbearkey.1 /usr/local/share/man/man1/dropbearkey.1; fi</span><br><span class="line">install -d /usr/local/bin</span><br><span class="line">install dropbearconvert /usr/local/bin</span><br><span class="line">install -d /usr/local/share/man/man1</span><br><span class="line">if test -e dropbearconvert.1; then install -m 644 dropbearconvert.1 /usr/local/share/man/man1/dropbearconvert.1; fi</span><br></pre></td></tr></table></figure><h3 id="Dropbear的使用"><a href="#Dropbear的使用" class="headerlink" title="Dropbear的使用"></a>Dropbear的使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">[root@A dropbear-2017.75]# ls /usr/local/sbin/ /usr/local/bin/#查看是否在对应的目录下生成文件</span><br><span class="line">/usr/local/bin/:</span><br><span class="line">dbclient  dropbearconvert  dropbearkey</span><br><span class="line"></span><br><span class="line">/usr/local/sbin/:</span><br><span class="line">dropbear</span><br><span class="line">[root@A dropbear-2017.75]# /usr/local/sbin/dropbear -h #查看帮助信息</span><br><span class="line">Dropbear server v2017.75 https://matt.ucc.asn.au/dropbear/dropbear.html</span><br><span class="line">Usage: /usr/local/sbin/dropbear [options]</span><br><span class="line">-b bannerfileDisplay the contents of bannerfile before user login</span><br><span class="line">(default: none)</span><br><span class="line">-r keyfile  Specify hostkeys (repeatable)</span><br><span class="line">defaults: </span><br><span class="line">dss /etc/dropbear/dropbear_dss_host_key</span><br><span class="line">rsa /etc/dropbear/dropbear_rsa_host_key</span><br><span class="line">ecdsa /etc/dropbear/dropbear_ecdsa_host_key</span><br><span class="line">-RCreate hostkeys as required</span><br><span class="line">-FDon't fork into background</span><br><span class="line">-ELog to stderr rather than syslog</span><br><span class="line">-mDon't display the motd on login</span><br><span class="line">-wDisallow root logins</span><br><span class="line">-sDisable password logins</span><br><span class="line">-gDisable password logins for root</span><br><span class="line">-BAllow blank password logins</span><br><span class="line">-jDisable local port forwarding</span><br><span class="line">-kDisable remote port forwarding</span><br><span class="line">-aAllow connections to forwarded ports from any host</span><br><span class="line">-p [address:]port</span><br><span class="line">Listen on specified tcp port (and optionally address),</span><br><span class="line">up to 10 can be specified</span><br><span class="line">(default port is 22 if none specified)</span><br><span class="line">-P PidFileCreate pid file PidFile</span><br><span class="line">(default /var/run/dropbear.pid)</span><br><span class="line">-iStart for inetd</span><br><span class="line">-W &lt;receive_window_buffer&gt; (default 24576, larger may be faster, max 1MB)</span><br><span class="line">-K &lt;keepalive&gt;  (0 is never, default 0, in seconds)</span><br><span class="line">-I &lt;idle_timeout&gt;  (0 is never, default 0, in seconds)</span><br><span class="line">-V    Version</span><br><span class="line">[root@A ~]# mkdir /etc/dropbear#创建存放密钥目录</span><br><span class="line">[root@A ~]# dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key -s 2048#使用rsa算法生成2048位的密钥</span><br><span class="line">Generating key, this may take a while...</span><br><span class="line">Public key portion is:</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Pq2ndItUzwY/iHEs/xhIscet510HnQq0lE1yz43B5dXNCv+jDNOdMf3j2XySxtr0J82r2b/+qIp2tRBBmlO7URI8VQA+1J7nM9CP6oJ3ucLSAyVsbc/aIba9JFeKxZLcFdoLT4+M657ef7NcSE2IDvzPBriNXKQxR8Erda5xIcnPDSvNawSn809iJVhjq+gAWVxwHuLNpZst2xb9A6Q+8FCM44UZUpSnIh0u5LNstCGsMc9ClQDSeyNhhBcftBG1oYf2eTEVhpNF5Pu26MA/mXAbTbhgaB/2yaF93Xx6vFO2mAy/6o5xcRJrEdXkD9X3ZQr7xKDdwPtKEJKh4d15 root@A</span><br><span class="line">Fingerprint: md5 76:65:cb:ee:4e:a5:41:bd:2e:81:3a:5e:3b:b6:14:99</span><br><span class="line">[root@A ~]# dropbearkey -t dss -f /etc/dropbear/dropbear_dsa_host_key#使用dss算法生成密钥</span><br><span class="line">Generating key, this may take a while...</span><br><span class="line">Public key portion is:</span><br><span class="line">ssh-dss AAAAB3NzaC1kc3MAAACBAOVp1GiSHc0Jgr/zTODQUlt7jF+jOyv0abzQKY7V6hY5UZAQhz0I0vxWCMHzcY+SVY7svSQCC9iWsoJ2ZO6rPkZLF3adOuG7EFFD6AvNtKF5w5W6cAzOzlqycf7U9JHuszZbVawtthX5w1p5f8eq8kP6sPwCrFzV883Na76MxfVBAAAAFQCT5pQj9ZYapyfPszAv3DyKsAwO6QAAAIEApZzegodTTfU/aX8Tlca2SBZ7Rlj3MF8zeQBjktFZHWeUoEhpRk41bsScuydgs8uW6HX+U8Nk9gx1AHur1rUi/qAZvRUGnUJndm/4Mljc4tmDobu8bKzR0HFtUHidlHailLOFpQTOAxOGcvY2Uv0mkuouG48nloS63bEDUtGPxUMAAACBAL76pIb4YBsT+eGvsvIgNXDZHKnz8QUZYR/+XBV6OelCt26rvbiwot7kTlvbwADJBMIIP0YVar2K8Z5CyYza5A2h6rvs4rgrKSmb/EHb1v1q/Nqjmk33BqWkNf6D3o649yjJd3Lk2/N1hLuhYrvZhq7NUoo2oH5H0RNTTkEYDfYC root@A</span><br><span class="line">Fingerprint: md5 ff:5d:02:f5:7f:8b:9d:ad:64:d1:ca:7c:16:b5:1c:1b</span><br><span class="line">[root@A ~]# dropbear -p :2222 -F -E#在前台启动dropbear端口位2222</span><br><span class="line">[7250] Sep 13 13:42:07 Failed loading /etc/dropbear/dropbear_dss_host_key</span><br><span class="line">[7250] Sep 13 13:42:07 Failed loading /etc/dropbear/dropbear_ecdsa_host_key</span><br><span class="line">[7250] Sep 13 13:42:07 Not backgrounding</span><br><span class="line"></span><br><span class="line">[7281] Sep 13 13:42:52 Child connection from 192.168.8.129:49634</span><br><span class="line">[7281] Sep 13 13:42:56 Password auth succeeded for 'root' from 192.168.8.129:49634</span><br><span class="line">[root@B ~]# ssh 192.168.8.128 -p 2222#使用B去连A可以链接</span><br><span class="line">The authenticity of host '[192.168.8.128]:2222 ([192.168.8.128]:2222)' can't be established.</span><br><span class="line">RSA key fingerprint is 76:65:cb:ee:4e:a5:41:bd:2e:81:3a:5e:3b:b6:14:99.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added '[192.168.8.128]:2222' (RSA) to the list of known hosts.</span><br><span class="line">root@192.168.8.128's password: </span><br><span class="line">[root@A ~]# dbclient 192.168.8.129#使用dropbear的客户端工具连接B，可以连接</span><br><span class="line"></span><br><span class="line">Host '192.168.8.129' is not in the trusted hosts file.</span><br><span class="line">(ecdsa-sha2-nistp256 fingerprint md5 22:11:3a:21:03:37:06:e4:8c:45:65:ae:6e:a4:37:9a)</span><br><span class="line">Do you want to continue connecting? (y/n) y</span><br><span class="line">root@192.168.8.129's password: </span><br><span class="line">Last login: Wed Sep 13 14:09:45 2017 from 192.168.8.1</span><br><span class="line">[root@A ~]# dropbear -p :2345 #在后台启动dropbear端口为2345</span><br><span class="line">[root@A ~]# netstat -anp| grep 2345#2345端口已经启动</span><br><span class="line">tcp        0      0 0.0.0.0:2345                0.0.0.0:*                   LISTEN      7315/dropbear       </span><br><span class="line">tcp        0      0 :::2345                     :::*                        LISTEN      7315/dropbear   </span><br><span class="line">[root@B ~]# ssh 192.168.8.128 -p 2345#在B上去连A的2345端口可以连接</span><br><span class="line">The authenticity of host '[192.168.8.128]:2345 ([192.168.8.128]:2345)' can't be established.</span><br><span class="line">RSA key fingerprint is 76:65:cb:ee:4e:a5:41:bd:2e:81:3a:5e:3b:b6:14:99.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added '[192.168.8.128]:2345' (RSA) to the list of known hosts.</span><br><span class="line">root@192.168.8.128's password:</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SSH </category>
          
          <category> Dropbear-轻量级SSH服务器和客户端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AIDE</title>
      <link href="/2017/09/10/AIDE/"/>
      <url>/2017/09/10/AIDE/</url>
      <content type="html"><![CDATA[<h3 id="AIDE简介"><a href="#AIDE简介" class="headerlink" title="AIDE简介"></a>AIDE简介</h3><p>当一个入侵者进入了你的系统并且种植了木马，通常会想法来隐蔽这个木马（除了木马自身的一些隐蔽特性外，他会尽量给你检查系统的过程设置障碍），通常入侵者会修改一些文件，比如管理员通常用<code>ps -aux</code>来查看系统进程，那么入侵者很可能用自己经过修改的<code>ps</code>程序来替换掉你系统上的<code>ps</code>程序，以使用ps命令查不到正在运行的木马程序。如果入侵者发现管理员正在运行<code>crontab</code>作业，也有可能替换掉<code>crontab</code>程序等等。所以由此可以看出对于系统文件或是关键文件的检查是很必要的。目前就系统完整性检查的工具用的比较多的有两款： <code>Tripwire</code>和<code>AIDE</code>，前者是一款商业软件，后者是一款免费的但功能也很强大的工具。</p><ul><li><code>AIDE</code>(<code>Advanced Intrusion Detection Environment</code>,高级入侵检测环境)是个入侵检测工具，主要用途是检查文档的完整性。</li></ul><a id="more"></a><ul><li><code>AIDE</code>能够构造一个指定文件的数据库，它使用<code>aide.conf</code>作为其配置文件。 <code>AIDE</code>数据库能够保存文件的各种属性，包括：权限(<code>permission</code>)、索引节点序号(<code>inode number</code>)、所属用户(<code>user</code>)、所属用户组(<code>group</code>)、文件大小、最后修改时间(<code>mtime</code>)、创建时间(<code>ctime</code>)、最后访问时间(<code>atime</code>)、增加的大小以及连接数。 <code>AIDE</code>还能够使用下列算法： <code>sha1</code>、 <code>md5</code>、 <code>rmd160</code>、 <code>tiger</code>，以密文形式建立每个文件的校验码或散列号.</li><li>这个数据库不应该保存那些经常变动的文件信息，例如：日志文件、邮件、 <code>/proc</code>文件系统、用户起始目录以及临时目录.</li></ul><h3 id="使用AIDE"><a href="#使用AIDE" class="headerlink" title="使用AIDE"></a>使用AIDE</h3><h4 id="安装AIDE"><a href="#安装AIDE" class="headerlink" title="安装AIDE"></a>安装AIDE</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# yum install -y aide#使用yum安装</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Setting up Install Process</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Resolving Dependencies</span><br><span class="line"><span class="meta">--&gt;</span> Running transaction check</span><br><span class="line"><span class="meta">---&gt;</span> Package aide.x86_64 0:0.14-11.el6 will be installed</span><br><span class="line"><span class="meta">--&gt;</span> Finished Dependency Resolution</span><br><span class="line">。。。省略后面内容</span><br></pre></td></tr></table></figure><h4 id="修改配置文件，定义监控目录"><a href="#修改配置文件，定义监控目录" class="headerlink" title="修改配置文件，定义监控目录"></a>修改配置文件，定义监控目录</h4><p>配置文件路径：<code>/etc/aide.conf</code></p><p>定义监控<code>/app</code>目录，但不监控<code>/app</code>目录下的<code>f3</code>文件。规则为：权限+所有者+所属组+sha512+修改时间+访问时间+改变时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# cp /etc/aide.conf /etc/aide.conf.bak#对配置文件修改前建议备份</span><br><span class="line">[root@A ~]# vim /etc/aide.conf#编辑配置文件</span><br><span class="line"><span class="meta">#</span> Example configuration file for AIDE.</span><br><span class="line"></span><br><span class="line">@@define DBDIR /var/lib/aide#数据库目录</span><br><span class="line">@@define LOGDIR /var/log/aide#日志目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The location of the database to be read.</span><br><span class="line">database=file:@@&#123;DBDIR&#125;/aide.db.gz#数据库文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The location of the database to be written.</span><br><span class="line"><span class="meta">#</span>database_out=sql:host:port:database:login_name:passwd:table</span><br><span class="line"><span class="meta">#</span>database_out=file:aide.db.new</span><br><span class="line">database_out=file:@@&#123;DBDIR&#125;/aide.db.new.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Whether to gzip the output to database</span><br><span class="line">gzip_dbout=yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Default.</span><br><span class="line">verbose=5</span><br><span class="line"></span><br><span class="line">report_url=file:@@&#123;LOGDIR&#125;/aide.log</span><br><span class="line">report_url=stdout</span><br><span class="line"><span class="meta">#</span>report_url=stderr</span><br><span class="line"><span class="meta">#</span>NOT IMPLEMENTED report_url=mailto:root@foo.com</span><br><span class="line"><span class="meta">#</span>NOT IMPLEMENTED report_url=syslog:LOG_AUTH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> These are the default rules.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span>p:      permissions#权限</span><br><span class="line"><span class="meta">#</span>i:      inode:#索引节点</span><br><span class="line"><span class="meta">#</span>n:      number of links#链接数</span><br><span class="line"><span class="meta">#</span>u:      user#用户</span><br><span class="line"><span class="meta">#</span>g:      group#组</span><br><span class="line"><span class="meta">#</span>s:      size#大小</span><br><span class="line"><span class="meta">#</span>b:      block count# 块大小</span><br><span class="line"><span class="meta">#</span>m:      mtime# 修改时间</span><br><span class="line"><span class="meta">#</span>a:      atime# 访问时间</span><br><span class="line"><span class="meta">#</span>c:      ctime# 改变时间</span><br><span class="line"><span class="meta">#</span>S:      check for growing size#检查增加的大小</span><br><span class="line"><span class="meta">#</span>acl:           Access Control Lists</span><br><span class="line"><span class="meta">#</span>selinux        SELinux security context</span><br><span class="line"><span class="meta">#</span>xattrs:        Extended file attributes</span><br><span class="line"><span class="meta">#</span>md5:    md5 checksum#md5校验</span><br><span class="line"><span class="meta">#</span>sha1:   sha1 checksum# sha1校验</span><br><span class="line"><span class="meta">#</span>sha256:        sha256 checksum#sha256校验</span><br><span class="line"><span class="meta">#</span>sha512:        sha512 checksum#sha512校验</span><br><span class="line"><span class="meta">#</span>rmd160: rmd160 checksum#rmd160校验</span><br><span class="line"><span class="meta">#</span>tiger:  tiger checksum#tiger校验</span><br><span class="line"><span class="meta">#</span>rmd160: rmd160 checksum#rmd160校验</span><br><span class="line"><span class="meta">#</span>tiger:  tiger checksum#tiger校验</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>haval:  haval checksum (MHASH only)# haval校验</span><br><span class="line"><span class="meta">#</span>gost:   gost checksum (MHASH only)# gost校验</span><br><span class="line"><span class="meta">#</span>crc32:  crc32 checksum (MHASH only)# crc32校验</span><br><span class="line"><span class="meta">#</span>whirlpool:     whirlpool checksum (MHASH only)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>R:             p+i+n+u+g+s+m+c+acl+selinux+xattrs+md5</span><br><span class="line"><span class="meta">#</span>L:             p+i+n+u+g+acl+selinux+xattrs</span><br><span class="line"><span class="meta">#</span>E:             Empty group</span><br><span class="line"><span class="meta">#</span>&gt;:             Growing logfile p+u+g+i+n+S+acl+selinux+xattrs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> You can create custom rules like this.</span><br><span class="line"><span class="meta">#</span> With MHASH...</span><br><span class="line"><span class="meta">#</span> ALLXTRAHASHES = sha1+rmd160+sha256+sha512+whirlpool+tiger+haval+gost+crc32</span><br><span class="line">ALLXTRAHASHES = sha1+rmd160+sha256+sha512+tiger</span><br><span class="line"><span class="meta">#</span> Everything but access time (Ie. all changes)</span><br><span class="line">EVERYTHING = R+ALLXTRAHASHES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Sane, with multiple hashes</span><br><span class="line"><span class="meta">#</span> NORMAL = R+rmd160+sha256+whirlpool</span><br><span class="line">NORMAL = R+rmd160+sha256</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> For directories, don't bother doing hashes</span><br><span class="line">DIR = p+i+n+u+g+acl+selinux+xattrs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Access control only</span><br><span class="line">PERMS = p+i+u+g+acl+selinux</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Logfile are special, in that they often change</span><br><span class="line">LOG = &gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Just do md5 and sha256 hashes</span><br><span class="line">LSPP = R+sha256</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Some files get updated automatically, so the inode/ctime/mtime change</span><br><span class="line"><span class="meta">#</span> but we want to know when the data inside them changes</span><br><span class="line">DATAONLY =  p+n+u+g+s+acl+selinux+xattrs+md5+sha256+rmd160+tiger</span><br><span class="line"></span><br><span class="line">mon = p+u+g+sha512+m+a+c#自定义规则监控：权限+所有者+所属组+sha512+修改时间+访问时间+改变时间</span><br><span class="line">/app mon#定义/app目录使用规则 mon</span><br><span class="line">!/app/f3#但是/app目录下的f3文件不监控，“!”表示忽略这个文件的检查</span><br></pre></td></tr></table></figure><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@A app]# cp /etc/fstab /app/f1#先把文件创建好</span><br><span class="line">[root@A app]# echo 123 &gt; f2</span><br><span class="line">[root@A app]# echo www.iav18.cn &gt; f3</span><br><span class="line">[root@A app]# ls</span><br><span class="line">f1  f2  f3</span><br><span class="line">[root@A app]# aide --init </span><br><span class="line"></span><br><span class="line">AIDE, version 0.14</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## AIDE database at /var/lib/aide/aide.db.new.gz initialized.</span><br></pre></td></tr></table></figure><h4 id="生成检查数据库"><a href="#生成检查数据库" class="headerlink" title="生成检查数据库"></a>生成检查数据库</h4><p>把当前初始化的数据库作为开始的基础数据库（建议初始数据库存放到安全的地方） </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# cd /var/lib/aide/</span><br><span class="line">[root@A aide]# ls</span><br><span class="line">aide.db.new.gz</span><br><span class="line">[root@A aide]# cp aide.db.new.gz aide.db.gz</span><br><span class="line">[root@A aide]# ls</span><br><span class="line">aide.db.gz  aide.db.new.gz</span><br></pre></td></tr></table></figure><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@A ~]# aide --check#检测定义的/app目录是否被改动，没有被改动</span><br><span class="line"></span><br><span class="line">AIDE, version 0.14</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## All files match AIDE database. Looks okay!</span><br><span class="line">[root@A ~]# cd /app/#切换到/app目录</span><br><span class="line">[root@A app]# ls# 列出目录下的内容</span><br><span class="line">f1  f2  f3</span><br><span class="line">[root@A app]# echo &gt; f1#输入一个换行符到f1文件</span><br><span class="line">[root@A app]# aide --check#再次检查，发现文件f1的 SHA512、Ctime、Mtime已经被修改</span><br><span class="line">AIDE found differences between database and filesystem!!</span><br><span class="line">Start timestamp: 2017-09-13 15:18:54</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">  Total number of files:4</span><br><span class="line">  Added files:0</span><br><span class="line">  Removed files:0</span><br><span class="line">  Changed files:1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line">Changed files:</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">changed: /app/f1</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line">Detailed information about changes:</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">File: /app/f1</span><br><span class="line">  Mtime    : 2017-09-13 15:08:30              , 2017-09-13 15:18:51</span><br><span class="line">  Ctime    : 2017-09-13 15:08:30              , 2017-09-13 15:18:51</span><br><span class="line">  SHA512   : ej+ts/Q6q9CANmKXMfdEdCv3Lcl1otID , vmiIOMqGhuXJBom/KrWFzvETfJmbSMcL</span><br></pre></td></tr></table></figure><h4 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h4><p>如果是合法的修改，那么也会被检测出有问题。此时就需要更新数据了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@A app]# aide -c /etc/aide.conf --update #更新数据库</span><br><span class="line">AIDE found differences between database and filesystem!!</span><br><span class="line">Start timestamp: 2017-09-13 15:25:29</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">  Total number of files:4</span><br><span class="line">  Added files:0</span><br><span class="line">  Removed files:0</span><br><span class="line">  Changed files:1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line">Changed files:</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">changed: /app/f1</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line">Detailed information about changes:</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">File: /app/f1</span><br><span class="line">  Atime    : 2017-09-13 15:10:09              , 2017-09-13 15:18:54</span><br><span class="line">  Mtime    : 2017-09-13 15:08:30              , 2017-09-13 15:18:51</span><br><span class="line">  Ctime    : 2017-09-13 15:08:30              , 2017-09-13 15:18:51</span><br><span class="line">  SHA512   : ej+ts/Q6q9CANmKXMfdEdCv3Lcl1otID , vmiIOMqGhuXJBom/KrWFzvETfJmbSMcL</span><br><span class="line">[root@A app]# cd /var/lib/aide/#cd到/var/lib/aide/目录</span><br><span class="line">[root@A aide]# ls</span><br><span class="line">aide.db.gz  aide.db.new.gz</span><br><span class="line">[root@A aide]# cp aide.db.new.gz aide.db.gz #覆盖基准数据库</span><br><span class="line">cp: overwrite `aide.db.gz'? y</span><br><span class="line">[root@A aide]# aide --check#再次检查数据库就没问题了。</span><br><span class="line"></span><br><span class="line">AIDE, version 0.14</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## All files match AIDE database. Looks okay!</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AIDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH命令与ssh免密登陆</title>
      <link href="/2017/09/08/SSH-mianmi/"/>
      <url>/2017/09/08/SSH-mianmi/</url>
      <content type="html"><![CDATA[<h3 id="what-is-SSH"><a href="#what-is-SSH" class="headerlink" title="what is SSH?"></a>what is SSH?</h3><p>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。使用Tcp 22端口。</p><p>ssh协议目前有SSH1和SSH2，SSH2协议兼容SSH1。目前实现SSH1和SSH2协议的主要软件有OpenSSH和SSH Communications Security Corporation　公司的SSH Communications 软件。前者是OpenBSD组织开发的一款免费的SSH软件，后者是商业软件，因此在linux、FreeBSD、OpenBSD、NetBSD等免费类UNIX系统种，通畅都使用OpenSSH作为SSH协议的实现软件。</p><a id="more"></a><h4 id="两种方式的用户登录认证："><a href="#两种方式的用户登录认证：" class="headerlink" title="两种方式的用户登录认证："></a>两种方式的用户登录认证：</h4><ul><li>基于<code>password</code>：知道帐号和密码，就可以登录到远程主机，并且所有传输的数据都会被加密。但是，可能会有别的服务器在冒充真正的服务器，无法避免被“中间人”攻击。</li><li>基于<code>key</code>：需要依靠密钥，也就是你必须为自己创建一对密钥，并把公有密钥放在需要访问的服务器上。客户端软件会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在你在该服务器的用户根目录下寻找你的公有密钥，然后把它和你发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有密钥加密“质询”（challenge）并把它发送给客户端软件。从而避免被“中间人”攻击。</li></ul><h3 id="what-is-OpenSSH"><a href="#what-is-OpenSSH" class="headerlink" title="what is OpenSSH?"></a>what is OpenSSH?</h3><p><code>OpenSSH</code>（<code>OpenBSD Secure Shell</code>）是使用<code>SSH</code>通过计算机网络加密通信的实现。</p><p><code>Centos</code>默认都会装有<code>SSH</code>，默认就是<code>OpenSSH</code>，可以通过 <code>ssh -V</code> 命令来查看安装的<code>ssh</code>版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ssh -V</span><br><span class="line">OpenSSH_6.6.1p1, OpenSSL 1.0.1e-fips 11 Feb 2013</span><br></pre></td></tr></table></figure><p><strong>SSH的客户端工具：</strong></p><p><code>SSH</code>是基于C/S（客户端/服务器端）架构的。</p><ul><li>Linux Client: ssh, scp, sftp， slogin</li><li>Windows客户端：<ul><li>xshell, putty, securecrt, sshsecureshellclient</li></ul></li><li>Server: sshd</li></ul><h3 id="ssh客户端"><a href="#ssh客户端" class="headerlink" title="ssh客户端"></a>ssh客户端</h3><h4 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h4><p>系统配置文件：(<code>/etc/ssh/ssh_config</code>)</p><p>用户配置文件： (<code>~/.ssh/config</code>)</p><p>下面介绍一些常用的配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host 别名</span><br><span class="line">HostName 主机名</span><br><span class="line">Port 端口</span><br><span class="line">User 用户名</span><br><span class="line">IdentityFile 密钥文件的路径</span><br><span class="line">IdentitiesOnly 只接受SSH key 登录</span><br><span class="line">PreferredAuthentications 强制使用Public Key验证</span><br><span class="line">StrictHostKeyChecking ask 首次登陆系统是否显示检查提示</span><br></pre></td></tr></table></figure><h4 id="ssh命令"><a href="#ssh命令" class="headerlink" title="ssh命令"></a>ssh命令</h4><p>两种格式：  </p><ul><li>ssh [user@]host [COMMAND]</li><li>ssh [-l user] host [COMMAND]<ul><li><code>-p port</code>：远程服务器监听的端口</li><li><code>-b</code>:指定连接的源IP</li><li><code>-v</code>:调试模式</li><li><code>-C</code>：压缩方式</li><li><code>-X</code>: 支持x11转发</li><li><code>-Y</code>：支持信任x11转发；<code>ForwardX11Trusted yes</code>（需要修改配置文件）</li><li><code>-t</code>: 强制伪tty分配</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -t remoteserver1 ssh remoteserver2</span><br><span class="line">[root@centos7 .ssh]# ssh -t 192.168.8.128 ssh 192.168.8.141#&lt;==通过192.168.8.128 做跳转机去连接192.168.8.141</span><br></pre></td></tr></table></figure><ul><li>允许实现对远程系统经验证地加密安全访问</li><li>当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_hostkey.pub（CentOS7默认是ssh_host_ecdsa_key.pub）文件中的公钥到客户机的~./ssh/know_hosts中。下次连接时，会自动匹配相应私钥，不能匹配，将拒绝连接</li></ul><h4 id="ssh服务登陆验证"><a href="#ssh服务登陆验证" class="headerlink" title="ssh服务登陆验证"></a>ssh服务登陆验证</h4><h5 id="基于用户和口令登录验证"><a href="#基于用户和口令登录验证" class="headerlink" title="基于用户和口令登录验证"></a>基于用户和口令登录验证</h5><ul><li>1 客户端发起ssh请求，服务器会把自己的公钥发送给用户</li><li>2 用户会根据服务器发来的公钥对密码进行加密</li><li>3 加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</li></ul><h5 id="基于密钥的登录方式"><a href="#基于密钥的登录方式" class="headerlink" title="基于密钥的登录方式"></a>基于密钥的登录方式</h5><ul><li>1 首先在客户端生成一对密钥（ssh-keygen）</li><li>2 并将客户端的公钥ssh-copy-id 拷贝到服务端</li><li>3 当客户端再次发送一个连接请求，包括ip、用户名</li><li>4 服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如： acdf</li><li>5 服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端</li><li>6 得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端</li><li>7 服务端接受到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录</li></ul><p>基于密钥的认证的实现：</p><h6 id="1-在客户端生成密钥对"><a href="#1-在客户端生成密钥对" class="headerlink" title="(1) 在客户端生成密钥对"></a>(1) 在客户端生成密钥对</h6><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa [-P ''] [-f “~/.ssh/id_rsa"]  （-P 指定密码）</span><br><span class="line">[root@centos6 ~]# ssh-keygen -t rsa#&lt;==生成密钥对</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">68:ce:fb:1b:e3:ee:ad:d0:06:d4:cd:2f:de:42:26:d3 root@centos6.haiyun.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|       . o       |</span><br><span class="line">|      . . o      |</span><br><span class="line">|     . . . .     |</span><br><span class="line">|      + S E .    |</span><br><span class="line">|     + o * o     |</span><br><span class="line">|      + = o .    |</span><br><span class="line">|       = + .     |</span><br><span class="line">|      .+Bo.      |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure></code></pre><h6 id="2-把公钥文件传输至远程服务器对应用户的家目录"><a href="#2-把公钥文件传输至远程服务器对应用户的家目录" class="headerlink" title="(2) 把公钥文件传输至远程服务器对应用户的家目录"></a>(2) 把公钥文件传输至远程服务器对应用户的家目录</h6><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">`ssh-copy-id [-i [identity_file]] [user@]host`#&lt;==注：后面不要加路径</span><br><span class="line">[root@centos7 ~]# ssh-copy-id -i .ssh/id_rsa.pub root@192.168.8.128</span><br><span class="line">root@192.168.8.128's password: </span><br><span class="line">Now try logging into the machine, with "ssh 'root@192.168.8.128'", and check in:</span><br><span class="line"></span><br><span class="line">  .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">to make sure we haven't added extra keys that you weren't expecting.</span><br><span class="line">[root@centos6 ~]# ls -l .ssh/authorized_keys #&lt;==查看复制过去的密钥，已改名为authorized_keys</span><br><span class="line">-rw-------. 1 root root 405 Sep 10 16:22 .ssh/authorized_keys</span><br></pre></td></tr></table></figure></code></pre><h6 id="3-测试"><a href="#3-测试" class="headerlink" title="(3) 测试"></a>(3) 测试</h6><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ssh 192.168.8.128#&lt;==已实现免密登陆</span><br><span class="line">Last login: Sun Sep 10 16:09:15 2017 from 192.168.8.128</span><br><span class="line">﻿ </span><br><span class="line">  .--,       .--,</span><br><span class="line"> ( (  \.---./  ) )</span><br><span class="line">  '.__/o   o\__.'</span><br><span class="line">     &#123;=  ^  =&#125;</span><br><span class="line">      &gt;  -  &lt;</span><br><span class="line">     /       \</span><br><span class="line">    //       \\</span><br><span class="line">   //|   .   |\\</span><br><span class="line">   "'\       /'"_.-~^`'-.</span><br><span class="line">      \  _  /--'         `</span><br><span class="line">    ___)( )(___</span><br><span class="line">   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span><br></pre></td></tr></table></figure></code></pre><h6 id="4-在SecureCRT或Xshell实现基于key验证在SecureCRT工具—-gt-创建公钥—-gt-生成Identity-pub文件转化为openssh兼容格式（适合SecureCRT，-Xshell不需要转化格式），并复制到需登录主机上相应文件authorized-keys中-注意权限必须为600，在需登录的ssh主机上执行："><a href="#4-在SecureCRT或Xshell实现基于key验证在SecureCRT工具—-gt-创建公钥—-gt-生成Identity-pub文件转化为openssh兼容格式（适合SecureCRT，-Xshell不需要转化格式），并复制到需登录主机上相应文件authorized-keys中-注意权限必须为600，在需登录的ssh主机上执行：" class="headerlink" title="(4) 在SecureCRT或Xshell实现基于key验证在SecureCRT工具—&gt;创建公钥—&gt;生成Identity.pub文件转化为openssh兼容格式（适合SecureCRT， Xshell不需要转化格式），并复制到需登录主机上相应文件authorized_keys中,注意权限必须为600，在需登录的ssh主机上执行："></a>(4) 在SecureCRT或Xshell实现基于key验证在SecureCRT工具—&gt;创建公钥—&gt;生成Identity.pub文件转化为openssh兼容格式（适合SecureCRT， Xshell不需要转化格式），并复制到需登录主机上相应文件authorized_keys中,注意权限必须为600，在需登录的ssh主机上执行：</h6><p>在xshell中生成密钥</p><center><img src="https://houhaiyun.github.io/img/images/SSH-mianmi-1.jpg" title="在xshell中生成密钥"></center><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将xshell生成的公钥传到服务器中，传到服务器应该不是问题。</span><br><span class="line">[root@centos6 ~]# cat id_rsa_2048.pub &gt;&gt; .ssh/authorized_keys  #&lt;==将生成的公钥导入到.ssh/authorized_keys文件中</span><br></pre></td></tr></table></figure>新建会话：&lt;div align=&quot;center&quot;&gt;![](http://ovuhiuqqd.bkt.clouddn.com/ssh%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5-1.jpg)</code></pre><h6 id="5-重设私钥口令："><a href="#5-重设私钥口令：" class="headerlink" title="(5)重设私钥口令："></a>(5)重设私钥口令：</h6><pre><code>如果认为这样不够安全，我们可以对私钥设置口令：`ssh-keygen –p`<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ssh-keygen -p #&lt;==会自动找到私钥文件</span><br><span class="line">Enter file in which the key is (/root/.ssh/id_rsa): </span><br><span class="line">Key has comment '/root/.ssh/id_rsa'</span><br><span class="line">Enter new passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved with the new passphrase.</span><br><span class="line">[root@centos7 ~]# ssh 192.168.8.128#&lt;==加密后只需要输入一次口令即可</span><br><span class="line">Enter passphrase for key '/root/.ssh/id_rsa': </span><br><span class="line">Last login: Sun Sep 10 16:55:33 2017 from 192.168.8.1</span><br></pre></td></tr></table></figure></code></pre><h6 id="6-验证代理（authentication-agent）保密解密后的密钥，这样口令就只需要输入一次在GNOME中，代理被自动提供给root用户，否则运行ssh-agent-bash"><a href="#6-验证代理（authentication-agent）保密解密后的密钥，这样口令就只需要输入一次在GNOME中，代理被自动提供给root用户，否则运行ssh-agent-bash" class="headerlink" title="(6)验证代理（authentication agent）保密解密后的密钥，这样口令就只需要输入一次在GNOME中，代理被自动提供给root用户，否则运行ssh-agent bash"></a>(6)验证代理（<code>authentication agent</code>）保密解密后的密钥，这样口令就只需要输入一次在GNOME中，代理被自动提供给<code>root</code>用户，否则运行<code>ssh-agent bash</code></h6><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ssh-agent bash #&lt;==ssh验证代理</span><br></pre></td></tr></table></figure></code></pre><h6 id="7-钥匙通过命令添加给代理"><a href="#7-钥匙通过命令添加给代理" class="headerlink" title="(7)钥匙通过命令添加给代理"></a>(7)钥匙通过命令添加给代理</h6><pre><code>代理只会一次性生效，当退出这个`bash` 代理将失效。添加代理命令：`ssh-add`</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ssh-add#&lt;==添加代理</span><br><span class="line">Enter passphrase for /root/.ssh/id_rsa: </span><br><span class="line">Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)</span><br><span class="line">[root@centos7 ~]# ssh 192.168.8.128#&lt;==代理成功</span><br><span class="line">Last login: Sun Sep 10 17:11:24 2017 from 192.168.8.128</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SSH </category>
          
          <category> SSH命令与ssh免密登陆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Openssl证书请求和自签名</title>
      <link href="/2017/09/06/Openssl/"/>
      <url>/2017/09/06/Openssl/</url>
      <content type="html"><![CDATA[<h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><h4 id="PKI、CA、X-509"><a href="#PKI、CA、X-509" class="headerlink" title="PKI、CA、X.509"></a>PKI、CA、X.509</h4><p><strong>PKI:</strong> Public Key Infrastructure </p><p><strong>公开密钥基础建设：</strong> 是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。</p><p><strong>X.509：</strong> 是由ITU-T为了公开密钥基础建设（PKI）与授权管理基础建设（PMI）提出的产业标准。X.509标准，规范了公开密钥认证、证书吊销列表、授权证书、证书路径验证算法等。</p><p><strong>CA：</strong> 数字证书认证机构(英文全称：Catificate Authority)。主要负责：证书发放、证书更新、证书撤销和证书验证。</p><a id="more"></a><h3 id="证书获取"><a href="#证书获取" class="headerlink" title="证书获取"></a>证书获取</h3><h4 id="获取证书两种方法："><a href="#获取证书两种方法：" class="headerlink" title="获取证书两种方法："></a>获取证书两种方法：</h4><p><strong>使用证书授权机构</strong></p><ul><li>生成签名请求（<code>csr</code>）</li><li>将<code>csr</code>发送给<code>CA</code></li><li>从<code>CA</code>处接收签名</li></ul><p><strong>自签名的证书</strong></p><ul><li>自已签发自己的公钥</li></ul><h3 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h3><h4 id="SSL和TLS协议"><a href="#SSL和TLS协议" class="headerlink" title="SSL和TLS协议"></a>SSL和TLS协议</h4><p>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</p><ul><li><code>Handshake</code>协议：包括协商安全参数和密码套件、服务器身份认证（客户端身份认证可选）、密钥交换</li><li><code>ChangeCipherSpec</code> 协议：一条消息表明握手协议已经完成</li><li><code>Alert</code> 协议：对握手协议中一些异常的错误提醒，分为<code>fatal`</code>和<code>warning</code>两个级别， <code>fatal</code>类型错误会直接中断<code>SSL</code>链接，而<code>warning</code>级别的错误<code>SSL</code>链接仍可继续，只是会给出错误警告</li><li><code>Record</code> 协议：包括对消息的分段、压缩、消息认证和完整性保护、加密等</li><li><code>HTTPS</code> 协议：就是<code>“HTTP 协议”</code>和<code>“SSL/TLS 协议</code>”的组合。 <code>HTTP over SSL”</code>或<code>“HTTP over TLS”</code>，对<code>http</code>协议的文本数据进行加密处理后，成为二进制形式传输</li></ul><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><h4 id="OpenSSL：开源项目"><a href="#OpenSSL：开源项目" class="headerlink" title="OpenSSL：开源项目"></a>OpenSSL：开源项目</h4><p><code>OpenSSL</code> 是一个安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及<code>SSL</code>协议，并提供丰富的应用程序供测试或其它目的使用。</p><p><strong>三个组件：</strong></p><ul><li><code>openssl</code>: 多用途的命令行工具，包<code>openssl</code></li><li><code>libcrypto</code>: 加密算法库，包<code>openssl-libs</code></li><li><code>libssl</code>：加密模块应用库，实现了<code>ssl</code>及<code>tls</code>，包<code>nss</code></li></ul><h4 id="OpenSSL命令："><a href="#OpenSSL命令：" class="headerlink" title="OpenSSL命令："></a>OpenSSL命令：</h4><ul><li>两种运行模式：交互模式和批处理模式</li><li><code>openssl version</code>：查看<code>OpenSSL</code>程序版本号</li><li>标准命令：enc<code>(对称加密),</code>ca<code>(签署证书),</code>req`(生成自签名证书), …</li></ul><h4 id="对称加密enc："><a href="#对称加密enc：" class="headerlink" title="对称加密enc："></a>对称加密enc：</h4><ul><li>工具： <code>openssl enc</code>, <code>gpg</code></li><li>算法： <code>3des</code>, <code>aes</code>, <code>blowfish</code>, <code>twofish</code></li><li>enc命令：<ul><li>帮助： <code>man enc</code></li><li>加密：<code>openssl enc -e -des3 -a -salt -in testfile -out testfile.cipher</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# openssl enc -e -des3 -a -salt -in testfile -out testfile.cipher#&lt;==使用des3算法对testfile文件加密，输出为testfile.cipher</span><br><span class="line">enter des-ede3-cbc encryption password:#&lt;==输入密码</span><br><span class="line">Verifying - enter des-ede3-cbc encryption password:#&lt;==再次输入密码</span><br><span class="line">[root@centos7 app]# cat testfile testfile.cipher #&lt;==查看加密和未加密的文件</span><br><span class="line">this is a test file</span><br><span class="line">U2FsdGVkX1/a0QHbk2ol6aB39zpO7+yS2cZ+jI7YqUQiKfGhC4SqZg==</span><br></pre></td></tr></table></figure><ul><li>解密：<ul><li><code>openssl enc -d -des3 -a -salt –in testfile.cipher-out testfile</code></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# rm -f testfile#&lt;==删除testfile文件</span><br><span class="line">[root@centos7 app]# openssl enc -d -des3 -a -salt -in testfile.cipher -out testfile#&lt;==使用des3算法对testfile.cipher文件</span><br><span class="line">enter des-ede3-cbc decryption password:#&lt;==输入密码</span><br><span class="line">[root@centos7 app]# ls</span><br><span class="line">testfile  testfile.cipher</span><br><span class="line">[root@centos7 app]# cat testfile#&lt;==查看testfile内容和原来是一样的。</span><br><span class="line">this is a test file</span><br></pre></td></tr></table></figure><pre><code>​</code></pre><h4 id="单向加密dgst"><a href="#单向加密dgst" class="headerlink" title="单向加密dgst"></a>单向加密dgst</h4><p><strong>单向加密：</strong></p><ul><li>工具： <code>md5sum</code>, <code>sha1sum</code>, <code>sha224sum</code>,<code>sha256sum</code>openssl dgst<code>…</code>dgst<code>命令：  帮助：</code>man dgst<code>`</code>openssl dgst -md5 [-hex默认] /PATH/SOMEFILE<code></code>openssl dgst -md5 testfile<code></code>md5sum /PATH/TO/SOMEFILE<code></code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# openssl dgst -md5 testfile #&lt;==计算testfile的md5</span><br><span class="line">MD5(testfile)= 4221d002ceb5d3c9e9137e495ceaa647</span><br><span class="line">[root@centos7 app]# openssl dgst -md5 -hex testfile #&lt;==-hex是转换为16进制（默认）</span><br><span class="line">MD5(testfile)= 4221d002ceb5d3c9e9137e495ceaa647</span><br><span class="line">[root@centos7 app]# md5sum testfile #&lt;==计算testfile的md5</span><br><span class="line">4221d002ceb5d3c9e9137e495ceaa647  testfile</span><br></pre></td></tr></table></figure><p>  ​</p><h4 id="生成用户密码和随机数："><a href="#生成用户密码和随机数：" class="headerlink" title="生成用户密码和随机数："></a>生成用户密码和随机数：</h4><p><strong>生成用户密码：</strong></p><ul><li><code>passwd</code>命令:</li><li>帮助： <code>man sslpasswd</code></li><li><code>openssl passwd -1 -salt SALT</code>(最多8位)</li><li><code>openssl passwd -1 –salt centos</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# openssl passwd -1 -salt 12345678#&lt;==生成openssl对passwd密码加密并加盐</span><br><span class="line">Password: </span><br><span class="line">$1$12345678$tRy4cXc3kmcfRZVj4iFXr/</span><br><span class="line">[root@centos7 app]# openssl passwd -1 -salt 123456789#&lt;==注：盐最多8位，如果输入9位是不显示的</span><br><span class="line">Password: </span><br><span class="line">$1$12345678$tRy4cXc3kmcfRZVj4iFXr/</span><br></pre></td></tr></table></figure><p>  ​</p><p><strong>生成随机数：</strong></p><ul><li>帮助： <code>man sslrand</code></li><li><code>openssl rand -base64|-hex NUM</code></li><li><code>NUM</code>: 表示字节数；<code>hex</code>时，每个字符为十六进制，相当于4位二进制，出现的字符数为<code>NUM*2</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# openssl rand -hex 16#&lt;==生成的是32位的随机数</span><br><span class="line">5666c7c5f5369120f0c8c3254fa82abe</span><br><span class="line">[root@centos7 app]# openssl rand -base64 16#&lt;==生成的是16位的随机数</span><br><span class="line">EHpDSxUBcX/uCvYBfhW61w==</span><br><span class="line">[root@centos7 app]# openssl rand -base64 -hex 16#&lt;==-hex和-base64是不能放在一块使用的</span><br><span class="line">Usage: rand [options] num</span><br></pre></td></tr></table></figure><p>  ​</p><h4 id="生成密码对儿：man-genresa"><a href="#生成密码对儿：man-genresa" class="headerlink" title="生成密码对儿：man genresa"></a>生成密码对儿：man genresa</h4><p><strong>生成私钥：</strong></p><ul><li><code>openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS</code></li><li><code>(umask 077; openssl genrsa –out test.key –des 2048)</code><br><strong>从私钥中提取出公钥</strong></li><li><code>openssl rsa -in PRIVATEKEYFILE –pubout –out PUBLICKEYFILE</code></li><li><code>Openssl rsa –in test.key –pubout –out test.key.pub</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# (umask 077 ; openssl genrsa -out test.key -des3 2048)#&lt;==生成私钥，其权限为600</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">................................+++</span><br><span class="line">.........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase for test.key:</span><br><span class="line">Verifying - Enter pass phrase for test.key:</span><br><span class="line">[root@centos7 app]# openssl rsa -in test.key -pubout -out test.key.pub#&lt;==从私钥中，提取出公钥</span><br><span class="line">Enter pass phrase for test.key:</span><br><span class="line">writing RSA key</span><br><span class="line">[root@centos7 app]# ll#&lt;==查看生成的私钥和提取出来的公钥</span><br><span class="line">total 8</span><br><span class="line">-rw-------. 1 root root 1751 Sep  9 21:29 test.key</span><br><span class="line">-rw-r--r--. 1 root root  451 Sep  9 21:30 test.key.pub</span><br></pre></td></tr></table></figure><p>  ​</p><h4 id="随机数生成器：伪随机数字"><a href="#随机数生成器：伪随机数字" class="headerlink" title="随机数生成器：伪随机数字"></a>随机数生成器：伪随机数字</h4><ul><li>键盘和鼠标</li><li>块设备中断：cp一个大文件可以生成很多随机数</li><li><code>/dev/random</code>：仅从熵池返回随机数；随机数用尽，阻塞</li><li><code>/dev/urandom</code>：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数,非阻塞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 script]#  head /dev/urandom | cksum #&lt;==通过/dev/urandom配合cksum生成随机数</span><br><span class="line">1712568099 3350</span><br><span class="line">[root@centos6 script]#  head /dev/urandom | cksum </span><br><span class="line">1558657086 1998</span><br></pre></td></tr></table></figure><p>  ​</p><h3 id="建立私有CA"><a href="#建立私有CA" class="headerlink" title="建立私有CA"></a>建立私有CA</h3><ul><li><code>openssl</code>的配置文件： <code>/etc/pki/tls/openssl.cnf</code></li><li>三种策略： 匹配、支持和可选</li><li>匹配指要求申请填写的信息跟<code>CA</code>设置信息必须一致， 支持指必须填写这项申请信息， 可选指可有可无</li></ul><h5 id="1-创建所需要的文件"><a href="#1-创建所需要的文件" class="headerlink" title="1. 创建所需要的文件"></a>1. 创建所需要的文件</h5><p><code>touch /etc/pki/CA/index.txt</code> 生成证书索引数据库文件<br><code>echo 01 &gt; /etc/pki/CA/serial</code> 指定第一个颁发证书的序列号</p><h5 id="2-CA自签证书"><a href="#2-CA自签证书" class="headerlink" title="2.  CA自签证书"></a>2.  CA自签证书</h5><p><strong>生成私钥</strong><br><code>cd /etc/pki/CA/</code><br><code>(umask 066; openssl genrsa -out  /etc/pki/CA/private/cakey.pem 2048)</code></p><h5 id="3-生成自签名证书"><a href="#3-生成自签名证书" class="headerlink" title="3. 生成自签名证书"></a>3. 生成自签名证书</h5><p><code>openssl req -new -x509 –key</code><br><code>/etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem</code><br>  <code>-new</code>: 生成新证书签署请求<br>  <code>-x509</code>: 专用于<code>CA</code>生成自签证书<br>  <code>-key</code>: 生成请求时用到的私钥文件<br>  <code>-days n</code>：证书的有效期限<br>  <code>-out /PATH/TO/SOMECERTFILE</code>: 证书的保存路径</p><h5 id="4-生成证书的各字段详解："><a href="#4-生成证书的各字段详解：" class="headerlink" title="4. 生成证书的各字段详解："></a>4. 生成证书的各字段详解：</h5><table><thead><tr><th><strong>DN字段名</strong></th><th><strong>缩写</strong></th><th><strong>说明</strong></th><th><strong>填写要求</strong></th></tr></thead><tbody><tr><td>Country Name</td><td>C</td><td>证书持有者所在国家</td><td>要求填写国家代码，用2个字母表示</td></tr><tr><td>State or Province Name</td><td>ST</td><td>证书持有者所在州或省份</td><td>填写全称，可省略不填</td></tr><tr><td>Locality Name</td><td>L</td><td>证书持有者所在城市</td><td>可省略不填</td></tr><tr><td>Organization Name</td><td>O</td><td>证书持有者所属组织或公司</td><td>最好还是填一下</td></tr><tr><td>Organizational Unit Name</td><td>OU</td><td>证书持有者所属部门</td><td>可省略不填</td></tr><tr><td>Common Name</td><td>CN</td><td>证书持有者的通用名</td><td>必填。对于非应用证书，它应该在一定程度上具有惟一性；对于应用证书，一般填写服务器域名或通配符样式的域名。</td></tr><tr><td>Email Address</td><td></td><td>证书持有者的通信邮箱</td><td>可省略不填</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# touch /etc/pki/CA/index.txt#&lt;==生成证书索引数据库文件</span><br><span class="line">[root@centos7 ~]# echo 01 &gt; /etc/pki/CA/serial#&lt;==指定第一个颁发证书的序列号</span><br><span class="line">[root@centos7 ~]# cd /etc/pki/CA/</span><br><span class="line">[root@centos7 CA]# (umask 066 ; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)#&lt;== 生成私钥</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.................................+++</span><br><span class="line">......................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">[root@centos7 CA]# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem #&lt;==生成自签名证书</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter '.', the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian  </span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:iav18.com</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server's hostname) []:ca.iav18.com</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure><h3 id="证书申请过程："><a href="#证书申请过程：" class="headerlink" title="证书申请过程："></a>证书申请过程：</h3><h4 id="证书申请及签署步骤："><a href="#证书申请及签署步骤：" class="headerlink" title="证书申请及签署步骤："></a>证书申请及签署步骤：</h4><ol><li>生成申请请求</li><li><code>RA</code>核验</li><li><code>CA</code>签署</li><li>获取证书</li></ol><h4 id="创建CA和申请证书"><a href="#创建CA和申请证书" class="headerlink" title="创建CA和申请证书"></a>创建CA和申请证书</h4><h5 id="1-在需要使用证书的主机生成证书请求"><a href="#1-在需要使用证书的主机生成证书请求" class="headerlink" title="1. 在需要使用证书的主机生成证书请求"></a>1. 在需要使用证书的主机生成证书请求</h5><p>  给<code>web</code>服务器生成私钥<br>  <code>(umask 066; openssl genrsa -out /etc/pki/tls/private/test.key 2048)</code><br>  生成证书申请文件<br>  <code>openssl req -new -key /etc/pki/tls/private/test.key -days 365 -out etc/pki/tls/test.csr</code></p><p>将证书请求文件传输给<code>CA</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# (umask 066 ; openssl genrsa -out /etc/pki/tls/private/test.key 2048)#&lt;== 生成私钥</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...............................................+++</span><br><span class="line">..................................................................................................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">[root@centos6 ~]# openssl req -new -key /etc/pki/tls/private/test.key -days 365 -out /etc/pki/tls/test.csr#&lt;==生成证书申请文件</span><br><span class="line">[root@centos6 ~]# openssl req -new -key /etc/pki/CA/private/test.key -out test.csr </span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter '.', the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN#&lt;==此项必须一样</span><br><span class="line">State or Province Name (full name) []:beijing#&lt;==此项必须一样</span><br><span class="line">Locality Name (eg, city) [Default City]:caoyang</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:iav18.com#&lt;==此项必须一样</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server's hostname) []:www.ihaiyun.com</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">Please enter the following 'extra' attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:#&lt;==是否添加密码</span><br><span class="line">An optional company name []:#&lt;==公司名称</span><br><span class="line">[root@centos6 ~]# scp test.csr 192.168.8.129:/etc/pki/CA#&lt;==将证书请求文件传输给CA</span><br><span class="line">root@192.168.8.129's password: </span><br><span class="line">test.csr                      100% 1013     1.0KB/s   00:00</span><br></pre></td></tr></table></figure><h5 id="2-RA核验与CA签署"><a href="#2-RA核验与CA签署" class="headerlink" title="2. RA核验与CA签署"></a>2. <code>RA</code>核验与<code>CA</code>签署</h5><p><code>CA</code>签署证书<br>  <code>openssl ca -in /tmp/test.csr –out /etc/pki/CA/certs/test.crt -days 365</code><br>  同一个请求默认是不能签署两次的，修改配文件也能允许修改两次（还未截图，需要截图）<br>注意：默认国家，省，公司名称三项必须和<code>CA</code>一致   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 CA]# openssl ca -in /etc/pki/CA/test.csr -out /etc/pki/CA/certs/test.crt#&lt;==CA签署认证</span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">Certificate Details:</span><br><span class="line">        Serial Number: 1 (0x1)</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Sep  9 16:31:14 2017 GMT</span><br><span class="line">            Not After : Sep  9 16:31:14 2018 GMT</span><br><span class="line">        Subject:</span><br><span class="line">            countryName               = CN</span><br><span class="line">            stateOrProvinceName       = beijing</span><br><span class="line">            localityName              = caoyang</span><br><span class="line">            organizationName          = iav18.com</span><br><span class="line">            organizationalUnitName    = opt</span><br><span class="line">            commonName                = www.ihaiyun.com</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:FALSE</span><br><span class="line">            Netscape Comment: </span><br><span class="line">                OpenSSL Generated Certificate</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                C6:DC:8C:69:C1:5F:D2:53:D3:F4:74:D7:AE:4F:0D:8E:4E:5D:3B:13</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:58:76:AE:27:21:CB:7F:FF:7F:BC:B7:BA:31:72:E2:BF:12:AF:78:6A</span><br><span class="line"></span><br><span class="line">Certificate is to be certified until Sep  9 16:31:14 2018 GMT (365 days)</span><br><span class="line">Sign the certificate? [y/n]:y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 out of 1 certificate requests certified, commit? [y/n]y</span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br><span class="line">[root@centos7 CA]# tree </span><br><span class="line">.</span><br><span class="line">├── cacert.pem</span><br><span class="line">├── certs</span><br><span class="line">│   └── test.crt#&lt;==可以看到证书生成到certs目录下</span><br><span class="line">├── crl</span><br><span class="line">├── index.txt</span><br><span class="line">├── index.txt.attr</span><br><span class="line">├── index.txt.old</span><br><span class="line">├── newcerts</span><br><span class="line">│   └── 01.pem#&lt;==此处也是证书</span><br><span class="line">├── private</span><br><span class="line">│   └── cakey.pem</span><br><span class="line">├── serial</span><br><span class="line">├── serial.old</span><br><span class="line">└── test.csr</span><br><span class="line"></span><br><span class="line">4 directories, 10 files</span><br><span class="line">[root@centos7 CA]# diff certs/test.crt newcerts/01.pem #&lt;==比较这两个文件是相同的</span><br></pre></td></tr></table></figure><h5 id="3-获取证书"><a href="#3-获取证书" class="headerlink" title="3. 获取证书"></a>3. 获取证书</h5><p>安装证书：需要在客户端安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 CA]# scp certs/test.crt 192.168.8.128:/etc/pki/tls/certs#&lt;==复制证书到客户端</span><br><span class="line">root@192.168.8.128's password: </span><br><span class="line">test.crt                      100% 4508     4.4KB/s   00:00    </span><br><span class="line">[root@centos6 ~]# ls -l  /etc/pki/tls/certs/test.crt #&lt;==在客户端确认证书是否存在</span><br><span class="line">-rw-r--r--. 1 root root 4508 Sep 10 00:17 /etc/pki/tls/certs/test.crt</span><br></pre></td></tr></table></figure><p>查看证书中的信息：</p><ul><li><code>openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|issuer|subject|serial|dates</code></li><li><code>penssl ca -status SERIAL</code>查看指定编号的证书状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# openssl x509 -in /etc/pki/tls/certs/test.crt -text#&lt;==查看证书内容</span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 1 (0x1)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C=CN, ST=beijing, L=haidian, O=iav18.com, OU=opt, CN=ca.iav18.com</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Sep  9 16:31:14 2017 GMT</span><br><span class="line">            Not After : Sep  9 16:31:14 2018 GMT</span><br><span class="line">        Subject: C=CN, ST=beijing, L=caoyang, O=iav18.com, OU=opt, CN=www.ihaiyun.com</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00<img class="github-emoji" title="de" alt="de" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8" height="20" width="20">2c:75:19:dd:13:a2:14:ac:9d:2e:23:59:43:</span><br><span class="line">                    1e:3e:68:40:2b:0f:98:a4:10:23:9d:62:5e:bb:af:</span><br><span class="line">                    51:e6:f2:ff:a6:3a:87:df:7c:a7:05:33:7c:16:86:</span><br><span class="line">                    5d:6b:c7:c6:19:bb:71:2c:1e:0a:3d:13:61:6b:ae:</span><br><span class="line">                    47:5b:08:b3:66:c7:60:44:5d:14:d9:e0:50:64:26:</span><br><span class="line">                    40:24:3f:a2:4b:6a:a1:19:e6:6f:5c:76:1e:7e:81:</span><br><span class="line">                    91:b7:ca:97:66:50:dc:40:4b:2f:3d:d3:1b:b8:26:</span><br><span class="line">                    79:4d:00:69:d9:8c:51:3e:24:36:14:14:33:a2:86:</span><br><span class="line">                    57:ed:70:6c:52:b8:0a:c2:5a:51:9b:36:5b:33:72:</span><br><span class="line">                    79<img class="github-emoji" title="cd" alt="cd" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4bf.png?v8" height="20" width="20">13:1d:a4:13:64:5b:20:46:04:a2:62:e8:0b:</span><br><span class="line">                    e9:06:5f:04:b4:3a:b9:15:b0:14:f5:a1:5d:29:3a:</span><br><span class="line">                    71:9c:bb:5b:b5:7a:77:c5:72:fc:b9:79:e9:df:07:</span><br><span class="line">                    91:6c:df:60:b2:41:72:6b:9d:2c:54:b5:35:dc:84:</span><br><span class="line">                    de:a4:1b:80:15:48:16:40:c2:42:95:bb:ff:0e:d0:</span><br><span class="line">                    66:22:01:4e:02:30:64:53:13:7a:75:5d:37:58:50:</span><br><span class="line">                    df:33:e7:72:f2:97:66:ac:90:ed:22:73:84:ac:88:</span><br><span class="line">                    c7:dd:0e:1c:86:ce:18:bf:2f:fe:b0:c4:42:bb:a9:</span><br><span class="line">                    b1:a9</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:FALSE</span><br><span class="line">            Netscape Comment: </span><br><span class="line">                OpenSSL Generated Certificate</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                C6:DC:8C:69:C1:5F:D2:53:D3:F4:74:D7:AE:4F:0D:8E:4E:5D:3B:13</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:58:76:AE:27:21:CB:7F:FF:7F:BC:B7:BA:31:72:E2:BF:12:AF:78:6A</span><br><span class="line"></span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         9a:12:6a:92:f7:c1:b3:fb:fe:2b:f5:89:24:86:b4:b0:8f:af:</span><br><span class="line">         8d:c7:06:92:aa:76:6b:f8:6b:5c:45:5f:21:41:a8:e0:41:00:</span><br><span class="line">         f7:57:51:55:88:f9:0f:cc:2b:7d:c0:b0:99:65:d4:f4:56:e0:</span><br><span class="line">         39:3b:bf:45:db:f1:4a:80:7a:d5:2e:1c:0f:ac:9b:02:ac:28:</span><br><span class="line">         70:19:6d:ba:36:c7:56:0b:7e:96:ea:55:ae:e3:f0:5c:2a:10:</span><br><span class="line">         f4:7e:ea:60:48:63:9e:04:26:d2:92:76:d7:f2:9a:3a:8e:5a:</span><br><span class="line">         20:aa:69:20:d9:25:ec:f5:3d:91:c3:84:fb:8c:50:bf:93:47:</span><br><span class="line">         ff:9a:3e:1a:f2:da:9e:36:f2:3f:81:a8:cc:d5:23:19:ad:b3:</span><br><span class="line">         ee:e2:87:ca:3f:10:3f:9c:bf:72:bd:9c:c8:73:56:28:1f:75:</span><br><span class="line">         fb:f5:10:16:37:6f:ce:b7:56:68:49:e5:8b:24:9c:02:63:67:</span><br><span class="line">         bb:e0:7c:7b:06:f1:82:1a:59:21:06:d9:9f:8d:e4:4e:e6:25:</span><br><span class="line">         cf:96:40:9a:39:69:8b:7e:70:aa:df:93:40:66:e8:8e:3b:52:</span><br><span class="line">         c6:58:2a:ad:54:a6:1d:a2:e6:b6:0a:1d:c3:9c:92:b1:c6:2b:</span><br><span class="line">         7d:30:3a:42:36:57:4a:9e:d9:b0:75:05:9d:19:4b:cf:eb:8d:</span><br><span class="line">         9a:61:0a:b7</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDzTCCArWgAwIBAgIBATANBgkqhkiG9w0BAQsFADBqMQswCQYDVQQGEwJDTjEQ</span><br><span class="line">MA4GA1UECAwHYmVpamluZzEQMA4GA1UEBwwHaGFpZGlhbjESMBAGA1UECgwJaWF2</span><br><span class="line">MTguY29tMQwwCgYDVQQLDANvcHQxFTATBgNVBAMMDGNhLmlhdjE4LmNvbTAeFw0x</span><br><span class="line">NzA5MDkxNjMxMTRaFw0xODA5MDkxNjMxMTRaMG0xCzAJBgNVBAYTAkNOMRAwDgYD</span><br><span class="line">VQQIDAdiZWlqaW5nMRAwDgYDVQQHDAdjYW95YW5nMRIwEAYDVQQKDAlpYXYxOC5j</span><br><span class="line">b20xDDAKBgNVBAsMA29wdDEYMBYGA1UEAwwPd3d3LmloYWl5dW4uY29tMIIBIjAN</span><br><span class="line">BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3ix1Gd0TohSsnS4jWUMePmhAKw+Y</span><br><span class="line">pBAjnWJeu69R5vL/pjqH33ynBTN8FoZda8fGGbtxLB4KPRNha65HWwizZsdgRF0U</span><br><span class="line">2eBQZCZAJD+iS2qhGeZvXHYefoGRt8qXZlDcQEsvPdMbuCZ5TQBp2YxRPiQ2FBQz</span><br><span class="line">ooZX7XBsUrgKwlpRmzZbM3J5zRMdpBNkWyBGBKJi6AvpBl8EtDq5FbAU9aFdKTpx</span><br><span class="line">nLtbtXp3xXL8uXnp3weRbN9gskFya50sVLU13ITepBuAFUgWQMJClbv/DtBmIgFO</span><br><span class="line">AjBkUxN6dV03WFDfM+dy8pdmrJDtInOErIjH3Q4chs4Yvy/+sMRCu6mxqQIDAQAB</span><br><span class="line">o3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl</span><br><span class="line">ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUxtyMacFf0lPT9HTXrk8Njk5dOxMwHwYD</span><br><span class="line">VR0jBBgwFoAUWHauJyHLf/9/vLe6MXLivxKveGowDQYJKoZIhvcNAQELBQADggEB</span><br><span class="line">AJoSapL3wbP7/iv1iSSGtLCPr43HBpKqdmv4a1xFXyFBqOBBAPdXUVWI+Q/MK33A</span><br><span class="line">sJll1PRW4Dk7v0Xb8UqAetUuHA+smwKsKHAZbbo2x1YLfpbqVa7j8FwqEPR+6mBI</span><br><span class="line">Y54EJtKSdtfymjqOWiCqaSDZJez1PZHDhPuMUL+TR/+aPhry2p428j+BqMzVIxmt</span><br><span class="line">s+7ih8o/ED+cv3K9nMhzVigfdfv1EBY3b863VmhJ5YsknAJjZ7vgfHsG8YIaWSEG</span><br><span class="line">2Z+N5E7mJc+WQJo5aYt+cKrfk0Bm6I47UsZYKq1Uph2i5rYKHcOckrHGK30wOkI2</span><br><span class="line">V0qe2bB1BZ0ZS8/rjZphCrc=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><h4 id="吊销证书"><a href="#吊销证书" class="headerlink" title="吊销证书"></a>吊销证书</h4><h5 id="1-在客户端获取要吊销的证书的serial"><a href="#1-在客户端获取要吊销的证书的serial" class="headerlink" title="1. 在客户端获取要吊销的证书的serial"></a>1. 在客户端获取要吊销的证书的<code>serial</code></h5><p><code>openssl x509 -in /PATH/FROM/CERT_FILE -noout -serial -subject</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# openssl x509 -in /etc/pki/tls/certs/test.crt -noout -serial -subject</span><br><span class="line">serial=01</span><br><span class="line">subject= /C=CN/ST=beijing/L=caoyang/O=iav18.com/OU=opt/CN=www.ihaiyun.com</span><br></pre></td></tr></table></figure><h5 id="2-在CA上，根据客户提交的serial与subject信息，对比检验是否与index-txt文件中的信息一致，吊销证书："><a href="#2-在CA上，根据客户提交的serial与subject信息，对比检验是否与index-txt文件中的信息一致，吊销证书：" class="headerlink" title="2. 在CA上，根据客户提交的serial与subject信息，对比检验是否与index.txt文件中的信息一致，吊销证书："></a>2. 在CA上，根据客户提交的<code>serial</code>与<code>subject</code>信息，对比检验是否与<code>index.txt</code>文件中的信息一致，吊销证书：</h5><p><code>openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 CA]# openssl ca -revoke /etc/pki/CA/newcerts/01.pem </span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">Revoking Certificate 01.</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><h5 id="3-指定第一个吊销证书的编号"><a href="#3-指定第一个吊销证书的编号" class="headerlink" title="3. 指定第一个吊销证书的编号"></a>3. 指定第一个吊销证书的编号</h5><p>注意：第一次更新证书吊销列表前，才需要执行<br>echo 01 &gt; /etc/pki/CA/crlnumber</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 CA]# echo 01 &gt; /etc/pki/CA/crlnumber</span><br></pre></td></tr></table></figure><h5 id="4-更新证书吊销列表"><a href="#4-更新证书吊销列表" class="headerlink" title="4. 更新证书吊销列表"></a>4. 更新证书吊销列表</h5><p>更新证书吊销列</p><p>openssl ca -gencrl -out /etc/pki/CA/crl/crl.pem<br>查看crl文件：<br>openssl crl -in /etc/pki/CA/crl/crl.pem -noout -text </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 CA]# openssl ca -gencrl -out /etc/pki/CA/crl/crl.pem#&lt;==更新证书吊销列表</span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">[root@centos7 CA]# openssl crl -in /etc/pki/CA/crl/crl.pem -noout -text#&lt;==查看crl文件</span><br><span class="line">Certificate Revocation List (CRL):</span><br><span class="line">        Version 2 (0x1)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: /C=CN/ST=beijing/L=haidian/O=iav18.com/OU=opt/CN=ca.iav18.com</span><br><span class="line">        Last Update: Sep  9 17:10:46 2017 GMT</span><br><span class="line">        Next Update: Oct  9 17:10:46 2017 GMT</span><br><span class="line">        CRL extensions:</span><br><span class="line">            X509v3 CRL Number: </span><br><span class="line">                1</span><br><span class="line">Revoked Certificates:</span><br><span class="line">    Serial Number: 01</span><br><span class="line">        Revocation Date: Sep  9 17:07:32 2017 GMT</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         0c:64:a1:42:af:0d:e0:32:f3:3c:29:80:bb:cf:a3:10:dc:e4:</span><br><span class="line">         b5:61:f1:8c:c0:a2:8d:92:03:82:83:0a:b2:5f:e7:37:a1:7d:</span><br><span class="line">         e2:e9:a7:3c:4b:95:e3:0e:57:b7:f3:af:cf:ba:7c:ce:e6:a5:</span><br><span class="line">         be:cc:78:cb:2b:3e:73:a7:0e:c8:d8:f7:a5:5b:5b:61:70:fe:</span><br><span class="line">         94:1a:41:6f:cb:fb:29:5d:04:56:e4:a1:44:85:d9:69:56:a5:</span><br><span class="line">         01:2e:a1:f8:35:97:e3:ba:91:31:ab:e3:9b:f7:e2:34:03:3b:</span><br><span class="line">         9e:b7:19:8c:96<img class="github-emoji" title="cd" alt="cd" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4bf.png?v8" height="20" width="20">89:e7:47:42:49:5b:8e:24:e6:10:d5:4b:</span><br><span class="line">         e6:8d:c2:73:42:e5:eb:a9:87:6b:20:52:66:47:f4:55:2b:09:</span><br><span class="line">         78:a6:d0:17:0d:39:d2:6b:4e:c4:d4:61:98:31:28:19:d3:b7:</span><br><span class="line">         c1:3f:08:09:2b:61:b7:87:a3:f4:4a:10:fa:59:e8:6f:06:db:</span><br><span class="line">         8d:89:7c:10:29:fc:bc:37:52:4b:35:48:1c:4d:af:a9:fd:f2:</span><br><span class="line">         38:69:d7:e0:4f:45:98:61:f8:03:cf:ca:a5:8e:3b:f2:ca:0d:</span><br><span class="line">         d7:b0:de:81:ec:65:8f:39:41:1d:f1:98:46:6a:a9:3d:7e:72:</span><br><span class="line">         b1:13:4d:fd:e6:a8:20:57:06:e7:51:98:dd:e1:a1:49:95:5c:</span><br><span class="line">         9c:ce:10:0f</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> Openssl证书请求和自签名 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openssl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IP地址</title>
      <link href="/2017/09/01/Linux-IP-Address/"/>
      <url>/2017/09/01/Linux-IP-Address/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），缩写为IP地址（英语：IP Address），是分配给网络上使用网际协议（英语：Internet Protocol, IP）的设备的数字标签。常见的IP地址分为IPv4与IPv6两大类。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-IP-Address-1.jpg" title="IP地址"></center><a id="more"></a><p>IP地址是在计算机网络中被用来唯一标识一台设备的一组数字，各个节点（设备）之间使用IP协议进行通信。IP地址的层次是按网络结构进行划分，一个IP地址是由网络号和主机号两部分组成。</p><h3 id="IP地址组成"><a href="#IP地址组成" class="headerlink" title="IP地址组成"></a>IP地址组成</h3><p><strong>IP地址有两部分组成：</strong></p><p><strong>网络号码字段（net-id）：</strong></p><ul><li>用于区分不同网络。网络号码字段的前几位称为类别字段（又称为类别比特），用来区分IP地址的类型。</li></ul><p><strong>主机ID（host-id）：</strong></p><ul><li>用于区分一个网络内的不同主机</li></ul><p>IP地址的网络号码字段用来标识一个网络，主机号码字段用来标识网络中网络设备的一个连接。如果有多台网络设备，无论它们分别处于任何物理位置，只要它们具有相同的网络号，那他们就处在同一网络中。也就是说，在公共网络内的多台网络设备是否处于相同网络与它们所处的物理位置无关。</p><h3 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h3><p>IP地址由32位二进制数值组成，但为了便于用户识别和记忆，采用了“点分十进制表示法”。采用了这种表示法的IP地址由4个由点分隔的十进制整数来表示，每个十进制整数对应一个字节。例如，A主机的IP地址使用二进制的表示形式为00001010 00000001 00000001 00000010，采用点分十进制表示法表示为10.1.1.2。</p><p>IP地址是唯一的。目前IP技术可能使用的IP地址最多可有4,294,967,296个（即232）。骤看可能觉得很难会用尽，但由于早期编码和分配上的问题，使很多区域的编码实际上被空出或不能使用。加上互联网的普及，使大部分家庭都至少有一部电脑，连同公司的电脑，以及连接网络的各种设备都消耗了大量IPv4地址资源。</p><p>随着互联网的快速成长，IPv4的42亿个地址的分配最终于2011年2月3日用尽。相应的科研组织已研究出128位的 IPv6，其IP地址数量最高可达3.402823669 × 1038个，届时每个人家居中的每件电器，每件对象，甚至地球上每一粒沙子都可以拥有自己的IP地址。</p><h4 id="地址分类"><a href="#地址分类" class="headerlink" title="地址分类"></a>地址分类</h4><p>地址可分为A、B、C、D、E五大类，其中E类属于特殊保留地址。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-IP-Address-2.jpg" title="地址分类"></center><p>通过网络号码字段的前几个比特就可以判断IP地址属于哪一类，这是区分各类地址最简单的方法。</p><h4 id="地址范围"><a href="#地址范围" class="headerlink" title="地址范围"></a>地址范围</h4><p>在A类、B类、C类IP地址中，如果主机号是全1，那么这个地址为直接广播地址，它是用来使路由器将一个分组以广播形式发送给特定网络上的所有主机。32位全为1的IP地址“255.255.255.255”为受限广播地址（”limited broadcast” destination address），用来将一个分组以广播方式发送给本网络中的所有主机，路由器则阻挡该分组通过，将其广播功能限制在本网内部。</p><table><thead><tr><th>网络类型</th><th>地址范围</th><th>用户可用的IP网络范围</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>0.0.0.0～127.255.255.255</td><td>1.0.0.0～126.0.0.0</td><td>全0的主机号码表示该IP地址就是网络的地址，用于网络路由；全1的主机号码表示广播地址，即对该网络上所有的主机进行广播；IP地址0.0.0.0仅在采用DHCP方式的系统启动时允许本主机利用它进行临时的通信，并且永远不是有效目的地址；网络号码为0的IP地址表示当前网络的主机，可以让机器引用自己的网络而不必知道其网络号；所有形如127.X.Y.Z的地址都保留作环回测试，发送到这个地址的分组不会输出到线路上，它们被内部处理并当作输入分组。</td></tr><tr><td>B</td><td>128.0.0.0～191.255.255.255</td><td>128.1.0.0～191.254.0.0</td><td>全0的主机号码表示该IP地址就是网络的地址，用于网络路由；全1的主机号码表示广播地址，即对该网络上所有的主机进行广播。</td></tr><tr><td>C</td><td>192.0.0.0～223.255.255.255</td><td>192.0.1.0～223.255.254.0</td><td>全0的主机号码表示该IP地址就是网络的地址，用于网络路由；全1的主机号码表示广播地址，即对该网络上所有的主机进行广播。</td></tr><tr><td>D</td><td>224.0.0.0～239.255.255.255</td><td>无</td><td>D类地址是一种组播地址。</td></tr><tr><td>E</td><td>240.0.0.0～255.255.255.255</td><td>无</td><td>保留。255.255.255.255用于局域网广播地址。</td></tr></tbody></table><h4 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h4><table><thead><tr><th>IP地址网络号</th><th>IP地址子网号</th><th>IP地址主机号</th><th>能否作为源端地址</th><th>能否作为目的端地址</th><th>描述</th></tr></thead><tbody><tr><td>全0</td><td>-</td><td>全0</td><td>可以</td><td>不可以</td><td>用于网络上的主机</td></tr><tr><td>全0</td><td>-</td><td>主机号</td><td>可以</td><td>不可以</td><td>用于网络上的特定主机</td></tr><tr><td>127</td><td>-</td><td>任何值</td><td>可以</td><td>可以</td><td>用于环回地址</td></tr><tr><td>全1</td><td>-</td><td>全1</td><td>不可以</td><td>可以</td><td>用于受限的广播（永远不被转发）</td></tr><tr><td>net-id</td><td>-</td><td>全1</td><td>不可以</td><td>可以</td><td>用于向以net-id为目的的网络广播</td></tr><tr><td>net-id</td><td>subnet-id</td><td>全1</td><td>不可以</td><td>可以</td><td>用于向以net-id，subnet-id为目的的子网广播</td></tr><tr><td>net-id</td><td>全1</td><td>全1</td><td>不可以</td><td>可以</td><td>用于向以net-id为目的的所有子网广播</td></tr></tbody></table><h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p>为了解决IP地址短缺的问题，提出了私有地址的概念。私有地址是指内部网络或主机地址，这些地址只能用于某个内部网络，不能用于公共网络。RFC1918描述了为私有网络预留的3个IP地址段。</p><p>IP地址分配组织规定将下列的IP地址保留用作私有地址，如下</p><table><thead><tr><th>网络类型</th><th>地址范围</th></tr></thead><tbody><tr><td>A</td><td>10.0.0.0～10.255.255.255</td></tr><tr><td>B</td><td>172.16.0.0～172.31.255.255</td></tr><tr><td>C</td><td>192.168.0.0～192.168.255.255</td></tr></tbody></table><h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><p>从IPv4到IPv6最显著的变化就是网络地址的长度，有128位长；IPv6地址的表达形式，一般采用32个十六进制数。</p><p>本文中大多数IP地址指的是IPv4地址，不对IPv6做过多讲解。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">维基百科：IP地址</a><br><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC0000645520&amp;partNo=10092" target="_blank" rel="noopener">华为：IP地址</a></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
          <category> IP地址 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>at命令</title>
      <link href="/2017/08/28/JiHuaRenWu-AT/"/>
      <url>/2017/08/28/JiHuaRenWu-AT/</url>
      <content type="html"><![CDATA[<h3 id="at命令简介"><a href="#at命令简介" class="headerlink" title="at命令简介"></a>at命令简介</h3><p><strong>Linux at命令可以让使用者指定在 TIME 这个特定时刻执行某个程序或指令</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>at [option] TIME</p><a id="more"></a><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-V 显示版本信息:</span><br><span class="line">-l: 列出指定队列中等待运行的作业；相当于atq</span><br><span class="line">-d: 删除指定的作业；相当于atrm</span><br><span class="line">-c: 查看具体作业任务</span><br><span class="line">-f /path/from/somefile：从指定的文件中读取任务</span><br><span class="line">-m:当任务被完成之后，将给用户发送邮件，即使没有标准输出</span><br></pre></td></tr></table></figure><ul><li><strong>注意：作业执行命令的结果中的标准输出和错误以邮件通知给相关用户</strong></li></ul><p><strong>TIME：</strong> 定义出什么时候进行 at 这项任务的时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HH:MM [YYYY-mm-dd]</span><br><span class="line">    noon（中午12:00）, midnight（午夜00:00）, teatime（4pm，下午4:00）</span><br><span class="line">    tomorrow（明天）</span><br><span class="line">    now+#&#123;minutes,hours,days, OR weeks&#125;，从现在开始多长时间之后</span><br></pre></td></tr></table></figure></p><h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h3><ul><li><code>HH:MM 02:00</code><br>  在今日的 HH:MM 进行，若该时刻已过，则明天此时执行任务</li><li><code>HH:MM YYYY-MM-DD 02:00 2016-09-20</code><br>  规定在某年某月的某一天的特殊时刻进行该项任务</li><li><code>HH:MM[am|pm] [Month] [Date]</code><br>  <code>04pm March 17</code>，3月17日下午4:00<br>  <code>17:20 tomorrow</code>，明天17:20</li><li><code>HH:MM[am|pm] + number [minutes|hours|days|weeks]</code><br>  从现在开始多长时间之后才进行该项任务<br>  <code>now + 5 minutes</code>，从现在开始五分钟后<br>  <code>02pm + 3 days</code>，三天后的下午2:00</li></ul><h3 id="at任务执行方式"><a href="#at任务执行方式" class="headerlink" title="at任务执行方式"></a>at任务执行方式</h3><ol><li><p><strong>交互式</strong> </p><p>[root@centos6 ~]# at 12:00<br>at&gt; ifconfig<br>at&gt; <eot><br>job 1 at 2017-08-24 12:00</eot></p></li><li><p><strong>输入重定向</strong> </p></li></ol><pre><code>[root@centos6 ~]# at 15:00 &lt;&lt; END&gt; ifconfig&gt; echo hello haiyun&gt; ENDjob 2 at 2017-08-24 15:00</code></pre><ol start="3"><li><strong>at –f 文件</strong></li></ol><pre><code>[root@centos6 ~]# echo ifconfig &gt; at.txt[root@centos6 ~]# at 12:00 -f at.txt job 3 at 2017-08-24 12:00</code></pre><h3 id="etc-at-allow-deny-控制用户是否能执行at任务"><a href="#etc-at-allow-deny-控制用户是否能执行at任务" class="headerlink" title="/etc/at.{allow,deny}控制用户是否能执行at任务"></a><code>/etc/at.{allow,deny}</code>控制用户是否能执行at任务</h3><p><code>/etc/at.{allow,deny}</code>控制用户是否能执行at任务</p><ul><li>白名单： <code>/etc/at.allow</code> 默认不存在，需要手动创建，只有该文件中的用户才能执行at命令，如果有<code>at.allow</code>文件那么/etc/at.deny将会失效</li><li>黑名单： <code>/etc/at.deny</code> 默认存在，拒绝该文件中用户执行</li><li>at命令， 而没有在at.deny 文件中的使用者则可执行</li><li>如果两个文件都不存在，只有 root 可以执行 at 命令</li></ul><h3 id="at工作原理"><a href="#at工作原理" class="headerlink" title="at工作原理"></a>at工作原理</h3><p><strong>事实上，我们使用at这个命令来生成所要运行的工作，并将这个工作以文本文件的方式写入/var/spool/at目录内，该工作便能等待atd这个服务的去用与执行了。</strong></p><p><strong>at队列存放在/var/spool/at目录中</strong></p><h3 id="atd的启动"><a href="#atd的启动" class="headerlink" title="atd的启动"></a>atd的启动</h3><ul><li><strong>依赖与atd服务,需要启动才能实现at任务</strong></li><li>centos 6：<br>  [root@centos6 ~]# service atd start</li><li>centos 7：<br>  [root@centos7 ~]# systemctl start atd</li></ul><h3 id="查看是否安装at包"><a href="#查看是否安装at包" class="headerlink" title="查看是否安装at包"></a>查看是否安装at包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# rpm -q at         &lt;==查看at包是否安装</span><br><span class="line">at-3.1.13-22.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# rpm -ql at        &lt;==查看at安装完成后生成的所有文件</span><br><span class="line">/etc/at.deny</span><br><span class="line">/etc/pam.d/atd</span><br><span class="line">/etc/sysconfig/atd</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/atq</span><br><span class="line">/usr/bin/atrm</span><br><span class="line">/usr/bin/batch</span><br><span class="line">/usr/lib/systemd/system/atd.service</span><br><span class="line">/usr/sbin/atd</span><br><span class="line">/usr/sbin/atrun</span><br><span class="line">/usr/share/doc/at-3.1.13</span><br><span class="line">/usr/share/doc/at-3.1.13/ChangeLog</span><br><span class="line">/usr/share/doc/at-3.1.13/Copyright</span><br><span class="line">/usr/share/doc/at-3.1.13/Problems</span><br><span class="line">/usr/share/doc/at-3.1.13/README</span><br><span class="line">/usr/share/doc/at-3.1.13/timespec</span><br><span class="line">/usr/share/man/man1/at.1.gz</span><br><span class="line">/usr/share/man/man1/atq.1.gz</span><br><span class="line">/usr/share/man/man1/atrm.1.gz</span><br><span class="line">/usr/share/man/man1/batch.1.gz</span><br><span class="line">/usr/share/man/man5/at.allow.5.gz</span><br><span class="line">/usr/share/man/man5/at.deny.5.gz</span><br><span class="line">/usr/share/man/man8/atd.8.gz</span><br><span class="line">/usr/share/man/man8/atrun.8.gz</span><br><span class="line">/var/spool/at</span><br><span class="line">/var/spool/at/.SEQ</span><br><span class="line">/var/spool/at/spool</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# rpm -qi at        &lt;==查看at包的相关信息</span><br><span class="line">Name        : at</span><br><span class="line">Version     : 3.1.13</span><br><span class="line">Release     : 22.el7</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: Wed 23 Aug 2017 09:45:15 AM CST</span><br><span class="line">Group       : System Environment/Daemons</span><br><span class="line">Size        : 97524</span><br><span class="line">License     : GPLv3+ and GPLv2+ and ISC and MIT and Public Domain</span><br><span class="line">Signature   : RSA/SHA256, Mon 21 Nov 2016 01:07:58 AM CST, Key ID 24c6a8a7f4a80eb5</span><br><span class="line">Source RPM  : at-3.1.13-22.el7.src.rpm</span><br><span class="line">Build Date  : Sun 06 Nov 2016 02:16:27 AM CST</span><br><span class="line">Build Host  : worker1.bsys.centos.org</span><br><span class="line">Relocations : (not relocatable)</span><br><span class="line">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class="line">Vendor      : CentOS</span><br><span class="line">URL         : http://ftp.debian.org/debian/pool/main/a/at</span><br><span class="line">Summary     : Job spooling tools</span><br><span class="line">Description :</span><br><span class="line">At and batch read commands from standard input or from a specified</span><br><span class="line">file. At allows you to specify that a command will be run at a</span><br><span class="line">particular time. Batch will execute commands when the system load</span><br><span class="line">levels drop to a particular level. Both commands use user&apos;s shell.</span><br><span class="line"></span><br><span class="line">You should install the at package if you need a utility for</span><br><span class="line">time-oriented job control. Note: If it is a recurring job that will</span><br><span class="line">need to be repeated at the same time every day/week, etc. you should</span><br><span class="line">use crontab instead.</span><br></pre></td></tr></table></figure><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><h4 id="范例一："><a href="#范例一：" class="headerlink" title="范例一："></a>范例一：</h4><p>再过5分钟后，将/root/.bashrc寄给root自己</p><pre><code>[root@centos6 ~]# at now + 5 minutes        &lt;==记得加sat&gt; /bin/mail/ root -s &quot;testing at job&quot; &lt; /root/.bashrc     &lt;==尽量写绝对路径，因为计划任务的PATH（环境变量）和我们当前bash的PATH是有区别的at&gt; &lt;EOT&gt;job 6 at 2017-08-23 16:49</code></pre><h4 id="范例二："><a href="#范例二：" class="headerlink" title="范例二："></a>范例二：</h4><p>将上述的第6项工作内容列出来查阅</p><pre><code>[root@centos6 ~]# at -c 6#!/bin/sh# atrun uid=0 gid=0# mail root 0umask 22HOSTNAME=centos6.haiyun.com; export HOSTNAMESELINUX_ROLE_REQUESTED=; export SELINUX_ROLE_REQUESTEDSHELL=/bin/bash; export SHELLHISTSIZE=1000; export HISTSIZESSH_CLIENT=192.168.8.1\ 60005\ 22; export SSH_CLIENTSELINUX_USE_CURRENT_RANGE=; export SELINUX_USE_CURRENT_RANGESSH_TTY=/dev/pts/0; export SSH_TTYUSER=root; export USER。。。此处省略一些环境变量MAIL=/var/spool/mail/root; export MAILPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin; export PATHPWD=/root; export PWDLANG=en_US.UTF-8; export LANGSELINUX_LEVEL_REQUESTED=; export SELINUX_LEVEL_REQUESTEDHISTCONTROL=ignoredups; export HISTCONTROLSHLVL=1; export SHLVLHOME=/root; export HOMELOGNAME=root; export LOGNAMECVS_RSH=ssh; export CVS_RSHSSH_CONNECTION=192.168.8.1\ 60005\ 192.168.8.128\ 22; export SSH_CONNECTIONLESSOPEN=\|\|/usr/bin/lesspipe.sh\ %s; export LESSOPENG_BROKEN_FILENAMES=1; export G_BROKEN_FILENAMEScd /root || {     echo &apos;Execution directory inaccessible&apos; &gt;&amp;2     exit 1}${SHELL:-/bin/sh} &lt;&lt; &apos;marcinDELIMITER2eb18f7b&apos;/bin/mail/ root -s &quot;testing at job&quot; &lt; /root/.bashrc     &lt;==命令marcinDELIMITER2eb18f7b</code></pre><h4 id="范例三："><a href="#范例三：" class="headerlink" title="范例三："></a>范例三：</h4><p>计划在2017-10-08 20:00关机</p><pre><code>[root@centos6 ~]# at 20:00 2017-10-08at&gt; /sbin/poweroff at&gt; &lt;EOT&gt;job 7 at 2017-10-08 20:00</code></pre><h4 id="范例四："><a href="#范例四：" class="headerlink" title="范例四："></a>范例四：</h4><p>删除上面刚刚创建的计划任务</p><pre><code>[root@centos6 ~]# at -l         &lt;==查看计划任务列表1    2017-08-24 12:00 a root7    2017-10-08 20:00 a root3    2017-08-24 12:00 a root2    2017-08-24 15:00 a root[root@centos6 ~]# at -d 7       &lt;==删除计划任务7[root@centos6 ~]# at -l         &lt;==再次查看已被删除1    2017-08-24 12:00 a root3    2017-08-24 12:00 a root2    2017-08-24 15:00 a root</code></pre><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><code>atm -m</code> 命令，当任务被完成之后，将给用户发送邮件，即使没有标准输出。因为有些命令是没有标准输出的如：<code>useradd</code>，那么如果我们计划任务中写useradd添加用户，我们是看不到输出的，邮件也没有，此时<code>-m</code>选项就可以强制用户发送邮件。</li><li>计划任务中，要使用绝对路径</li><li><code>at.allow</code>要比<code>at.deny</code>优先级高。如果两个文件同时存在的话，那么<code>at.allow</code>生效。如果都不存在,那么就只有root用户可以使用at</li><li><code>at</code>命令是有<code>SUID</code>权限的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# ll /usr/bin/at</span><br><span class="line">-rwsr-xr-x. 1 root root 54464 Mar 22 08:13 /usr/bin/at</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> at命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cron </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>脚本实例一：创建脚本的脚本</title>
      <link href="/2017/08/25/Linux-shell-script1/"/>
      <url>/2017/08/25/Linux-shell-script1/</url>
      <content type="html"><![CDATA[<h3 id="脚本实例一：创建脚本的脚本"><a href="#脚本实例一：创建脚本的脚本" class="headerlink" title="脚本实例一：创建脚本的脚本"></a>脚本实例一：创建脚本的脚本</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">read -p "please input scrpit name: " NAME# 输入脚本名</span><br><span class="line">[ -f $NAME ] &amp;&amp;  &#123; echo "$NAME" is already exists &amp;&amp; exit 100 ; &#125;# 判断文件是否存在，如果存在就退出</span><br><span class="line">touch $NAME &amp;&gt; /dev/null            # 创建文件</span><br><span class="line">chmod +x $NAME &amp;&gt; /dev/null # 添加执行权限</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 向脚本输入一下描述内容</span><br><span class="line">cat &gt; $NAME &lt;&lt; END</span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>——————————————————————————————————————————————</span><br><span class="line"><span class="meta">#</span> File name: $NAME</span><br><span class="line"><span class="meta">#</span> Revision: 2.0</span><br><span class="line"><span class="meta">#</span> Date: `date '+%F %T'`</span><br><span class="line"><span class="meta">#</span> Author: houhaiyun</span><br><span class="line"><span class="meta">#</span> Email: houhaiyun18@163.com</span><br><span class="line"><span class="meta">#</span> Website: http://www.ihaiyun.cc/</span><br><span class="line"><span class="meta">#</span> Copyright: @2017 haiyun</span><br><span class="line"><span class="meta">#</span> License: LGPL v3</span><br><span class="line"><span class="meta">#</span> Description:  </span><br><span class="line"><span class="meta">#</span>——————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">vim + $NAME # 编辑完成直接打开脚本文件且定位到最后一行，方便编辑</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> END———————————————————————————————————————————</span><br></pre></td></tr></table></figure><h3 id="脚本功能："><a href="#脚本功能：" class="headerlink" title="脚本功能："></a>脚本功能：</h3><p>使用此脚本创建的脚本自动添加执行权限，并添加描述信息，最后直接打开脚本文件，直接编辑。是不是很方便呢？</p><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-shell-script1-1.gif" title="脚本执行"></center>]]></content>
      
      <categories>
          
          <category> Shell脚本 </category>
          
          <category> 脚本实例一 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本实例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell 变量简介</title>
      <link href="/2017/08/20/Linux-Shell-bianliang/"/>
      <url>/2017/08/20/Linux-Shell-bianliang/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-Shell-bianliang.jpg" title="Bash"></center><a id="more"></a><h3 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h3><p>在程序设计中，变数（英语：<code>variable，scalar</code>）是指一个包含部分已知或未知数值或资讯（即一个值）之储存位址，以及相对应之符号名称（识别字）。通常使用变数名称参照储存值；将名称和内容分开能让被使用的名称独立于所表示的精确讯息之外。电脑源代码中的识别字能在执行期间绑扎一个值，且该变数的值可能在程式执行期间改变。 程序设计中的变数不一定能直接对应到数学中所谓的变数之概念。在程序设计中，变数的值不一定要为方程或数学公式之一部分。程序设计中的变数可使用在一段可重复的程序：在一处赋值，然后使用于另一处，接着在一次赋值，且以相同方式再使用一次（见迭代）。程序设计中的变数通常会给定一个较长的名称，以描述其用途；数学中的变数通常较为简洁，只给定一、两个字母，以方便抄写及操作。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>强类型：变量不经过强制转换，它永远是这个数据类型，不允许隐式的类型转换。一般定义变量时必须指定类型、参与运算必须符合类型要求；调用未声明变量会产生错误 <ul><li>如：<code>java</code>，<code>c#</code></li></ul></li><li>弱类型：语言的运行时会隐式做数据类型转换。无须指定类型，默认均为字符型；参与运算会自动进行隐式类型转换；变量无须事先定义可直接调用 <ul><li>如：<code>bash</code>不支持浮点数，<code>php</code></li></ul></li></ul><h3 id="shell变量命名规则"><a href="#shell变量命名规则" class="headerlink" title="shell变量命名规则"></a>shell变量命名规则</h3><ol><li>不能使程序中的保留字：例如<code>if</code>, <code>for</code></li><li>只能使用数字、字母及下划线，且不能以数字开头</li><li>见名知义</li><li>统一命名规则：驼峰命名法 </li></ol><h3 id="shell变量种类"><a href="#shell变量种类" class="headerlink" title="shell变量种类"></a>shell变量种类</h3><p><strong>根据变量的生效范围等标准：</strong></p><ul><li>本地变量：生效范围为当前<code>shell</code>进程；对当前<code>shell</code>之外的其它<code>shell</code>进程，包括当前<code>shell</code>的子<code>shell</code>进程均无效 </li><li>环境变量：生效范围为当前<code>shell</code>进程及其子进程 </li><li>局部变量：生效范围为当前<code>shell</code>进程中某代码片断(通常指函数) </li><li>位置变量： <code>$1</code>, <code>$2</code>, …来表示，用于让脚本在脚本代码中调用通过命令行传递给它的参数 </li><li>特殊变量： <code>$?</code>, <code>$0</code>, <code>$*</code>, <code>$@</code>, <code>$#</code>,<code>$$</code> </li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">维基百科：变量</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell变量 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>硬盘结构</title>
      <link href="/2017/08/02/Linux-Disk-jiegou/"/>
      <url>/2017/08/02/Linux-Disk-jiegou/</url>
      <content type="html"><![CDATA[<h3 id="硬盘盘结构"><a href="#硬盘盘结构" class="headerlink" title="硬盘盘结构"></a>硬盘盘结构</h3><p>硬盘的物理结构一般由磁头与碟片、电动机、主控芯片与排线等部件组成；当主电动机带动碟片旋转时，副电动机带动一组（<strong>磁头</strong>）到相对应的碟片上并确定读取正面还是反面的碟面，磁头悬浮在碟面上画出一个与碟片同心的圆形轨道（<strong>磁轨</strong>或称<strong>柱面</strong>），这时由磁头的磁感线圈感应碟面上的磁性与使用硬盘厂商指定的读取时间或数据间隔定位<strong>扇区</strong>，从而得到该扇区的数据内容；</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-Disk-jiegou-1.jpg" title="硬盘结构"></center><ul><li>磁道</li></ul><p>当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道（Track）。</p><ul><li>柱面</li></ul><p>在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面（Cylinder）。</p><ul><li>扇区</li></ul><p>磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector）。硬盘的第一个扇区，叫做引导扇区。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98#.E7.89.A9.E7.90.86.E7.BB.93.E6.9E.84" target="_blank" rel="noopener">维基百科：硬盘</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 磁盘管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>硬盘</title>
      <link href="/2017/08/01/Linux-Disk/"/>
      <url>/2017/08/01/Linux-Disk/</url>
      <content type="html"><![CDATA[<h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><p>机械硬盘（<code>HDD</code>）：<code>Hard Disk Drive</code>，即是传统普通硬盘，主要由：盘片，磁头，盘片转轴及控制电机，磁头控制器，数据转换器，接口，缓存等几个部分组成。机械硬盘中所有的盘片都装在一个旋转轴上，每张盘片之间是平行的，在每个盘片的存储面上有一个磁头，磁头与盘片之间的距离比头发丝的直径还小，所有的磁头联在一个磁头控制器上，由磁头控制器负责各个磁头的运动。磁头可沿盘片的半径方向运动，加上盘片每分钟几千转的高速旋转，磁头就可以定位在盘片的指定位置上进行数据的读写操作。数据通过磁头由电磁流来改变极性方式被电磁流写到磁盘上，也可以通过相反方式读取。硬盘为精密设备，进入硬盘的空气必须过滤。</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-Disk-1.jpg" title="机械硬盘"></center><h4 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h4><p>硬盘按数据接口不同，大致分为<code>ATA</code>（<code>IDE</code>）和<code>SATA</code>以及<code>SCSI</code>和<code>SAS</code>。接口速度不是实际硬盘数据传输的速度，目前非基于闪存技术的硬盘数据实际传输速度一般不会超过300MB/s。</p><p><code>ATA</code>，全称<code>Advanced Technology Attachment</code>，是用传统的<code>40-pin</code>并口数据线连接主板与硬盘的，接口速度最大为133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐渐被<code>SATA</code>所取代。</p><p><code>SATA</code>，全称<code>Serial ATA</code>，也就是使用串口的<code>ATA</code>接口，因抗干扰性强，且对数据线的长度要求比<code>ATA</code>低很多，支持热插拔等功能，<code>SATA-II</code>的接口速度为<code>300MiB/s</code>，而新的<code>SATA-III</code>标准可达到<code>600MiB/s</code>的传输速度。<code>SATA</code>的数据线也比<code>ATA</code>的细得多，有利于机箱内的空气流通，整理线材也比较方便。</p><p><code>SCSI</code>，全称是<code>Small Computer System Interface</code>（小型机系统接口），经历多代的发展，从早期的<code>SCSI-II</code>，到目前的<code>Ultra320 SCSI</code>以及<code>Fiber-Channel</code>（光纤通道），接口型式也多种多样。<code>SCSI</code>硬盘广为工作站级个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速<code>15000rpm</code>的高转速，且资料传输时<code>CPU</code>占用率较低，但是单价也比相同容量的<code>ATA</code>及<code>SATA</code>硬盘更加昂贵。</p><p><code>SAS</code>（<code>Serial Attached SCSI</code>）是新一代的<code>SCSI</code>技术，和<code>SATA</code>硬盘相同，都是采取序列式技术以获得更高的传输速度，可达到<code>6Gb/s</code>。此外也透过缩小连接线改善系统内部空间等。此外，由于<code>SAS</code>硬盘可以与<code>SATA</code>硬盘共享同样的背板，因此在同一个<code>SAS</code>存储系统中，可以用<code>SATA</code>硬盘来取代部分昂贵的<code>SAS</code>硬盘，节省整体的存储成本。但<code>SATA</code>存储系统并不能连接<code>SAS</code>硬盘。</p><p><code>FC</code>（<code>Fibre Channel</code>，光纤通道接口），拥有此接口的硬盘在使用光纤联接时具有热插拔性、高速带宽（<code>4Gb/s</code>或<code>10Gb/s</code>）、远程连接等特点；内部传输速率也比普通硬盘更高。限制于其高昂的售价，通常用于高端服务器领域。</p><h5 id="RPM转速"><a href="#RPM转速" class="headerlink" title="RPM转速"></a>RPM转速</h5><p>主要用于表征机械转子的转速，硬盘转速也可用此表示。</p><p><code>RPM =round per minute</code> 每分钟多少转</p><h4 id="电源接口"><a href="#电源接口" class="headerlink" title="电源接口"></a>电源接口</h4><p><code>3.5</code>寸的台式机硬盘，与<code>ATA</code>配合使用的是“<code>D形4针电源接口</code>”（俗称“<code>大4pin</code>”），由<code>Molex</code>公司设计并持有专利；而<code>SATA</code>接口也有相应的<code>SATA</code>电源线。</p><p><code>2.5</code>寸的笔记本电脑用硬盘，可直接由数据口供电，不需要额外的电源接口。在插上外接的便携式硬盘盒之后，由计算机外部的<code>USB</code>接口提供电力来源，而单个<code>USB</code>接口供电约为<code>4~5V 500mA</code>，若移动硬盘盒用电需求较高，有时需要接上两个<code>USB</code>接口才能使用，否则，需要外接电源供电。但如今多数新型硬盘盒（使用<code>2.5寸</code>或以下硬盘）已可方便地使用单个<code>USB</code>口供电。</p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><p>固态硬盘（<code>SSD</code>）： <code>Solid State Drive</code>，用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元（<code>FLASH</code>芯片、 <code>DRAM</code>芯片）组成。固态硬盘在接口的规范和定义、功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上也与普通硬盘一致。</p><p>本文中只对固态硬盘简单了解。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Disk-2.jpg" title="固态硬盘"></center>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 硬盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用户组管理相关命令</title>
      <link href="/2017/07/23/User-Administration/"/>
      <url>/2017/07/23/User-Administration/</url>
      <content type="html"><![CDATA[<h3 id="用户和组管理命令"><a href="#用户和组管理命令" class="headerlink" title="用户和组管理命令"></a>用户和组管理命令</h3><p><strong>用户管理命令</strong></p><ul><li>useradd：新增用户</li><li>usermod：修改用户属性</li><li>userdel：删除用户</li><li>查看用户相关ID信息</li><li>切换用户或以其他用户身份执行命令</li><li>设置密码</li><li>修改用户密码策略</li><li>用户相关的其它命令</li></ul><p><strong>组帐号维护命令</strong></p><ul><li>groupadd：新增组</li><li>groupmod：修改组属性</li><li>groupdel：删除组</li><li>gpasswd：更改组密码</li><li>newgrp：临时切换主组</li><li>更改和查看组成员</li><li>将用户加入组的几种方法</li><li>多个用户添加到一个组</li></ul><a id="more"></a><h3 id="新增用户：useradd"><a href="#新增用户：useradd" class="headerlink" title="新增用户：useradd"></a>新增用户：useradd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">useradd [options] LOGIN</span><br><span class="line">    -u UID: [UID_MIN, UID_MAX]定义在/etc/login.defs</span><br><span class="line">        例如：指定UID为999999</span><br><span class="line">        [root@centos7 ~]# useradd -u 999999 hello</span><br><span class="line">        [root@centos7 ~]# id hello</span><br><span class="line">        uid=999999(hello) gid=10000(hello) groups=10000(hello)</span><br><span class="line"></span><br><span class="line">    -o 配合-u选项，不检查UID的唯一性</span><br><span class="line">        例如：</span><br><span class="line">        [root@centos7 ~]# useradd -o  -u  999999 hai</span><br><span class="line">        [root@centos7 ~]# id hello</span><br><span class="line">        uid=999999(hello) gid=10000(hello) groups=10000(hello)</span><br><span class="line">        [root@centos7 ~]# id hai</span><br><span class="line">        uid=999999(hello) gid=10000(hello) groups=10000(hello)</span><br><span class="line"></span><br><span class="line">    -g GID：指明用户所属基本组，可为组名，也可以GID</span><br><span class="line">    -c &quot;COMMENT&quot;：用户的注释信息</span><br><span class="line">    -d HOME_DIR: 以指定的路径(不存在)为家目录</span><br><span class="line">    -s SHELL: 指明用户的默认shell程序</span><br><span class="line">        可用列表在/etc/shells文件中</span><br><span class="line">    -G GROUP1[,GROUP2,...]：为用户指明附加组，组须事先存在</span><br><span class="line">    -N 不创建私用组做主组，使用users组做主组</span><br><span class="line">    -r: 创建系统用户 CentOS 6: ID&lt;500， CentOS 7: ID&lt;1000</span><br><span class="line">    </span><br><span class="line">    例如：创建 UID为123456，主组为user1 付加组为jerr 家目录为 /app/user3 shell为/bin/csh </span><br><span class="line">    [root@centos7 ~]# useradd -o  -u 123456 -g user1 -G jerr -d /app/user3 -s /bin/csh -c &quot;good&quot; user3</span><br></pre></td></tr></table></figure><h3 id="新增用户默认值"><a href="#新增用户默认值" class="headerlink" title="新增用户默认值"></a>新增用户默认值</h3><ul><li>默认值设定：/etc/default/useradd文件中</li><li>显示或更改默认设置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">useradd -D  显示新建用户默认属性</span><br><span class="line">    例如：</span><br><span class="line">    [root@centos7 ~]# useradd -D</span><br><span class="line">    GROUP=100</span><br><span class="line">    HOME=/home</span><br><span class="line">    INACTIVE=-1</span><br><span class="line">    EXPIRE=</span><br><span class="line">    SHELL=/bin/bash</span><br><span class="line">    SKEL=/etc/skel</span><br><span class="line">    CREATE_MAIL_SPOOL=yes</span><br><span class="line"></span><br><span class="line">useradd –D -s SHELL     #修改新建用户的默认shell</span><br><span class="line">useradd –D –b BASE_DIR  #修改新建用户的默认家目录</span><br><span class="line">useradd –D –g GROUP     #修改新建用户的默认组</span><br></pre></td></tr></table></figure><h3 id="新建用户的相关文件和命令"><a href="#新建用户的相关文件和命令" class="headerlink" title="新建用户的相关文件和命令"></a>新建用户的相关文件和命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/default/useradd # 新建用户默认配置文件</span><br><span class="line">/etc/skel/*  # 新建用户的文件，例如：</span><br><span class="line">    [root@centos6 ~]# ls -a /etc/skel/</span><br><span class="line">    .  ..  .bash_logout  .bash_profile  .bashrc  .gnome2  .mozilla</span><br><span class="line"></span><br><span class="line">/etc/login.defs # 用户登陆默认文件</span><br><span class="line">newusers passwd格式文件 批量创建用户 </span><br><span class="line">chpasswd 批量修改用户口令</span><br></pre></td></tr></table></figure><h3 id="用户属性修改：usermod"><a href="#用户属性修改：usermod" class="headerlink" title="用户属性修改：usermod"></a>用户属性修改：usermod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">usermod [OPTION] login</span><br><span class="line">    -u UID: 新UID</span><br><span class="line">    -g GID: 新主组</span><br><span class="line">    -G GROUP1[,GROUP2,...[,GROUPN]]]：新附加组，原来的</span><br><span class="line">附加组将会被覆盖；若保留原有，则要同时使用-a选项</span><br><span class="line">    -s SHELL：新的默认SHELL</span><br><span class="line">    -c &apos;COMMENT&apos;：新的注释信息</span><br><span class="line">    -d HOME: 新家目录不会自动创建；若要创建新家目录并移</span><br><span class="line">    动原家数据，同时使用-m选项</span><br><span class="line">    -l login_name: 新的名字；</span><br><span class="line">    -L: lock指定用户,在/etc/shadow 密码栏的增加 !</span><br><span class="line">    -U: unlock指定用户,将 /etc/shadow 密码栏的 ! 拿掉</span><br><span class="line">    -e YYYY-MM-DD: 指明用户账号过期日期</span><br><span class="line">    -f INACTIVE: 设定非活动期限</span><br><span class="line"></span><br><span class="line">范例1：修改haiyun用户的UID为6666</span><br><span class="line">    [root@centos7 ~]# id haiyun </span><br><span class="line">    uid=1004(haiyun) gid=1004(haiyun) groups=1004(haiyun)</span><br><span class="line">    [root@centos7 ~]# usermod -u 6666 haiyun</span><br><span class="line">    [root@centos7 ~]# id haiyun</span><br><span class="line">    uid=6666(haiyun) gid=1004(haiyun) groups=1004(haiyun)</span><br><span class="line"></span><br><span class="line">范例2：修改用户haiyun的说明列，加上“haiyun&apos;s test”</span><br><span class="line">    [root@centos7 ~]# usermod -c &quot;haiyun&apos;s test&quot; haiyun</span><br><span class="line">    [root@centos7 ~]# getent  passwd haiyun</span><br><span class="line">    haiyun<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">6666:1004:haiyun&apos;s test:/home/haiyun:/bin/bash</span><br><span class="line"></span><br><span class="line">范例3：修改用户haiyun密码在2017年8月14日失效</span><br><span class="line">    [root@centos7 ~]# usermod -e 2017-08-15 haiyun </span><br><span class="line">    [root@centos7 ~]# getent shadow haiyun</span><br><span class="line">    haiyun:$6$QzvQ4qfN$kbiUQYmdV9oehOHnXmQ/DYW83czB..nhEWhxqo.v25W6kiBxBWFEN0kLuraSSxwDdX340HcK5zWULX7GzpGLV.:17391:0:99999:7::17393:        &lt;==第8个字段代表密码失效时间17393，是使用1970年以来的总日数设置</span><br><span class="line"></span><br><span class="line">范例4：新建用户haiyun这个系统账号时并没有给予主文件夹，请新建他的主文件夹</span><br><span class="line">[root@centos7 ~]# ll -d ~haiyun                 &lt;==haiyun用户确实没有家目录</span><br><span class="line">ls: cannot access /home/haiyun: No such file or directory</span><br><span class="line">[root@centos7 ~]# cp -a /etc/skel /home/haiyun      &lt;==复制模板文件</span><br><span class="line">[root@centos7 ~]# chown -R haiyun:haiyun /home/haiyun/  &lt;==修改所有者和所属组</span><br><span class="line">[root@centos7 ~]# chmod 700 /home/haiyun/           &lt;==修改权限</span><br><span class="line">[root@centos7 ~]# ll -a ~haiyun                     &lt;==查看</span><br><span class="line">total 12</span><br><span class="line">drwx------. 3 haiyun haiyun  78 Jul 14 11:16 .</span><br><span class="line">drwxr-xr-x. 6 root   root    71 Aug 13 14:37 ..</span><br><span class="line">-rw-r--r--. 1 haiyun haiyun  18 Aug  3  2016 .bash_logout</span><br><span class="line">-rw-r--r--. 1 haiyun haiyun 193 Aug  3  2016 .bash_profile</span><br><span class="line">-rw-r--r--. 1 haiyun haiyun 231 Aug  3  2016 .bashrc</span><br><span class="line">drwxr-xr-x. 4 haiyun haiyun  39 Jul 14 11:16 .mozilla</span><br></pre></td></tr></table></figure><h3 id="删除用户：userdel"><a href="#删除用户：userdel" class="headerlink" title="删除用户：userdel"></a>删除用户：userdel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userdel [OPTION]... login</span><br><span class="line">    -r: 删除用户家目录</span><br><span class="line"></span><br><span class="line">范例1：删除用户haiyun，且把她的家目录一块删除</span><br><span class="line">[root@centos7 ~]# userdel -r haiyun</span><br></pre></td></tr></table></figure><h3 id="查看用户相关的ID信息"><a href="#查看用户相关的ID信息" class="headerlink" title="查看用户相关的ID信息"></a>查看用户相关的ID信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">id [OPTION]... [USER]</span><br><span class="line">    -u: 显示UID</span><br><span class="line">    -g: 显示GID</span><br><span class="line">    -G: 显示用户所属的组的ID</span><br><span class="line">    -n: 显示名称，需配合ugG使用</span><br><span class="line"></span><br><span class="line">范例1：查看haiyun用户的UID</span><br><span class="line">    [root@centos7 ~]# id -u haiyun</span><br><span class="line">    1004</span><br><span class="line"></span><br><span class="line">范例2：查看haiyun用户的GID</span><br><span class="line">    [root@centos7 ~]# id -g haiyun</span><br><span class="line">    1004</span><br><span class="line"></span><br><span class="line">范例3：根据UID 1004查看是哪个用户</span><br><span class="line">    [root@centos7 ~]# id -n 1004 -u </span><br><span class="line">    haiyun</span><br></pre></td></tr></table></figure><h3 id="切换用户或以其他用户身份执行命令"><a href="#切换用户或以其他用户身份执行命令" class="headerlink" title="切换用户或以其他用户身份执行命令"></a>切换用户或以其他用户身份执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">su [options...] [-] [user [args...]]</span><br><span class="line">切换用户的方式：</span><br><span class="line">    su UserName：非登录式切换，即不会读取目标用户的</span><br><span class="line">配置文件，不改变当前工作目录</span><br><span class="line">    su - UserName：登录式切换，会读取目标用户的配置文件，切换至家目录，完全切换</span><br><span class="line">root su至其他用户无须密码；非root用户切换时需要密码</span><br><span class="line">换个身份执行命令：</span><br><span class="line">    su [-] UserName -c &apos;COMMAND&apos;</span><br><span class="line">选项： -l --login</span><br><span class="line">    su -l UserName 相当于 su - UserName</span><br><span class="line">    </span><br><span class="line">范例1：以非登陆方式切换到用户haiyun</span><br><span class="line">    [root@centos7 ~]# su haiyun</span><br><span class="line">    [haiyun@centos7 root]$ pwd</span><br><span class="line">    /root</span><br><span class="line"></span><br><span class="line">范例2：以登陆方式切换到用户haiyun</span><br><span class="line">    [root@centos7 ~]# su - haiyun</span><br><span class="line">    Last login: Sun Aug 13 14:46:40 CST 2017 on pts/0</span><br><span class="line">    [haiyun@centos7 ~]$ pwd</span><br><span class="line">    /home/haiyun</span><br><span class="line"></span><br><span class="line">范例3：切换到haiyun用户，查看root目录下的内容，使用su 执行命令ls</span><br><span class="line">    [root@centos7 ~]# su haiyun</span><br><span class="line">    [haiyun@centos7 root]$ ls</span><br><span class="line">    ls: cannot open directory .: Permission denied</span><br><span class="line">    [haiyun@centos7 root]$ su - -c &quot;ls&quot;</span><br><span class="line">    Password: </span><br><span class="line">    anaconda-ks.cfg  Documents  initial-setup-ks.cfg  Pictures  Templates</span><br><span class="line">    Desktop Downloads  Music  Public    Videos</span><br></pre></td></tr></table></figure><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">passwd [OPTIONS] UserName: 修改指定用户的密码，仅root用户权限</span><br><span class="line">passwd: 修改自己的密码</span><br><span class="line">常用选项：</span><br><span class="line">    -l:锁定指定用户</span><br><span class="line">    -u:解锁指定用户</span><br><span class="line">    -e:强制用户下次登录修改密码</span><br><span class="line">    -n mindays: 指定最短使用期限</span><br><span class="line">    -x maxdays：最大使用期限</span><br><span class="line">    -w warndays：提前多少天开始警告</span><br><span class="line">    -i inactivedays：非活动期限</span><br><span class="line">    --stdin：从标准输入接收用户密码</span><br><span class="line">    echo &quot;PASSWORD&quot; | passwd --stdin USERNAME</span><br><span class="line"></span><br><span class="line">范例1：请root用户为haiyun用户设置密码</span><br><span class="line">    [root@centos7 ~]# passwd haiyun         &lt;==为haiyun设置密码，后面不跟用户就是为自己设置密码</span><br><span class="line">    Changing password for user haiyun.</span><br><span class="line">    New password: </span><br><span class="line">    BAD PASSWORD: The password is shorter than 8 characters     &lt;==密码太过简单或太短的报错！</span><br><span class="line">    Retype new password: </span><br><span class="line">    passwd: all authentication tokens updated successfully.     &lt;==虽然简单或短但还是设置成功了！</span><br><span class="line"></span><br><span class="line">范例2：haiyun为自己设定密码</span><br><span class="line">    [haiyun@centos7 ~]$ passwd </span><br><span class="line">    Changing password for user haiyun.</span><br><span class="line">    Changing password for haiyun.</span><br><span class="line">    (current) UNIX password:        &lt;==此处输入原来的旧密码，如果旧密码输入不通过的话是无法设置新密码的！</span><br><span class="line">    New password:                   &lt;==输入新密码，密码不通过，少于8位（要符合密码复杂策略）</span><br><span class="line">    BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">    New password:                   &lt;==重新输入</span><br><span class="line">    Retype new password:            &lt;==已通过再次输入</span><br><span class="line">    passwd: all authentication tokens updated successfully.     &lt;==设置成功</span><br><span class="line"></span><br><span class="line">范例3：使用标准输入来设置密码</span><br><span class="line">    [root@centos7 ~]# echo &quot;haiyun&quot; | passwd --stdin haiyun</span><br><span class="line">    Changing password for user haiyun.</span><br><span class="line">    passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line">范例4：管理haiyun的密码，使其具有30天更改、10天密码失效的设置</span><br><span class="line">    [root@centos7 ~]# passwd -S haiyun</span><br><span class="line">    haiyun PS 2017-08-13 0 99999 7 -1 (Password set, SHA512 crypt.)</span><br><span class="line">    # 以上依次为：密码新建时间、密码最短有效期(0)、密码最长有效期(99999)、密码过期警告天数(7)、密码失效时间(-1：代表永久不会失效)、括号里的内容代表密码已设置使用SHA512加密</span><br><span class="line">    [root@centos7 ~]# passwd -x 30 -i 10 haiyun</span><br><span class="line">    Adjusting aging data for user haiyun.</span><br><span class="line">    passwd: Success</span><br><span class="line">    [root@centos7 ~]# passwd -S haiyun</span><br><span class="line">    haiyun PS 2017-08-13 0 30 7 10 (Password set, SHA512 crypt.)</span><br><span class="line"></span><br><span class="line">范例5：让haiyun的账号失效，查看完毕再让他失效</span><br><span class="line">    [root@centos7 ~]# passwd -l haiyun      </span><br><span class="line">    Locking password for user haiyun.</span><br><span class="line">    passwd: Success</span><br><span class="line">    [root@centos7 ~]# passwd -S haiyun</span><br><span class="line">    haiyun LK 2017-08-13 0 30 7 10 (Password locked.)   &lt;==可以看到密码已失效</span><br><span class="line">    [root@centos7 ~]# getent shadow haiyun</span><br><span class="line">    haiyun:!!$6$ExWq7rry$kmJHHH8TeTzLH87b9x1iRRqDUwgNGDLmd9qcF/JxoX6rgkSfrmz7cCgZvbCOri0evGe8Yh51RCLnDW6I6Pfqk1:17391:0:30:7:10::        &lt;==在密码字段前面家里两个!!</span><br></pre></td></tr></table></figure><h3 id="修改用户密码策略"><a href="#修改用户密码策略" class="headerlink" title="修改用户密码策略"></a>修改用户密码策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">chage [-ldEImMW]帐号名</span><br><span class="line">选项与参数：</span><br><span class="line">    -l ：列出该帐号的详细密码参数；</span><br><span class="line">    -d ：后面接日期，修改shadow 第三栏位(最近一次更改密码的日期)，格式YYYY-MM-DD</span><br><span class="line">    -E ：后面接日期，修改shadow 第八栏位(帐号失效日)，格式YYYY-MM-DD</span><br><span class="line">    -I ：后面接天数，修改shadow 第七栏位(密码失效日期)</span><br><span class="line">    -m ：后面接天数，修改shadow 第四栏位(密码最短保留天数)</span><br><span class="line">    -M ：后面接天数，修改shadow 第五栏位(密码多久需要进行变更)</span><br><span class="line">    -W ：后面接天数，修改shadow 第六栏位(密码过期前警告日期)</span><br><span class="line"></span><br><span class="line">范例1：列出haiyun的详细密码参数</span><br><span class="line">    [root@centos7 ~]# chage -l haiyun</span><br><span class="line">    Last password change: Aug 13, 2017</span><br><span class="line">    Password expires: Sep 12, 2017</span><br><span class="line">    Password inactive: Sep 22, 2017</span><br><span class="line">    Account expires: never</span><br><span class="line">    Minimum number of days between password change: 0</span><br><span class="line">    Maximum number of days between password change: 30</span><br><span class="line">    Number of days of warning before password expires: 7</span><br><span class="line"></span><br><span class="line">范例2：新建一个名为test的账号，该账号第一次登陆后使用默认密码，但必须要更改过密码后使用新密码才能够登陆系统使用bash环境</span><br><span class="line">    [root@centos7 ~]# useradd test</span><br><span class="line">    [root@centos7 ~]# echo &quot;test123&quot;|passwd --stdin test</span><br><span class="line">    Changing password for user test.</span><br><span class="line">    passwd: all authentication tokens updated successfully.</span><br><span class="line">    [root@centos7 ~]# chage -d 0 test</span><br><span class="line"></span><br><span class="line">范例3：尝试以test登陆的情况</span><br><span class="line">    WARNING: Your password has expired.</span><br><span class="line">    You must change your password now and login again!      </span><br><span class="line">    Changing password for user test.</span><br><span class="line">    Changing password for test.</span><br><span class="line">    (current) UNIX password:    &lt;==输入当前密码</span><br><span class="line">    New password:               &lt;==输入新密码，密码太短</span><br><span class="line">    BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">    New password:               &lt;==重新输入</span><br><span class="line">    Retype new password:        &lt;==再次输入</span><br><span class="line">    passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><h3 id="用户相关的其它命令"><a href="#用户相关的其它命令" class="headerlink" title="用户相关的其它命令"></a>用户相关的其它命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">finger [-s] username    #查阅用户相关信息</span><br><span class="line">选项与参数：</span><br><span class="line">    -s ：仅列出使用者的帐号、全名、终端机代号与登入时间等等；</span><br><span class="line">    -m ：列出与后面接的帐号相同者，而不是利用部分比对(包括全名部分)</span><br><span class="line">范例：查看用户haiyun的相关属性信息</span><br><span class="line">    [root@centos7 ~]# finger haiyun</span><br><span class="line">    Login: haiyun         Name: </span><br><span class="line">    Directory: /home/haiyun             Shell: /bin/bash</span><br><span class="line">    Last login Sun Aug 13 14:56 (CST) on pts/0</span><br><span class="line">    No mail.</span><br><span class="line">    No Plan.</span><br><span class="line"></span><br><span class="line">chfn [-foph] [帐号名]   #修改用户相关信息</span><br><span class="line">选项与参数：</span><br><span class="line">    -f ：后面接完整的大名；</span><br><span class="line">    -o ：您办公室的房间号码；</span><br><span class="line">    -p ：办公室的电话号码；</span><br><span class="line">    -h ：家里的电话号码！</span><br><span class="line"></span><br><span class="line">范例：修改haiyun的信息</span><br><span class="line">    [root@centos7 ~]# chfn haiyun</span><br><span class="line">    Changing finger information for haiyun.</span><br><span class="line">    Name []: haiyun</span><br><span class="line">    Office []: haiyun</span><br><span class="line">    Office Phone []: 100</span><br><span class="line">    Home Phone []: 101</span><br><span class="line">    </span><br><span class="line">    Finger information changed.</span><br><span class="line">    [root@centos7 ~]# finger haiyun</span><br><span class="line">    Login: haiyun         Name: haiyun</span><br><span class="line">    Directory: /home/haiyun             Shell: /bin/bash</span><br><span class="line">    Office: haiyun, 100Home Phone: 101</span><br><span class="line">    Last login Sun Aug 13 14:56 (CST) on pts/0</span><br><span class="line">    No mail.</span><br><span class="line">    No Plan.</span><br><span class="line"></span><br><span class="line">chsh [-ls]  #修改shell</span><br><span class="line">选项与参数：</span><br><span class="line">    -l ：列出目前系统上面可用的shell ，其实就是/etc/shells 的内容！</span><br><span class="line">    -s ：设定修改自己的Shell 啰</span><br><span class="line"></span><br><span class="line">范例1：列出当前系统上所有合法的shell</span><br><span class="line">    方法①：</span><br><span class="line">        [root@centos7 ~]# chsh -l</span><br><span class="line">        /bin/sh</span><br><span class="line">        /bin/bash</span><br><span class="line">        /sbin/nologin</span><br><span class="line">        /usr/bin/sh</span><br><span class="line">        /usr/bin/bash</span><br><span class="line">        /usr/sbin/nologin</span><br><span class="line">        /bin/tcsh</span><br><span class="line">        /bin/csh</span><br><span class="line">    方法②：</span><br><span class="line">        [root@centos7 ~]# cat /etc/shells </span><br><span class="line">        /bin/sh</span><br><span class="line">        /bin/bash</span><br><span class="line">        /sbin/nologin</span><br><span class="line">        /usr/bin/sh</span><br><span class="line">        /usr/bin/bash</span><br><span class="line">        /usr/sbin/nologin</span><br><span class="line">        /bin/tcsh</span><br><span class="line">        /bin/csh</span><br><span class="line"></span><br><span class="line">范例2：修改用户haiyun的shell为csh   </span><br><span class="line">    [root@centos7 ~]# chsh -s /bin/csh haiyun   &lt;==注意：不要随便修改shell</span><br><span class="line">    Changing shell for haiyun.</span><br><span class="line">    Shell changed.</span><br><span class="line">    [root@centos7 ~]# getent passwd haiyun</span><br><span class="line">    haiyun<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">1004:1004:haiyun,haiyun,100,101:/home/haiyun:/bin/csh</span><br></pre></td></tr></table></figure><h3 id="创建组：groupadd"><a href="#创建组：groupadd" class="headerlink" title="创建组：groupadd"></a>创建组：groupadd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> groupadd [OPTION]... group_name</span><br><span class="line">    -g GID: 指明GID号； [GID_MIN, GID_MAX]</span><br><span class="line">    -r: 创建系统组</span><br><span class="line">        CentOS 6: ID&lt;500</span><br><span class="line">        CentOS 7: ID&lt;1000</span><br><span class="line"></span><br><span class="line">范例1：新建一个名为group1的用户组</span><br><span class="line">    [root@centos7 ~]# groupadd group1 </span><br><span class="line">    [root@centos7 ~]# getent group group1</span><br><span class="line">    group1<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">1006:</span><br><span class="line"></span><br><span class="line">范例2：新建一个名为tset的系统组</span><br><span class="line">    [root@centos7 ~]#  groupadd -r tset</span><br><span class="line">    [root@centos7 ~]# getent group tset</span><br><span class="line">    tset<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">984:</span><br></pre></td></tr></table></figure><h3 id="修改组：groupmod"><a href="#修改组：groupmod" class="headerlink" title="修改组：groupmod"></a>修改组：groupmod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">组属性修改： groupmod</span><br><span class="line">groupmod [OPTION]... group</span><br><span class="line">    -n group_name: 新名字</span><br><span class="line">    -g GID: 新的GID</span><br><span class="line"></span><br><span class="line">范例：将刚才上个命令创建的group1名臣修改为mygroup，GID为666</span><br><span class="line">    [root@centos7 ~]# getent group group1</span><br><span class="line">    group1<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">1006:</span><br><span class="line">    [root@centos7 ~]# groupmod -g 666 -n mygroup group1 </span><br><span class="line">    [root@centos7 ~]# getent group mygroup</span><br><span class="line">    mygroup<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">666:</span><br></pre></td></tr></table></figure><h3 id="组删除：-groupdel"><a href="#组删除：-groupdel" class="headerlink" title="组删除： groupdel"></a>组删除： groupdel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupdel [groupname]</span><br><span class="line"></span><br><span class="line">范例：删除组mygroup</span><br><span class="line">[root@centos7 ~]# groupdel mygroup</span><br></pre></td></tr></table></figure><h3 id="更改组密码：gpasswd"><a href="#更改组密码：gpasswd" class="headerlink" title="更改组密码：gpasswd"></a>更改组密码：gpasswd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">gpasswd [OPTION] GROUP</span><br><span class="line">    -a user: 将user添加至指定组中</span><br><span class="line">    -d user: 从指定组中移除用户user</span><br><span class="line">    -A user1,user2,...: 设置有管理权限的用户列表</span><br><span class="line">    -M user1,user2：将某些账号加入这个用户组中</span><br><span class="line"></span><br><span class="line">范例1：新建一个用户组，名为testgroup且用户组交给haiyun管理</span><br><span class="line">[root@centos7 ~]# groupadd testgroup</span><br><span class="line">[root@centos7 ~]# gpasswd testgroup</span><br><span class="line">Changing the password for group testgroup</span><br><span class="line">New Password: </span><br><span class="line">Re-enter new password: </span><br><span class="line">[root@centos7 ~]# gpasswd -A haiyun testgroup   &lt;==加入用户组管理员为haiyun</span><br><span class="line">[root@centos7 ~]# getent gshadow testgroup</span><br><span class="line">testgroup:$6$jLCPW/52OqN/LV$XSUnOXNHbAnCTo.q1yTYeC.qvQqoXYs5oGC7kURAOW1AY755dYJQBJpieAQSFiiaQkgm2Akrf7FqIMMkQYrrX/:haiyun:</span><br><span class="line"></span><br><span class="line">范例2：以haiyun登陆系统，并且让他加入haiyun1，haiyun2成为testgroup成员</span><br><span class="line">[root@centos7 ~]# id haiyun1        &lt;==确认haiyun1存在且没有加入testgroup组</span><br><span class="line">uid=1006(haiyun1) gid=1007(haiyun1) groups=1007(haiyun1)</span><br><span class="line">[root@centos7 ~]# id haiyun2        &lt;==确认haiyun2存在且没有加入testgroup组</span><br><span class="line">uid=1007(haiyun2) gid=1008(haiyun2) groups=1008(haiyun2)</span><br><span class="line">[root@centos7 ~]# su - haiyun       &lt;==切换到haiyun用户</span><br><span class="line">Last login: Sun Aug 13 14:56:49 CST 2017 on pts/0</span><br><span class="line">[haiyun@centos7 ~]$ gpasswd -a haiyun1 testgroup        &lt;==将用户haiyun1加入到testgroup组</span><br><span class="line">Adding user haiyun1 to group testgroup</span><br><span class="line">[haiyun@centos7 ~]$ gpasswd -a haiyun2 testgroup        &lt;==将用户haiyun2加入到testgroup组</span><br><span class="line">Adding user haiyun2 to group testgroup  </span><br><span class="line">[root@centos7 ~]# getent group testgroup                &lt;==确认添加成功</span><br><span class="line">testgroup<img class="github-emoji" title="x" alt="x" src="https://assets-cdn.github.com/images/icons/emoji/unicode/274c.png?v8" height="20" width="20">1006:haiyun1,haiyun2</span><br></pre></td></tr></table></figure><h3 id="newgrp命令：临时切换主组"><a href="#newgrp命令：临时切换主组" class="headerlink" title="newgrp命令：临时切换主组"></a>newgrp命令：临时切换主组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">newgrp命令：临时切换主组，如果用户本不属于此组，则需要组密码</span><br><span class="line"></span><br><span class="line">范例1：临时切换到root组</span><br><span class="line">[root@centos7 ~]# gpasswd root          &lt;==为root组设置密码</span><br><span class="line">Changing the password for group root</span><br><span class="line">New Password: </span><br><span class="line">Re-enter new password: </span><br><span class="line">[root@centos7 ~]# su - haiyun           &lt;==切换到haiyun</span><br><span class="line">Last login: Sun Aug 13 16:00:31 CST 2017 on pts/0</span><br><span class="line">[haiyun@centos7 ~]$ id                  &lt;==未切换前的主组</span><br><span class="line">uid=1004(haiyun) gid=1004(haiyun) groups=1004(haiyun) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br><span class="line">[haiyun@centos7 ~]$ newgrp root         &lt;==临时切换主组</span><br><span class="line">Password: </span><br><span class="line">[haiyun@centos7 ~]$ id                  &lt;==切换成功</span><br><span class="line">uid=1004(haiyun) gid=0(root) groups=0(root),1004(haiyun) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure><h3 id="更改和查看组成员"><a href="#更改和查看组成员" class="headerlink" title="更改和查看组成员"></a>更改和查看组成员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">groupmems [options] [action]</span><br><span class="line">options：</span><br><span class="line">    -g, --group groupname 更改为指定组 (只有root)</span><br><span class="line">    Actions:</span><br><span class="line">    -a, --add username 指定用户加入组</span><br><span class="line">    -d, --delete username 从组中删除用户</span><br><span class="line">    -p, --purge 从组中清除所有成员</span><br><span class="line">    -l, --list 显示组成员列表</span><br><span class="line">    </span><br><span class="line">范例1：查看testgroup组的成员</span><br><span class="line">[root@centos7 ~]# groupmems -l -g testgroup</span><br><span class="line">haiyun1  haiyun2 </span><br><span class="line"></span><br><span class="line">范例2：将haiyun3加入到testgroup组中</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -a haiyun3</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -l </span><br><span class="line">haiyun1  haiyun2  haiyun3 </span><br><span class="line"></span><br><span class="line">范例3：将haiyun2从testgroup中移除</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -d haiyun2</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -l </span><br><span class="line">haiyun1  haiyun3 </span><br><span class="line"></span><br><span class="line">范例4：清除testgroup组总的所有成员</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -p </span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -l </span><br><span class="line">[root@centos7 ~]# </span><br><span class="line"></span><br><span class="line">groups [OPTION].[USERNAME]... 查看用户所属组列表</span><br><span class="line"></span><br><span class="line">范例：查看用户haiyun1加入的组</span><br><span class="line">[root@centos7 ~]# groups haiyun1</span><br><span class="line">haiyun1 : haiyun1 testgroup</span><br></pre></td></tr></table></figure><h3 id="将用户加入组的几种方法"><a href="#将用户加入组的几种方法" class="headerlink" title="将用户加入组的几种方法"></a>将用户加入组的几种方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法1：groupmems</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -a haiyun</span><br><span class="line"></span><br><span class="line">方法2：usermod</span><br><span class="line">[root@centos7 ~]# usermod -G testgroup haiyun2 </span><br><span class="line"></span><br><span class="line">方法3：</span><br><span class="line">[root@centos7 ~]# gpasswd -a haiyun3 testgroup</span><br><span class="line">Adding user haiyun3 to group testgroup</span><br></pre></td></tr></table></figure><h3 id="多个用户添加到一个组"><a href="#多个用户添加到一个组" class="headerlink" title="多个用户添加到一个组"></a>多个用户添加到一个组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">范例：将haiyun，haiyun1，haiyun2，haiyun3添加到testgroup组</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -l </span><br><span class="line">[root@centos7 ~]# gpasswd -M haiyun,haiyun1,haiyun2,haiyun3 testgroup</span><br><span class="line">[root@centos7 ~]# groupmems -g testgroup -l </span><br><span class="line">haiyun  haiyun1  haiyun2  haiyun3</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 用户组管理相关命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户和组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>输入输出重定向</title>
      <link href="/2017/07/20/IO-chongdingxiang/"/>
      <url>/2017/07/20/IO-chongdingxiang/</url>
      <content type="html"><![CDATA[<h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><blockquote><p>在我们开始学习重定向之前，我们先来了解一下文件描述符（fd：file descriptor）</p><p>一切皆文件，大家应该都听过这句话吧，linux的哲学思想。当我们对这些文件进行处理的时候，系统对会对每个打开的文件分配一个文件描述符。<br>文件描述符是一个数字。不同数字代表不同的含义，默认情况下，系统占用了3个，分别是0标准输入（stdin）,1标准输出(stdout), 2标准错误(stderr), 另外3-9是保留的标识符，可以把这些标识符指定成标准输入，输出或者错误作为临时连接。通常这样可以解决很多复杂的重定向请求。</p></blockquote><a id="more"></a><blockquote><p>我们可以在/proc/1/fd目录下查看文件通配符，如下：<br>    [root@centos7 ~]# ll /proc/1/fd<br>    total 0<br>    lrwx——. 1 root root 64 Jul 22 08:00 0 -&gt; /dev/null<br>    lrwx——. 1 root root 64 Jul 22 08:00 1 -&gt; /dev/null<br>    lr-x——. 1 root root 64 Jul 22 11:49 10 -&gt; anon_inode:inotify<br>    lr-x——. 1 root root 64 Jul 22 11:49 11 -&gt; /proc/swaps</p></blockquote><h3 id="I-O重定向出重定向是什么呢？"><a href="#I-O重定向出重定向是什么呢？" class="headerlink" title="I/O重定向出重定向是什么呢？"></a>I/O重定向出重定向是什么呢？</h3><blockquote><p>简单的来讲，I/O重定向就是一个过程，将命令、程序或脚本的输出，作为输入发送到另外一个程序、文件、或命令。</p></blockquote><p><strong>我们在Linux执行命令，它的过程如下图：</strong></p><center><img src="https://houhaiyun.github.io/img/images/IO-chongdingxiang-1.png" title="输入输出重定向"></center><blockquote><ul><li>我们先通过键盘或者文件，进行指令输入</li><li>指令执行完成后，如果正确，会把结果输出到屏幕（因为默认标准输出到屏幕）</li><li>指令执行完成后，如果错误，会把结果输出到屏幕（因为默认标准输出到屏幕）</li></ul></blockquote><h3 id="为何要使用输出重定向呢？"><a href="#为何要使用输出重定向呢？" class="headerlink" title="为何要使用输出重定向呢？"></a>为何要使用输出重定向呢？</h3><blockquote><p>1.当屏幕输出信息较为重要，而我们也需要将信息存下来时</p><p>2.当 执行脚本时，我们不希望看到一些命令的输出结果，可以将它输出到/dev/null（俗称黑洞）丢掉</p><p>3.当执行命令时，需要把错误与正确讯息分别输出时</p></blockquote><h3 id="标准输出和标准错误输出"><a href="#标准输出和标准错误输出" class="headerlink" title="标准输出和标准错误输出"></a>标准输出和标准错误输出</h3><p><strong>标准输出(stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt;</strong></p><p><strong>++示例++</strong>：</p><blockquote><p>1.查看命令执行结果的默认输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# ls  # 我们可以看到默认输出是屏幕</span><br><span class="line">a.txt  b.txt  c.txt  d.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.将命令的执行结果输出到文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# ls &gt; output.txt # 将ls命令的执行结果重定向到output.txt中</span><br><span class="line">[root@centos7 app]# cat output.txt  # 查看output.txt，ls命令的执行结果已经被重定向到output.txt                              </span><br><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">c.txt</span><br><span class="line">d.txt</span><br><span class="line">output.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.将命令的输出结果追加到一个文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# hostname &gt;&gt; output.txt  # 将hostname命令的执行结果重定向到output.txt</span><br><span class="line">[root@centos7 app]# cat output.txt      # 查看output.txt，hostname命令的执行结果已经被重定向到output.txt</span><br><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">c.txt</span><br><span class="line">d.txt</span><br><span class="line">output.txt</span><br><span class="line">centos7.magedu.com</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>标准错误输出(stdout)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;</strong></p><p><strong>示例</strong></p><blockquote><p>1.错误命令的执行结果默认会输出到屏幕上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# xxx  # 错误命令执行后默认会输出到屏幕</span><br><span class="line">bash: xxx: command not found...</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.将错误命令的执行结果输出到文本中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# xxx 2&gt; errput.txt   # 将xxx这个命令执行结果错误重定向到errput.txt文本中</span><br><span class="line">[root@centos7 app]# cat errput.txt      # 查看errput.txt，xxx命令的执行结果已经被重定向到errput.txt</span><br><span class="line">bash: xxx: command not found...</span><br><span class="line"></span><br><span class="line">注意：&gt;默认会覆盖文件，我们可以使用set命令来调整</span><br><span class="line">    set -C: 禁止将内容覆盖已有文件,但可追加</span><br><span class="line">    &gt;| file：强制覆盖</span><br><span class="line">    set +C: 允许覆盖</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.将错误命令的执行结果追加到文本中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# ls /hello 2&gt;&gt; errput.txt    # 将ls /hello命令的执行结果追加到errput.txt</span><br><span class="line">[root@centos7 app]# cat errput.txt              # 查看errput.txt，ls /hello命令的执行结果已经追加到errput.txt</span><br><span class="line">bash: xxx: command not found...</span><br><span class="line">ls: cannot access /hello: No such file or directory</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.将标准输出和错误标准输出到不同的文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# cat a.txt www   # 查看a.txt和www，a.txt是一个文本，www则是一个不存在的文件</span><br><span class="line">123</span><br><span class="line">cat: www: No such file or directory</span><br><span class="line">[root@centos7 app]# cat a.txt www &gt; output.txt 2&gt; errput.txt # 将cat命令的执行结果，输出到output.txt和错误输出到errput.txt</span><br><span class="line">[root@centos7 app]# cat errput.txt  # 查看errput.txt，cat命令执行结果的错误信息已经输出到errput.txt</span><br><span class="line">cat: www: No such file or directory</span><br><span class="line">[root@centos7 app]# cat output.txt  # 查看output.txt，cat命令执行结果的正确信息已经输出到output.txt</span><br><span class="line">123</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>标准输入(stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt; </strong></p><p><strong>示例</strong></p><blockquote><ol><li>标准输入读入数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# cat &lt; output.txt # 使用cat命令，从output.txt读入数据</span><br><span class="line">123</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><p>2.标准输入读入数据，输出到文本中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# cat &lt; output.txt &gt; 1.txt  # 从output.txt读入文本，再输出到1.txt中    </span><br><span class="line">[root@centos7 app]# cat 1.txt   # 查看1.txt和output.txt的文本是相同的（也可使用此方法拷贝文本）</span><br><span class="line">123</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="特殊用法"><a href="#特殊用法" class="headerlink" title="特殊用法"></a>特殊用法</h4><blockquote><p>1.将命令执行结果错误和正确都重定向到同一个文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">方法一：使用2&gt;&amp;1</span><br><span class="line">    [root@centos7 app]# cat a.txt   # 查看文本a.txt</span><br><span class="line">    123</span><br><span class="line">    [root@centos7 app]# cat a.txt www &gt; output.txt 2&gt;&amp;1 # 执行命令cat a.txt www 将结果的正确和错误信息输出到output.txt</span><br><span class="line">    [root@centos7 app]# cat output.txt  # 查看output.txt，错误和正确的信息都存在</span><br><span class="line">    123</span><br><span class="line">    cat: www: No such file or directory</span><br><span class="line">    注意：使用2&gt;&amp;1要注意顺序，放到最后，最后，最后，重要的事要说三遍！</span><br><span class="line"></span><br><span class="line">方法二：使用&amp;&gt;</span><br><span class="line">    [root@centos7 app]# cat a.txt xxx &amp;&gt; output.txt #  执行命令cat a.txt www 将结果的正确和错误信息输出到output.txt</span><br><span class="line">    [root@centos7 app]# cat output.txt  # 查看output.txt，错误和正确的信息都存在</span><br><span class="line">    123</span><br><span class="line">    cat: xxx: No such file or directory</span><br><span class="line">    注意：此写法较新，可能在老系统中不支持。也可以使用&amp;&gt;&gt;追加</span><br><span class="line">方法三：使用&gt;&amp;</span><br><span class="line">    [root@centos7 app]# cat a.txt qqq &gt;&amp; output.txt #  执行命令cat a.txt www 将结果的正确和错误信息输出到output.txt</span><br><span class="line">    [root@centos7 app]# cat output.txt  # 查看output.txt，错误和正确的信息都存在</span><br><span class="line">    123</span><br><span class="line">    123</span><br><span class="line">    cat: qqq: No such file or directory</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.使用重定向来写文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">方法一：使用&gt;</span><br><span class="line">    [root@centos7 app]# cat &gt; file  # 将从键盘的输入写入到文件中</span><br><span class="line">    ls</span><br><span class="line">    ifconfig</span><br><span class="line">    pwd</span><br><span class="line">    ls</span><br><span class="line">    [root@centos7 app]# cat file # 查看file文件，刚才输入文字已经输入到file文件中 </span><br><span class="line">    ls</span><br><span class="line">    ifconfig</span><br><span class="line">    pwd</span><br><span class="line">    ls</span><br><span class="line">    注意：退出时需要使用Ctrl+D</span><br><span class="line">方法二：使用&gt;，&lt;&lt;</span><br><span class="line">    [root@centos7 app]# cat &gt; file &lt;&lt; END</span><br><span class="line">    &gt; ls</span><br><span class="line">    &gt; hello</span><br><span class="line">    &gt; ifconfig</span><br><span class="line">    &gt; END</span><br><span class="line">    [root@centos7 app]# cat file</span><br><span class="line">    ls</span><br><span class="line">    hello</span><br><span class="line">    ifconfig</span><br><span class="line">    注意：后面的END是在文本结束时输入，当然文本也不会记录这个END符号，END也是可以自定义的哦！</span><br><span class="line"></span><br><span class="line">两种方法的区别：方法一是敲完回车之后就会保存文本，方法二是输入定义的结束符号后才会结束。</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.合并多个程序的标准输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# (date ; cal) &gt; all.txt  # 将多个程序的标准输出到同一个文件</span><br><span class="line">[root@centos7 app]# cat all.txt </span><br><span class="line">Sun Jul 23 13:32:51 CST 2017</span><br><span class="line">      July 2017     </span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">                   1</span><br><span class="line"> 2  3  4  5  6  7  8</span><br><span class="line"> 9 10 11 12 13 14 15</span><br><span class="line">16 17 18 19 20 21 22</span><br><span class="line">23 24 25 26 27 28 29</span><br><span class="line">30 31</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>重定向命令列表</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到文件</td></tr><tr><td>command &lt; file</td><td>将输入重定向到文件</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到file</td></tr><tr><td>n &gt; file</td><td>将文件描述符为n的文件重定向到file</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为n的文件以追加的方式重定向到file</td></tr><tr><td>2&gt;&amp;1</td><td>将所有从定向到文件</td></tr><tr><td>&amp;&gt;</td><td>将所有从定向到文件</td></tr><tr><td>&gt;&amp;</td><td>将所有从定向到文件</td></tr><tr><td>command 2&gt; file</td><td>将错误输出重定向到file</td></tr><tr><td>command 2&gt;&gt; file</td><td>将错误输出以追加的方式重定向到file</td></tr><tr><td>()</td><td>合并多个程序的标准输出</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 输入输出重定向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重定向和管道 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux Shell</title>
      <link href="/2017/07/07/Linux-Shell/"/>
      <url>/2017/07/07/Linux-Shell/</url>
      <content type="html"><![CDATA[<p><center><img src="https://houhaiyun.github.io/img/images/Linux-Shell.jpg" title="Linux Shell"></center><br><a id="more"></a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>计算机理解了被称为二进制语言的零语言。在计算的早期，使用二进制语言提供了指令，这对我们所有人来说都是难以阅读和写入的。因此，在操作系统中有一个称为<code>shell</code>的特殊程序。<code>shell</code>接受人类可读命令并将其转换为内核可以读取和处理的内容。</p><h3 id="什么是shell？"><a href="#什么是shell？" class="headerlink" title="什么是shell？"></a>什么是shell？</h3><ul><li><code>shell</code>是一个用户程序，也是为用户交互提供的环境。</li><li>它是一个命令语言解释器，执行从标准输入设备（如键盘或文件）读取的命令。</li><li>当您登录或打开控制台（终端）时，<code>shell</code>将启动。</li><li>快速而脏的方式来执行实用程序。</li><li><code>shell</code>不是系统内核的一部分，而是使用系统内核执行程序，创建文件等。</li></ul><h3 id="Linux提供的shell"><a href="#Linux提供的shell" class="headerlink" title="Linux提供的shell"></a>Linux提供的shell</h3><ul><li><code>BASH</code>（<code>Bourne-Again SHELL</code>） - <code>Linux</code>中最常见的<code>shell</code>。它是开源的，CentOS默认使用 。</li><li><code>CSH</code>（<code>C SHELL</code>） - <code>C shell</code>的语法和用法与<code>C</code>编程语言非常相似。</li><li><code>KSH</code>（<code>Korn shell</code>中） -创建者戴维·科恩在<code>AT＆T</code>贝尔实验室。<code>Korn Shell</code>是<code>POSIX Shell</code>标准规范的基础。</li><li><code>TCSH</code> - 它是<code>Berkeley UNIX C shell</code>（<code>CSH</code>）的增强但完全兼容的版本。</li></ul><p>请注意，每个<code>shell</code>执行相同的作业，但每个<code>shell</code>都会了解不同的命令语法，并提供不同的内置函数。在<code>Windows</code>下，<code>shell</code>名称是<code>cmd.exe</code>，它也用于相同的目的，但它远远不如我们的<code>Linux Shells</code>那么强大！</p><h4 id="显示当前shell"><a href="#显示当前shell" class="headerlink" title="显示当前shell"></a>显示当前shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# echo $SHELL#此命令可以显示当前使用的shell，当前使用的为BASH</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h4 id="查看当前系统支持的所有shell"><a href="#查看当前系统支持的所有shell" class="headerlink" title="查看当前系统支持的所有shell"></a>查看当前系统支持的所有shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# cat /etc/shells </span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://bash.cyberciti.biz/guide/What_is_Linux_Shell" target="_blank" rel="noopener">维基百科：What is Linux Shell</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Linux Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GUI和CLI</title>
      <link href="/2017/07/06/Linux-GUI-CLI/"/>
      <url>/2017/07/06/Linux-GUI-CLI/</url>
      <content type="html"><![CDATA[<h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>图形用户界面（<code>Graphical User Interface</code>，简称<code>GUI</code>）是指采用图形方式显示的计算机操作用户界面。与早期计算机使用的命令行界面相比，图形界面对于用户来说在视觉上更易于接受。</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-GUI-CLI-1.jpg" title="GUI"></center><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>命令行界面（英语：<code>command-line interface</code>，缩写：<code>CLI</code>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（<code>character user interface</code>, <code>CUI</code>）。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-GUI-CLI-2.jpg" title="CLI"></center><p><strong>一般我们是使用<code>CLI</code>的，比较酷。。。</strong></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> GUI和CLI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUI和CLI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>终端 Terminal</title>
      <link href="/2017/07/05/Linux-Terminal/"/>
      <url>/2017/07/05/Linux-Terminal/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-Terminal.png" title="终端"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>终端（<code>Terminal</code>）也称终端设备，是计算机网络中处于网络最外围的设备，主要用于用户信息的输入以及处理结果的输出等。</p><p>Linux系统的终端主要包括设备终端、物理终端、虚拟终端、图形终端、串行终端和伪终端</p><p><strong>查看当前的终端设备：#tty</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# tty#这就是一个伪终端</span><br><span class="line">/dev/pts/1</span><br><span class="line">[root@centos6 ~]#</span><br></pre></td></tr></table></figure><h4 id="1-设备终端"><a href="#1-设备终端" class="headerlink" title="1.设备终端"></a>1.设备终端</h4><p>键盘鼠标显示器</p><h4 id="2-物理终端"><a href="#2-物理终端" class="headerlink" title="2.物理终端"></a>2.物理终端</h4><p>在Unix系统中，计算机显示器通常被称为控制台终端。Console与虚拟终端相关联，内核将信息送到控制台上（/dev/console），通过与console相关联的虚拟终端将信息显示到屏幕上。</p><h4 id="3-虚拟终端"><a href="#3-虚拟终端" class="headerlink" title="3.虚拟终端"></a>3.虚拟终端</h4><p>虚拟终端，ctrl+alt+f[1-6]切换的就是虚拟终端</p><h4 id="4-图形终端（-dev-tty7）StartlX，xwindows"><a href="#4-图形终端（-dev-tty7）StartlX，xwindows" class="headerlink" title="4.图形终端（/dev/tty7）StartlX，xwindows"></a>4.图形终端（/dev/tty7）StartlX，xwindows</h4><p>Centos 6：Ctrl+Alt+F7</p><p>Centos 7：在哪个终端启动，即位于那个虚拟终端</p><h4 id="5-串行终端（-dev-ttyS-）"><a href="#5-串行终端（-dev-ttyS-）" class="headerlink" title="5.串行终端（/dev/ttyS#）"></a>5.串行终端（/dev/ttyS#）</h4><p>通过串口线连接的终端</p><h4 id="6-伪终端（pty：pseudo-tty，-dev-pts-）"><a href="#6-伪终端（pty：pseudo-tty，-dev-pts-）" class="headerlink" title="6.伪终端（pty：pseudo-tty，/dev/pts/#）"></a>6.伪终端（pty：pseudo-tty，/dev/pts/#）</h4><p>pty,SSH远程连接</p><h3 id="wall命令"><a href="#wall命令" class="headerlink" title="wall命令"></a>wall命令</h3><p><code>wall</code>命令用于向系统当前所有打开的终端上输出信息。通过<code>wall</code>命令可将信息发送给每位同意接收公众信息的终端机用户，若不给予其信息内容，则<code>wall</code>命令会从标准输入设备读取数据，然后再把所得到的数据传送给所有终端机用户。</p><p><strong>语法</strong></p><p><code>wall 参数（消息：指定广播消息）</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">    [root@centos6 ~]# wall houhaiyum.com</span><br><span class="line">    [root@centos6 ~]# </span><br><span class="line">    Broadcast message from root@centos6.magedu.com (pts/5) (Fri Jul 14 22:28:19 2017):</span><br><span class="line">    </span><br><span class="line">    houhaiyun.com</span><br></pre></td></tr></table></figure><h3 id="mesg命令"><a href="#mesg命令" class="headerlink" title="mesg命令"></a>mesg命令</h3><p> mesg命令用于设置当前终端的写权限，即是否让其他用户向本终端发信息。将mesg设置y时，其他用户可利用write命令将信息直接显示在您的屏幕上。</p><p><strong>语法</strong></p><p><code>mesg 参数</code></p><p>y/n：y表示运行向当前终端写信息，n表示禁止向当前终端写信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">    [root@centos6 ~]# mesg y    #允许系统用户将信息直接显示在你的屏幕上。</span><br><span class="line">    [root@centos6 ~]# mesg n    #不允许系统用户将信息直接显示在你的屏幕上。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Terminal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos6.9 安装详解</title>
      <link href="/2017/07/04/Linux-Centos6-9-Install/"/>
      <url>/2017/07/04/Linux-Centos6-9-Install/</url>
      <content type="html"><![CDATA[<p><code>CentOS</code>（<code>Community Enterprise Operating System</code>，中文意思是：社区企业操作系统）是<code>Linux</code>发行版之一，它是来自于<code>Red Hat Enterprise Linux</code>依照开放源代码规定释出的源代码所编译而成。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-1.png" title="Centos"></center><a id="more"></a><h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-2.jpg" title="虚拟机配置"></center><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="开启虚拟机后我们看到如下安装界面："><a href="#开启虚拟机后我们看到如下安装界面：" class="headerlink" title="开启虚拟机后我们看到如下安装界面："></a>开启虚拟机后我们看到如下安装界面：</h4><ol><li><p>安装或更新系统</p></li><li><p>安装显示卡驱动</p></li><li><p>系统修复</p></li><li><p>从硬盘启动</p></li><li><p>内存测试</p></li></ol><p>我们直接回车即可，即使你不动，默认也会在自动倒数结束后，开始安装。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-3.jpg" title="开始安装"></center><h4 id="进入下一个界面测试安装媒体"><a href="#进入下一个界面测试安装媒体" class="headerlink" title="进入下一个界面测试安装媒体"></a>进入下一个界面测试安装媒体</h4><p>测试你的安装媒体是否损坏，按OK测试你的安装媒体（你所选的ISO文件），我们这里直接按SKIP跳过。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-4.jpg" title="测试安装媒体"></center><h4 id="第一个界面"><a href="#第一个界面" class="headerlink" title="第一个界面"></a>第一个界面</h4><p>选右下角的“NEXT”，下一步。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-5.jpg" title="第一个界面"></center><h4 id="然后就到了选语言，这里我们选英文。如图："><a href="#然后就到了选语言，这里我们选英文。如图：" class="headerlink" title="然后就到了选语言，这里我们选英文。如图："></a>然后就到了选语言，这里我们选英文。如图：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-6.jpg" title="选语言"></center><h4 id="选择键盘"><a href="#选择键盘" class="headerlink" title="选择键盘"></a>选择键盘</h4><p>这个不要选错了，默认就可以。如图：</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-7.jpg" title="选择键盘"></center><h4 id="这里选择安装的存储设备"><a href="#这里选择安装的存储设备" class="headerlink" title="这里选择安装的存储设备"></a>这里选择安装的存储设备</h4><p>我想大家都是安装到本地硬盘吧，那就是上面这个了啦，第二个选线的意思是指定专用的存储设备（例如存储区域网络SAN），如图。选择：基本存储设备后，点击下一步。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-8.jpg" title="安装的存储设备"></center><h4 id="弹出警告"><a href="#弹出警告" class="headerlink" title="弹出警告"></a>弹出警告</h4><p>会删除检测到的这个硬盘（204800MB）的所有数据，如果是多硬盘安装或升级安装的话，要小心注意了，全新安装的话，直接点击：是，如图。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-9.jpg" title="弹出警告"></center><h4 id="这里是选择时区"><a href="#这里是选择时区" class="headerlink" title="这里是选择时区"></a>这里是选择时区</h4><p>我们选择：亚洲/中国/上海，如图。下一步。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-10.jpg" title="选择时区"></center><h4 id="这里是设置根账户（root）的密码"><a href="#这里是设置根账户（root）的密码" class="headerlink" title="这里是设置根账户（root）的密码"></a>这里是设置根账户（root）的密码</h4><p>如图，如果你的密码过于简单，则会有另一个提示，我可以选择：无论如何都使用，如图：</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-11.jpg" title="设置根账户（root）的密码"></center><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-12.jpg" title="设置根账户（root）的密码"></center><h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-13.jpg" title="设置主机名"></center><h4 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-14.jpg" title="设置网络"></center><h4 id="下面我们就到了分区：此处我们选择“创建自定义布局”"><a href="#下面我们就到了分区：此处我们选择“创建自定义布局”" class="headerlink" title="下面我们就到了分区：此处我们选择“创建自定义布局”"></a>下面我们就到了分区：此处我们选择“创建自定义布局”</h4><ul><li>使用所有空间</li><li>替换现有的Linux系统</li><li>缩小当前系统</li><li>使用自由空间</li><li>创建自定义布局</li></ul><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-15.jpg" title="分区"></center><h4 id="自定义分区："><a href="#自定义分区：" class="headerlink" title="自定义分区："></a>自定义分区：</h4><table><thead><tr><th>挂载点</th><th>大小</th><th>分区名称</th></tr></thead><tbody><tr><td>/</td><td>50G</td><td>/dev/sdba1</td></tr><tr><td>/boot</td><td>1G</td><td>/dev/sda2</td></tr><tr><td>/app</td><td>50G</td><td>/dev/sda3</td></tr><tr><td>swap</td><td>4G</td><td>/dev/sda4</td></tr></tbody></table><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-16.jpg" title="分区"></center><h4 id="创建-boot分区"><a href="#创建-boot分区" class="headerlink" title="创建/boot分区"></a>创建/boot分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-17.jpg" title="创建/boot分区"></center><h4 id="创建-分区"><a href="#创建-分区" class="headerlink" title="创建/分区"></a>创建/分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-18.jpg" title="创建/分区"></center><h4 id="创建-app分区"><a href="#创建-app分区" class="headerlink" title="创建/app分区"></a>创建/app分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-19.jpg" title="创建/app分区"></center><h4 id="创建交换分区"><a href="#创建交换分区" class="headerlink" title="创建交换分区"></a>创建交换分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-20.jpg" title="创建交换分区"></center><h4 id="分区图"><a href="#分区图" class="headerlink" title="分区图"></a>分区图</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-21.jpg" title="分区图"></center><h4 id="是否格式化"><a href="#是否格式化" class="headerlink" title="是否格式化"></a>是否格式化</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-22.jpg" title="是否格式化"></center><h4 id="点击下一步，将修改写入磁盘"><a href="#点击下一步，将修改写入磁盘" class="headerlink" title="点击下一步，将修改写入磁盘"></a>点击下一步，将修改写入磁盘</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-23.jpg" title="点击下一步，将修改写入磁盘。"></center><h4 id="然后，到了选择安装Centos组件的时候"><a href="#然后，到了选择安装Centos组件的时候" class="headerlink" title="然后，到了选择安装Centos组件的时候"></a>然后，到了选择安装Centos组件的时候</h4><p>这一步是选择机子是做什么用的，如图，分别是：</p><ol><li>桌面系统的安装</li><li>最小化桌面系统的安装</li><li>最小化安装</li><li>基本服务器的安装</li><li>数据库服务器的安装</li><li>WEB网页服务器的安装</li><li>虚拟主机的安装</li><li>软件开发工作站的安装</li></ol><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-24.jpg" title="选择安装Centos组件"></center><p>选择一种，系统会自动给你安装上一些需要的软件，当然也可以选择底下的：现在自定义，来选择要安装的组件。</p><h4 id="下一步后，就开始安装了。"><a href="#下一步后，就开始安装了。" class="headerlink" title="下一步后，就开始安装了。"></a>下一步后，就开始安装了。</h4><p>安装过程则根据你选择的组件内容所用的时间而不同……如图。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-25.jpg" title="安装过程则根据你选择的组件内容所用的时间而不同"></center><h4 id="安装完成后就可以重启系统了，按一下“reboot”。如图："><a href="#安装完成后就可以重启系统了，按一下“reboot”。如图：" class="headerlink" title="安装完成后就可以重启系统了，按一下“reboot”。如图："></a>安装完成后就可以重启系统了，按一下“reboot”。如图：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-26.jpg" title="完成后就可以重启系统了，按一下“reboot”"></center><h4 id="重启完成后，进入欢迎界面，点击“Forward”"><a href="#重启完成后，进入欢迎界面，点击“Forward”" class="headerlink" title="重启完成后，进入欢迎界面，点击“Forward”"></a>重启完成后，进入欢迎界面，点击“Forward”</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-27.jpg" title="重启完成后，进入欢迎界面，点击“Forward”"></center><h4 id="是否同意，点击“Forward”"><a href="#是否同意，点击“Forward”" class="headerlink" title="是否同意，点击“Forward”"></a>是否同意，点击“Forward”</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-28.jpg" title="是否同意，点击“Forward”"></center><h4 id="创建一个普通用户haiyun-也可以不创建"><a href="#创建一个普通用户haiyun-也可以不创建" class="headerlink" title="创建一个普通用户haiyun,也可以不创建"></a>创建一个普通用户haiyun,也可以不创建</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-29.jpg" title="创建一个普通用户haiyun,也可以不创建"></center><h4 id="设置时间，如果时间不对可以重新调整"><a href="#设置时间，如果时间不对可以重新调整" class="headerlink" title="设置时间，如果时间不对可以重新调整"></a>设置时间，如果时间不对可以重新调整</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-30.jpg" title="设置时间，如果时间不对可以重新调整"></center><h4 id="是否开启kdump"><a href="#是否开启kdump" class="headerlink" title="是否开启kdump"></a>是否开启kdump</h4><p>kdump是在系统崩溃、死锁或者死机的时候用来转储内存运行参数的一个工具和服务，此处就就不开启了。也可开启，根据需求自行选择</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-31.jpg" title="是否开启kdump"></center><h4 id="点击确认，需要重启"><a href="#点击确认，需要重启" class="headerlink" title="点击确认，需要重启"></a>点击确认，需要重启</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-32.jpg" title="点击确认，需要重启"></center><h4 id="重启完成，如下图可以愉快的登陆系统了。"><a href="#重启完成，如下图可以愉快的登陆系统了。" class="headerlink" title="重启完成，如下图可以愉快的登陆系统了。"></a>重启完成，如下图可以愉快的登陆系统了。</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-33.jpg" title="重启完成"></center>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Centos6.9 安装详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos6.9 安装详解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用户空间和内核空间</title>
      <link href="/2017/07/03/Linux-User-space/"/>
      <url>/2017/07/03/Linux-User-space/</url>
      <content type="html"><![CDATA[<h3 id="用户空间：-User-space"><a href="#用户空间：-User-space" class="headerlink" title="用户空间： User space"></a>用户空间： User space</h3><ul><li>用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响</li><li>只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（<code>system call</code>），才能向内核发出指令 </li></ul><a id="more"></a><h3 id="内核空间：-Kernel-space"><a href="#内核空间：-Kernel-space" class="headerlink" title="内核空间： Kernel space"></a>内核空间： Kernel space</h3><ul><li>是 <code>Linux</code> 内核的运行空间</li></ul><ul><li>可以执行任意命令，调用系统的一切资源 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = "www.ihaiyun.cc" # 用户空间</span><br><span class="line">x = x + 2</span><br><span class="line">file.write(str) # 切换到内核空间</span><br><span class="line">y = x + 4 # 切换回用户空间</span><br></pre></td></tr></table></figure><p>上面代码中，第一行和第二行都是简单的赋值运算，在 <code>User space</code> 执行。第三行需要写入文件，就要切换到 <code>Kernel space</code>，因为用户不能直接写文件，必须通过内核安排。第四行又是赋值运算，就切换回 <code>User space</code>。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>内核空间可以访问所有的<code>CPU</code>指令和所有的内存空间、<code>I/O</code>空间。</li><li>用户空间只能访问有限的资源，若需要特殊权限，可以通过系统调用获取相应的资源。</li><li>用户空间允许页面中断，而内核空间则不允许。</li><li><code>x86 CPU</code>中用户空间是<code>0-3G</code>的地址范围，内核空间是<code>3G-4G</code>的地址范围。<code>x86_64 CPU</code>用户空间地址范围为<code>0x0000000000000000</code> – <code>0x00007fffffffffff</code>，内核地址空间为<code>0xffff880000000000</code>~最大地址。</li><li>内核空间和用户空间是针对线性地址空间的。</li><li>所有内核进（线）程共用一个地址空间，而用户进程都有各自的地址空间。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Linux-User-space-1.png" title="用户空间和内核空间"></center><h3 id="单处程序时间统计使用time"><a href="#单处程序时间统计使用time" class="headerlink" title="单处程序时间统计使用time"></a>单处程序时间统计使用time</h3><p>如果想查看单个程序的耗时，一般使用<code>time</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@blog ~]# time ifconfig </span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.252.210  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        inet6 fe80::20c:29ff:fef8:15f5  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f8:15:f5  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 16981  bytes 1356968 (1.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 93  bytes 23042 (22.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.135  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:fef8:15ff  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f8:15:ff  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 11279  bytes 1036041 (1011.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 59808  bytes 130371849 (124.3 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        ether 52:54:00:d7:0c:d1  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real0m0.003s</span><br><span class="line">user0m0.001s</span><br><span class="line">sys0m0.002s</span><br></pre></td></tr></table></figure><p>程序名之前加上<code>time</code>命令，会在程序执行完毕以后，默认显示三行统计。</p><ul><li><code>real</code>：程序从开始运行到结束的全部时间，这是用户能感知到的时间，包括 CPU 切换去执行其他任务的时间。</li><li><code>user</code>：程序在 User space 执行的时间</li><li><code>sys</code>：程序在 Kernel space 执行的时间</li></ul><p><code>user</code>和<code>sys</code>之和，一般情况下，应该小于<code>real</code>。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.ait24.com/1256.html" target="_blank" rel="noopener">爱T网：linux中的内核空间Kernel space用户空间User space</a></p><p><a href="http://ilinuxkernel.com/?p=528" target="_blank" rel="noopener">Linux内核空间与用户空间</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 用户空间和内核空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户空间和内核空间 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 发行版时间线</title>
      <link href="/2017/07/03/Linux-time/"/>
      <url>/2017/07/03/Linux-time/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-time-1.png" title="Linux 发行版时间线"></center><a id="more"></a><p><strong>时间线请参见：</strong> <a href="https://en.wikipedia.org/wiki/File:Linux_Distribution_Timeline.svg" target="_blank" rel="noopener">Wikipedia</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Linux发行版时间线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux发行版时间线 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见开源协议</title>
      <link href="/2017/07/02/Linux-open-source/"/>
      <url>/2017/07/02/Linux-open-source/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-open-source-2.jpeg" title="Public License"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>现今存在的开源协议很多，而经过<code>Open Source Initiative</code>组织通过批准的开源协议目前有 <a href="http://www.opensource.org/licenses/alphabetical" target="_blank" rel="noopener">80种</a>。我们在常见的开源协议如<code>BSD</code>, <code>Apache</code>, <code>GPL</code>, <code>LGPL</code>, <code>MIT</code>等都是<code>OSI</code>批准的协议。如果要开源自己的代码，最好也是选择这些被批准的开源协议。</p><p>这里我们来看几种最常用的开源协议及它们的适用范围，供那些准备开源或者使用开源产品的开发人员/厂家参考。</p><h3 id="BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）"><a href="#BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）" class="headerlink" title="BSD开源协议（original BSD license、FreeBSD license、Original BSD license）"></a>BSD开源协议（original BSD license、FreeBSD license、Original BSD license）</h3><p><code>BSD</code>开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p><p>但“为所欲为”的前提当你发布使用了<code>BSD</code>协议的代码，或则以<code>BSD</code>协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ul><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ul><p><code>BSD</code> 代码鼓励代码共享，但需要尊重代码作者的著作权。<code>BSD</code>由于允许使用者修改和重新发布代码，也允许使用或在<code>BSD</code>代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选<code>BSD</code>协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h3 id="Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）"><a href="#Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）" class="headerlink" title="Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）"></a>Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）</h3><p><code>Apache Licence</code>是著名的非盈利开源组织<code>Apache</code>采用的协议。该协议和<code>BSD</code>类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和<code>BSD</code>类似：</p><ul><li>需要给代码的用户一份<code>Apache Licence</code></li><li>如果你修改了代码，需要再被修改的文件中说明。</li><li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个<code>Notice</code>文件，则在<code>Notice</code>文件中需要带有<code>Apache Licence</code>。你可以在<code>Notice</code>中增加自己的许可，但不可以表现为对<code>Apache Licence</code>构成更改。</li></ul><p><code>Apache Licence</code>也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h3 id="GPL（GNU-General-Public-License）通用性公开许可证"><a href="#GPL（GNU-General-Public-License）通用性公开许可证" class="headerlink" title="GPL（GNU General Public License）通用性公开许可证"></a>GPL（GNU General Public License）通用性公开许可证</h3><p>我们很熟悉的<code>Linux</code>就是采用了<code>GPL</code>。<code>GPL</code>协议和<code>BSD</code>, <code>Apache Licence</code>等鼓励代码重用的许可很不一样。<code>GPL</code>的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种<code>linux</code>，包括商业公司的<code>linux</code>和<code>linux</code>上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p><p><code>GPL</code>规定：只要这种修改文本在整体上或者其某个部分来源于遵循<code>GPL</code>的程序，该修改文本的 整体就必须按照GPL流通，不仅该修改文本的源码必须向社会公开，而且对于这种修改文本的流通不准许附加修改者自己作出的限制。因此，一项遵循<code>GPL</code>流通 的程序不能同非自由的软件合并。<code>GPL</code>所表达的这种流通规则称为<code>copyleft</code>，表示与<code>copyright</code>(版权)的概念“相左”。</p><h4 id="GPL协议最主要的几个原则："><a href="#GPL协议最主要的几个原则：" class="headerlink" title="GPL协议最主要的几个原则："></a>GPL协议最主要的几个原则：</h4><ul><li>确保软件自始至终都以开放源代码形式发布，保护开发成果不被窃取用作商业发售。任何一套软 件，只要其中使用了受 <code>GPL</code> 协议保护的第三方软件的源程序，并向非开发人员发布时，软件本身也就自动成为受 <code>GPL</code> 保护并且约束的实体。也就是说，此时它必须开放源代码。</li><li><code>GPL</code> 大致就是一个左侧版权（<code>Copyleft</code>，或译为“反版权”、“版权属左”、“版权所无”、“版责”等）的体现。你可以去掉所有原作的版权 信息，只要你保持开源，并且随源代码、二进制版附上 <code>GPL</code> 的许可证就行，让后人可以很明确地得知此软件的授权信息。GPL 精髓就是，只要使软件在完整开源 的情况下，尽可能使使用者得到自由发挥的空间，使软件得到更快更好的发展。</li><li>无论软件以何种形式发布，都必须同时附上源代码。例如在 <code>Web</code> 上提供下载，就必须在二进制版本（如果有的话）下载的同一个页面，清楚地提供源代码下载的链接。如果以光盘形式发布，就必须同时附上源文件的光盘。</li><li>开发或维护遵循 <code>GPL</code> 协议开发的软件的公司或个人，可以对使用者收取一定的服务费用。但还是一句老话——必须无偿提供软件的完整源代码，不得将源代码与服务做捆绑或任何变相捆绑销售。</li></ul><p><code>GPL</code> 只是规定用户在获取你的程序的时候必须可以获得源代码，但并没有规定必须免费，因此理论上说，你仍然可以收取费用。如果你的确需要发布你的程序，但又不想开源，规避 <code>GPL</code> 的方法是通过 <code>LPC</code> 或者 <code>RPC</code> 间接调用库里的接口。只要库和你的程序不运行在同一进程下，就不需要开源。</p><p>另外，你需要区分 <code>GPL</code> 和 <code>LGPL</code>。<code>LGPL</code> 的要求比 <code>GPL</code> 低，你可以动态链接一个 <code>LGPL</code> 的库而不需要开源你自己的程序，而 <code>GPL</code> 是不行的。</p><h4 id="LGPL（GNU-Lesser-General-Public-License）宽松公共许可证"><a href="#LGPL（GNU-Lesser-General-Public-License）宽松公共许可证" class="headerlink" title="LGPL（GNU Lesser General Public License）宽松公共许可证"></a>LGPL（GNU Lesser General Public License）宽松公共许可证</h4><p><code>LGPL</code>是<code>GPL</code>的一个为主要为类库使用设计的开源协议。和<code>GPL</code>要求任何使用/修改/衍生之<code>GPL</code>类库的的软件必须采用<code>GPL</code>协议不同。<code>LGPL</code>允许商业软件通过类库引用(<code>link</code>)方式使用<code>LGPL</code>类库而不需要开源商业软件的代码。这使得采用<code>LGPL</code>协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改<code>LGPL</code>协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此<code>LGPL</code>协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以<code>LGPL</code>协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p><code>GPL</code>/<code>LGPL</code>都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h4 id="AGPL-协议（Affero-General-Public-License）"><a href="#AGPL-协议（Affero-General-Public-License）" class="headerlink" title="AGPL 协议（Affero General Public License）"></a>AGPL 协议（Affero General Public License）</h4><p><code>GPL（2.x ~ 3.x）</code> 协议还有一个非常大的“漏洞”，就是软件“发布” 才必须开源。也就是说，我的软件不发布，即使使用 <code>GPL (2.x ~ 3.x)</code>也可以不用开源。随着以Google为代表的软件作为服务的互联网公司的兴起，它们的“不分发软件，为客户提供网络服务”的商业模式就不受GPL协议的约束</p><p>AGPL则增加了对此做法的约束：</p><pre><code>AGPL = GPL + 一条限制</code></pre><p>一条限制：如果使用<code>AGPL</code>许可的软件与用户通过网络进行交互，也需要提供源代码给用户，所有的修改也要给用户。</p><h3 id="MIT（MIT）"><a href="#MIT（MIT）" class="headerlink" title="MIT（MIT）"></a>MIT（MIT）</h3><p><code>MIT</code>是和<code>BSD</code>一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p><ul><li>被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软体及软体的副本。</li><li>被授权人可根据程式的需要修改授权条款为适当的内容。</li><li>在软件和软件的所有副本中都必须包含版权声明和许可声明</li></ul><h3 id="Zlib-Libpng协议"><a href="#Zlib-Libpng协议" class="headerlink" title="Zlib/Libpng协议"></a><code>Zlib</code>/<code>Libpng</code>协议</h3><p>基于该软件的原样使用，作者不负责使用该软件照成的任何损失。</p><p>该软件修改后的版本将受到以下限制：</p><ul><li>不能歪曲原软件的著作权</li><li>修改后的软件不能歪曲为原版软件</li><li>不能删除源码中的协议许可内容</li></ul><p>如果发布二进制代码可以不用附上源代码。</p><h3 id="MPL-The-Mozilla-Public-License-Mozilla公共许可证"><a href="#MPL-The-Mozilla-Public-License-Mozilla公共许可证" class="headerlink" title="MPL(The Mozilla Public License)Mozilla公共许可证"></a>MPL(The Mozilla Public License)Mozilla公共许可证</h3><p><code>MPL</code>是<code>The Mozilla Public License</code>的简写，是1998年初<code>Netscape</code>的<code>Mozilla</code>小组为其开源软件项目设计的软件许可证。<code>MPL</code>许可证出现的最重要原因就是，<code>Netscape</code>公司认为<code>GPL</code>许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。同著名的<code>GPL</code>许可证和<code>BSD</code>许可证相比，<code>MPL</code>在许多权利与义务的约定方面与它们相同（因为都是符合<code>OSIA</code>认定的开源软件许可证）。但是，相比而言<code>MPL</code>还有以下几个显著的不同之处:</p><ul><li><code>MPL</code>虽然要求对于经<code>MPL</code>许可证发布的源代码的修改也要以<code>MPL</code>许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在<code>MPL</code> 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着<code>MPL</code>允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以<code>MPL</code>许可证的形式对外许可外，源代码库中的源代码就可以不用<code>MPL</code>许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个豁口。</li><li><code>MPL</code>许可证第三条第7款中允许被许可人将经过<code>MPL</code>许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</li><li>对软件专利的态度，<code>MPL</code>许可证不像<code>GPL</code>许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</li><li>对源代码的定义而在<code>MPL</code>（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘<code>Script</code>’），或者不是与初始源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。”<ul><li><code>MPL</code>许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li></ul></li></ul><h4 id="MPL与其他协议的兼容性"><a href="#MPL与其他协议的兼容性" class="headerlink" title="MPL与其他协议的兼容性"></a>MPL与其他协议的兼容性</h4><p>不像那些较严格的<code>Copyleft</code>许可证，使用<code>MPL</code>授权的源代码可以在一个复杂的软件中与任何其他的许可协议相结合，只要仍满足<code>MPL</code>许可协议中3.3节的规定即可。这意味着在一份给定的源文件里面，必须全部的源代码都以MPL授权，否则就所有源代码均以其他方式授权。</p><p><code>MPL</code>第二版与<code>Apache</code>许可证以及<code>GPL</code>第二版或更新、<code>LGPL2.1</code>版或更新，及<code>AGPL</code>第三版或更新兼容。而1.1版因为有“一些复杂的限制”造成与<code>GPL</code>的不兼容（从而阻止升级到<code>MPL 2.0</code>）。</p><h3 id="GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择"><a href="#GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择" class="headerlink" title="GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择"></a>GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-open-source-1.jpg" title="GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://ewen0930.github.io/2016/11/open-source-licenses/" target="_blank" rel="noopener">本文转自：Hello EWEN</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 常见开源协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常见开源协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 历史?</title>
      <link href="/2017/07/02/Linux-history/"/>
      <url>/2017/07/02/Linux-history/</url>
      <content type="html"><![CDATA[<h3 id="Linux之前的UNIX历史："><a href="#Linux之前的UNIX历史：" class="headerlink" title="Linux之前的UNIX历史："></a><code>Linux</code>之前的<code>UNIX</code>历史：</h3><ul><li>1969年以前伟大的梦想-贝尔实验室 （<code>Bell Labs</code>）通用电气（<code>General Electric</code>）和麻省理工学院（<code>MIT</code>）的<code>Multics</code>系统。</li></ul><ul><li>1969年<code>Ken Thompson</code>使用汇编语言<code>B</code>语言<code>File Server System</code>。<a id="more"></a></li></ul><ul><li>1973年<code>UNIX</code>正式诞生，<code>Ritchie</code>等人以<code>C</code>语言写出第一个正式内核。</li></ul><ul><li>1977年重要的<code>UNIX</code>分支-<code>BSD</code>诞生。</li></ul><pre><code>伯克利大学的Bill Joy在取得了UNIX的内核源码后，修改成为自己的版本，并重新命名为Berkeley Software Distribution(BSD)。BSD是UNIX很重要的一个分支，Bill Joy也是Sun这家公司的创办者。</code></pre><ul><li>1979年重要的<code>System V</code>架构与版权声明。</li></ul><pre><code>由于当时UNIX的高度可移植性与强大的性能，也没有版权纠纷，所以很多商业公司开始了UNIX操作系统的开发。例如：AT&amp;A自家的System V、IBM的AIX等。不过因为AT&amp;T由于商业的考略，于是想将UNIX的版权收回去。因此，AT&amp;T在1979年发行的第七版UNIX中，特别提到了“不可对学生提供源码”的严格限制。</code></pre><ul><li><strong>1984年</strong>：</li></ul><pre><code>X86架构的Minix操作系统诞生。关于1979的版权声明中，影响最大的当然就是学校里的教授了。于是荷兰阿姆斯特丹自由大学计算机科学系Andrew S. Tanenbaum开始编写内核程序，到了1986年终于完成，并于次年出版Minix相关书籍，同时雨新闻组（BBS及News）相结合。    - Richard Stallman发起GNU项目和自由软件基金会。    创建开源的UNIX实用工具版本    创建通用公共许可证（GPL）    开源软件许可实施原则</code></pre><ul><li>1991年：<code>Linus Torvalds</code>发布<code>Linux</code>创建开放源码，类<code>Unix</code>的内核，在<code>GPL</code>下发布。</li></ul><h3 id="老照片哦"><a href="#老照片哦" class="headerlink" title="老照片哦(^_^)"></a>老照片哦(^_^)</h3><h4 id="Ken-Thompson-和Dennis-Ritchie"><a href="#Ken-Thompson-和Dennis-Ritchie" class="headerlink" title="Ken Thompson 和Dennis Ritchie"></a><center>Ken Thompson 和Dennis Ritchie</center></h4><center><img src="https://houhaiyun.github.io/img/images/Linux-history-1.jpg" title="Ken Thompson 和Dennis Ritchie"></center><h4 id="Richard-Matthew-Stallman"><a href="#Richard-Matthew-Stallman" class="headerlink" title="Richard Matthew Stallman"></a><center>Richard Matthew Stallman</center></h4><center><img src="https://houhaiyun.github.io/img/images/Linux-history-2.jpg" title="Richard Matthew Stallman"></center><h4 id="Linus-Torvalds-1991"><a href="#Linus-Torvalds-1991" class="headerlink" title="Linus Torvalds, 1991"></a><center>Linus Torvalds, 1991</center></h4><center><img src="https://houhaiyun.github.io/img/images/Linux-history-3.jpg" title="Linus Torvalds, 1991"></center><h4 id="Linus-Torvalds给Minix新闻组的历史消息"><a href="#Linus-Torvalds给Minix新闻组的历史消息" class="headerlink" title="Linus Torvalds给Minix新闻组的历史消息"></a><center>Linus Torvalds给Minix新闻组的历史消息</center></h4><p><code>Linus Torvalds</code> 在芬兰赫尔辛基开始了 <code>Linux</code> 内核开发，他是为他的硬件-<code>Intel 30386 CPU</code>编写的程序。他也使用<code>Minix</code>和<code>GNU C</code>编译器。下面是<code>Linus Torvalds</code>给<code>Minix</code>新闻组的历史消息：</p><center><img src="https://houhaiyun.github.io/img/images/Linux-history-4.jpg" title="Linus Torvalds给Minix新闻组的历史消息"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://linux.cn/article-6469-1.html" target="_blank" rel="noopener">老照片：Linux的24 年历史，一步一个脚印</a></p><p><a href="http://linux.vbird.org/" target="_blank" rel="noopener">鸟哥<code>linux</code>私房菜</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Linux历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux历史 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么Linux？</title>
      <link href="/2017/07/01/Linux/"/>
      <url>/2017/07/01/Linux/</url>
      <content type="html"><![CDATA[<h3 id="什么是linux？"><a href="#什么是linux？" class="headerlink" title="什么是linux？"></a>什么是linux？</h3><p><code>Linux</code>是一种自由和开放源代码的类<code>UNIX</code>操作系统。目前运用领域最广泛、使用人数最多的操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为<code>Linux</code>操作系统。<code>Linux</code>也是自由软件和开放源代码软件发展中最著名的例子。只要遵循<code>GNU</code>通用公共许可证，任何个人和机构都可以自由地使用<code>Linux</code>的所有底层源代码，也可以自由地修改和再发布。大多数<code>Linux</code>系统还包括像提供<code>GUI</code>的<code>X Window</code>之类的程序。除了一部分专家之外，大多数人都是直接使用<code>Linux</code>发行版，而不是自己选择每一样组件或自行设置。<br><a id="more"></a></p><p><code>Linux</code>严格来说是单指操作系统的内核，因操作系统中包含了许多用户图形接口和其他实用工具。如今<code>Linux</code>常用来指基于<code>Linux</code>的完整操作系统，内核则改以<code>Linux</code>内核称之。由于这些支持用户空间的系统工具和库主要由理查德·斯托曼于1983年发起的<code>GNU</code>计划提供，自由软件基金会提议将其组合系统命名为<code>GNU/Linux</code>，但<code>Linux</code>不属于<code>GNU</code>计划，这个名称并没有得到社区的一致认同。</p><h3 id="linux吉祥物TUX"><a href="#linux吉祥物TUX" class="headerlink" title="linux吉祥物TUX"></a><code>linux</code>吉祥物<code>TUX</code></h3><p><code>Tux</code>是<code>Linux</code>官方的吉祥物，于1996年由<code>Larry Ewing</code>创造</p><center><img src="https://houhaiyun.github.io/img/images/Linux-logo.png" title="Linux 吉祥物"></center><h4 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h4><p><a href="https://zh.wikipedia.org/wiki/" target="_blank" rel="noopener">维基百科：Linux</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 什么Linux？ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 什么Linux？ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>冯.诺依曼体系结构</title>
      <link href="/2017/07/01/Linux-fengnuoyiman/"/>
      <url>/2017/07/01/Linux-fengnuoyiman/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>冯·诺伊曼结构</strong>（英语：<code>von Neumann architecture</code>），也称<strong>冯·诺伊曼模型</strong>（<code>Von Neumann model</code>）或<strong>普林斯顿结构</strong>（<code>Princeton architecture</code>），是一种将程序指令存储器和数据存储器合并在一起的电脑设计概念结构。<br><a id="more"></a></p><h3 id="冯诺依曼体系结构提出"><a href="#冯诺依曼体系结构提出" class="headerlink" title="冯诺依曼体系结构提出"></a>冯诺依曼体系结构提出</h3><p>1946年数学家冯·诺依曼于提出：计算机硬件由运算器、控制器、存储器、输入设备、输出设备组成。</p><center><img src="https://houhaiyun.github.io/img/images/fengnuoyiman-jiegou-1.jpg" title="冯.诺依曼体系结构"></center><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>以运算单元为中心</li><li>采用存储程序原理</li><li>存储器是按地址访问、线性编址的空间</li><li>控制流由指令流产生</li><li>指令由操作码和地址码组成</li><li>数据以二进制编码</li></ol><h3 id="冯·诺伊曼瓶颈"><a href="#冯·诺伊曼瓶颈" class="headerlink" title="冯·诺伊曼瓶颈"></a>冯·诺伊曼瓶颈</h3><p>将CPU与内存分开并非十全十美，反而会导致所谓的冯·诺伊曼瓶颈（von Neumann bottleneck）：在CPU与内存之间的流量（数据传输率）与内存的容量相比起来相当小，在现代电脑中，流量与CPU的工作效率相比之下非常小，在某些情况下（当CPU需要在巨大的数据上运行一些简单指令时），数据流量就成了整体效率非常严重的限制。CPU将会在数据输入或输出内存时闲置。由于CPU速度远大于内存读写速率，因此瓶颈问题越来越严重。</p><h3 id="冯诺依曼"><a href="#冯诺依曼" class="headerlink" title="冯诺依曼"></a>冯诺依曼</h3><center><img src="https://houhaiyun.github.io/img/images/fengnuoyiman-jiegou-2.jpg" title="冯.诺依曼"></center><h4 id="致谢："><a href="#致谢：" class="headerlink" title="致谢："></a>致谢：</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84#.E7.90.86.E8.AB.96" target="_blank" rel="noopener">维基百科：冯·诺伊曼结构</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 冯.诺依曼体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冯.诺依曼体系结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ABI和API</title>
      <link href="/2017/07/01/Linux-ABI-API/"/>
      <url>/2017/07/01/Linux-ABI-API/</url>
      <content type="html"><![CDATA[<h3 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h3><p>应用二进制接口（英语：<code>application binary interface</code>，缩写为 <code>ABI</code>）描述了应用程序（或者其他类型）和操作系统之间或其他应用程序的低级接口。允许编译好的目标代码在使用兼容<code>ABI</code>的系统中无需改动就能运行。<br><a id="more"></a></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>应用程序接口（英语：<code>Application Programming Interface</code>，简称：<code>API</code>），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。</p><p>API定义了源代码和库之间的接口，因此同样的源代码可以在支持这个API的任何系统中编译。</p><center><img src="https://houhaiyun.github.io/img/images/ABI-API.gif" title="ABI and API"></center><h4 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">维基百科：应用二进制接口</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">维基百科：应用程序接口</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> ABI和API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABI和API </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
