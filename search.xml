<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MarraiDB安装-yum方式</title>
      <link href="/2017/11/11/MySQL-MariaDB-Install-Yum/"/>
      <url>/2017/11/11/MySQL-MariaDB-Install-Yum/</url>
      <content type="html"><![CDATA[<h3 id="官方yum仓库获取方式"><a href="#官方yum仓库获取方式" class="headerlink" title="官方yum仓库获取方式"></a>官方yum仓库获取方式</h3><p><a href="https://downloads.mariadb.org/mariadb/repositories/" target="_blank" rel="noopener">项目官方：https://downloads.mariadb.org/mariadb/repositories/</a></p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/MySQL-MariaDB-Install-Yum-1.gif" title="官方yum仓库获取方式"></center><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>如果使用<code>yum</code>安装时，有两个<code>yum</code>源，都有<code>mysql</code>包，那么安装时<code>yum</code>会使用版本较高的安装。也可以配置<code>MariaDB</code>官方<code>yum</code>源进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# yum install -y mysql mysql-server     &lt;==安装mysql客户端和服务器端</span><br><span class="line">[root@centos6 ~]# service mysqld start</span><br><span class="line">Starting mysqld:                                           [  OK  ]     &lt;==启动mysql</span><br><span class="line"> [root@centos6 ~]# mysql            &lt;==安装完成后默认root是没有密码的，默认连接用户为root，不安全。</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT USER()            &lt;==查看当前登陆用户</span><br><span class="line">    -&gt; ;</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="提高安全性"><a href="#提高安全性" class="headerlink" title="提高安全性"></a>提高安全性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# mysql_secure_installation         &lt;==此脚本为安装完成mysql，MySQL提供的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In order to log into MySQL to secure it, we&apos;ll need the current</span><br><span class="line">password for the root user.  If you&apos;ve just installed MySQL, and</span><br><span class="line">you haven&apos;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):       &lt;==输入当前root的密码，因为默认root是没有密码的所以直接回车就ok了</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MySQL</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y      &lt;==是否设置root密码</span><br><span class="line">New password:                   &lt;==输入密码</span><br><span class="line">Re-enter new password:          &lt;==再次输入密码</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MySQL installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MySQL without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y     &lt;==是否移除匿名用户</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n       &lt;==是否禁止root用户远程登陆</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named &apos;test&apos; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] n      &lt;==是否移除test数据库</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y            &lt;==是否加载特权表，就是是否生效</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">All done!  If you&apos;ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MySQL!</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# mysql         &lt;==现在我们已经无法使用匿名用户连接了</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br><span class="line">[root@centos6 ~]# mysql -u root -p      &lt;==必须要指定用户和密码才可以登陆</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT USER();</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">[root@centos6 ~]# </span><br><span class="line">[root@centos6 ~]# mysql -uroot -pmagedu         &lt;==也可以使用-p后面直接跟密码</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 12</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br></pre></td></tr></table></figure><h3 id="查看msyql-user表"><a href="#查看msyql-user表" class="headerlink" title="查看msyql.user表"></a>查看msyql.user表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user,host,password FROM mysql.user;</span><br><span class="line">+------+--------------------+-------------------------------------------+</span><br><span class="line">| user | host               | password                                  |</span><br><span class="line">+------+--------------------+-------------------------------------------+</span><br><span class="line">| root | localhost          | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">| root | centos6.haiyun.com | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">| root | 127.0.0.1          | *6B8CCC83799A26CD19D7AD9AEEADBCD30D8A8664 |</span><br><span class="line">+------+--------------------+-------------------------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="mysql-配置"><a href="#mysql-配置" class="headerlink" title="mysql 配置"></a>mysql 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">侦听3306/tcp端口可以在绑定有一个或全部接口IP上</span><br><span class="line">- Vim /etc/my.cnf</span><br><span class="line">    - [mysqld]加一行：</span><br><span class="line">    - skip-networking=1 跳过域名解析，和sshd服务的useDNS相似</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MarraiDB安装-yum方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarraiDB安装-通用二进制方式</title>
      <link href="/2017/11/11/MySQL-MariaDB-Install-Binary/"/>
      <url>/2017/11/11/MySQL-MariaDB-Install-Binary/</url>
      <content type="html"><![CDATA[<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p><code>MariaDB</code>的安装方法大致有以下四种，本例是关于通用二进制（俗称绿色包）格式的压缩文件进行安装。</p><ul><li>系统自带<code>RPM</code>包安装</li><li><code>MariaDB</code>官方自带的<code>rpm</code>包</li><li>通用二进制格式</li><li>源码编译</li></ul><a id="more"></a><h3 id="mariadb下载"><a href="#mariadb下载" class="headerlink" title="mariadb下载"></a>mariadb下载</h3><p><a href="http://mariadb.org/" target="_blank" rel="noopener">官网：http://mariadb.org/</a></p><p>目前最新版本为：10.3.1，稳定版本为：10.2.8</p><p>本次实验使用的版本为：稳定版10.2.8</p><h3 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0. 环境准备"></a>0. 环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# rpm -qa libaio        &lt;==判断系统安装这两个lib包，如果不按爪给你这两个lib包在初始化是会报错的</span><br><span class="line">libaio-0.3.109-13.el7.x86_64</span><br><span class="line">libaio-0.3.109-13.el7.i686</span><br><span class="line">[root@centos7 dbdata]# yum install -y libaio.so.1</span><br><span class="line">[root@centos7 mysql]# yum install -y libaio.x86_64 libaio-devel.x86_64</span><br></pre></td></tr></table></figure><h3 id="1-准备用户"><a href="#1-准备用户" class="headerlink" title="1. 准备用户"></a>1. 准备用户</h3><p>mariadb和mysql运行使用的用户都是mysql，所以需要创建mysql用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# getent passwd mysql       &lt;==mysql用户不存在</span><br><span class="line">[root@centos7 ~]# useradd -r -m -d /app/dbdata -s /sbin/nologin mysql       &lt;==创建mysql用户，指定家目录为/app/dbdata，且为系统用户，默认shell为/sbin/nologin无法登陆</span><br><span class="line">[root@centos7 ~]# getent passwd mysql           &lt;==确认用户mysql信息    </span><br><span class="line">mysql: x:997:995::/app/dbdata:/sbin/nologin</span><br><span class="line">[root@centos7 ~]# ll /app/dbdata/ -d            &lt;==查看mysql家目录</span><br><span class="line">drwx------. 2 mysql mysql 62 Sep 25 09:43 /app/dbdata/</span><br></pre></td></tr></table></figure></p><h3 id="2-准备二进制程序"><a href="#2-准备二进制程序" class="headerlink" title="2. 准备二进制程序"></a>2. 准备二进制程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 app]# tar xf mariadb-10.2.8-linux-x86_64.tar.gz -C /usr/local/         &lt;==解压mariadb到/usr/local目录下</span><br><span class="line">[root@centos7 app]# cd /usr/local/      &lt;==切换到/usr/local目录</span><br><span class="line">[root@centos7 local]# ls</span><br><span class="line">bin  games    lib    libexec                      sbin   src</span><br><span class="line">etc  include  lib64  mariadb-10.2.8-linux-x86_64  share</span><br><span class="line">[root@centos7 local]# ln -sv mariadb-10.2.8-linux-x86_64/ mysql     &lt;==创建软链接，名字必须交mysql</span><br><span class="line">‘mysql’ -&gt; ‘mariadb-10.2.8-linux-x86_64/’</span><br><span class="line">[root@centos7 local]# ls        &lt;==确认软链接已经别创建</span><br><span class="line">bin  games    lib    libexec                      mysql  share</span><br><span class="line">etc  include  lib64  mariadb-10.2.8-linux-x86_64  sbin   src</span><br></pre></td></tr></table></figure><h3 id="3-准备配置文件"><a href="#3-准备配置文件" class="headerlink" title="3. 准备配置文件"></a>3. 准备配置文件</h3><ul><li>配置格式：类<code>ini</code>格式，各程序由单个配置文件提供配<code>[prog_name]</code></li><li>配置文件查找次序：后面覆盖前面的配置文件</li><li><code>/etc/my.cnf</code> –&gt; <code>/etc/mysql/my.cnf</code> –&gt; <code>--default-extrafile=/PATH/TO/CONF_FILE</code> –&gt; <code>~/.my.cnf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 local]# mkdir /etc/mysql      &lt;==创建mysql目录</span><br><span class="line">[root@centos7 mysql]# cp /usr/local/mariadb-10.2.8-linux-x86_64/support-files/my-huge.cnf /etc/mysql/my.cnf           &lt;==cpmysql配置文件</span><br><span class="line">[root@centos7 mysql]# vim /etc/mysql/my.cnf     &lt;==编辑配置文件，添加一下三行，在[mysqld]后面</span><br><span class="line">[mysqld]            </span><br><span class="line">datadir = /app/dbdata       &lt;==指定数据库文件路径，必须指定为/app/dbdata</span><br><span class="line">innodb_file_per_table = on  &lt;==使用innodb引擎，每个表都是一个独立的文件</span><br><span class="line">skip_name_resolve = on      &lt;==禁止主机名解析</span><br></pre></td></tr></table></figure><h3 id="4-创建数据库文件"><a href="#4-创建数据库文件" class="headerlink" title="4. 创建数据库文件"></a>4. 创建数据库文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# ls /app/dbdata/           &lt;==没有文件</span><br><span class="line">[root@centos7 mysql]# ./scripts/mysql_install_db --help     &lt;==查看此脚本的帮助信息，此脚本是用于创建数据库文件的脚本，创建数据库文件相当于初始化</span><br><span class="line">Usage: ./scripts/mysql_install_db [OPTIONS]</span><br><span class="line">  --auth-root-authentication-method=normal|socket</span><br><span class="line">                       Chooses the authentication method for the created initial</span><br><span class="line">                       root user. The default is &apos;normal&apos; to creates a root user</span><br><span class="line">                       that can login without password, which can be insecure.</span><br><span class="line">                       The alternative &apos;socket&apos; allows only the system root user</span><br><span class="line">                       to login as MariaDB root; this requires the unix socket</span><br><span class="line">                       authentication plugin.</span><br><span class="line">  --auth-root-socket-user=user</span><br><span class="line">                       Used with --auth-root-authentication-method=socket. It</span><br><span class="line">                       specifies the name of the MariaDB root account, as well</span><br><span class="line">                       as of the system account allowed to access it. Defaults</span><br><span class="line">                       to &apos;root&apos;.</span><br><span class="line">  --basedir=path       The path to the MariaDB installation directory.</span><br><span class="line">  --builddir=path      If using --srcdir with out-of-directory builds, you</span><br><span class="line">                       will need to set this to the location of the build</span><br><span class="line">                       directory where built files reside.</span><br><span class="line">  --cross-bootstrap    For internal use.  Used when building the MariaDB system</span><br><span class="line">                       tables on a different host than the target.</span><br><span class="line">  --datadir=path       The path to the MariaDB data directory.</span><br><span class="line">  --defaults-extra-file=name</span><br><span class="line">                       Read this file after the global files are read.</span><br><span class="line">  --defaults-file=name Only read default options from the given file name.</span><br><span class="line">  --force              Causes mysql_install_db to run even if DNS does not</span><br><span class="line">                       work.  In that case, grant table entries that</span><br><span class="line">                       normally use hostnames will use IP addresses.</span><br><span class="line">  --help               Display this help and exit.                     </span><br><span class="line">  --ldata=path         The path to the MariaDB data directory. Same as</span><br><span class="line">                       --datadir.</span><br><span class="line">  --no-defaults        Don&apos;t read default options from any option file.</span><br><span class="line">  --defaults-file=path Read only this configuration file.</span><br><span class="line">  --rpm                For internal use.  This option is used by RPM files</span><br><span class="line">                       during the MariaDB installation process.</span><br><span class="line">  --skip-auth-anonymous-user</span><br><span class="line">                       Do not install an unprivileged anonymous user.</span><br><span class="line">  --skip-name-resolve  Use IP addresses rather than hostnames when creating</span><br><span class="line">                       grant table entries.  This option can be useful if</span><br><span class="line">                       your DNS does not work.</span><br><span class="line">  --srcdir=path        The path to the MariaDB source directory.  This option</span><br><span class="line">                       uses the compiled binaries and support files within the</span><br><span class="line">                       source tree, useful for if you don&apos;t want to install</span><br><span class="line">                       MariaDB yet and just want to create the system tables.</span><br><span class="line">  --user=user_name     The login username to use for running mysqld.  Files</span><br><span class="line">                       and directories created by mysqld will be owned by this</span><br><span class="line">                       user.  You must be root to use this option.  By default</span><br><span class="line">                       mysqld runs using your current login name and files and</span><br><span class="line">                       directories that it creates will be owned by you.</span><br><span class="line"></span><br><span class="line">All other options are passed to the mysqld program</span><br><span class="line"></span><br><span class="line">[root@centos7 mysql]# ./scripts/mysql_install_db --datadir=/app/dbdata --user=mysql        &lt;==指定mysql数据存储目录为/app/dbdata，用户为mysql</span><br><span class="line">Installing MariaDB/MySQL system tables in &apos;/app/dbdata&apos; ...</span><br><span class="line">2017-09-25 11:02:27 140386981918528 [Warning] &apos;THREAD_CONCURRENCY&apos; is deprecated and will be removed in a future release.</span><br><span class="line">2017-09-25 11:02:30 140386857879296 [Warning] Failed to load slave replication state from table mysql.gtid_slave_pos: 1146: Table &apos;mysql.gtid_slave_pos&apos; doesn&apos;t exist</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">&apos;./bin/mysqladmin&apos; -u root password &apos;new-password&apos;</span><br><span class="line">&apos;./bin/mysqladmin&apos; -u root -h centos7.haiyun.com password &apos;new-password&apos;</span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">&apos;./bin/mysql_secure_installation&apos;</span><br><span class="line"></span><br><span class="line">which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">See the MariaDB Knowledgebase at http://mariadb.com/kb or the</span><br><span class="line">MySQL manual for more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MariaDB daemon with:</span><br><span class="line">cd &apos;.&apos; ; ./bin/mysqld_safe --datadir=&apos;/app/dbdata&apos;</span><br><span class="line"></span><br><span class="line">You can test the MariaDB daemon with mysql-test-run.pl</span><br><span class="line">cd &apos;./mysql-test&apos; ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems at http://mariadb.org/jira</span><br><span class="line"></span><br><span class="line">The latest information about MariaDB is available at http://mariadb.org/.</span><br><span class="line">You can find additional information about the MySQL part at:</span><br><span class="line">http://dev.mysql.com</span><br><span class="line">Consider joining MariaDB&apos;s strong and vibrant community:</span><br><span class="line">https://mariadb.org/get-involved/</span><br><span class="line"></span><br><span class="line">at http://mariadb.org/jira</span><br><span class="line">[root@centos7 mysql]# ls /app/dbdata/       &lt;==可以看到文件已经生成</span><br><span class="line">aria_log.00000001  ibdata1      mysql             mysql-bin.state</span><br><span class="line">aria_log_control   ib_logfile0  mysql-bin.000001  performance_schema</span><br><span class="line">ib_buffer_pool     ib_logfile1  mysql-bin.index   test</span><br></pre></td></tr></table></figure><h3 id="5-准备服务脚本"><a href="#5-准备服务脚本" class="headerlink" title="5. 准备服务脚本"></a>5. 准备服务脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# pwd</span><br><span class="line">/usr/local/mysql</span><br><span class="line">[root@centos7 mysql]# cp support-files/mysql.server /etc/init.d/mysqld </span><br><span class="line">[root@centos7 mysql]# chkconfig --list</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      &apos;systemctl list-dependencies [target]&apos;.</span><br><span class="line"></span><br><span class="line">netconsole     0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line">network        0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">[root@centos7 mysql]# chkconfig --add mysqld</span><br><span class="line">[root@centos7 mysql]# chkconfig --list</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      &apos;systemctl list-dependencies [target]&apos;.</span><br><span class="line"></span><br><span class="line">mysqld         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">netconsole     0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line">network        0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">[root@centos7 mysql]# chkconfig mysqld on</span><br></pre></td></tr></table></figure><h3 id="6-准备日志文件"><a href="#6-准备日志文件" class="headerlink" title="6. 准备日志文件"></a>6. 准备日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# service mysqld start</span><br><span class="line">Starting mysqld (via systemctl):                           [  OK  ]</span><br><span class="line">[root@centos7 mysql]# setfacl -m u:mysql:rwx /var/log/</span><br><span class="line">[root@centos7 mysql]# service mysqld start</span><br><span class="line">Starting mysqld (via systemctl):  Job for mysqld.service failed because the control process exited with error code. See &quot;systemctl status mysqld.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">                                                           [FAILED]</span><br><span class="line">[root@centos7 mysql]# mkdir /var/log/mariadb        &lt;==创建日志目录</span><br><span class="line">[root@centos7 mysql]# touch /var/log/mariadb/mariadb.log    &lt;==穿件日志文件</span><br><span class="line">[root@centos7 mysql]# setfacl -R -m u:mysql:rwx /var/log/mariadb        &lt;==设置acl使mysql用户对/var/log/mariadb目录有权限</span><br></pre></td></tr></table></figure><h3 id="7-设置环境变量"><a href="#7-设置环境变量" class="headerlink" title="7. 设置环境变量"></a>7. 设置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# vim /etc/profile.d/mysql.sh</span><br><span class="line">export PATH=/usr/local/mysql/bin/:$PATH</span><br><span class="line">[root@centos7 mysql]# source /etc/profile.d/mysql.sh    &lt;==同步环境变量到本地</span><br><span class="line">[root@centos7 mysql]# echo $PATH</span><br><span class="line">/usr/local/mysql/bin/:/usr/local/mysql/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><h3 id="8-连接数据库测试"><a href="#8-连接数据库测试" class="headerlink" title="8. 连接数据库测试"></a>8. 连接数据库测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# mysql</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 12</span><br><span class="line">Server version: 10.2.8-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SELECT USER();</span><br><span class="line">+----------------+</span><br><span class="line">| USER()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="9-安全初始化"><a href="#9-安全初始化" class="headerlink" title="9. 安全初始化"></a>9. 安全初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# mysql_secure_installation         &lt;==如果没有此安全初始化脚本，可能是环境变量的问题</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&apos;ll need the current</span><br><span class="line">password for the root user.  If you&apos;ve just installed MariaDB, and</span><br><span class="line">you haven&apos;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none): </span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password: </span><br><span class="line">Re-enter new password: </span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &apos;test&apos; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&apos;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br></pre></td></tr></table></figure><h3 id="10-优化后连接"><a href="#10-优化后连接" class="headerlink" title="10. 优化后连接"></a>10. 优化后连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]# mysql         &lt;==优化后就无法连接了</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br><span class="line">[root@centos7 mysql]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 19</span><br><span class="line">Server version: 10.2.8-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MarraiDB安装-通用二进制方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL</title>
      <link href="/2017/11/11/MySQL/"/>
      <url>/2017/11/11/MySQL/</url>
      <content type="html"><![CDATA[<h3 id="什么是MySQL？"><a href="#什么是MySQL？" class="headerlink" title="什么是MySQL？"></a>什么是MySQL？</h3><p><code>MySQL</code>是一个关系型数据库管理系统，由瑞典 <code>MySQL AB</code> 公司开发，目前属于 <code>Oracle</code> 旗下公司。<code>MySQL</code> 最流行的关系型数据库管理系统，在 <code>WEB</code> 应用方面 <code>MySQL</code> 是最好的 RDBMS应用软件之一。<code>MySQL</code> 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<code>MySQL</code> 所使用的 <code>SQL</code> 语言是用于访问数据库的最常用标准化语言。<code>MySQL</code> 软件采用了双授权政策（本词条“授权政策”），它分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。由于其社区版的性能卓越，搭配 <code>PHP</code> 和 <code>Apache</code> 可组成良好的开发环境。</p><a id="more"></a><h3 id="MySQL数据库实现模型"><a href="#MySQL数据库实现模型" class="headerlink" title="MySQL数据库实现模型"></a>MySQL数据库实现模型</h3><center><img src="https://houhaiyun.github.io/img/images/MySQL-1.jpg" title="MySQL架构"></center><p><strong>通过上图可以把数据库操作分为以下四个阶段：</strong></p><ol><li>用户通过本地或网络使用C、PHP等多种开发语言开发的接口连接MySQL数据库服务器。</li><li>用户接入服务器后进入连接池，在连接池中实现用户认证、线程重用、并发连接数限制、内存检测、连接缓存等操作，而后数据处理结果进入下一层面，接受用户输入的指令，结合SQL接口，分析器，优化器，缓存缓存管理器，将指令处理后发送给数据库引擎完成数据库管理、维护、集群、配置等操作。</li><li>数据库引擎接收到其能支持的数据处理命令后，对数据执行响应的查询、修改等操作，数据库引擎是直接数据处理层面。</li><li>物理存储层面，数据的最终存储位置，根据数据库引擎的处理以索引顺序或者堆文件存储模式存储底层数据。</li></ol><p><strong>上图中的部分组件介绍：</strong></p><ol><li><code>Connectors</code>：是连接<code>mysql</code>的各种客户端和接口。</li><li><code>Connection Pool</code>：用于创建用户连接，缓存连接线程，做连接池。还有鉴权、进行身份验证、线程重用、连接限制、检查内存、数据缓存、管理用户的连接，线程处理等需要缓存的需求。</li><li><code>Management Serveices &amp; Utilities</code>：系统管理和控制工具备份和恢复的安全性，复制、集群、管理、配置和迁移元数据。</li><li><code>SQL Interface</code>：<code>SQL</code>接口，接受用户的SQL命令，并且返回用户需要查询的结果。比如<code>select from</code>就是调用<code>SQL Interface</code>。进行<code>DML</code>、<code>DDL</code>、存储过程、视图、触发器等操作和管理；用户通过<code>SQL</code>命令查询所需结果。</li><li><code>Parser</code>：解释器，<code>SQL</code>命令传递到解析器的时候会被解析器验证和解析。解析器是由<code>Lex</code>和<code>YACC</code>实现的，是一个很长的脚本。主要功能：<ol><li>将<code>SQL</code>语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的</li><li>如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的</li></ol></li><li><code>Optimizer</code>：查询优化器 <code>SQL</code>语句在查询之前会使用查询优化器对查询进行优化。它使用的是“选取-投影-联接”策略进行查询。<ul><li>用一个例子就可以理解： <code>select uid,name from user where gender = 1</code>;这个<code>select</code> 查询先根据<code>where</code> 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤，这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤将这两个查询条件联接起来生成最终查询结果</li></ul></li><li><code>Cache</code>和<code>Buffer</code>：查询缓存，如果查询缓存有命中的查询结果，查询语法就可以直接去查村缓存中读取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，<code>key</code>缓存，权限缓存等。</li><li><code>Engine</code>：存储引擎：存储引擎是<code>Mysql</code>中具体的与文件打交道的子系统。也就是Mysql最具有特色的一个地方。<code>Mysql</code>的存储引擎是插件式的它根据<code>Mysql AB</code>公司提供的文件访问层的一个抽象接口来定制一种文件访问机制（这种访问机制就叫存储引擎）现在有很多种存储引擎，各个引擎的优势各不一样，最常用的<code>MyISAM</code>,<code>InnoDB</code>,<code>NDB</code>,<code>Archive</code>,<code>Federated</code>,<code>Memory</code>,<code>Merge</code>,<code>Partner</code>,<code>Community</code>,<code>Custom</code>等等。</li></ol><h3 id="系统特性"><a href="#系统特性" class="headerlink" title="系统特性"></a>系统特性</h3><ul><li>使用 <code>C</code>和 <code>C++</code>编写，并使用了多种编译器进行测试，保证了源代码的可移植性。 </li><li>支持 <code>AIX</code>、<code>FreeBSD</code>、<code>HP-UX</code>、<code>Linux</code>、<code>Mac OS</code>、<code>NovellNetware</code>、<code>OpenBSD</code>、<code>OS/2 Wrap</code>、<code>Solaris</code>、<code>Windows</code>等多种操作系统。 </li><li>为多种编程语言提供了 <code>API</code>。这些编程语言包括 <code>C</code>、<code>C++</code>、<code>Python</code>、<code>Java</code>、<code>Perl</code>、<code>PHP</code>、<code>Eiffel</code>、<code>Ruby</code>、<code>.NET</code>和 <code>Tcl</code> 等。 </li><li>支持多线程，充分利用 <code>CPU</code> 资源。 </li><li>优化的 <code>SQL</code>查询算法，有效地提高查询速度。 </li><li>既能够作为一个单独的应用程序应用在客户端服务器网络环境中，也能够作为一个库而嵌入到其他的软件中。 </li><li>提供多语言支持，常见的编码如中文的 <code>GB 2312</code>、<code>BIG5</code>，日文的 <code>Shift_JIS</code>等都可以用作数据表名和数据列名。 </li><li>提供 <code>TCP/IP</code>、<code>ODBC</code> 和 <code>JDBC</code>等多种数据库连接途径。 </li><li>提供用于管理、检查、优化数据库操作的管理工具。 </li><li>支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 </li><li>支持多种存储引擎。 </li><li><code>MySQL</code> 是开源的，所以你不需要支付额外的费用。 </li><li><code>MySQL</code> 使用标准的 <code>SQL</code>数据语言形式。 </li><li><code>MySQL</code> 对 <code>PHP</code> 有很好的支持，<code>PHP</code>是目前最流行的 <code>Web</code> 开发语言。 </li><li><code>MySQL</code>是可以定制的，采用了 <code>GPL</code>协议，你可以修改源码来开发自己的 <code>MySQL</code> 系统。 </li><li>在线 <code>DDL</code>/更改功能，数据架构支持动态应用程序和开发人员灵活性（5.6新增） </li><li>复制全局事务标识，可支持自我修复式集群（5.6新增） </li><li>复制无崩溃从机，可提高可用性（5.6新增） </li><li>复制多线程从机，可提高性能（5.6新增）</li></ul><h3 id="应用环境组合"><a href="#应用环境组合" class="headerlink" title="应用环境组合"></a>应用环境组合</h3><p>与其他的大型数据库例如 <code>Oracle</code>、<code>DB2</code>、<code>SQL Server</code>等相比，<code>MySQL</code> 自有它的不足之处，但是这丝毫也没有减少它受欢迎的程度。对于一般的个人使用者和中小型企业来说，MySQL提供的功能已经绰绰有余，而且由于 <code>MySQ L</code>是开放源码软件，因此可以大大降低总体拥有成本。<code>Linux</code>作为操作系统，<code>Apache</code>和 <code>Nginx</code>作为 <code>Web</code> 服务器，<code>MySQL</code> 作为数据库，<code>PHP</code>/<code>Perl</code>/<code>Python</code>作为服务器端脚本解释器。由于这四个软件都是免费或开放源码软件（<code>FLOSS</code>)，因此使用这种方式不用花一分钱（除开人工成本）就可以建立起一个稳定、免费的网站系统，被业界称为<code>“LAMP“</code>或<code>“LNMP”</code>组合。</p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li><code>MyISAM</code>在<code>MySQL 5.0</code> 之前是默认数据库引擎，最为常用。拥有较高的插入，查询速度，但不支持事务 </li><li><code>InnoDB</code>事务型数据库的首选引擎，支持ACID事务，支持行级锁定, <code>MySQL 5.5</code> 起成为默认数据库引擎 </li><li><code>BDB</code>源 自 <code>Berkeley DB</code>，事务型数据库的另一种选择，支持<code>Commit</code> 和<code>Rollback</code> 等其他事务特性 </li><li><code>Memory</code>所有数据置于内存的存储引擎，拥有极高的插入，更新和查询效率。但是会占用和数据量成正比的内存空间。并且其内容会在 <code>MySQL</code> 重新启动时丢失 </li><li><code>Merge</code>将一定数量的 <code>MyISAM</code> 表联合而成一个整体，在超大规模数据存储时很有用 </li><li><code>Archive</code>非常适合存储大量的独立的，作为历史记录的数据。因为它们不经常被读取。<code>Archive</code> 拥有高效的插入速度，但其对查询的支持相对较差 </li><li><code>Federated</code>将不同的 <code>MySQL</code> 服务器联合起来，逻辑上组成一个完整的数据库。非常适合分布式应用 </li><li><code>Cluster</code>/<code>NDB</code>高冗余的存储引擎，用多台数据机器联合提供服务以提高整体性能和安全性。适合数据量大，安全和性能要求高的应用 </li><li><code>CSV</code>： 逻辑上由逗号分割数据的存储引擎。它会在数据库子目录里为每个数据表创建一个 <code>.csv</code> 文件。这是一种普通文本文件，每个数据行占用一个文本行。<code>CSV</code> 存储引擎不支持索引。 </li><li><code>BlackHole</code>：黑洞引擎，写入的任何数据都会消失，一般用于记录 <code>binlog</code>做复制的中继 </li><li><code>EXAMPLE</code> 存储引擎是一个不做任何事情的存根引擎。它的目的是作为 <code>MySQL</code> 源代码中的一个例子，用来演示如何开始编写一个新存储引擎。同样，它的主要兴趣是对开发者。<code>EXAMPLE</code> 存储引擎不支持编索引。</li></ul><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p><code>ACID</code>，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（<code>Atomicity</code>）、一致性（<code>Consistency</code>）、隔离性（<code>Isolation</code>）、持久性（<code>Durability</code>）。一个支持事务（<code>Transaction</code>）的数据库，必需要具有这四种特性，否则在事务过程（Transaction <code>processing</code>）当中无法保证数据的正确性，交易过程极可能达不到交易方的要求。</p><ul><li>原子性<ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（<code>Rollback</code>）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul></li><li>一致性<ul><li>在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。具体来说就是，比如表与表之间存在外键约束关系，那么你对数据库进行的修改操作就必需要满足约束条件，即如果你修改了一张表中的数据，那你还需要修改与之存在外键约束关系的其他表中对应的数据，以达到一致性。</li></ul></li><li>隔离性<ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul></li><li>持久性<ul><li>在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。 由于一项操作通常会包含许多子操作，而这些子操作可能会因为硬件的损坏或其他因素产生问题，要正确实现<code>ACID</code>并不容易。<code>ACID</code>建议数据库将所有需要更新以及修改的资料一次操作完毕，但实际上并不可行。 </li></ul></li></ul><p> 目前主要有两种方式实现<code>ACID</code>：第一种是<code>Write ahead logging</code>，也就是日志式的方式。第二种是<code>Shadow paging</code>。</p><h3 id="MySQL替代产品"><a href="#MySQL替代产品" class="headerlink" title="MySQL替代产品"></a>MySQL替代产品</h3><p>随着 <code>MySQL</code> 被 <code>Oracle</code> 收购，<code>MySQL</code> 的用户和开发者开始质疑开源数据库的命运，与此同时他们开始寻找替代品。</p><ul><li><code>MariaDB</code>：从 <code>MySQL</code> 转向 <code>MariaDB</code>的代表厂家：谷歌（2013年9月）、<code>RedHat</code>（2013年6月）、维基百科（2013年4月） 。<code>MariaDB</code>如同 <code>MySQL</code> 的影子版本，<code>MariaDB</code>是 <code>MySQL</code> 的一个分支版本（<code>branch</code>），而不是衍生版本（<code>folk</code>），提供的功能可和 <code>MySQL</code> 完全兼容。 </li><li><code>PostgreSQL</code>：从 <code>MySQL</code> 转向 <code>PostgreSQL</code>的代表厂家：苹果（2011年） 。</li><li><code>NoSQL</code>：(<code>NoSQL</code> = <code>Not Only SQL</code>)，意即 <strong>不仅仅是 SQL</strong> ，是一项全新的数据库革命性运动。<code>NoSQL</code>指的是非关系型的数据库。</li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.jianshu.com/p/bc66ab95717c" target="_blank" rel="noopener">简书：mysql的架构</a></p><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>目前流行的开源RDBMS</title>
      <link href="/2017/11/11/MySQL-Liuxing-Database/"/>
      <url>/2017/11/11/MySQL-Liuxing-Database/</url>
      <content type="html"><![CDATA[<h3 id="WebScaleSQL"><a href="#WebScaleSQL" class="headerlink" title="WebScaleSQL"></a>WebScaleSQL</h3><p>2015年1月20日，<code>Facebook</code>宣布阿里巴巴旗下的阿里云RDS团队正式加入<code>WebScaleSQL</code>。<code>WebScaleSQL</code>是<code>Facebook</code>、 <code>Google</code>、<code>Twitter</code>和<code>Linkedin</code>四家公司的<code>MySQL</code>团队发起的<code>MySQL</code>开源组织，旨在改进<code>MySQL</code>在规模和性能等方面的问题。<code>WebScaleSQL</code>是基于<code>MySQL 5.6</code> 社区版本改编的<code>MySQL</code>通用分支，基于<code>GPL</code>开源协议发布。<code>WebScaleSQL</code>目前已经做了很多性能改进工作，包括：客户端异步协调、逻辑预读、查询限流、服务端线程池优化、InnoDB大页支持等等。由于我们的分支上本身有一些定制化的需求，因此不会直接使用<code>WebScaleSQL</code>分支提供线上服务，但是这些改进对于我们都是很感兴趣的，好的特性会被吸收进来。因为我们有各种各样应用场景的用户，对<code>MySQL</code>本身的要求也比较高。比如大并发连接的用户，就需要线程池；存大量历史数据的用户，就要求高的压缩比等等。通过这可以看出虽然<code>WebScaleSQL</code>诞生时间较晚，但是其维护力量可以说是很强大的，最后用一句话概括：这款数据库就是专门为<code>web</code>服务设计的数据库。</p><a id="more"></a><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><p><code>PostgreSQL</code>是以加州大学伯克利分校计算机系开发的 <code>POSTGRES</code>，现在已经更名为<code>PostgreSQL</code>，版本 4.2为基础的对象关系型数据库管理系统（<code>ORDBMS</code>）。<code>PostgreSQL</code>支持大部分 <code>SQL</code>标准并且提供了许多其他现代特性：复杂查询、外键、触发器、视图、事务完整性、<code>MVCC</code>。同样，<code>PostgreSQL</code> 可以用许多方法扩展，比如， 通过增加新的数据类型、函数、操作符、聚集函数、索引。免费使用、修改、和分发 <code>PostgreSQL</code>，不管是私用、商用、还是学术研究使用。</p><h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><p><code>SQLite</code>，是一款轻型的数据库，是遵守<code>ACID</code>的关系型数据库管理系统，它包含在一个相对小的<code>C</code>库中。它是<code>D.RichardHipp</code>建立的公有领域项目。它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百<code>K</code>的内存就够了。它能够支持<code>Windows</code>/<code>Linux</code>/<code>Unix</code>等等主流的操作系统，同时能够跟很多程序语言相结合，比如 <code>Tcl</code>、<code>C#</code>、<code>PHP</code>、<code>Java</code>等，还有<code>ODBC</code>接口，同样比起<code>Mysql</code>、<code>PostgreSQL</code>这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。<code>SQLite</code>第一个<code>Alpha</code>版本诞生于2000年5月。 至2015年已经有15个年头，<code>SQLite</code>也迎来了一个版本 <code>SQLite 3</code>已经发布。</p><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p><code>MariaDB</code>数据库管理系统是<code>MySQL</code>的一个分支，主要由开源社区在维护，采用<code>GPL</code>授权许可 <code>MariaDB</code>的目的是完全兼容<code>MySQL</code>，包括<code>API</code>和命令行，使之能轻松成为<code>MySQL</code>的代替品。在存储引擎方面，使用<code>XtraDB</code>（英语：<code>XtraDB</code>）来代替<code>MySQL</code>的<code>InnoDB</code>。 <code>MariaDB</code>由<code>MySQL</code>的创始人<code>Michael Widenius</code>（英语：<code>Michael Widenius</code>）主导开发，他早前曾以10亿美元的价格，将自己创建的公司<code>MySQL AB</code>卖给了<code>SUN</code>，此后，随着<code>SUN</code>被甲骨文收购，<code>MySQL</code>的所有权也落入<code>Oracle</code>的手中。<code>MariaDB</code>名称来自<code>Michael Widenius</code>的女儿<code>Maria</code>的名字。</p><p><code>MariaDB</code>基于事务的<code>Maria</code>存储引擎，替换了<code>MySQL</code>的<code>MyISAM</code>存储引擎，它使用了<code>Percona</code>的 <code>XtraDB</code>，I<code>nnoDB</code>的变体，分支的开发者希望提供访问即将到来的<code>MySQL 5.4 InnoDB</code>性能。这个版本还包括了 <code>PrimeBase XT (PBXT)</code> 和 <code>FederatedX</code>存储引擎。</p><p>说在最后，目前由于<code>MySQL</code>是属于<code>Oracle</code>公司的一款产品，而<code>Oracle</code>有将<code>MySQL</code>闭源的潜在风险，现在有很多大公司已经弃用<code>MySQL</code>，而<code>MariaDB</code>就是由<code>MySQL</code>之父<code>Michael</code>领头设计出来的一款开源数据库。确切来讲<code>MariaDB</code>是<code>MySQL</code>的分支版，而且整合了开源社区的很多东西，所以这款产品可以说就是<code>MySQL</code>的替代产品。由于其完全兼容<code>MySQL</code>所以今后演示就用<code>MariaDB</code>进行演示，而所有理论上的概念还是以<code>MySQL</code>为基础。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目前流行的开源RDBMS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关系型数据概念</title>
      <link href="/2017/11/11/MySQL-Guanxi-Database/"/>
      <url>/2017/11/11/MySQL-Guanxi-Database/</url>
      <content type="html"><![CDATA[<h3 id="RDBMS（关系型数据库管理系统）术语"><a href="#RDBMS（关系型数据库管理系统）术语" class="headerlink" title="RDBMS（关系型数据库管理系统）术语"></a>RDBMS（关系型数据库管理系统）术语</h3><ul><li><code>Database</code>：数据库是一个表的集合，与相关的数据。 </li><li><code>Table</code>： 一个表的数据是一个矩阵。在一个数据库中的表看起来像一个简单的电子表格。 </li><li><code>Column</code>： 一列（数据元素）包含的是同一个样的数据，例如列邮政编码。 </li><li><code>Row</code>： 行（元组，进入或记录）是一组相关的数据，例如一个订阅的数据。 </li><li><code>Redundancy</code>： 存储数据的两倍，冗余，使系统速度更快。 </li><li><code>Primary Key</code>：  主键是唯一的。一个关键值可以在一个表中不能出现两次。使用<code>key</code>我们可以在大多数行找到。 </li><li><code>Foreign Key</code>： 外键是两个表之间的链接杆。 </li><li><code>Compound Key</code>： 复合键（组合键）是一个重要的，由多个列，一列是因为并非十分独特。 </li><li><code>Index</code>：在一个数据库中的索引类似于在一本书的背面的一个索引。 </li><li><code>Referential Integrity</code>：参照完整性可以确保一个外键的值总是指向一个现有的行。</li></ul><a id="more"></a><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ol><li><p>关系型数据库可以简单的理解为二维数据库，表格式类似于<code>excel</code>表格，我们平时我接触的数据据，一般都是关系型数据库。</p></li><li><p>关系型数据库不是唯一的高级数据库模型，也不是最优的一种，但是，关系型数据库是现今使用最广泛、最易于理解和使用的数据库模型。</p></li></ol><ul><li>关系：可以理解成一张二维表，每个关系都有一个关系名，即表名。</li><li>元组：可以理解成二维表中的一行，在数据库中常被称作记录。 </li><li>属性：可以理解成二维表中的一列，在数据库中常被成为字段。 </li><li>域：属性的取值范围，也是数据库中某一列的取值限制。 </li><li>关键字：一组可以唯一标识元组的属性。数据库中常称为主键有一个或多个列组成。 </li><li>关系模式：对关系的描述，在数据库中通常称之为表结构。 </li></ul><h4 id="关系型数据库特点"><a href="#关系型数据库特点" class="headerlink" title="关系型数据库特点"></a>关系型数据库特点</h4><ul><li><strong>容易理解</strong>：二维表结构是非常贴近逻辑世界的一个概念，相对与网状、层次以及其它模型更容易理解。</li><li><strong>使用方便</strong>：通过SQL语言程序员和数据管理员可以很方便的在逻辑层面操作数据库而不必理解其底层实现。</li><li><strong>易于维护</strong>：丰富的完整性（实体完整性、参照完整性、用户自定义完整性）降低数据冗余和数据不一致的概率。    </li></ul><h4 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h4><ul><li>数据查询：选择、投影、连接、并、交、差、除</li><li>数据操作：增加、删除、修改、查询</li></ul><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p><code>SQL</code>(<code>Structured Query Language</code>)：结构化查询语言，一种特殊目的的编程语言，数据库查询和程序设计语言，用于存储数据以及查询、更新和管理关系型数据库。</p><p><strong>SQL查询语言组成部分</strong></p><ul><li><code>DDL</code>(<code>Data Definition Languages</code>)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等数据库的对象定义。常用关键字主要包括<code>create</code>、<code>drop</code>、<code>alter</code>等。</li><li><code>DML</code>(<code>Data Manipulation Language</code>)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性。常用关键字包括<code>insert</code>、<code>delete</code>、<code>update</code>和<code>select</code>等。</li><li><code>DCL</code>(<code>Data Control Language</code>)语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句，用于定义数据库、表、字段、用户的访问权限和安全级别。常用关键字有<code>grant</code>、<code>revoke</code>等。</li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p><code>SQL</code>标准定义了4类隔离级，包括了一些具体规则，用来限定事务内外的哪些改变时可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p><ul><li><code>READ UNCOMMITTED</code>(读取未提交内容) <ul><li>在<code>READ UNCOMMITTED</code>隔离级，所有事务都可以“看到”未提交事务的执行结果。在这种级别上，可能会产生很多问题。本隔离级很少用于实际应用，因为它的性能也不比其他级别好多少，而别的级别还有其他更多的优点。读取未提交数据，也被称之为<code>“脏读(Dirty Read)”</code></li></ul></li><li><code>READ COMMITTED</code>(读取提交内容) <ul><li>大多数数据库系统的默认隔离级是<code>READ COMMITTED</code>(但这不是<code>MYSQL</code>默认的)。它满足了隔离的早先简单定义：一个事务在开始时，只能“看见”已经提交事务所做的改变，一个事务从开始到提交前，所做的任何数据改变都是不可见的，除非已经提交。这种隔离级别也支持所谓的“不可重复读(<code>Nonrepeatable Read</code>)”。这意味着用户运行同一语句两次，看到的结果是不同的。</li></ul></li><li><code>REPEATABLE READ</code>(可重读) <ul><li><code>REPEATABLE READ</code> 隔离级解决了<code>READ UNCOMMITTED</code>隔离级导致的问题。它确保同一事务的多个实例在并发读取数据时，会“看到相同的”数据行。不过理论上，这会导致另一个棘手问题：幻读(<code>Phantom Read</code>)。简单来说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影”行。<code>InnoDB</code>和<code>Falcon</code>存储引擎通过多版本并发控制机制解决了幻读问题。 <code>REPEATABLE READ</code> 是<code>MYSQL</code>的默认事务隔离级。<code>InnoDB</code>和<code>Falcon</code>存储引擎都遵循这种设置。</li></ul></li><li><code>SERIALIZABLE</code>(可串行化) <ul><li><code>SERIALIZABLE</code>是最高级别的隔离级，它通过强制事务排斥，使之不可能相互冲突，从而解决幻读问题。简言之，<code>SERIALIZABLE</code>是在每个读的数据行上加锁。在这个级别，可能导致大量的超时现象和锁竞争现象。很少看到有用户选择这种隔离级。</li></ul></li></ul><p><strong>注</strong> ：不可重复读与幻读：不可重复读的重点是修改(同样的查询条件，你读取过的数据，再次读取出来发现值不一样了);幻读的重点在于新增或者删除(同样的查询条件，第1次和第2次读出来的记录数不一样)</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>就是使用时间戳或者事务<code>ID</code>来控制数据的多版本</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关系型数据概念 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计关系数据库的范式基础概念</title>
      <link href="/2017/11/11/MySQL-Fanshi/"/>
      <url>/2017/11/11/MySQL-Fanshi/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数据库管理系统：<code>DBMS</code>(<code>Datebase Management System</code>)。是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库。</p><a id="more"></a><p><code>RDBMS</code>即关系数据库管理系统(<code>Relational Database Management System</code>)，是将数据组织为相关的行和列的系统，而管理关系数据库的计算机软件就是关系数据库管理系统，常用的数据库软件有<code>Oracle</code>、<code>SQL Server</code>等。</p><h3 id="RDMBS设计范式基础概念"><a href="#RDMBS设计范式基础概念" class="headerlink" title="RDMBS设计范式基础概念"></a>RDMBS设计范式基础概念</h3><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（<code>1NF</code>）、第二范式（<code>2NF</code>）、第三范式（<code>3NF</code>）、巴德斯科范式（<code>BCNF</code>）、第四范式(<code>4NF</code>）和第五范式（<code>5NF</code>，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(<code>3NF</code>）即可。</p><h4 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h4><p>每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。<strong>除去同类型的字段，就是无重复的列（域或字段）</strong></p><h4 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h4><p><strong>第二范式必须先满足第一范式</strong>，<strong>要求表中的每个行必须可以被唯一地区分</strong>。通常为表加上一个列，以存储各个实例的唯一标识PK。非PK的字段需要与整个PK有直接相关性</p><h4 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h4><p><strong>满足第三范式必须先满足第二范式。一个数据库表中不包含已在其它表中已包含的非主关键字信息。</strong> 第三范式要求一个数据库表中不包含已在其它表中已包含的非主关键字信息，非PK的字段间不能有从属关系。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计关系数据库的范式基础概念 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构模型</title>
      <link href="/2017/11/11/MySQL-Data-Jiegou/"/>
      <url>/2017/11/11/MySQL-Data-Jiegou/</url>
      <content type="html"><![CDATA[<h3 id="数据结构模型常见的有以下三种："><a href="#数据结构模型常见的有以下三种：" class="headerlink" title="数据结构模型常见的有以下三种："></a>数据结构模型常见的有以下三种：</h3><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li></ul><a id="more"></a><h3 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h3><p>层次模型是一种用树形结构描述实体及其之间关系的数据模型。在这种结构中，每一个记录类型都是用节点表示，记录类型之间的联系则用结点之间的有向线段来表示。每一个双亲结点可以有多个子节点但是每一个子节点只能有一个双亲结点。这种结构决定了采用层次模型作为数系组织方式的层次数据库系统只能处理一对多的实体联系。</p><p>由<code>IBM</code>于1968年推出的<code>IMS</code>（<code>Information Management System</code>）数据库管理系统是第一个层次模型数据库管理系统，也是最典型的一个。</p><p><strong>缺点：</strong> 每一个子节点只能有一个父结点，和多个父节点发生关系非常困难。</p><h3 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h3><p>网状模型是一种可以灵活地描述事物及其之间关系的数据库模型。最早由美国的查尔斯·巴赫曼发明。</p><p>层次模型使用树形结构来表示实体及实体间的关系，每一个结点表示一个记录，除了根节点外每一个节点都有且仅有一个双亲结点，但可以有多个子节点。但是网状模型允许一个结点可以同时拥有多个双亲结点和子节点。因而同层次模型相比，网状结构更具有普遍性，能够直接地描述现实世界的实体。也可以认为层次模型是网状模型的一个特例。</p><p><strong>缺点：</strong> 网状模型可以使每个子节点和多个节点发生关系。一旦应用程序应用需求发生改变，底层的数据模型就会发生改变。底层数据模型发生改变，那么应用程序也要发生改变。数据的存储，数据的结构设计与应用层序有非常大的耦合度，并不灵活。</p><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>用于数据库管理的关系模型（英语：<code>Relational model</code>）是基于谓词逻辑和集合论的一种数据模型，广泛被使用于数据库之中。最早于1969年由埃德加·科德提出。</p><p>关系模型的基本假定是所有数据都表示为数学上的关系，就是说<code>n</code>个集合的笛卡儿积的一个子集，有关这种数据的推理通过二值（就是说没有<code>NULL</code>）的谓词逻辑来进行，这意味着对每个命题都没有两种可能的赋值：要么是真要么是假。数据通过关系演算和关系代数的一种方式来操作。关系模型是采用二维表格结构表达实体类型及实体间联系的数据模型。</p><p>关系(<code>Relation</code>)：一个关系对应着一个二维表，二维表就是关系名。</p><p>关系模型中，字段称为属性，字段值称为属性值，记录类型称为关系模型。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构模型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库简介</title>
      <link href="/2017/11/11/MySQL-DataBase/"/>
      <url>/2017/11/11/MySQL-DataBase/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/MySQL-DataBase-1.png" title="数据库"></center><h3 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h3><p><strong>数据库，简单来说可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的数据运行新增、截取、更新、删除等操作。</strong></p><a id="more"></a><p><strong>数据库指的是以一定方式储存在一起、能为多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。</strong></p><h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p>数据库管理系统（英语：<code>Database Management System</code>，简称<code>DBMS</code>）是为管理数据库而设计的电脑软件系统，一般具有存储、截取、安全保障、备份等基础功能。数据库管理系统可以依据它所支持的数据库模型来作分类，例如关系式、<code>XML</code>；或依据所支持的电脑类型来作分类，例如服务器群集、移动电话；或依据所用查询语言来作分类，例如<code>SQL</code>、<code>XQuery</code>；或依据性能冲量重点来作分类，例如最大规模、最高运行速度；亦或其他的分类方式。不论使用哪种分类方式，一些<code>DBMS</code>能够跨类别，例如，同时支持多种查询语言。</p><h3 id="数据库基本结构"><a href="#数据库基本结构" class="headerlink" title="数据库基本结构"></a>数据库基本结构</h3><ul><li><strong>物理数据层</strong><ul><li>它是数据库的最内层，是物理存贮设备上实际存储的数据的集合。这些数据是原始数据，是用户加工的对象，由内部模式描述的指令操作处理的位串、字符和字组成。</li></ul></li><li><strong>概念数据层</strong><ul><li>它是数据库的中间一层，是数据库的整体逻辑表示。指出了每个数据的逻辑定义及数据间的逻辑联系，是存贮记录的集合。它所涉及的是数据库所有对象的逻辑关系，而不是它们的物理情况，是数据库管理员概念下的数据库。</li></ul></li><li><strong>用户数据层</strong><ul><li>它是用户所看到和使用的数据库，表示了一个或一些特定用户使用的数据集合，即逻辑记录的集合。 数据库不同层次之间的联系是通过映射进行转换的。</li></ul></li></ul><h3 id="数据库主要特点"><a href="#数据库主要特点" class="headerlink" title="数据库主要特点"></a>数据库主要特点</h3><ul><li><strong>实现数据共享</strong><ul><li>数据共享包含所有用户可同时存取数据库中的数据，也包括用户可以用各种方式通过接口使用数据库，并提供数据共享。</li></ul></li><li><strong>减少数据的冗余度</strong></li><li><strong>数据的独立性</strong></li><li><strong>数据实现几种控制</strong><ul><li>文件管理方式中，数据处于一种分散的状态，不同的用户或同一用户在不同处理中其文件之间毫无关系。利用数据库可对数据进行集中控制和管理，并通过数据模型表示各种数据的组织以及数据间的联系。</li></ul></li><li><strong>数据一致性和可维护性</strong><ul><li>主要包括：①安全性控制：以防止数据丢失、错误更新和越权使用；②完整性控制：保证数据的正确性、有效性和相容性；③并发控制：使在同一时间周期内，允许对数据实现多路存取，又能防止用户之间的不正常交互作用。</li></ul></li><li><strong>故障恢复</strong><ul><li>由数据库管理系统提供一套方法，可及时发现故障和修复故障，从而防止数据被破坏。数据库系统能尽快恢复数据库系统运行时出现的故障，可能是物理上或是逻辑上的错误。比如对系统的误操作造成的数据错误等。</li></ul></li></ul><h3 id="数据库发展阶段"><a href="#数据库发展阶段" class="headerlink" title="数据库发展阶段"></a>数据库发展阶段</h3><h4 id="1-人工管理"><a href="#1-人工管理" class="headerlink" title="1. 人工管理"></a>1. 人工管理</h4><p>这一阶段的主要特征可归纳为如下几点：</p><ul><li>计算机中没有支持数据管理的软件。 </li><li>数据组织面向应用，数据不能共享，数据重复。 </li><li>在程序中要规定数据的逻辑结构和物理结构，数据与程序不独立。 </li><li>数据处理方式——批处理。</li></ul><h4 id="2-文件系统"><a href="#2-文件系统" class="headerlink" title="2. 文件系统"></a>2. 文件系统</h4><p>这一阶段的主要标志是计算机中有了专门管理数据库的软件——操作系统（文件管理）。</p><h4 id="3-数据系统阶段"><a href="#3-数据系统阶段" class="headerlink" title="3. 数据系统阶段"></a>3. 数据系统阶段</h4><ul><li>面向企业或部门，以数据为中心组织数据，形成综合性的数据库，为各应用共享。 </li><li>采用一定的数据模型。数据模型不仅要描述数据本身的特点，而且要描述数据之间的联系。 </li><li>数据冗余小，易修改、易扩充。不同的应用程序根据处理要求，从数据库中获取需要的数据，这样就减少了数据的重复存储，也便于增加新的数据结构，便于维护数据的一致性。 </li><li>程序和数据有较高的独立性。 </li><li>具有良好的用户接口，用户可方便地开发和使用数据库。 </li><li>对数据进行统一管理和控制，提供了数据的安全性、完整性、以及并发控制。</li></ul><h4 id="4-高级数据系统阶段"><a href="#4-高级数据系统阶段" class="headerlink" title="4. 高级数据系统阶段"></a>4. 高级数据系统阶段</h4><p>由于现在数据成爆炸式增长，在传统型的数据系统已经不能满足人们的需要，为存储海量的数据现阶段引入了分布式文件系统以及<code>nosql</code>等新的高级数据系统。</p><h3 id="数据库系统软件"><a href="#数据库系统软件" class="headerlink" title="数据库系统软件"></a>数据库系统软件</h3><ul><li><strong>关系型数据库管理系统（<code>RDBMS</code>）</strong><ul><li><code>Oracle</code></li><li><code>SQLServer</code></li><li><code>MySQL</code></li><li><code>MariaDB</code>（开源免费使用）</li><li><code>DB2</code></li><li><code>Sybase</code></li><li><code>PostgreSQL</code></li><li><code>SQLITE</code>（适用于嵌入式系统）</li></ul></li><li><strong>非关系型数据库管理系统（<code>nosql</code>）</strong><ul><li>基于键值：<code>Redis</code></li><li>基于列存储数据库：<code>HBase</code></li><li>基于文档数据库：<code>MongoDB</code></li><li>基于图形数据库：<code>Neo4J</code></li></ul></li></ul><p>关于关系型及非关系型数据库这里只列举了一部分常见的，特别是非关系型数据库还有很多，这里就不多做介绍了。这里我们主要讨论关系型数据库<code>MySQL</code>。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">维基百科：数据库</a></p><p><a href="http://cuchadanfan.blog.51cto.com/9940284/1688364" target="_blank" rel="noopener">粗茶淡饭：MySQL（一）之通用二进制格式安装MySQL及数据库基本概念</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库简介 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat + memcached session manager共享session</title>
      <link href="/2017/11/09/Memcached-Tomcat-Session-Manager/"/>
      <url>/2017/11/09/Memcached-Tomcat-Session-Manager/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><center><img src="https://houhaiyun.github.io/img/images/Memcached-Tomcat-Session-Manager-1.jpg" title="拓扑图"></center><table><thead><tr><th>服务</th><th>IP</th><th>系统版本</th><th>软件版本</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>192.168.8.17/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>nginx.x86_64 1:1.10.2</td><td>反向代理</td></tr><tr><td>Tomcat1</td><td>192.168.8.12/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Tomcat2</td><td>192.168.8.15/24</td><td>CentOS Linux release 7.3.1611 (Core)</td><td>tomcat-7.0.69(java-1.8.0-openjdk)</td><td>应用服务</td></tr><tr><td>Memcached1</td><td>192.168.8.11/24</td><td>CentOS release 6.9 (Final)</td><td>memcached.x86_64 0:1.4.4-5</td><td>缓存服务</td></tr><tr><td>Memcached2</td><td>192.168.8.13/24</td><td>CentOS release 6.9 (Final)</td><td>memcached.x86_64 0:1.4.4-5</td><td>缓存服务</td></tr></tbody></table><p>简单说明下：<code>tomcat1</code>为主要把它的<code>session</code>存储到<code>memcached2</code>上，而<code>memcache2</code>是运行在另一台主机上的（一般情况下，<code>memcached</code>是存<code>tomcat1</code>的<code>session</code>），只有当<code>memcached2</code>不可用时，<code>tomcat1</code>才会把<code>session</code>存在<code>memcached1</code>上，也就是说<code>memcached1</code>是为了<code>tomcat1</code>做故障切换用的节点。这要的话，当<code>machine1</code>挂了的时候，<code>session</code>是不会丢失的。</p><a id="more"></a><h4 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1. 修改主机名"></a>1. 修改主机名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Nginx调度器配置</span><br><span class="line">[root@Nginx ~]# hostname Nginx.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# hostname Tomcat1.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# hostname Tomcat2.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Memcached1配置</span><br><span class="line">[root@Memcached1 ~]# hostname Memcached1.ihaiyun.cc &amp;&amp; exec bash</span><br><span class="line"></span><br><span class="line"># Memcached2配置</span><br><span class="line">[root@Memcached2 ~]# hostname Memcached2.ihaiyun.cc &amp;&amp; exec bash</span><br></pre></td></tr></table></figure><h4 id="2-同步所有sever时间"><a href="#2-同步所有sever时间" class="headerlink" title="2. 同步所有sever时间"></a>2. 同步所有sever时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Nginx调度器配置</span><br><span class="line">[root@Nginx ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:08 ntpdate[11275]: step time server 172.18.0.1 offset 2.684816 sec</span><br><span class="line">[root@Nginx ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:08 ntpdate[11272]: step time server 172.18.0.1 offset 1.247753 sec</span><br><span class="line">[root@Tomcat1 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:08 ntpdate[2200]: step time server 172.18.0.1 offset 0.937129 sec</span><br><span class="line">[root@Tomcat2 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"># Memcached1配置</span><br><span class="line">[root@Memcached1 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:02 ntpdate[1722]: step time server 172.18.0.1 offset -21.159589 sec</span><br><span class="line">[root@Memcached1 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br><span class="line"></span><br><span class="line"># Memcached2配置</span><br><span class="line">[root@Memcached2 ~]# ntpdate 172.18.0.1</span><br><span class="line"> 9 Nov 11:41:02 ntpdate[1941]: step time server 172.18.0.1 offset 2.332137 sec</span><br><span class="line">[root@Memcached2 ~]# date</span><br><span class="line">Thu Nov  9 11:41:13 CST 2017</span><br></pre></td></tr></table></figure><h3 id="准备Tomcat-server"><a href="#准备Tomcat-server" class="headerlink" title="准备Tomcat server"></a>准备Tomcat server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat1配置</span><br><span class="line">[root@Tomcat1 ~]# yum -y install java-1.8.0-openjdk-devel</span><br><span class="line">[root@Tomcat1 ~]# yum -y  install tomcat</span><br><span class="line">[root@Tomcat1 ~]# cd /usr/share/tomcat/webapps/</span><br><span class="line">[root@Tomcat1 webapps]# mkdir -p  myapp/WEB-INF</span><br><span class="line">[root@Tomcat1 webapps]# cd myapp/</span><br><span class="line">[root@Tomcat1 myapp]# vim index.jsp </span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;font color=&quot;red&quot;&gt;Tomcat1.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">&lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">&lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@Tomcat1 ~]# systemctl start tomcat        # 启动tomcat服务；</span><br><span class="line">[root@Tomcat1 ~]# elinks -dump http://192.168.8.12:8080/myapp/      # 访问测试，ok；</span><br><span class="line">                               Tomcat1.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | CDB3C77782AFEB964DD6172FBFA708A8 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510199505033                    |</span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line"></span><br><span class="line"># Tomcat2配置</span><br><span class="line">[root@Tomcat2 ~]# yum -y install java-1.8.0-openjdk-devel</span><br><span class="line">[root@Tomcat2 ~]# yum -y  install tomcat</span><br><span class="line">[root@Tomcat2 ~]# cd /usr/share/tomcat/webapps/</span><br><span class="line">[root@Tomcat2 webapps]# mkdir -p  myapp/WEB-INF</span><br><span class="line">[root@Tomcat2 webapps]# cd myapp/</span><br><span class="line">[root@Tomcat2 myapp]# vim index.jsp </span><br><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Tomcat1&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;font color=&quot;blue&quot;&gt;Tomcat2.ihaiyun.cc&lt;/font&gt;&lt;/h1&gt;</span><br><span class="line">&lt;table align=&quot;centre&quot; border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Session ID&lt;/td&gt;</span><br><span class="line">&lt;% session.setAttribute(&quot;ihaiyun.cc&quot;,&quot;magedu.com&quot;); %&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Created on&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Tomcat2 ~]# systemctl start tomcat</span><br><span class="line">[root@Tomcat2 ~]# elinks -dump http://192.168.8.15:8080/myapp       # 访问测试，ok；</span><br><span class="line">                               Tomcat2.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">   +-----------------------------------------------+</span><br><span class="line">   | Session ID | 5E1E7AE5B658EDB781276CC37E5B8431 |</span><br><span class="line">   |------------+----------------------------------|</span><br><span class="line">   | Created on | 1510199718989                    |</span><br><span class="line">   +-----------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="准备Memcached-server"><a href="#准备Memcached-server" class="headerlink" title="准备Memcached server"></a>准备Memcached server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Memcached1配置</span><br><span class="line">[root@Memcached1 ~]# yum -y  install memcached</span><br><span class="line">[root@Memcached1 ~]# service memcached start</span><br><span class="line">Starting memcached:                                        [  OK  ]</span><br><span class="line">[root@Memcached1 ~]# ss -uln            # 端口已经打开；</span><br><span class="line">State       Recv-Q Send-Q              Local Address:Port                Peer Address:Port </span><br><span class="line">UNCONN      0      0                               *:68                             *:*     </span><br><span class="line">UNCONN      0      0                               *:11211                          *:*     </span><br><span class="line">UNCONN      0      0                              :::11211                         :::*    </span><br><span class="line"></span><br><span class="line"># Memcached2配置</span><br><span class="line">[root@Memcached2 ~]# yum -y  install memcached</span><br><span class="line">[root@Memcached2 ~]# service memcached start</span><br><span class="line">Starting memcached:                                        [  OK  ]</span><br><span class="line">[root@Memcached2 ~]# ss -uln            # 端口已经打开；</span><br><span class="line">State       Recv-Q Send-Q              Local Address:Port                Peer Address:Port </span><br><span class="line">UNCONN      0      0                               *:68                             *:*     </span><br><span class="line">UNCONN      0      0                               *:11211                          *:*     </span><br><span class="line">UNCONN      0      0                              :::11211                         :::*</span><br></pre></td></tr></table></figure><h3 id="将memcached-session-manager配置为-Manager"><a href="#将memcached-session-manager配置为-Manager" class="headerlink" title="将memcached-session-manager配置为 Manager"></a>将memcached-session-manager配置为 <context>Manager</context></h3><p><code>MSM</code>支持<code>tomcat6</code>，<code>tomcat7</code>，<code>tomcat8</code>，<code>MSM</code>支持两种模式:<code>sticky sessions</code>（<code>粘性session</code>）和<code>non-sticky sessions</code>（<code>非粘性session</code>）。我用到的是<code>sticky session</code>。</p><p>软件包简介</p><ul><li><code>javolution-5.4.3.1.jar</code>：流式化工具</li><li><code>msm-javolution-serializer-1.8.3.jar</code>：MSM</li><li><code>memcached-session-manager-1.8.3.jar</code>：memcached会话管理器</li><li><code>memcached-session-manager-tc7-1.8.3.jar</code>：memcached会话管理器（适用于tomcat7）</li><li><code>spymemcached-2.11.1.jar</code>：tomcat连接memcached的驱动</li></ul><p><a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration" target="_blank" rel="noopener">软件包下载地址：https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><p>通过<code>tomcat</code>扩展类，使<code>tomcat</code>支持将本地<code>session</code>通过<code>memcached</code>驱动和流式化工具和会话管理器将<code>session</code>存入<code>memcached</code>服务器中，实现<code>session</code>共享。（个人理解，如有不对，欢迎指出。）</p><p><code>sticky sessions</code>粘性<code>session + kryo</code>序列化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@Tomcat1 ~]# ls        # 包已经下载好，如下；</span><br><span class="line">javolution-5.4.3.1.jar                   msm-javolution-serializer-1.8.3.jar</span><br><span class="line">memcached-session-manager-1.8.3.jar      spymemcached-2.11.1.jar</span><br><span class="line">memcached-session-manager-tc7-1.8.3.jar</span><br><span class="line">[root@Tomcat1 ~]# cp *.jar /usr/share/tomcat/lib/       # 将下载好的包拷贝到/usr/share/tomcat/lib/目录下；</span><br><span class="line">[root@Tomcat1 ~]# scp *.jar 192.168.8.15:/usr/share/tomcat/lib/         # 将软件包复制到192.168.8.15的对应目录下；</span><br><span class="line">The authenticity of host &apos;192.168.8.15 (192.168.8.15)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is 09:b5:88:63:ef:63:4a:d5:b3:d8:d5:04:73:92:b6:1e.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;192.168.8.15&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">root@192.168.8.15&apos;s password: </span><br><span class="line">javolution-5.4.3.1.jar                                     100%  442KB 442.1KB/s   00:00    </span><br><span class="line">memcached-session-manager-1.8.3.jar                        100%  144KB 143.6KB/s   00:00    </span><br><span class="line">memcached-session-manager-tc7-1.8.3.jar                    100%   11KB  11.0KB/s   00:00    </span><br><span class="line">msm-javolution-serializer-1.8.3.jar                        100%   69KB  69.4KB/s   00:00    </span><br><span class="line">spymemcached-2.11.1.jar                                    100%  449KB 448.7KB/s   00:00  </span><br><span class="line"></span><br><span class="line"># tomcat1的配置文件</span><br><span class="line">[root@Tomcat1 ~]# vim  /etc/tomcat/server.xml           # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;        # 此处填写的为memcached1和memcached2的IP；</span><br><span class="line">                failoverNodes=&quot;m1&quot;          # 参数failoverNodes=&quot;n1&quot; 是用来告诉 MSM 把session优先存储在 memcached2上，只有当memcached2挂了的时候才会把session存在memcache1也就是配置文件的n1里。假如整个machine1挂了，session还是可用，因为session是存在machine2的memcache2上，可以通过tomcat2对外提供服务。</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line"># tomcat2的配置文件</span><br><span class="line">[root@Tomcat2 ~]# vim /etc/tomcat/server.xml        # 修改配置文件；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;</span><br><span class="line">                failoverNodes=&quot;m2&quot;          # 注意此处为m2；</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br></pre></td></tr></table></figure></p><h3 id="配置Nginx调度器"><a href="#配置Nginx调度器" class="headerlink" title="配置Nginx调度器"></a>配置Nginx调度器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx ~]# yum -y  install nginx</span><br><span class="line">[root@Nginx ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    upstream tcsrvs &#123;</span><br><span class="line">        server 192.168.8.12:8080;       # 定义tomcat1的IP；</span><br><span class="line">        server 192.168.8.15:8080;       # 定义tomcat2的IP；</span><br><span class="line">    &#125;   </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on; </span><br><span class="line">    tcp_nopush          on; </span><br><span class="line">    tcp_nodelay         on; </span><br><span class="line">    keepalive_timeout   65; </span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://tcsrvs ;      # 调度；</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx ~]# systemctl start nginx       # 启动nginx调度器；</span><br><span class="line">[root@Tomcat1 ~]# systemctl restart tomcat      # 重启tomcat；</span><br><span class="line">[root@Tomcat2 ~]# systemctl restart tomcat      # 重启tomcat；</span><br></pre></td></tr></table></figure><center>已经实现会话绑定</center><center><img src="https://houhaiyun.github.io/img/images/Memcached-Tomcat-Session-Manager-2.gif" title="测试访问"></center><h3 id="停止memcached2测试"><a href="#停止memcached2测试" class="headerlink" title="停止memcached2测试"></a>停止memcached2测试</h3><p>停止memcached2测试，会话是否能够保持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached2 ~]# service memcached stop             # 停止memcached2；</span><br><span class="line">Stopping memcached:                                        [  OK  ]</span><br></pre></td></tr></table></figure><center>会话可以保持</center><br><center><img src="https://houhaiyun.github.io/img/images/Memcached-Tomcat-Session-Manager-3.gif" title="测试访问"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://laoxu.blog.51cto.com/4120547/1566477" target="_blank" rel="noopener">老徐的私房菜：tomcat + memcached session manager共享session</a></p><h3 id="实验中用到的配置文件"><a href="#实验中用到的配置文件" class="headerlink" title="实验中用到的配置文件"></a>实验中用到的配置文件</h3><p>把配置文件复制到此，方便大家复制，嘻嘻。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># tomcat1配置文件</span><br><span class="line">[root@Tomcat1 ~]# vim /etc/tomcat/server.xml        # 注意：复制时要看清楚标签为Host；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;</span><br><span class="line">                failoverNodes=&quot;m1&quot;</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html</span><br><span class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line"># tomcat2配置文件</span><br><span class="line">[root@Tomcat2 ~]# vim /etc/tomcat/server.xml    # 注意：复制时要看清楚标签为Host；</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">            &lt;Context path=&quot;/myapp&quot; docBase=&quot;/usr/share/tomcat/webapps/myapp&quot; reloadable=&quot;true&quot;&gt;</span><br><span class="line">              &lt;Manager className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">                memcachedNodes=&quot;m1:192.168.8.11:11211,m2:192.168.8.13:11211&quot;</span><br><span class="line">                failoverNodes=&quot;m2&quot;</span><br><span class="line">                requestUriIgnorePattern=&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">                transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">             &lt;/Context&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html</span><br><span class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line"></span><br><span class="line"># Nginx配置文件</span><br><span class="line">[root@Nginx ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    upstream tcsrvs &#123;</span><br><span class="line">        server 192.168.8.12:8080;</span><br><span class="line">        server 192.168.8.15:8080;</span><br><span class="line">    &#125;   </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile            on; </span><br><span class="line">    tcp_nopush          on; </span><br><span class="line">    tcp_nodelay         on; </span><br><span class="line">    keepalive_timeout   65; </span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://tcsrvs ;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Memcached </category>
          
          <category> tomcat + memcached session manager共享session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Memcached安装和常用命令</title>
      <link href="/2017/11/09/Memcached-Install-Changyong-Commands/"/>
      <url>/2017/11/09/Memcached-Install-Changyong-Commands/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装通过<code>yum</code>直接安装即可，也可去官网下载源码编译。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached1 ~]# yum -y  install memcached</span><br></pre></td></tr></table></figure><h3 id="启动Memcached常用参数"><a href="#启动Memcached常用参数" class="headerlink" title="启动Memcached常用参数"></a>启动Memcached常用参数</h3><ul><li><code>-p &lt;num&gt;</code>      设置TCP端口号(默认设置为: 11211)</li><li><code>-U &lt;num&gt;</code>      UDP监听端口(默认: 11211, 0 时关闭) </li><li><code>-l &lt;ip_addr&gt;</code>  绑定地址(默认:所有都允许,无论内外网或者本机更换IP，有安全隐患，若设置为127.0.0.1就只能本机访问)</li><li><code>-c &lt;num&gt;</code>      max simultaneous connections (default: 1024)</li><li>`-d            以daemon方式运行</li><li><code>-u &lt;username&gt;</code> 绑定使用指定用于运行进程<username></username></li><li><code>-m &lt;num&gt;</code>      允许最大内存用量，单位M (默认: 64 MB)</li><li><code>-P &lt;file&gt;</code>     将PID写入文件<file>，这样可以使得后边进行快速进程终止, 需要与-d 一起使用</file></li></ul><h3 id="连接和退出"><a href="#连接和退出" class="headerlink" title="连接和退出"></a>连接和退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached ~]# service memcached start         # 启动memcached；</span><br><span class="line">Starting memcached:                                        [  OK  ]</span><br><span class="line">[root@Memcached ~]# ss -unl         # 端口已经打开，默认就是UDP 11211；</span><br><span class="line">State       Recv-Q Send-Q                       Local Address:Port                         Peer Address:Port </span><br><span class="line">UNCONN      0      0                                        *:68                                      *:*     </span><br><span class="line">UNCONN      0      0                                        *:11211                                   *:*     </span><br><span class="line">UNCONN      0      0                                       :::11211                                  :::*   </span><br><span class="line"></span><br><span class="line">[root@Memcached ~]# telnet 127.0.0.1 11211      # 连接；</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">quit        # 退出；</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h3 id="命令行语法"><a href="#命令行语法" class="headerlink" title="命令行语法"></a>命令行语法</h3><p><code>command &lt;key&gt; &lt;flags&gt; &lt;expiration time&gt; &lt;bytes&gt;</code> </p><p><code>&lt;value&gt;</code></p><p>参数说明如下：</p><ul><li><code>command</code>： <code>set/add/replace</code></li><li><code>key</code> key 用于查找缓存值</li><li><code>flags</code>  可以包括键值对的整型参数，客户机使用它存储关于键值对的额外信息</li><li><code>expiration time</code>  在缓存中保存键值对的时间长度（以秒为单位，0 表示永远）</li><li><code>bytes</code>   在缓存中存储的字节点</li><li><code>value</code>   存储的值（始终位于第二行）</li></ul><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>五种基本<code>memcached</code>命令执行最简单的操作。这些命令和操作包括：</p><ul><li><code>set</code>：向缓存添加新的键值对，如果键已经存在，则之前的值将被替换；</li><li><code>add</code>：仅当缓存中不存在键时，<code>add</code>命令才会向缓存中添加一个键值对。如果缓存中已经存在键，则之前的值将仍然保持相同，并且您将获得响应 <code>NOT_STORED</code>;</li><li><code>replace</code>：仅当键已经存在时，<code>replace</code> 命令才会替换缓存中的键。如果缓存中不存在键，那么您将从 <code>memcached</code> 服务器接受到一条 <code>NOT_STORED</code> 响应;</li><li><code>get</code>：用于检索与之前添加的键值对相关的值。您将使用 <code>get</code> 执行大多数检索操作;</li><li><code>delete</code>：用于删除 memcached 中的任何现有值；</li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p><code>set</code>命令用于向缓存添加新的键值对。如果键已经存在，则之前的值将被替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Memcached ~]# !t</span><br><span class="line">telnet 127.0.0.1 11211</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">set userID 0 0 5 </span><br><span class="line">12345</span><br><span class="line">STORED</span><br></pre></td></tr></table></figure><p>如果使用 <code>set</code> 命令正确设定了键值对，服务器将使用单词 <code>STORED</code> 进行响应。本示例向缓存中添加了一个键值对，其键为<code>userId</code>，其值为<code>12345</code>。并将过期时间设置为 <code>0</code>，这将向 <code>memcached</code> 通知您希望将此值存储在缓存中直到删除它为止。</p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>仅当缓存中不存在键时，<code>add</code> 命令才会向缓存中添加一个键值对。如果缓存中已经存在键，则之前的值将仍然保持相同，并且您将获得响应 <code>NOT_STORED</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add userID 0 0 5   </span><br><span class="line">55555</span><br><span class="line">NOT_STORED</span><br><span class="line">add UID 0 0 3</span><br><span class="line">123</span><br><span class="line">STORED</span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>仅当键已经存在时，<code>replace</code> 命令才会替换缓存中的键。如果缓存中不存在键，那么您将从 <code>memcached</code> 服务器接受到一条 <code>NOT_STORED</code> 响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">replace accountID 0 0 5 </span><br><span class="line">67890</span><br><span class="line">NOT_STORED</span><br><span class="line">set accountID 0 0 5 </span><br><span class="line">67890</span><br><span class="line">STORED</span><br><span class="line">replace accountID 0 0 5</span><br><span class="line">66666</span><br><span class="line">STORED</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p><code>get</code> 命令用于检索与之前添加的键值对相关的值。您将使用 <code>get</code> 执行大多数检索操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set userID 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">get userID</span><br><span class="line">VALUE userID 0 5</span><br><span class="line">12345</span><br><span class="line">END</span><br><span class="line">get abc</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>如您所见，<code>get</code> 命令相当简单。您使用一个键来调用 <code>get</code>，如果这个键存在于缓存中，则返回相应的值。如果不存在，则不返回任何内容。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p><code>delete</code> 命令用于删除 <code>memcached</code> 中的任何现有值。您将使用一个键调用<code>delete</code>，如果该键存在于缓存中，则删除该值。如果不存在，则返回一条<code>NOT_FOUND</code> 消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set userID 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">delete bob</span><br><span class="line">NOT_FOUND</span><br><span class="line">delete userID</span><br><span class="line">DELETED</span><br><span class="line">get userID</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h4><p><code>gets</code> 命令的功能类似于基本的<code>get</code> 命令。两个命令之间的差异在于，<code>gets</code> 返回的信息稍微多一些：<code>64</code> 位的整型值非常像名称/值对的 “<code>版本</code>” 标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set userID 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">get userID</span><br><span class="line">VALUE userID 0 5</span><br><span class="line">12345</span><br><span class="line">END</span><br><span class="line">gets userID</span><br><span class="line">VALUE userID 0 5 7</span><br><span class="line">12345</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>考虑 <code>get</code> 和 <code>gets</code> 命令之间的差异。<code>gets</code> 命令将返回一个额外的值 — 在本例中是整型值 7，用于标识名称/值对。如果对此名称/值对执行另一个<code>set</code> 命令，则<code>gets</code> 返回的额外值将会发生更改，以表明名称/值对已经被更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set userId 0 0 5</span><br><span class="line">33333</span><br><span class="line">STORED</span><br><span class="line">gets userId  </span><br><span class="line">VALUE userId 0 5 8</span><br><span class="line">33333</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>您看到 <code>gets</code> 返回的值了吗？它已经更新为 8。您每次修改名称/值对时，该值都会发生更改。</p><h4 id="缓存管理命令"><a href="#缓存管理命令" class="headerlink" title="缓存管理命令"></a>缓存管理命令</h4><p>最后两个 <code>memcached</code> 命令用于监控和清理 <code>memcached</code> 实例。它们是 <code>stats</code> 和 <code>flush_all</code> 命令。</p><h5 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h5><p><code>stats</code> 命令的功能正如其名：转储所连接的 <code>memcached</code> 实例的当前统计数据。在下例中，执行 <code>stats</code> 命令显示了关于当前 <code>memcached</code> 实例的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">stats</span><br><span class="line">STAT pid 11019                  # 进程ID</span><br><span class="line">STAT uptime 192                 # 服务器运行秒数</span><br><span class="line">STAT time 1510214121            # 服务器当前unix时间戳</span><br><span class="line">STAT version 1.4.4              # 服务器版本</span><br><span class="line">STAT pointer_size 64            # 操作系统64位的</span><br><span class="line">STAT rusage_user 0.000000       # 进程累计用户时间</span><br><span class="line">STAT rusage_system 0.012998     # 当前累计系统时间</span><br><span class="line">STAT curr_connections 10        # 当前打开连接数</span><br><span class="line">STAT total_connections 12       # 曾打开的连接总数</span><br><span class="line">STAT connection_structures 11   # 服务器分配的连接结构数</span><br><span class="line">STAT cmd_get 54                 # 执行get命令总数</span><br><span class="line">STAT cmd_set 34                 # 执行set命令总数</span><br><span class="line">STAT cmd_flush 3                # 指向flush_all命令总数</span><br><span class="line">STAT get_hits 9                 # get命中次数</span><br><span class="line">STAT get_misses 45              # get未命中次数</span><br><span class="line">STAT delete_misses 5            # delete未命中次数</span><br><span class="line">STAT delete_hits 1              # delete命中次数</span><br><span class="line">STAT incr_misses 0              # incr未命中次数</span><br><span class="line">STAT incr_hits 0                # incr命中次数</span><br><span class="line">STAT decr_misses 0              # decr未命中次数</span><br><span class="line">STAT decr_hits 0                # decr命中次数</span><br><span class="line">STAT cas_misses 0               # cas未命中次数</span><br><span class="line">STAT cas_hits 0                 # cas命中次数</span><br><span class="line">STAT cas_badval 0               # 使用擦拭次数</span><br><span class="line">STAT auth_cmds 0                    </span><br><span class="line">STAT auth_errors 0                  </span><br><span class="line">STAT bytes_read 86              # 读入字节总数              </span><br><span class="line">STAT bytes_written 55           # 写入字节总数</span><br><span class="line">STAT limit_maxbytes 67108864    # 分配的内存数（字节）                </span><br><span class="line">STAT accepting_conns 1          # 目前接受的连接数        </span><br><span class="line">STAT listen_disabled_num 0                  </span><br><span class="line">STAT threads 4                  # 线程数            </span><br><span class="line">STAT conn_yields 0                  </span><br><span class="line">STAT bytes 76                   # 存储item字节数</span><br><span class="line">STAT curr_items 1               # item个数    </span><br><span class="line">STAT total_items 1              # item总数    </span><br><span class="line">STAT evictions 0                # 为获取空间删除item的总数</span><br><span class="line">END</span><br></pre></td></tr></table></figure></p><h5 id="stats-slabs"><a href="#stats-slabs" class="headerlink" title="stats slabs"></a>stats slabs</h5><p><code>stats slabs</code> 显示各个<code>slab</code>的信息，包括<code>chunk</code>的大小、数目、使用情况等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stats slabs</span><br><span class="line">STAT 1:chunk_size 96</span><br><span class="line">STAT 1:chunks_per_page 10922</span><br><span class="line">STAT 1:total_pages 1</span><br><span class="line">STAT 1:total_chunks 10922</span><br><span class="line">STAT 1:used_chunks 1</span><br><span class="line">STAT 1:free_chunks 1</span><br><span class="line">STAT 1:free_chunks_end 10920</span><br><span class="line">STAT 1:mem_requested 76</span><br><span class="line">STAT 1:get_hits 1</span><br><span class="line">STAT 1:cmd_set 2</span><br><span class="line">STAT 1:delete_hits 0</span><br><span class="line">STAT 1:incr_hits 0</span><br><span class="line">STAT 1:decr_hits 0</span><br><span class="line">STAT 1:cas_hits 0</span><br><span class="line">STAT 1:cas_badval 1</span><br><span class="line">STAT active_slabs 1</span><br><span class="line">STAT total_malloced 1048512</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="stats-sizes"><a href="#stats-sizes" class="headerlink" title="stats sizes"></a>stats sizes</h5><p><code>stats sizes</code> 输出所有<code>item</code>的大小和个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stats sizes</span><br><span class="line">STAT 96 1</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="stats-reset"><a href="#stats-reset" class="headerlink" title="stats reset"></a>stats reset</h5><p><code>stats reset</code> 清空统计数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stats reset</span><br><span class="line">RESET</span><br></pre></td></tr></table></figure><h4 id="flush-all"><a href="#flush-all" class="headerlink" title="flush_all"></a>flush_all</h4><p>这个最简单的命令仅用于清理缓存中的所有名称/值对。如果您需要将缓存重置到干净的状态，则 <code>flush_all</code> 能提供很大的用处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">set userid 0 0 5</span><br><span class="line">12345</span><br><span class="line">STORED</span><br><span class="line">set id 0 0 3</span><br><span class="line">345</span><br><span class="line">STORED</span><br><span class="line">get userid</span><br><span class="line">VALUE userid 0 5</span><br><span class="line">12345</span><br><span class="line">END</span><br><span class="line">get id</span><br><span class="line">VALUE id 0 3</span><br><span class="line">345</span><br><span class="line">END</span><br><span class="line">flush_all</span><br><span class="line">OK</span><br><span class="line">get id</span><br><span class="line">END</span><br><span class="line">get userid</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p><code>append</code> 将数据追加到当前缓存数据的之后，当缓存数据存在时才存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set username 0 0 8</span><br><span class="line">wang1234</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 8</span><br><span class="line">wang1234</span><br><span class="line">END</span><br><span class="line">append username 0 0 5</span><br><span class="line">_ages</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 13</span><br><span class="line">wang1234_ages</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h4><p><code>prepend</code> 将数据追加到当前缓存数据的之前，当缓存数据存在时才存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set username 0 0 8</span><br><span class="line">wang1234</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 8</span><br><span class="line">wang1234</span><br><span class="line">END</span><br><span class="line">prepend username 0 0 5</span><br><span class="line">name_</span><br><span class="line">STORED</span><br><span class="line">get username</span><br><span class="line">VALUE username 0 13</span><br><span class="line">name_wang1234</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.cnblogs.com/wayne173/p/5652034.html" target="_blank" rel="noopener">達達尼亞：memcached 常用命令及使用说明</a></p>]]></content>
      
      <categories>
          
          <category> Memcached </category>
          
          <category> Memcached安装和常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Memcached</title>
      <link href="/2017/11/09/Memcached/"/>
      <url>/2017/11/09/Memcached/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Memcached-1.jpg" title="Memcached"></center><a id="more"></a><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><ul><li><code>Memcached</code>是以<code>LiveJournal</code>旗下<code>Danga Interactive</code>公司的<code>Brad Fitzpatric</code>为首开发的一款软件。</li><li>免费和开放源代码的高性能分布式内存对象缓存系统，本质上是通用的，但旨在通过减轻数据库负载来加速动态<code>Web</code>应用程序。</li><li><code>Memcached</code>是内存中的键值存储，用于从数据库调用，<code>API</code>调用或页面呈现的结果中为小块任意数据（字符串，对象）。</li><li><code>Memcached</code>简单而强大。其简单的设计促进了快速部署，易于开发，并解决了大数据缓存面临的许多问题。它的<code>API</code>适用于大多数流行的语言。</li><li>其守护进程（<code>daemon</code> ）是用<code>C</code>写的，但是客户端可以用任何语言来编写，并通过<code>memcached</code>协议与守护进程通信。</li><li>Memcached官网：<a href="http://memcached.org/" target="_blank" rel="noopener">http://memcached.org/</a></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>重启<code>memcached</code>服务器或者操作系统会使数据消失。</li><li>内存容量达到指定值之后，就会使用<code>LRU</code>算法自动删除不使用或者很少使用的缓存。</li></ol><h3 id="Memcached的工作过程"><a href="#Memcached的工作过程" class="headerlink" title="Memcached的工作过程"></a>Memcached的工作过程</h3><p><code>Memcached</code>是一种<code>C/S</code>模式，在服务器端启动服务守护进程，此时可以指定监听的<code>IP</code>地址、端口号以及使用多少内存来处理客户端的请求等几个关键参数。服务器端的服务启动后就一直处于等待处理客户端的连接状态。<code>Memcached</code> 是由<code>C</code>语言来实现的，采用的是<strong>异步<code>I/O</code></strong>，其实现方式是基于事件的单进程和单线程的。使用 <strong><code>libevent</code> 作为事件通知机制</strong> ，多个服务器端可以协同工作，但这些服务器端之间没有任何通信关系，每个服务器端只对自己的数据进行管理。客户端通过指定服务器的IP地址和端口进行通信。</p><p>需要被缓存的对象或数据以 <strong><code>key/value</code>对</strong> 的形式保存在服务器端，每个被缓存的对象或数据都有唯一的标识符key，存取操作通过这个key 进行。保存到 <code>Memcached</code> 中的对象或数据放置在内存中，并不会作为文件存储在磁盘上，所以存取速度非常快。由于没有对这些对象进行持久性存储，因此在服务器端的服务重启之后存储在内存中的这些数据就会消失。而且当存储的容量达到启动时设定的值时，就自动使用 <strong><code>LRU</code>算法</strong> 删除不用的缓存。<code>Memcached</code>是为缓存而设计的服务器，因此在设计之初并没有过多考虑数据的永久性问题。<code>Memcached</code> <strong>支持各种语言编写的客户端<code>API</code></strong> ，目前包括 Perl、PHP、Python、Ruby、Java、C#和C等。</p><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p><h3 id="Slab-Allocation的工作机制"><a href="#Slab-Allocation的工作机制" class="headerlink" title="Slab Allocation的工作机制"></a>Slab Allocation的工作机制</h3><p> <strong><code>Memcached</code>利用<code>Slab Allocation</code>机制来分配和管理内存</strong> 。传统的内存管理方式是：使用完通过<code>malloc</code>分配的内存后通过<code>free</code>来回收内存。这种方式容易产生内存碎片并降低操作系统对内存的管理效率。<code>Slab Allocation</code>机制不存在这样的问题，它按照预先规定的大小，将分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释放，可以重复利用。</p><p><code>Memcached</code>服务器端保存着一个空闲的内存块列表，当有数据存入时根据接收到的数据大小，分配一个能存下这个数据的最小内存块。这种方式有时会造成内存浪费，例如：将一个200字节的数据存入一个300字节的内存块中，会有100字节内存被浪费掉，不能使用。避免浪费内存的办法是，预先计算出应用存入的数据大小，或把同一业务类型的数据存入一个<code>Memcached</code>服务器中，确保存入的数据大小相对均匀，这样就可以减少对内存的浪费。还有一种办法是，在启动时指定“-f”参数，能在某种程度上控制内存组之间的大小差异。在应用中使用Memcached时，通常可以不重新设置这个参数，使用默认值1.25进行部署。如果想优化<code>Memcached</code>对内存的使用，可以考虑重新计算数据的预期平均长度，调整这个参数来获得合适的设置值。</p><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p><h3 id="Memcached的删除机制"><a href="#Memcached的删除机制" class="headerlink" title="Memcached的删除机制"></a>Memcached的删除机制</h3><p>上一节已经介绍过，<code>Memcached</code>不会释放已分配的内存空间，在数据过期后，客户端不能通过<code>key</code>取出它的值，其存储空间被重新利用。</p><p><code>Memcached</code>使用的是一种<code>Lazy Expiration</code>策略，自己不会监控存入的<code>key/value</code>对是否过期，而是在获取<code>key</code>值时查看记录的时间戳，检查<code>key/value</code>对空间是否过期。这种策略不会在过期检测上浪费<code>CPU</code>资源。<br><code>Memcached</code>在分配空间时，优先使用已经过期的<code>key/value</code>对空间，当空间占满时，<code>Memcached</code>就会使用<code>LRU</code>算法来分配空间，删除最近最少使用的<code>key/value</code>对，将其空间分配给新的<code>key/value</code>对。在某些情况下，如果不想使用LRU算法，那么可以通过<code>“-M”</code>参数来启动<code>Memcached</code>，这样，<code>Memcached</code>在内存耗尽时，会返回一个报错信息。</p><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p><h3 id="Memcached的分布式算法"><a href="#Memcached的分布式算法" class="headerlink" title="Memcached的分布式算法"></a>Memcached的分布式算法</h3><p>前面已经介绍过，Memcached的分布式是通过客户端的程序库来实现的。下面举例描述其工作过程。<br>假设有node1、node2、node2三台Memcached服务器，应用程序要实现保存名为“tokyo”、“ tokyo1”、“ tokyo2”、“ tokyo3”的数据，如图3-2所示。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-2.png" title="有node1、node2、node2三台Memcached服务器，应用程序要实现保存名为“tokyo”、“ tokyo1”、“ tokyo2”、“ tokyo3”的数据"></center><p>向Memcached中存入“tokyo”，将“tokyo”传给客户端程序后，客户端实现的算法就会根据这个“键”来决定保存数据的Memcached服务器，选定服务器后，就命令该服务器保存“tokyo”及其值，如图3-3所示。<br>同样，存入“tokyo1”、“ tokyo2”和“ tokyo3”的过程都是先通过客户端的算法选择服务器再保存数据。<br>接下来获取保存的数据。获取保存的key/value对时也要将要获取的键“tokyo”传递给函数库。函数库通过与存取数据操作相同的算法，根据“键”来选择服务器。只要使用的算法相同，就能确定存入在哪一台服务器上，然后发送get命令。只要数据没有因为某些原因被删除，就能获得保存的值，如图3-4所示。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-3.png" title="3-4"></center><p>将不同的键保存到不同的服务器上，就实现了Memcached的分布式算法。部署多台Memcached服务器时，将键分散保存到这些服务器上，当某一台Memcached服务器发生故障无法连接时，只有分散到这台服务器上的key/values对不能访问，其他key/value对不受影响。</p><p>目前有两种分布式算法使用得最多，一种是根据余数来计算分布，另一种是根据一致性散列算法来计算分布。根据余数分布式算法先求得键的整数散列值，再除以服务器台数，根据余数来选择将键存放到哪一台服务器上。这种方法虽然计算简单，效率很高，但在服务器增加或减少时，会导致几乎所有的缓存失效，所以在大规模部署中，很少使用这种方法。一致性散列的原理如图3-5所示，先算出Memcached服务器（节点）的散列值，并将其分散到0到2的32次方的圆上，然后用同样的方法算出存储数据的键的散列值并映射到圆上，最后从数据映射到的位置开始顺时针查找，将数据保存到查找到的第一个服务器上。如果超过232仍然找不到服务器，就会将数据保存到第一台Memcached服务器上。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-4.png" title="两种分布式算法"></center><p>当需要添加一台Memcached服务器时，由于保存键的服务器的个数发生了变化，因此余数分布式算法的余数结果也会发生巨大变化，几乎所有的键都找不到之前存入的服务器，导致所有的缓存失效。但在采用一致性散列算法时，添加服务器后，只有在圆上增加服务器地点的逆时针方向的第一台服务器上的键会受到影响，如图3-6所示。<br>一致性散列算法对数据的存储是不均匀的，但可以最大限度地减少缓存的失效量。在大规模部署Memcached时，容灾和扩容一定要使用一致性散列算法，以确保在出现故障或容量问题时减小对数据库的影响。</p><center><img src="https://houhaiyun.github.io/img/images/Memcached-5.png" title="3-6"></center><p><a href="https://yq.aliyun.com/articles/174199#" target="_blank" rel="noopener">本节书摘来自华章社区《高性能Linux服务器构建实战》一书中的第3章，第3.2节剖析Memcached的工作原理，作者：高俊峰</a></p>]]></content>
      
      <categories>
          
          <category> Memcached </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块  ngx_stream_core_module</title>
      <link href="/2017/10/28/Nginx-ngx-stream-core-module/"/>
      <url>/2017/10/28/Nginx-ngx-stream-core-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>所述<code>ngx_stream_upstream_module</code>模块（<code>1.9.0</code>）被用于定义可以由被引用的服务器组<code>proxy_pass</code>指令。</p><h3 id="upstream-name-…"><a href="#upstream-name-…" class="headerlink" title="upstream name { … }"></a>upstream name { … }</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:upstream name &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:stream</span><br></pre></td></tr></table></figure></p><p>定义一组服务器。服务器可以在不同端口上侦听。另外，监听<code>TCP</code>和<code>UNIX</code>域套接字的服务器可以混合使用。</p><a id="more"></a><h3 id="模块-ngx-stream-proxy-module"><a href="#模块-ngx-stream-proxy-module" class="headerlink" title="模块 ngx_stream_proxy_module"></a>模块 ngx_stream_proxy_module</h3><p>可实现代理基于<code>TCP</code>，<code>UDP</code>(1.9.13), <code>UNIX-domain sockets</code>的数据流</p><h4 id="proxy-pass-address"><a href="#proxy-pass-address" class="headerlink" title="proxy_pass address;"></a>proxy_pass address;</h4><p>指定后端服务器地址</p><h4 id="proxy-timeout-timeout"><a href="#proxy-timeout-timeout" class="headerlink" title="proxy_timeout timeout;"></a>proxy_timeout timeout;</h4><p>无数据传输时，保持连接状态的超时时长,默认为10m</p><h4 id="proxy-connect-timeout-time"><a href="#proxy-connect-timeout-time" class="headerlink" title="proxy_connect_timeout time;"></a>proxy_connect_timeout time;</h4><p>设置<code>nginx</code>与被代理的服务器尝试建立连接的超时时长;默认为<code>60s</code></p><h3 id="实现反向代理3306端口的Mysql服务"><a href="#实现反向代理3306端口的Mysql服务" class="headerlink" title="实现反向代理3306端口的Mysql服务"></a>实现反向代理3306端口的Mysql服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># 192.168.8.128的配置</span><br><span class="line">[root@128 ~]# yum install -y mysql-server           # 安装mysql数据库</span><br><span class="line">[root@128 ~]# service mysqld start              # 启动mysql数据库</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br><span class="line">[root@128 ~]# mysql         # 连接Mysql请注意128的mysql版本为5.1</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER test IDENTIFIED BY &apos;centos&apos; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 192.168.8.138的配置</span><br><span class="line">[root@138 ~]# yum -y  install mariadb-server         # 安装Mariadb数据库</span><br><span class="line">[root@138 ~]# systemctl start mariadb               # 启动Mariadb数据库</span><br><span class="line">[root@138 ~]# mysql                 # 连接Mariadb请注意138的Mariadb版本为5.5</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; CREATE USER test IDENTIFIED BY &apos;centos&apos; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Nginx服务的配置</span><br><span class="line">[root@nginx ~]# vim /etc/nginx/nginx.conf           # 添加一下行</span><br><span class="line">stream &#123;</span><br><span class="line">    upstream mysqlser &#123;         # 此处人可以指定调度算法ip_hash等</span><br><span class="line">        server 192.168.8.128:3306;</span><br><span class="line">        server 192.168.8.138:3306;</span><br><span class="line">    &#125;   </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 192.168.8.140:3306;          # 定义一个server，指定监听本地IP192.168.8.140的3306端口</span><br><span class="line">        proxy_pass mysqlser ;           # 转发到本地的网络组mysqlser</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@nginx ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@nginx ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">[root@nginx ~]# yum install -y  mariadb             # 安装mysql客户端          </span><br><span class="line">[root@nginx ~]# mysql -utest -pcentos -h 192.168.8.140      # 连接测试，应该是已经连接上192.168.8.128上面的mysql5.1了</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; Bye</span><br><span class="line">[root@nginx ~]# mysql -utest -pcentos -h 192.168.8.140      # 连接测试，应该是已经连接上192.168.8.138上面的mysql5.5了</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; Bye</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块  ngx_stream_core_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块  ngx_stream_core_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx编译安装模块（非重装）</title>
      <link href="/2017/10/28/Nginx-make2/"/>
      <url>/2017/10/28/Nginx-make2/</url>
      <content type="html"><![CDATA[<h3 id="添加mail模块"><a href="#添加mail模块" class="headerlink" title="添加mail模块"></a>添加mail模块</h3><h4 id="查看本地已经编译的模块"><a href="#查看本地已经编译的模块" class="headerlink" title="查看本地已经编译的模块"></a>查看本地已经编译的模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@centos7 sbin]# ./nginx -V</span><br><span class="line">nginx version: HaiYunNginx/6.6.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx </span><br><span class="line">--conf-path=/etc/nginx/nginx.conf </span><br><span class="line">--error-log-path=/var/log/nginx/error.log </span><br><span class="line">--http-log-path=/var/log/nginx/access.log</span><br><span class="line">--pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock</span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy </span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi</span><br><span class="line">--pid-path=/run/nginx.pid --with-http_mp4_module --with-http_gunzip_module</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp</span><br><span class="line">--with-stream_ssl_module --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module</span><br><span class="line">--with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="configure脚本"><a href="#configure脚本" class="headerlink" title="configure脚本"></a>configure脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# ./configure --prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --pid-path=/run/nginx.pid \</span><br><span class="line">--with-http_mp4_module --with-http_gunzip_module --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --with-stream_ssl_module --user=nginx \</span><br><span class="line">--group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module \</span><br><span class="line">--with-http_stub_status_module --with-threads --with-file-aio \</span><br><span class="line">--with-mail  # 添加mail模块</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在添加模块的时候，一定要把这些之前编译的模块带上，不然你编译的只有你想提价的模块，之前的模块不会编译。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# make</span><br></pre></td></tr></table></figure><p>注意：不要<code>make install</code>，不然就相当于重装了。</p><h4 id="替换Nginx二进制文件"><a href="#替换Nginx二进制文件" class="headerlink" title="替换Nginx二进制文件"></a>替换Nginx二进制文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# cp -a /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak      # 替换前先备份一下    </span><br><span class="line">[root@centos7 nginx-1.13.6]# cp ./objs/nginx /usr/local/nginx/sbin/         # 替换nginx程序</span><br><span class="line">cp: overwrite ‘/usr/local/nginx/sbin/nginx’? y</span><br></pre></td></tr></table></figure><h4 id="启动nginx，并查看编译选项"><a href="#启动nginx，并查看编译选项" class="headerlink" title="启动nginx，并查看编译选项"></a>启动nginx，并查看编译选项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# /usr/local/nginx/sbin/nginx </span><br><span class="line">[root@centos7 nginx-1.13.6]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: HaiYunNginx/6.6.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx </span><br><span class="line">--conf-path=/etc/nginx/nginx.conf </span><br><span class="line">--error-log-path=/var/log/nginx/error.log </span><br><span class="line">--http-log-path=/var/log/nginx/access.log </span><br><span class="line">--pid-path=/var/run/nginx.pid </span><br><span class="line">--lock-path=/var/run/nginx.lock </span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy </span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi </span><br><span class="line">--pid-path=/run/nginx.pid --with-http_mp4_module </span><br><span class="line">--with-http_gunzip_module --http-scgi-temp-path=/var/cache/nginx/scgi_temp</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --with-stream_ssl_module </span><br><span class="line">--user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module </span><br><span class="line">--with-http_dav_module --with-http_stub_status_module </span><br><span class="line">--with-threads --with-file-aio --with-mail    # 已经添加成功</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx编译安装模块（非重装） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx编译安装模块（非重装） </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx编译安装</title>
      <link href="/2017/10/28/Nginx-make/"/>
      <url>/2017/10/28/Nginx-make/</url>
      <content type="html"><![CDATA[<h3 id="安装必备软件包"><a href="#安装必备软件包" class="headerlink" title="安装必备软件包"></a>安装必备软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum -y install  openssl-devel pcre-devel      # 安装必备包</span><br><span class="line">[root@centos7 nginx-1.10.3]# yum install gcc make gcc-c++       # 安装编译工具</span><br></pre></td></tr></table></figure><h3 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h3><p>目前最新的版本是<code>1.13.6</code>，先来尝个鲜。（生产中可不要这么干！）</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# wget  http://nginx.org/download/nginx-1.13.6.tar.gz       # 下载源码包</span><br><span class="line">--2017-10-28 19:16:52--  http://nginx.org/download/nginx-1.13.6.tar.gz</span><br><span class="line">Resolving nginx.org (nginx.org)... 95.211.80.227, 206.251.255.63, 2001:1af8:4060:a004:21::e3, ...</span><br><span class="line">Connecting to nginx.org (nginx.org)|95.211.80.227|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 989760 (967K) [application/octet-stream]</span><br><span class="line">Saving to: ‘nginx-1.13.6.tar.gz’</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 989,760      424KB/s   in 2.3s   </span><br><span class="line"></span><br><span class="line">2017-10-28 19:16:55 (424 KB/s) - ‘nginx-1.13.6.tar.gz’ saved [989760/989760]</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ls</span><br><span class="line">nginx-1.13.6.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# tar xf nginx-1.13.6.tar.gz -C /usr/local/src/         # 解压到/usr/local/src/目录下</span><br></pre></td></tr></table></figure><h3 id="修改隐藏Nginx版本号"><a href="#修改隐藏Nginx版本号" class="headerlink" title="修改隐藏Nginx版本号"></a>修改隐藏Nginx版本号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cd /usr/local/src/nginx-1.13.6/src/core/</span><br><span class="line">[root@centos7 core]# vim nginx.h</span><br><span class="line">/*</span><br><span class="line"> * Copyright (C) Igor Sysoev</span><br><span class="line"> * Copyright (C) Nginx, Inc.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ifndef _NGINX_H_INCLUDED_</span><br><span class="line">#define _NGINX_H_INCLUDED_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define nginx_version      1013006</span><br><span class="line">#define NGINX_VERSION      &quot;6.6.6&quot;              # 自定义版本</span><br><span class="line">#define NGINX_VER          &quot;HaiYunNginx/&quot; NGINX_VERSION         # Server自定义</span><br><span class="line"></span><br><span class="line">#ifdef NGX_BUILD</span><br><span class="line">#define NGINX_VER_BUILD    NGINX_VER &quot; (&quot; NGX_BUILD &quot;)&quot;</span><br><span class="line">#else</span><br><span class="line">#define NGINX_VER_BUILD    NGINX_VER</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#define NGINX_VAR          &quot;NGINX&quot;</span><br><span class="line">#define NGX_OLDPID_EXT     &quot;.oldbin&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#endif /* _NGINX_H_INCLUDED_ */</span><br></pre></td></tr></table></figure><h3 id="添加nginx用户"><a href="#添加nginx用户" class="headerlink" title="添加nginx用户"></a>添加nginx用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# useradd -r -s /sbin/nologin -m -d   /var/lib/nginx nginx       # 添加用户nginx</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# ./configure --prefix=/usr/local/nginx \        # 开始编译安装</span><br><span class="line">&gt; --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">&gt; --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">&gt; --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">&gt; --pid-path=/var/run/nginx.pid \</span><br><span class="line">&gt; --lock-path=/var/run/nginx.lock \</span><br><span class="line">&gt; --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \</span><br><span class="line">&gt; --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \</span><br><span class="line">&gt; --pid-path=/run/nginx.pid \</span><br><span class="line">&gt; --with-http_mp4_module \</span><br><span class="line">&gt; --with-http_gunzip_module \</span><br><span class="line">&gt; --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">&gt;  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">&gt;  --with-stream_ssl_module \</span><br><span class="line">&gt; --user=nginx \</span><br><span class="line">&gt; --group=nginx \</span><br><span class="line">&gt; --with-http_ssl_module \</span><br><span class="line">&gt; --with-http_v2_module \</span><br><span class="line">&gt; --with-http_dav_module \</span><br><span class="line">&gt; --with-http_stub_status_module \</span><br><span class="line">&gt; --with-threads \</span><br><span class="line">&gt; --with-file-aio \</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">[root@centos7 nginx-1.13.6]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="编译参数说明"><a href="#编译参数说明" class="headerlink" title="编译参数说明"></a>编译参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--pid-path=/var/run/nginx.pid \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \</span><br><span class="line">--pid-path=/run/nginx.pid \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line"> --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line"> --with-stream_ssl_module \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx \ # 安装目录</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \ # 指定配置文件路径</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \ # 错误日志</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \ # 访问日志</span><br><span class="line">--pid-path=/var/run/nginx.pid \ # pid路径</span><br><span class="line">--lock-path=/var/run/nginx.lock \   #  锁文件安装位置</span><br><span class="line">--http-proxy-temp-path=/var/lib/nginx/tmp/proxy \   作为代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line">--http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \ 作为fastcgi代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line">--with-http_mp4_module \    # 启用MP4视频</span><br><span class="line">--with-http_gunzip_module \ # 启用压缩</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \ # 作为scgi反代服务器，服务器响应报文的临时文件存放路径</span><br><span class="line"> --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \# 作为uwsgi代理服务器，服务器响应报文的临时文件存放路径</span><br><span class="line">--with-stream_ssl_module \ # 启用stream模块的ssl</span><br><span class="line">--user=nginx \  # 指明以那个身份运行worker进程，主控master进程一般由root运行</span><br><span class="line">--group=nginx \ # 组</span><br><span class="line">--with-http_ssl_module \ # 启用ssl</span><br><span class="line">--with-http_v2_module \ # 支持http2.0</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \   # 异步非阻塞</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx-1.13.6]# cd /usr/local/nginx/sbin/</span><br><span class="line">[root@centos7 sbin]# ls</span><br><span class="line">nginx</span><br><span class="line">[root@centos7 sbin]# ./nginx        # 启动nginx，提示找不到目录</span><br><span class="line">nginx: [emerg] mkdir() &quot;/var/lib/nginx/tmp/proxy&quot; failed (2: No such file or directory)</span><br><span class="line">[root@centos7 sbin]# mkdir -p /var/lib/nginx/tmp/proxy  # 创建目录</span><br><span class="line">[root@centos7 sbin]# ./nginx        # 再次启动，还是提示缺少目录</span><br><span class="line">nginx: [emerg] mkdir() &quot;/var/cache/nginx/uwsgi_temp&quot; failed (2: No such file or directory)</span><br><span class="line">[root@centos7 sbin]# mkdir -p /var/cache/nginx/uwsgi_temp   # 创建目录</span><br><span class="line">[root@centos7 sbin]# ./nginx</span><br><span class="line">[root@centos7 sbin]# ss -tnul       # 80端口已经开启</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0              ::1:323                         :::*                  </span><br><span class="line">udp   UNCONN     0      0               :::34463                       :::*                  </span><br><span class="line">tcp   LISTEN     0      128              *:80                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:22                           *:*                  </span><br><span class="line"></span><br><span class="line">[root@centos7 sbin]# curl -I localhost</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: HaiYunNginx/6.6.6           # 已经修改为我们想要的版本了，呵呵~~~</span><br><span class="line">Date: Sat, 28 Oct 2017 12:07:24 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Sat, 28 Oct 2017 12:01:53 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f471b1-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="查看已经编译模块"><a href="#查看已经编译模块" class="headerlink" title="查看已经编译模块"></a>查看已经编译模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 sbin]# ./nginx -V</span><br><span class="line">nginx version: HaiYunNginx/6.6.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --pid-path=/run/nginx.pid --with-http_mp4_module --with-http_gunzip_module --http-scgi-temp-path=/var/cache/nginx/scgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --with-stream_ssl_module --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx编译安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx编译安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块  ngx_http_upstream_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-upstream-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-upstream-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该<code>ngx_http_upstream_module</code>模块用于定义可由<code>proxy_pass</code>， <code>fastcgi_pass</code>， <code>uwsgi_pass</code>， <code>scgi_pass</code>和<code>memcached_pa​​ss</code>指令引用的服务器组。</p><p>用于将多个服务器定义成服务器组，而由<code>proxy_pass,fastcgi_pass</code>等指令进行引用</p><h3 id="upstream-name-…"><a href="#upstream-name-…" class="headerlink" title="upstream name { … }"></a>upstream name { … }</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:upstream name &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>定义一组服务器。服务器可以在不同端口上侦听。另外，监听<code>TCP</code>和<code>UNIX</code>域套接字的服务器可以混合使用。</p><p>定义后端服务器组，会引入一个新的上下文,默认调度算法是wrr</p><h3 id="server-address-parameters"><a href="#server-address-parameters" class="headerlink" title="server address [parameters];"></a>server address [parameters];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:server address [parameters];</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br></pre></td></tr></table></figure></p><p>定义 服务器<code>address</code>和其他<code>parameters</code>服务器。可以将该地址指定为具有可选端口的域名或IP地址，或者指定为“ <code>unix:</code>”前缀之后指定的<code>UNIX</code>域套接字路径。如果未指定端口，则使用端口80。解析为多个<code>IP</code>地址的域名一次定义多个服务器。</p><p>在<code>upstream</code>上下文中<code>server</code>成员，以及相关的参数； ·<code>Context:upstream address·</code>的表示格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unix:/PATH/TO/SOME_SOCK_FILE</span><br><span class="line">IP[:PORT]</span><br><span class="line">HOSTNAME[:PORT]</span><br></pre></td></tr></table></figure></p><h4 id="parameters："><a href="#parameters：" class="headerlink" title="parameters："></a>parameters：</h4><ul><li><code>weight=number</code> 权重，默认为1</li><li><code>max_conns</code> 连接后端报务器最大并发活动连接数， 1.11.5后支持</li><li><code>max_fails=number</code> 失败尝试最大次数；超出此处指定的次数时， server将被标记为不可用,默认为<code>1</code></li><li><code>fail_timeout=time</code> 后端服务器标记为不可用状态的连接超时时长，默认<code>10s</code></li><li><code>backup</code> 将服务器标记为“备用”，即所有服务器均不可用时才启用</li><li><code>down</code> 标记为“不可用”，配合<code>ip_hash</code>使用，实现灰度发布</li></ul><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash;"></a>ip_hash;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ip_hash;</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br></pre></td></tr></table></figure></p><p>指定组应该使用根据客户端IP地址在服务器之间分配请求的负载平衡方法。客户端<code>IPv4</code>地址或整个<code>IPv6</code>地址的前三个八位字节被用作散列密钥。该方法确保来自同一客户端的请求将始终传递到同一服务器，除非此服务器不可用。在后一种情况下，客户端请求将被传递到另一个服务器。很可能，它将始终是同一台服务器。</p><p>源地址hash调度方法</p><h3 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn;"></a>least_conn;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:least_conn;</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br><span class="line">This directive appeared in versions 1.3.1 and 1.2.2.</span><br></pre></td></tr></table></figure></p><p>指定一个组应该使用负载平衡方法，其中请求被传递到具有最少数量的活动连接的服务器，同时考虑服务器的权重。如果有几个这样的服务器，则依次使用加权循环平衡方法。</p><p>最少连接调度算法，当<code>server</code>拥有不同的权重时其为<code>wlc</code>，当所有后端主机连接数相同时，则使用<code>wrr</code>，适用于长连接</p><h3 id="hash-key-consistent"><a href="#hash-key-consistent" class="headerlink" title="hash key [consistent];"></a>hash key [consistent];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:hash key [consistent];</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br><span class="line">This directive appeared in version 1.7.2.</span><br></pre></td></tr></table></figure></p><p>基于指定的<code>key</code>的<code>hash</code>表来实现对请求的调度，此处的<code>key</code>可以直接文本、变量或二者组合</p><p>作用：将请求分类，同一类请求将发往同一个<code>upstream server</code>，使用<code>consistent</code>参数，将使用<code>ketama</code>一致性<code>hash</code>算法，适用于后端是<code>Cache</code>服务器（如<code>varnish</code>）时使用</p><ul><li><code>hash $request_uri consistent;</code></li><li><code>hash $remote_addr;</code></li></ul><h3 id="keepalive-连接数N"><a href="#keepalive-连接数N" class="headerlink" title="keepalive 连接数N;"></a>keepalive 连接数N;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive connections;</span><br><span class="line">Default:—</span><br><span class="line">Context:upstream</span><br></pre></td></tr></table></figure></p><p>为每个<code>worker</code>进程保留的空闲的长连接数量,可节约<code>nginx</code>端口，并减少连接管理的消耗</p><h3 id="health-check-parameters"><a href="#health-check-parameters" class="headerlink" title="health_check [parameters];"></a>health_check [parameters];</h3><ul><li><code>health_check [parameters];</code></li><li>健康状态检测机制；只能用于location上下文</li></ul><p>常用参数：</p><ul><li><code>interval=time</code>检测的频率，默认为5秒</li><li><code>fails=number</code>：判定服务器不可用的失败检测次数；默认为1次</li><li><code>passes=number</code>：判定服务器可用的失败检测次数；默认为1次</li><li><code>uri=uri</code>：做健康状态检测测试的目标<code>uri</code>；默认为/</li><li><code>match=NAME</code>：健康状态检测的结果评估调用此处指定的<code>match</code>配置块注意：仅对<code>nginx plus</code>有效</li></ul><p><strong>注意：此项仅对商业版nginx有效</strong></p><h3 id="match-name-…"><a href="#match-name-…" class="headerlink" title="match name { … }"></a>match name { … }</h3><p>对<code>backend server</code>做健康状态检测时，定义其结果判断机制；只能用于<code>http</code>上下文</p><p>常用的参数：</p><ul><li><code>status code[ code ...]</code>: 期望的响应状态码</li><li><code>header HEADER[operator value]</code>：期望存在响应首部，也可对期望的响应首部的值基于比较操作符和值进行比较<code>body</code>：期望响应报文的主体部分应该有的内容</li></ul><p><strong>注意：此项仅对商业版nginx有效</strong></p><h3 id="实现upstream"><a href="#实现upstream" class="headerlink" title="实现upstream"></a>实现upstream</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/nginx.conf        # 修改主配置文件</span><br><span class="line">upstream web &#123;          #定义一个网络组，名称为web，网络组定义了两台server，分别为192.168.8.128和192.168.8.138</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf     # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://web;              # 定义访问本地的web根目录就代理到网络组web</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第一台server的配置</span><br><span class="line">[root@138 ~]# ifconfig ens34</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.138  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:2438  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 76396  bytes 13285907 (12.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 74734  bytes 17770296 (16.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@138 ~]# yum install -y httpd</span><br><span class="line">[root@fast-cgi ~]# echo &quot;192.168.8.138&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@138 ~]# systemctl start httpd</span><br><span class="line">[root@138 ~]# ss -tnul          # 80端口已经打开</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line"></span><br><span class="line">tcp   LISTEN     0      128              *:9000                         *:*                  </span><br><span class="line">tcp   LISTEN     0      128             :::80                          :::*                  </span><br><span class="line">tcp   LISTEN     0      128             :::22                          :::*                  </span><br><span class="line">tcp   LISTEN     0      100            ::1:25                          :::*      </span><br><span class="line">[root@138 ~]# curl 192.168.8.138        # 本地测试可以访问</span><br><span class="line">192.168.8.138</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第二台server的配置</span><br><span class="line">[root@128 ~]# ifconfig eth1</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:5031 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:4554 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:843593 (823.8 KiB)  TX bytes:1662926 (1.5 MiB)</span><br><span class="line">[root@128 ~]# yum install -y httpd</span><br><span class="line">[root@128 ~]# echo &quot;192.168.8.128&quot; &gt; /var/www/html/index.html</span><br><span class="line">[root@128 ~]# service httpd start</span><br><span class="line">Starting httpd:                             [  OK  ]</span><br><span class="line">[root@128 ~]# ss -tnul      # 80端口已经打开</span><br><span class="line">Netid State      Recv-Q Send-Q            Local Address:Port              Peer Address:Port </span><br><span class="line">udp   UNCONN     0      0                             *:68                           *:*     </span><br><span class="line">tcp   LISTEN     0      50                            *:3306                         *:*     </span><br><span class="line">tcp   LISTEN     0      128                          :::80                          :::*     </span><br><span class="line">tcp   LISTEN     0      128                          :::22                          :::*     </span><br><span class="line">tcp   LISTEN     0      128                           *:22                           *:*     </span><br><span class="line">tcp   LISTEN     0      100                         ::1:25                          :::*     </span><br><span class="line">tcp   LISTEN     0      100                   127.0.0.1:25                           *:*   </span><br><span class="line">[root@128 ~]# curl 192.168.8.128        # 本地测试可以访问</span><br><span class="line">192.168.8.128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done       #访问测试，ok</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br></pre></td></tr></table></figure><h3 id="实现upstream，定义Nginx为sorry-server"><a href="#实现upstream，定义Nginx为sorry-server" class="headerlink" title="实现upstream，定义Nginx为sorry server"></a>实现upstream，定义Nginx为sorry server</h3><p>我们还是接着上面的实验来做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改nginx的主配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;        # 定义本地服务器81端口为backup服务器，相当于sorry server</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# echo &quot;Soryy! 我们的服务器宕机了！正在抢修中...&quot; &gt; /app/website2/index.html        #修改默认页面的内容</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf     # 修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">        location / &#123; </span><br><span class="line">            proxy_pass http://web; </span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 81 ;</span><br><span class="line">    server_name www.b.com ; </span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    error_log /var/log/nginx/b.com.error.log  ;   </span><br><span class="line">    access_log /var/log/nginx/b.com.access.log main ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">[root@138 ~]# systemctl stop httpd      # 停止138的httpd服务</span><br><span class="line">[root@128 ~]# service httpd stop        # 停止128的httpd服务</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140        #访问测试，ok</span><br><span class="line">Soryy! 我们的服务器宕机了！正在抢修中...</span><br><span class="line"></span><br><span class="line">[root@138 ~]# systemctl start httpd         # 启动138的httpd服务</span><br><span class="line">[root@128 ~]# service httpd start       # 启动128的httpd服务</span><br><span class="line">Starting httpd:                             [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done       # 访问测试，一切正常</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br></pre></td></tr></table></figure><h3 id="实现ip-hash，针对源地址永久调度到一台后部web-server"><a href="#实现ip-hash，针对源地址永久调度到一台后部web-server" class="headerlink" title="实现ip_hash，针对源地址永久调度到一台后部web server"></a>实现ip_hash，针对源地址永久调度到一台后部web server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;</span><br><span class="line">        ip_hash ;           # 添加ip_hash</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done           # 测试，都调度到一台web server了</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br></pre></td></tr></table></figure><h3 id="实现least-conn，根据服务器的真实负载来调度"><a href="#实现least-conn，根据服务器的真实负载来调度" class="headerlink" title="实现least_conn，根据服务器的真实负载来调度"></a>实现least_conn，根据服务器的真实负载来调度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;</span><br><span class="line">        least_conn ;            # 添加least_conn</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line">[root@centos7 ~]# for i in &#123;1..10&#125; ; do curl 192.168.8.140 ; done           # 访问测试，ok</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.128</span><br><span class="line">192.168.8.138</span><br><span class="line">192.168.8.138</span><br></pre></td></tr></table></figure><h3 id="实现hash根据用户的URI来调度"><a href="#实现hash根据用户的URI来调度" class="headerlink" title="实现hash根据用户的URI来调度"></a>实现hash根据用户的URI来调度</h3><p>此项可以配合缓存服务器来使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">http &#123;</span><br><span class="line">upstream web &#123;</span><br><span class="line">        server 192.168.8.128:80 weight=1 ;</span><br><span class="line">        server 192.168.8.138:80 weight=2 ;</span><br><span class="line">        server 127.0.0.1:81 backup ;</span><br><span class="line">        hash  $request_uri ;            # 添加hash key基于URI</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">[root@138 ~]# for i in &#123;1..5&#125; ; do echo &quot;$i.html 193.168.8.138&quot; &gt; /var/www/html/$i.html  ; done     # 在138上面创建5个测试页面</span><br><span class="line">[root@138 ~]# ls /var/www/html/</span><br><span class="line">1.html  2.html  3.html  4.html  5.html  blog  index.html</span><br><span class="line">[root@138 ~]# cat /var/www/html/1.html </span><br><span class="line">1.html 193.168.8.138</span><br><span class="line"></span><br><span class="line">[root@128 ~]# for i in &#123;1..5&#125; ; do echo &quot;$i.html 193.168.8.128&quot; &gt; /var/www/html/$i.html  ; done     # 在128上面创建5个测试页面</span><br><span class="line">[root@128 ~]# ls /var/www/html/</span><br><span class="line">1.html  2.html  3.html  4.html  5.html  index.html</span><br><span class="line">[root@128 ~]# cat /var/www/html/1.html </span><br><span class="line">1.html 193.168.8.128</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..5&#125; ; do curl 192.168.8.140/1.html ; done     # 测试访问，1.html都已经调度到128这台server</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line">1.html 193.168.8.128</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# for i in &#123;1..5&#125; ; do curl 192.168.8.140/3.html ; done     # 测试访问，3.html都已经调度到138这台server</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br><span class="line">3.html 193.168.8.138</span><br></pre></td></tr></table></figure></p><h3 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><p>作用：一致性hash算法（<code>DHT</code>）通过减少影响范围的方式解决了增减服务器导致的数据散列问题，从而解决了分布式环境下负载均衡问题，如果存在热点数据，那么通过增添节点的方式，对热点区间进行划分，将压力分配至其他服务器。重新达到负载均衡的状态。  </p><p>一致性哈希基本解决了在<code>P2P</code>环境中最为关键的问题——如何在动态的网络拓扑中分布存储和路由。每个节点仅需维护少量相邻节点的信息，并且在节点加入/退出系统时，仅有相关的少量节点参与到拓扑的维护中。所有这一切使得一致性哈希成为第一个实用的<code>DHT</code>算法。</p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块  ngx_http_upstream_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块  ngx_http_upstream_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LNAMP搭建WordPress</title>
      <link href="/2017/10/27/Nginx-LNAMP/"/>
      <url>/2017/10/27/Nginx-LNAMP/</url>
      <content type="html"><![CDATA[<h3 id="使用nginx-php-fpm-mariadb-apache-搭建wordpress"><a href="#使用nginx-php-fpm-mariadb-apache-搭建wordpress" class="headerlink" title="使用nginx+ php-fpm + mariadb + apache 搭建wordpress"></a>使用nginx+ php-fpm + mariadb + apache 搭建wordpress</h3><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><center><img src="https://houhaiyun.github.io/img/images/Nginx-LNAMP-1.jpg" title="拓扑图"></center><a id="more"></a><table><thead><tr><th>服务</th><th>IP</th><th>功能</th></tr></thead><tbody><tr><td>Nginx</td><td>192.168.8.140</td><td>反向代理</td></tr><tr><td>Apache</td><td>192.168.8.138</td><td>web服务</td></tr><tr><td>Mysql</td><td>192.168.8.128</td><td>存储数据</td></tr><tr><td>Php-fpm</td><td>192.168.8.138</td><td>解析php文件</td></tr></tbody></table><h4 id="安装配置数据库服务器"><a href="#安装配置数据库服务器" class="headerlink" title="安装配置数据库服务器"></a>安装配置数据库服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql ~]# yum -y  install mysql-server        # 安装mysql数据库</span><br><span class="line">[root@Mysql ~]# service mysqld start        # 启动mysql数据库</span><br><span class="line">Initializing MySQL database:  Installing MySQL system tables...</span><br><span class="line">OK</span><br><span class="line">Filling help tables...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">/usr/bin/mysqladmin -u root password &apos;new-password&apos;</span><br><span class="line">/usr/bin/mysqladmin -u root -h Mysql password &apos;new-password&apos;</span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br><span class="line"></span><br><span class="line">which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">See the manual for more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MySQL daemon with:</span><br><span class="line">cd /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line">You can test the MySQL daemon with mysql-test-run.pl</span><br><span class="line">cd /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems with the /usr/bin/mysqlbug script!</span><br><span class="line"></span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@Mysql ~]# mysql</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE DATABASE wpdb;        # 为wordpress创建数据库</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; GRANT ALL ON  wpdb.* TO wpuser@&apos;192.168.8.%&apos; IDENTIFIED BY &apos;centos&apos;;     # 为wordpress创建用户并授权</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; SHOW DATABASES;      # 查看数据库</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| test               |</span><br><span class="line">| wpdb               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="配置php服务器"><a href="#配置php服务器" class="headerlink" title="配置php服务器"></a>配置php服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# vim /etc/php-fpm.d/www.conf      # 修改php配置文件</span><br><span class="line">listen = 9000       # 指定监听所有IP的9000端口</span><br><span class="line">listen.allowed_clients = 127.0.0.1,192.168.8.140    # 允许192.168.8.140使用php</span><br><span class="line"># 注意：上面两项在本实验中并不是必须的。如果apache和php-fpm不再同一台服务器上面就需要配置了。</span><br></pre></td></tr></table></figure><h3 id="安装配置Apache服务器"><a href="#安装配置Apache服务器" class="headerlink" title="安装配置Apache服务器"></a>安装配置Apache服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# yum install -y httpd</span><br><span class="line">[root@fast-cgi ~]# systemctl start httpd</span><br><span class="line">[root@fast-cgi ~]# vim /etc/httpd/conf/httpd.conf       # 修改主配置文件添加以下行</span><br><span class="line">DirectoryIndex index.php</span><br><span class="line">ProxyRequests Off </span><br><span class="line">ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1</span><br></pre></td></tr></table></figure><h3 id="测试链接数据库"><a href="#测试链接数据库" class="headerlink" title="测试链接数据库"></a>测试链接数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi php]# yum install -y php-mysql</span><br><span class="line">[root@fast-cgi php]# systemctl restart php-fpm</span><br><span class="line">[root@fast-cgi php]# cat mysql.php </span><br><span class="line">&lt;?php</span><br><span class="line">$mysqli=new mysqli(&quot;192.168.8.128&quot;,&quot;wpuser&quot;,&quot;centos&quot;);</span><br><span class="line">if(mysqli_connect_errno())&#123;</span><br><span class="line">echo &quot;no&quot;;</span><br><span class="line">$mysqli=null;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;OK! &quot;;</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line">?&gt;</span><br><span class="line">[root@fast-cgi ~]# curl 192.168.8.140/mysql.php         # 测试连接，ok</span><br><span class="line">OK!</span><br></pre></td></tr></table></figure><h3 id="下载并配置wordpress"><a href="#下载并配置wordpress" class="headerlink" title="下载并配置wordpress"></a>下载并配置wordpress</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# wget https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz</span><br><span class="line">--2017-10-27 20:04:06--  https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz</span><br><span class="line">Resolving cn.wordpress.org (cn.wordpress.org)... 66.155.40.250, 66.155.40.249</span><br><span class="line">Connecting to cn.wordpress.org (cn.wordpress.org)|66.155.40.250|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 8641990 (8.2M) [application/octet-stream]</span><br><span class="line">Saving to: ‘wordpress-4.8.1-zh_CN.tar.gz’</span><br><span class="line"></span><br><span class="line">100%[===================================================&gt;] 8,641,990   3.09MB/s   in 2.7s   </span><br><span class="line"></span><br><span class="line">2017-10-27 20:04:10 (3.09 MB/s) - ‘wordpress-4.8.1-zh_CN.tar.gz’ saved [8641990/8641990]</span><br><span class="line"></span><br><span class="line">[root@fast-cgi ~]# tar -xf wordpress-4.8.1-zh_CN.tar.gz -C /var/www/html/</span><br><span class="line">[root@fast-cgi ~]# cd /var/www/html/</span><br><span class="line">[root@fast-cgi html]# ls</span><br><span class="line">wordpress</span><br><span class="line">[root@fast-cgi html]# mv wordpress/ blog</span><br><span class="line">[root@fast-cgi html]# ls</span><br><span class="line">blog</span><br><span class="line">[root@fast-cgi blog]# mv wp-config-sample.php wp-config.php</span><br><span class="line">[root@fast-cgi blog]# vim  wp-config.php      # 修改wordpress配置文件</span><br><span class="line">define(&apos;DB_NAME&apos;, &apos;wpdb&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库用户名 */</span><br><span class="line">define(&apos;DB_USER&apos;, &apos;wpuser&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库密码 */</span><br><span class="line">define(&apos;DB_PASSWORD&apos;, &apos;centos&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL主机 */</span><br><span class="line">define(&apos;DB_HOST&apos;, &apos;192.168.8.128&apos;);</span><br><span class="line"></span><br><span class="line">/** 创建数据表时默认的文字编码 */</span><br><span class="line">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</span><br><span class="line"></span><br><span class="line">/** 数据库整理类型。如不确定请勿更改 */</span><br><span class="line">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</span><br></pre></td></tr></table></figure><h3 id="Nginx代理服务器配置"><a href="#Nginx代理服务器配置" class="headerlink" title="Nginx代理服务器配置"></a>Nginx代理服务器配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# yum install -y nginx      # 安装nginx服务</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改代理服务器的配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /blog  &#123;       # 定义只要访问/blog目录就跳转到http://192.168.8.138/blog目录</span><br><span class="line">        proxy_pass http://192.168.8.138 ;       </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>搞定！</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-LNAMP-2.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> LNAMP搭建WordPress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LNAMP搭建WordPress </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_fastcgi_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-fastcgi-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-fastcgi-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该<code>ngx_http_fastcgi_module</code>模块允许将请求传递给<code>FastCGI</code>服务器。</p><h3 id="fastcgi-pass-address"><a href="#fastcgi-pass-address" class="headerlink" title="fastcgi_pass address;"></a>fastcgi_pass address;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_pass address;</span><br><span class="line">Default:—</span><br><span class="line">Context:location, if in location</span><br></pre></td></tr></table></figure></p><p>设置<code>FastCGI</code>服务器的地址。地址可以指定为域名或<code>IP</code>地址，端口号：</p><a id="more"></a><h3 id="fastcgi-index-name"><a href="#fastcgi-index-name" class="headerlink" title="fastcgi_index name;"></a>fastcgi_index name;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_index name;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p><code>fastcgi</code>默认的主页资源</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;</span><br></pre></td></tr></table></figure><p>和“ /page.php”请求，SCRIPT_FILENAME参数将等于“ /home/www/scripts/php/page.php”，并且“ /”请求将等于“ /home/www/scripts/php/index.php”。</p><h3 id="fastcgi-param-parameter-value-if-not-empty"><a href="#fastcgi-param-parameter-value-if-not-empty" class="headerlink" title="fastcgi_param parameter value [if_not_empty];"></a>fastcgi_param parameter value [if_not_empty];</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_param parameter value [if_not_empty];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设置传递给 <code>FastCGI</code>服务器的参数值，可以是文本，变量或组合</p><p>以下示例显示了PHP的最低要求设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param SCRIPT_FILENAME / home / www / scripts / php $ fastcgi_script_name; </span><br><span class="line">fastcgi_param QUERY_STRING $ query_string;</span><br></pre></td></tr></table></figure></p><h3 id="实现fast-cgi"><a href="#实现fast-cgi" class="headerlink" title="实现fast-cgi"></a>实现fast-cgi</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# yum -y install php php-fpm mariadb-server</span><br><span class="line"></span><br><span class="line">[root@fast-cgi ~]# vim /etc/php-fpm.d/www.conf          #修改fast-cgi配置文件</span><br><span class="line">listen = 9000           # 监听所有IP的9000端口</span><br><span class="line">listen.allowed_clients = 127.0.0.1,192.168.8.140        # 允许192.168.8.140控制fast-cgi</span><br><span class="line"></span><br><span class="line">[root@fast-cgi ~]# systemctl start php-fpm          # 启动php-fpm程序</span><br><span class="line">[root@fast-cgi ~]# mkdir /app/php</span><br><span class="line">[root@fast-cgi ~]# vim /app/php/test.php        # 编写php测试页</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改代理服务器的配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;        # 定义处理.php结尾的服务器</span><br><span class="line">        fastcgi_index index.php ;           # 默认fastcgi的默认主页资源</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /app/php$fastcgi_script_name;     # /app/php代表fastcgi服务器php网页的根目录</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    proxy_cache proxycache ; </span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><p>测试访问，ok</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-fastcgi-module-1.gif" title="测试访问"></center><h3 id="通过-pm-status和-ping来获取fpm-server状态信息"><a href="#通过-pm-status和-ping来获取fpm-server状态信息" class="headerlink" title="通过/pm_status和/ping来获取fpm server状态信息"></a>通过/pm_status和/ping来获取fpm server状态信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">[root@fast-cgi ~]# vim /etc/php-fpm.d/www.conf          # 修改fast-cgi的配置文件</span><br><span class="line">ping.path = /ping       # 开启ping</span><br><span class="line">pm.status_path = /status    # 开启status</span><br><span class="line">[root@fast-cgi ~]# systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改nginx代理服务器的配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;</span><br><span class="line">        fastcgi_index index.php ;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /app/php$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;   </span><br><span class="line">    location ~* ^/(status|ping)$ &#123;          # 定义如果访问stats和ping目录就转发到php来处理</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl 192.168.8.140/status      # 测试状态</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          258</span><br><span class="line">accepted conn:        4</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     0</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       4</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      5</span><br><span class="line">max active processes: 1</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl 192.168.8.140/ping        # 测试ping，ok</span><br><span class="line">pong</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl http://192.168.8.140/status?xml       # 测试status，以xml格式显示</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;status&gt;</span><br><span class="line">&lt;pool&gt;www&lt;/pool&gt;</span><br><span class="line">&lt;process-manager&gt;dynamic&lt;/process-manager&gt;</span><br><span class="line">&lt;start-time&gt;1509102758&lt;/start-time&gt;</span><br><span class="line">&lt;start-since&gt;476&lt;/start-since&gt;</span><br><span class="line">&lt;accepted-conn&gt;12344&lt;/accepted-conn&gt;</span><br><span class="line">&lt;listen-queue&gt;0&lt;/listen-queue&gt;</span><br><span class="line">&lt;max-listen-queue&gt;124&lt;/max-listen-queue&gt;</span><br><span class="line">&lt;listen-queue-len&gt;128&lt;/listen-queue-len&gt;</span><br><span class="line">&lt;idle-processes&gt;7&lt;/idle-processes&gt;</span><br><span class="line">&lt;active-processes&gt;1&lt;/active-processes&gt;</span><br><span class="line">&lt;total-processes&gt;8&lt;/total-processes&gt;</span><br><span class="line">&lt;max-active-processes&gt;8&lt;/max-active-processes&gt;</span><br><span class="line">&lt;max-children-reached&gt;0&lt;/max-children-reached&gt;</span><br><span class="line">&lt;slow-requests&gt;0&lt;/slow-requests&gt;</span><br><span class="line">&lt;/status&gt;</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl http://192.168.8.140/status?json      # 以json格式显示</span><br><span class="line">&#123;&quot;pool&quot;:&quot;www&quot;,&quot;process manager&quot;:&quot;dynamic&quot;,&quot;start time&quot;:1509102758,&quot;start since&quot;:508,&quot;accepted conn&quot;:12346,&quot;listen queue&quot;:0,&quot;max listen queue&quot;:124,&quot;listen queue len&quot;:128,&quot;idle processes&quot;:7,&quot;active processes&quot;:1,&quot;total processes&quot;:8,&quot;max active processes&quot;:8,&quot;max children reached&quot;:0,&quot;slow requests&quot;:0&#125;</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl http://192.168.8.140/status?full          # 完整格式显示</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">accepted conn:        12347</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     124</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       7</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      8</span><br><span class="line">max active processes: 8</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19275</span><br><span class="line">state:                Running</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             1925</span><br><span class="line">request duration:     175</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?full</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19276</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             1667</span><br><span class="line">request duration:     109</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19277</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             1748</span><br><span class="line">request duration:     188</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?php</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19278</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             2057</span><br><span class="line">request duration:     268</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?xml</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19279</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:12:38 +0800</span><br><span class="line">start since:          576</span><br><span class="line">requests:             2157</span><br><span class="line">request duration:     173</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?json</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19281</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:18:50 +0800</span><br><span class="line">start since:          204</span><br><span class="line">requests:             1717</span><br><span class="line">request duration:     139</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19282</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:19:01 +0800</span><br><span class="line">start since:          193</span><br><span class="line">requests:             678</span><br><span class="line">request duration:     737</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  19283</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           27/Oct/2017:19:19:07 +0800</span><br><span class="line">start since:          187</span><br><span class="line">requests:             398</span><br><span class="line">request duration:     320</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  262144</span><br></pre></td></tr></table></figure><h3 id="fastcgi-cache-path-path…"><a href="#fastcgi-cache-path-path…" class="headerlink" title="fastcgi_cache_path path…;"></a>fastcgi_cache_path path…;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br></pre></td></tr></table></figure></p><p>定义<code>fastcgi</code>的缓存；</p><ul><li><code>path</code> 缓存位置为磁盘上的文件系统</li><li><code>max_size=size</code><ul><li>磁盘<code>path</code>路径中用于缓存数据的缓存空间上限</li></ul></li><li><code>levels=levels</code>：缓存目录的层级数量，以及每一级的目录数量</li><li><code>levels=ONE:TWO:THREE</code></li></ul><p>示例：<code>leves=1:2:2</code></p><ul><li><code>keys_zone=name:size</code><ul><li><code>k/v</code>映射的内存空间的名称及大小</li></ul></li><li><code>inactive=time`</code><ul><li>非活动时长</li></ul></li></ul><h3 id="fastcgi-cache-zone-off"><a href="#fastcgi-cache-zone-off" class="headerlink" title="fastcgi_cache zone | off;"></a>fastcgi_cache zone | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache zone | off;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_cache off;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义用于缓存的共享内存区域。相同的区域可以在几个地方使用。参数值可以包含变量（1.7.9）。该<code>off</code>参数禁用从先前配置级别继承的缓存。</p><p>调用指定的缓存空间来缓存数据</p><h3 id="fastcgi-cache-key-string"><a href="#fastcgi-cache-key-string" class="headerlink" title="fastcgi_cache_key string;"></a>fastcgi_cache_key string;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_key string;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义用作缓存项的<code>key</code>的字符串<br>示例：<code>fastcgi_cache_key $request_rui;</code></p><h3 id="fastcgi-cache-methods-GET-HEAD-POST-…"><a href="#fastcgi-cache-methods-GET-HEAD-POST-…" class="headerlink" title="fastcgi_cache_methods GET | HEAD | POST …;"></a>fastcgi_cache_methods GET | HEAD | POST …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_methods GET | HEAD | POST ...;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_cache_methods GET HEAD;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 0.7.59.</span><br></pre></td></tr></table></figure></p><p>为哪些请求方法使用缓存</p><p>如果客户端请求方法在此指令中列出，则响应将被缓存。<code>“ GET”</code>和<code>“ HEAD”</code>方法总是添加到列表中，尽管建议明确指定它们。</p><h3 id="fastcgi-cache-min-uses-number"><a href="#fastcgi-cache-min-uses-number" class="headerlink" title="fastcgi_cache_min_uses number;"></a>fastcgi_cache_min_uses number;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_min_uses number;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_cache_min_uses 1;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>缓存空间中的缓存项在<code>inactive</code>定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项</p><h3 id="fastcgi-keep-conn-on-off"><a href="#fastcgi-keep-conn-on-off" class="headerlink" title="fastcgi_keep_conn on | off;"></a>fastcgi_keep_conn on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_keep_conn on | off;</span><br><span class="line">Default:</span><br><span class="line">fastcgi_keep_conn off;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 1.1.4.</span><br></pre></td></tr></table></figure></p><p>收到后端服务器响应后， <code>fastcgi</code>服务器是否关闭连接，建议启用长连接</p><h3 id="fastcgi-cache-valid-code-…-time"><a href="#fastcgi-cache-valid-code-…-time" class="headerlink" title="fastcgi_cache_valid [code …] time;"></a>fastcgi_cache_valid [code …] time;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:fastcgi_cache_valid [code ...] time;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>不同的响应码各自的缓存时长</p><h3 id="实现fastcgi缓存"><a href="#实现fastcgi缓存" class="headerlink" title="实现fastcgi缓存"></a>实现fastcgi缓存</h3><p>还是使用上面的实验环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir -p  /var/cache/nginx/fcgi_cache        # 创建缓存目录</span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/nginx.conf        # 在nginx主配置文件中添加如下，是在http中</span><br><span class="line">http &#123;</span><br><span class="line">    fastcgi_cache_path /var/cache/nginx/fcgi_cache</span><br><span class="line">    levels=1:1:2 keys_zone=fcgicache:20m</span><br><span class="line">    inactive=120s max_size=1g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass 192.168.8.138:9000;</span><br><span class="line">        fastcgi_index index.php ;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /app/php$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_cache fcgicache ;</span><br><span class="line">        fastcgi_cache_key $request_uri; </span><br><span class="line">        fastcgi_cache_valid 301 1h ;</span><br><span class="line">        fastcgi_cache_valid any 1m ;</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/test.php</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body &#123;background-color: #ffffff; color: #000000;&#125;</span><br><span class="line">body, td, th, h1, h2 &#123;font-family: sans-serif;&#125;</span><br><span class="line">pre &#123;margin: 0px; font-family: monospace;&#125;</span><br><span class="line">a:link &#123;color: #000099; text-decoration: none; background-color: #ffffff;&#125;</span><br><span class="line">a:hover &#123;text-decoration: underline;&#125;</span><br><span class="line">table &#123;border-collapse: collapse;&#125;</span><br><span class="line">.center &#123;text-align: center;&#125;</span><br><span class="line">.center table &#123; margin-left: auto; margin-right: auto; text-align: left;&#125;</span><br><span class="line">.center th &#123; text-align: center !important; &#125;</span><br><span class="line">td, th &#123; border: 1px solid #000000; font-size: 75%; vertical-align: baseline;&#125;</span><br><span class="line">h1 &#123;font-size: 150%;&#125;</span><br><span class="line">h2 &#123;font-size: 125%;&#125;</span><br><span class="line">.p &#123;text-align: left;&#125;</span><br><span class="line">.e &#123;background-color: #ccccff; font-weight: bold; color: #000000;&#125;</span><br><span class="line">.h &#123;background-color: #9999cc; font-weight: bold; color: #000000;&#125;</span><br><span class="line">.v &#123;background-color: #cccccc; color: #000000;&#125;</span><br><span class="line">.vr &#123;background-color: #cccccc; text-align: right; color: #000000;&#125;</span><br><span class="line">img &#123;float: right; border: 0px;&#125;</span><br><span class="line">hr &#123;width: 600px; background-color: #cccccc; border: 0px; height: 1px; color: #000000;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;title&gt;phpinfo()&lt;/title&gt;&lt;meta name=&quot;ROBOTS&quot; content=&quot;NOINDEX,NOFOLLOW,NOARCHIVE&quot; /&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;div class=&quot;center&quot;&gt;</span><br><span class="line">&lt;table border=&quot;0&quot; cellpadding=&quot;3&quot; width=&quot;600&quot;&gt;</span><br><span class="line">&lt;tr class=&quot;h&quot;&gt;&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;http://www.php.net/&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;/test.php?=PHPE9568F34-D428-11d2-A769-00AA001ACF42&quot; alt=&quot;PHP Logo&quot; /&gt;&lt;/a&gt;&lt;h1 class=&quot;p&quot;&gt;PHP Version 5.4.16&lt;/h1&gt;</span><br><span class="line">&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;&lt;br /&gt;</span><br><span class="line">。。。省略</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# cd /var/cache/nginx/fcgi_cache/      ＃进入缓存目录</span><br><span class="line">[root@Nginx-Server fcgi_cache]# ls      # 已经缓存</span><br><span class="line">1  7  b</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server fcgi_cache]# tree        #查看目录结构</span><br><span class="line">.</span><br><span class="line">├── 1</span><br><span class="line">│   └── a</span><br><span class="line">│       └── ed</span><br><span class="line">│           └── 05d649e04370121f2343846df6b2eda1</span><br><span class="line">├── 7</span><br><span class="line">│   └── 5</span><br><span class="line">│       └── 6f</span><br><span class="line">│           └── 1c4d0ba4e0548244739027d15ed56f57</span><br><span class="line">└── b</span><br><span class="line">    └── d</span><br><span class="line">        └── 77</span><br><span class="line">            └── bf6813c2bc0becb369a8d8367b6b77db</span><br><span class="line"></span><br><span class="line">9 directories, 3 files</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server fcgi_cache]# ll      </span><br><span class="line">total 0</span><br><span class="line">drwx------ 3 nginx nginx 15 Oct 27 21:21 1</span><br><span class="line">drwx------ 3 nginx nginx 15 Oct 27 21:21 7</span><br><span class="line">drwx------ 3 nginx nginx 15 Oct 27 21:21 b</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_fastcgi_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_fastcgi_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_headers_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-headers-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-headers-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该<code>ngx_http_headers_module</code>模块允许将<code>“Expires”和“Cache-Control”</code>头字段以及任意字段添加到响应头。</p><p>向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值</p><h3 id="add-header-name-value-always"><a href="#add-header-name-value-always" class="headerlink" title="add_header name value [always];"></a>add_header name value [always];</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:add_header name value [always];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果响应代码等于200,201（1.3.10），204,206,301,302,303,304,307（1.1.16,1.0.13）或308（1.13），则将指定的字段添加到响应头部.0）。该值可以包含变量。</p><p>可能有几个add_header指令。当且仅当add_header 在当前级别上没有定义指令时，这些指令将从上一级继承 。</p><p>如果always指定了参数（1.7.5），则将添加头字段，而不管响应代码如何。</p><p>添加自定义首部</p><h3 id="add-trailer-name-value-always"><a href="#add-trailer-name-value-always" class="headerlink" title="add_trailer name value [always];"></a>add_trailer name value [always];</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:add_trailer name value [always];</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location, if in location</span><br><span class="line">This directive appeared in version 1.13.2.</span><br></pre></td></tr></table></figure></p><p>将响应代码等于200，201，206，301，302，303，307或308的指定字段添加到响应的结尾。该值可以包含变量。</p><p>可能有几个add_trailer指令。当且仅当add_trailer 在当前级别上没有定义指令时，这些指令将从上一级继承 。</p><p>如果always指定了参数，则无论响应代码如何，都将添加指定的字段。</p><p>添加自定义响应信息的尾部</p><h3 id="实现add-header-name"><a href="#实现add-header-name" class="headerlink" title="实现add_header name"></a>实现add_header name</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;</span><br><span class="line">        proxy_pass http://192.168.8.136;</span><br><span class="line">        add_header X-via $server_addr ;</span><br><span class="line">        add_header X-cache $upstream_cache_status;</span><br><span class="line">        add_header X-Accel $server_name ;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_cache proxycache ; </span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl -I  http://192.168.8.140/html/        # 查看访问包头，添加成功</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 09:22:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 503737</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Last-Modified: Fri, 27 Oct 2017 08:52:43 GMT</span><br><span class="line">ETag: &quot;2205a0-7afb9-55c836975649a&quot;</span><br><span class="line">X-via: 192.168.8.140</span><br><span class="line">X-cache: HIT</span><br><span class="line">X-Accel: www.a.com</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="实现add-trailer-name"><a href="#实现add-trailer-name" class="headerlink" title="实现add_trailer name"></a>实现add_trailer name</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;</span><br><span class="line">        proxy_pass http://192.168.8.136;</span><br><span class="line">        add_header X-via $server_addr ;</span><br><span class="line">        add_header X-cache $upstream_cache_status;</span><br><span class="line">        add_header X-Accel $server_name ;</span><br><span class="line">        add_header Via $server_addr ;</span><br><span class="line">        add_header Cache $upstream_cache_status;  </span><br><span class="line">        add_header Accel $server_name ;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_cache proxycache ; </span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line">[root@Nginx-Server ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl -I  http://192.168.8.140/html/        # 查看头部，已经添加</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 09:25:00 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Content-Length: 503737</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Last-Modified: Fri, 27 Oct 2017 08:52:43 GMT</span><br><span class="line">ETag: &quot;2205a0-7afb9-55c836975649a&quot;</span><br><span class="line">X-via: 192.168.8.140</span><br><span class="line">X-cache: MISS</span><br><span class="line">X-Accel: www.a.com</span><br><span class="line">Via: 192.168.8.140</span><br><span class="line">Cache: MISS</span><br><span class="line">Accel: www.a.com</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_headers_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_headers_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_proxy_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-proxy-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-proxy-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>The ngx_http_proxy_module module allows passing requests to another server.</p><p>该<code>ngx_http_proxy_module</code>模块允许将请求传递给另一个服务器。</p><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass" target="_blank" rel="noopener">官网帮助文档：http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass</a></p><a id="more"></a><h3 id="proxy-pass-URL"><a href="#proxy-pass-URL" class="headerlink" title="proxy_pass URL;"></a>proxy_pass URL;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_pass URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:location, if in location, limit_except</span><br></pre></td></tr></table></figure></p><p>设置代理服务器的协议和地址以及位置应映射到的可选<code>URI</code>。作为协议，可以指定<code>“ http”</code>或<code>“ https”</code>。该地址可以指定为域名或<code>IP</code>地址，也可以指定为可选端口：</p><h4 id="实现反向代理服务"><a href="#实现反向代理服务" class="headerlink" title="实现反向代理服务"></a>实现反向代理服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@Apache ~]# ifconfig eth1      # 查看Real Server的IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:216 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:153 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:22726 (22.1 KiB)  TX bytes:23032 (22.4 KiB)</span><br><span class="line">[root@Apache ~]# yum install -y httpd        # 安装httpd服务</span><br><span class="line">[root@Apache ~]# service httpd start    </span><br><span class="line">[root@Apache ~]# echo &quot;Apache server 192.168.8.136&quot; &gt; /var/www/html/index.html </span><br><span class="line">[root@Apache ~]# curl localhost</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location / &#123; </span><br><span class="line">        proxy_pass http://192.168.8.136 ; </span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl www.a.com       # 访问测试，ok</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line">[root@Apache ~]# tail -1  /var/log/httpd/access_log         # 查看APache服务器的日志，apache认为是代理服务器访问的</span><br><span class="line">192.168.8.140 - - [27/Oct/2017:14:19:30 +0800] &quot;GET / HTTP/1.0&quot; 200 28 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure><h4 id="实现访问以-php结尾的文件都代理到192-168-8-136"><a href="#实现访问以-php结尾的文件都代理到192-168-8-136" class="headerlink" title="实现访问以.php结尾的文件都代理到192.168.8.136"></a>实现访问以.php结尾的文件都代理到192.168.8.136</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 我们接着上面的实验来做</span><br><span class="line">[root@Apache ~]# yum install -y php</span><br><span class="line">[root@Apache ~]# service httpd restart</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line">[root@Apache ~]# vim /var/www/html/a.php        # 编写php页面</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>本地访问php测试，可以访问</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-proxy-module-1.jpg" title="测试访问"></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        proxy_pass http://192.168.8.136 ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><p>访问测试，ok</p><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-proxy-module-2.jpg" title="测试访问"></center><h4 id="代理服务器加-和不加-的区别？"><a href="#代理服务器加-和不加-的区别？" class="headerlink" title="代理服务器加/和不加/的区别？"></a>代理服务器加/和不加/的区别？</h4><h5 id="不加"><a href="#不加" class="headerlink" title="不加/"></a>不加/</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@Apache ~]# mkdir /var/www/html/html/          #创建测试文件夹</span><br><span class="line">[root@Apache ~]# echo &quot;This is test file&quot; &gt; /var/www/html/html/index.html       # 创建测试文件</span><br><span class="line">[root@Apache ~]# cat /var/www/html/html/index.html</span><br><span class="line">This is test file</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_pass http://192.168.8.136;        # 先来个不加/的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl www.a.com/html/     # 访问测试，看到的是192.168.8.136/html/index.html的内容</span><br><span class="line">This is test file</span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.136/html/     # 直接访问192.168.8.136/html和上面效果是相同的</span><br><span class="line">This is test file</span><br><span class="line"># 由此我们可以得出：不加/的话，访问的就是代理服务和location中定义的路径的组合。</span><br><span class="line"># 例如：</span><br><span class="line">location /img &#123;</span><br><span class="line">    proxy_pass http://192.168.8.136 ; </span><br><span class="line">&#125;</span><br><span class="line"># 那么，我们访问的应该是那个目录呢？ 当然是http://192.168.8.8.136/img了。</span><br></pre></td></tr></table></figure><h5 id="加"><a href="#加" class="headerlink" title="加/"></a>加/</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_pass http://192.168.8.136/;       # 注意：这次我们加/了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl www.a.com/html/     # 访问测试，看到的是192.168.8.136/index.html的内容</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.136       # 直接访问192.168.8.136和上面效果是相同的</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line"># 由此，我们得出，如果加上/的话，访问的就是加上/后的内容了，和location中定义的路径已经被替换为/了。</span><br><span class="line"># 例如</span><br><span class="line">location /img &#123;</span><br><span class="line">    proxy_pass http://192.168.8.136/; </span><br><span class="line">&#125;</span><br><span class="line"># 上面这个例子，应该访问那个路径呢？ 当然是http://192.168.8.136/了。</span><br><span class="line"></span><br><span class="line">如果location定义其uri时使用了正则表达式的模式，则proxy_pass之后必须不能使用uri; 用户请求时传递的uri将直</span><br><span class="line">接附加代理到的服务的之后server &#123;</span><br><span class="line">    ...</span><br><span class="line">    server_name HOSTNAME;</span><br><span class="line">    location ~|~* /uri/ &#123;</span><br><span class="line">    proxy_pass http://host; 不能加/</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">http://HOSTNAME/uri/ --&gt; http://host/uri/</span><br></pre></td></tr></table></figure><h3 id="proxy-set-header-field-value"><a href="#proxy-set-header-field-value" class="headerlink" title="proxy_set_header field value;"></a>proxy_set_header field value;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_set_header field value;</span><br><span class="line">Default:</span><br><span class="line">proxy_set_header Host $proxy_host;</span><br><span class="line">proxy_set_header Connection close;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设定发往后端主机的请求报文的请求首部的值</p><p>设定发往后端主机的请求报文的请求首部的值</p><ul><li><code>Context: http, server, location</code></li><li><code>proxy_set_header X-Real-IP $remote_addr;</code></li><li><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code><br>标准格式如下：</li><li><code>X-Forwarded-For: client1, proxy1, proxy2</code></li><li><code>$remote_addr</code>是一个变量代表<code>client address</code></li><li><code>X-Forwarded-For</code>也是一个变量代表“X-Forwarded-For”客户机请求头域，$remote_addr附加变量，用逗号分隔。如果客户端请求头中不存在“X-Forwarded-For”字段，则该$proxy_add_x_forwarded_for变量等于该$remote_addr变量。</li></ul><h4 id="实现proxy-set-header-field-value"><a href="#实现proxy-set-header-field-value" class="headerlink" title="实现proxy_set_header field value;"></a>实现proxy_set_header field value;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;     # 添加真实服务器地址</span><br><span class="line">        proxy_pass http://192.168.8.136/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Apache ~]# vim /etc/httpd/conf/httpd.conf         # 修改apache服务的配置文件</span><br><span class="line">LogFormat &quot;%&#123;Real-server&#125;i %h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; Nginx-proxy        # 定义一个新的日志格式，使apache能够识别代理服务器发过来的真实IP</span><br><span class="line">CustomLog logs/access_log Nginx-proxy       # 使用新的服务器IP</span><br><span class="line"></span><br><span class="line">[root@Apache ~]# service httpd restart</span><br><span class="line">Stopping httpd:                                            [  OK  ]</span><br><span class="line">Starting httpd:                                            [  OK  ]</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# ifconfig eth1      # 测试客户端IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3446 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1197 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:316040 (308.6 KiB)  TX bytes:93833 (91.6 KiB)</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# curl 192.168.8.140/html/       # 测试访问代理服务器</span><br><span class="line">Apache server 192.168.8.136</span><br><span class="line"></span><br><span class="line">[root@Apache ~]# tail -1 /var/log/httpd/access_log      # 查看Apache的访问日志，已经将真实服务器的iP添加进来</span><br><span class="line">192.168.8.128 192.168.8.140 - - [27/Oct/2017:15:56:20 +0800] &quot;GET // HTTP/1.0&quot; 200 28 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;</span><br></pre></td></tr></table></figure><h3 id="proxy-cache-use-stale-error"><a href="#proxy-cache-use-stale-error" class="headerlink" title="proxy_cache_use_stale error"></a>proxy_cache_use_stale error</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off ...;</span><br><span class="line">Default:</span><br><span class="line">proxy_cache_use_stale off;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>在被代理的后端服务器出现哪种情况下，可以真接使用过期的缓存响应客户端</p><h3 id="proxy-cache-methods-GET-HEAD-POST-…"><a href="#proxy-cache-methods-GET-HEAD-POST-…" class="headerlink" title="proxy_cache_methods GET | HEAD | POST …;"></a>proxy_cache_methods GET | HEAD | POST …;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_methods GET | HEAD | POST ...;</span><br><span class="line">Default:</span><br><span class="line">proxy_cache_methods GET HEAD;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 0.7.59.</span><br></pre></td></tr></table></figure></p><p>如果客户端请求方法在此指令中列出，则响应将被缓存。<code>“ GET”</code>和<code>“HEAD”</code>方法总是添加到列表中，尽管建议明确指定它们。</p><h3 id="proxy-hide-header-field"><a href="#proxy-hide-header-field" class="headerlink" title="proxy_hide_header field;"></a>proxy_hide_header field;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_hide_header field;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>默认情况下，<code>nginx</code>不会将代理服务器的响应中的头字段<code>“Date”</code>，<code>“Server”</code>，<code>“X-Pad”</code>和<code>“X-Accel -...”</code>传递给客户端。该<code>proxy_hide_header</code>指令设置不会传递的其他字段。如果相反，需要允许字段的传递，则可以使用<code>proxy_pass_header</code>指令。</p><p>用于隐藏后端服务器特定的响应首部</p><h3 id="proxy-connect-timeout-time"><a href="#proxy-connect-timeout-time" class="headerlink" title="proxy_connect_timeout time;"></a>proxy_connect_timeout time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_connect_timeout time;</span><br><span class="line">Default:</span><br><span class="line">proxy_connect_timeout 60s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义与后端服务器建立连接的超时时长，如超时会出现502错误，默认为60s，一般不建议超出75s，</p><h3 id="proxy-send-timeout-time"><a href="#proxy-send-timeout-time" class="headerlink" title="proxy_send_timeout time;"></a>proxy_send_timeout time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_send_timeout time;</span><br><span class="line">Default:</span><br><span class="line">proxy_send_timeout 60s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设置将代理服务器发送请求的超时时间。超时仅在两个连续的写入操作之间设置，而不是传输整个请求。如果代理服务器在此时间内没有收到任何内容，则连接被关闭。</p><p>把请求发送给后端服务器的超时时长；默认为60s</p><h3 id="proxy-read-timeout-time"><a href="#proxy-read-timeout-time" class="headerlink" title="proxy_read_timeout time;"></a>proxy_read_timeout time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_read_timeout time;</span><br><span class="line">Default:</span><br><span class="line">proxy_read_timeout 60s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>定义从代理服务器读取响应的超时。超时仅在两个连续读操作之间设置，而不是传输整个响应。如果代理的服务器在此时间内没有传输任何内容，则连接被关闭。</p><p>等待后端服务器发送响应报文的超时时长， 默认为60s</p><h3 id="proxy-cache-key-string"><a href="#proxy-cache-key-string" class="headerlink" title="proxy_cache_key string;"></a>proxy_cache_key string;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_key string;</span><br><span class="line">Default:</span><br><span class="line">proxy_cache_key $scheme$proxy_host$request_uri;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><ul><li>缓存中用于“键”的内容</li><li>默认值：<code>proxy_cache_key $scheme$proxy_host$request_uri;</code></li></ul><h3 id="proxy-cache-valid-code-…-time"><a href="#proxy-cache-valid-code-…-time" class="headerlink" title="proxy_cache_valid [code …] time;"></a>proxy_cache_valid [code …] time;</h3><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_cache_valid [code ...] time;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><ul><li>定义对特定响应码的响应内容的缓存时长</li><li>定义在http{…}中</li><li>示例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现代理缓存"><a href="#实现代理缓存" class="headerlink" title="实现代理缓存"></a>实现代理缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">[root@Apache ~]# cp /var/log/messages /var/www/html/html/index.html &amp;&amp; chmod a+r /var/www/html/html/index.html       # 准备测试网页</span><br><span class="line">[root@Apache ~]# ll -h /var/www/html/html/index.html</span><br><span class="line">-rw-r--r-- 1 root root 492K Oct 27 16:52 /var/www/html/html/index.html</span><br><span class="line"></span><br><span class="line">[root@CLIENT ~]# ab -c 100 -n 2000 http://192.168.8.140/html/       # 没启用缓存功能测试，平均每秒170个</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.140 (be patient)</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 1200 requests</span><br><span class="line">Completed 1400 requests</span><br><span class="line">Completed 1600 requests</span><br><span class="line">Completed 1800 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Finished 2000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.10.2</span><br><span class="line">Server Hostname:        192.168.8.140</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /html/</span><br><span class="line">Document Length:        503737 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   11.739 seconds</span><br><span class="line">Complete requests:      2000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      1008004000 bytes</span><br><span class="line">HTML transferred:       1007474000 bytes</span><br><span class="line">Requests per second:    170.38 [#/sec] (mean)</span><br><span class="line">Time per request:       586.938 [ms] (mean)</span><br><span class="line">Time per request:       5.869 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          83857.12 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    4  38.9      1    1001</span><br><span class="line">Processing:    48  573 240.2    554    1986</span><br><span class="line">Waiting:        2  280 207.4    306    1076</span><br><span class="line">Total:         54  577 243.8    557    1987</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    557</span><br><span class="line">  66%    605</span><br><span class="line">  75%    641</span><br><span class="line">  80%    670</span><br><span class="line">  90%    775</span><br><span class="line">  95%   1014</span><br><span class="line">  98%   1419</span><br><span class="line">  99%   1521</span><br><span class="line"> 100%   1987 (longest request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# mkdir -p  /var/cache/nginx/proxy_cache       # 创建缓存目录</span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/nginx.conf        # 在http配置定义缓存信</span><br><span class="line">http &#123;</span><br><span class="line">    proxy_cache_path /var/cache/nginx/proxy_cache</span><br><span class="line">    levels=1:1:2 keys_zone=proxycache:20m</span><br><span class="line">    inactive=120s max_size=1g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 调用缓存功能，需要定义在相应的配置段</span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    location /html &#123;</span><br><span class="line">        proxy_set_header Real-server $remote_addr ;</span><br><span class="line">        proxy_pass http://192.168.8.136;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_cache proxycache ;</span><br><span class="line">    proxy_cache_key $request_uri ;</span><br><span class="line">    proxy_cache_valid 200 302 301 1h ;</span><br><span class="line">    proxy_cache_valid any 1m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@CLIENT ~]# ab -c 100 -n 2000 http://192.168.8.140/html/       # 速度已经明显加快，平均每秒294个，已经快了一倍多</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.8.140 (be patient)</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 1200 requests</span><br><span class="line">Completed 1400 requests</span><br><span class="line">Completed 1600 requests</span><br><span class="line">Completed 1800 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Finished 2000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.10.2</span><br><span class="line">Server Hostname:        192.168.8.140</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /html/</span><br><span class="line">Document Length:        503737 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   6.794 seconds</span><br><span class="line">Complete requests:      2000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      1008004000 bytes</span><br><span class="line">HTML transferred:       1007474000 bytes</span><br><span class="line">Requests per second:    294.36 [#/sec] (mean)</span><br><span class="line">Time per request:       339.718 [ms] (mean)</span><br><span class="line">Time per request:       3.397 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          144881.64 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   11   5.1     10      50</span><br><span class="line">Processing:   229  328  32.3    316     440</span><br><span class="line">Waiting:        1   13   8.6     11      52</span><br><span class="line">Total:        241  339  32.7    329     454</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    329</span><br><span class="line">  66%    346</span><br><span class="line">  75%    354</span><br><span class="line">  80%    367</span><br><span class="line">  90%    378</span><br><span class="line">  95%    408</span><br><span class="line">  98%    432</span><br><span class="line">  99%    433</span><br><span class="line"> 100%    454 (longest request)</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# cd /var/cache/nginx/proxy_cache/     # 查看缓存目录</span><br><span class="line">[root@Nginx-Server proxy_cache]# tree       # 可以看到目录其实就是去文件的后1，1，2</span><br><span class="line">.</span><br><span class="line">└── f</span><br><span class="line">    └── f</span><br><span class="line">        └── ed</span><br><span class="line">            └── 2232907628d080965cf7017637f5edff</span><br><span class="line"></span><br><span class="line">3 directories, 1 file</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_proxy_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_proxy_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_rewrite_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-rewrite-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-rewrite-module/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>官网的介绍：</strong></p><p><code>The ngx_http_rewrite_module module is used to change request URI using PCRE regular expressions, return redirects, and conditionally select configurations.</code></p><p>将用户请求的<code>URI</code>基于<code>PCRE regex</code>所描述的模式进行检查，而后完成重定向替换</p><a id="more"></a><h3 id="rewrite-regex-replacement-flag"><a href="#rewrite-regex-replacement-flag" class="headerlink" title="rewrite regex replacement [flag];"></a>rewrite regex replacement [flag];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:rewrite regex replacement [flag];</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure></p><ul><li>如果指定的正则表达式与请求<code>URI</code>匹配，则<code>URI</code>将按照<code>replacement</code>字符串中的指定进行更改。该<code>rewrite</code>指令在其在配置文件中出现的顺序顺序地执行。可以使用标志终止对伪指令的进一步处理。如果替换字符串以<code>“ http://”，“ https://”</code>或<code>“ $scheme”</code>开头，则处理停止，并将重定向返回给客户端。</li><li>将用户请求的<code>URI</code>基于<code>regex</code>所描述的模式进行检查，匹配到时将其替换为<code>replacement</code>指定的新的<code>URI</code></li><li>注意：如果在同一级配置块中存在多个<code>rewrite</code>规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查</li><li>隐含有循环机制,但不超过10次；如果超过，提示500响应码， <code>[flag]</code>所表示的标志位用于控制此循环机制</li><li>如果<code>replacement</code>是以<code>http://</code>或<code>https://</code>开头，则替换结果会直接以重向返回给客户端</li><li>301：永久重定向</li></ul><h4 id="flag"><a href="#flag" class="headerlink" title="[flag]"></a>[flag]</h4><ul><li><code>last</code>：重写完成后停止对当前<code>URI</code>在当前<code>location</code>中后续的其它重写操作，而后对新的<code>URI</code>启动新一轮重写检查；提前重启新一轮循环</li><li><code>break</code>：重写完成后停止对当前<code>URI</code>在当前<code>location</code>中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在<code>location</code>中使用</li><li><code>redirect</code>：临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新<code>URI</code>给客户端，由客户端重新发起请求；不能以<code>http://</code>或<code>https://</code>开头，使用相对路径，状态码： 302</li><li><code>permanent</code>:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求，状态码：301</li></ul><h3 id="return-code-text"><a href="#return-code-text" class="headerlink" title="return code [text];"></a>return code [text];</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:return code [text];</span><br><span class="line">return code URL;</span><br><span class="line">return URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure></p><p>停止处理，并返回给客户端指定的响应码</p><h3 id="rewrite-log-on-off"><a href="#rewrite-log-on-off" class="headerlink" title="rewrite_log on | off;"></a>rewrite_log on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:rewrite_log on | off;</span><br><span class="line">Default:</span><br><span class="line">rewrite_log off;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure></p><p>是否开启重写日志, 发送至<code>error_log</code>（<code>notice level</code>）</p><h3 id="set-variable-value"><a href="#set-variable-value" class="headerlink" title="set $variable value;"></a>set $variable value;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:set $variable value;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure></p><p>用户自定义变量（注意：变量定义和调用都要以<code>$</code>开头）</p><h3 id="if-condition-…"><a href="#if-condition-…" class="headerlink" title="if (condition) { … }"></a>if (condition) { … }</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:if (condition) &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure></p><ul><li>指定的<code>condition</code>被评估。如果为<code>true</code>，则在该大括号内指定的此模块指令将被执行，并且请求被分配给该<code>if</code>指令内的配置 。<code>if</code>指令内的配置继承自以前的配置级别。</li><li>引入新的上下文,条件满足时，执行配置块中的配置指令</li></ul><h4 id="比较操作符："><a href="#比较操作符：" class="headerlink" title="比较操作符："></a>比较操作符：</h4><ul><li><code>==</code>相同</li><li><code>!=</code> 不同</li><li><code>~</code>：模式匹配，区分字符大小写</li><li><code>~*</code>：模式匹配，不区分字符大小写</li><li><code>!~</code>：模式不匹配，区分字符大小写</li><li><code>!~*</code>：模式不匹配，不区分字符大小写</li></ul><h4 id="文件及目录存在性判断："><a href="#文件及目录存在性判断：" class="headerlink" title="文件及目录存在性判断："></a>文件及目录存在性判断：</h4><ul><li><code>-e</code>, <code>!-e</code> 存在（包括文件，目录，软链接）</li><li><code>-f</code>, <code>!-f</code> 文件</li><li><code>-d</code>, <code>!-d</code> 目录</li><li><code>-x</code>, <code>!-x</code> 执行</li></ul><h3 id="实现last跳转：bj目录下面的任何文件都跳转到beijing"><a href="#实现last跳转：bj目录下面的任何文件都跳转到beijing" class="headerlink" title="实现last跳转：bj目录下面的任何文件都跳转到beijing"></a>实现last跳转：bj目录下面的任何文件都跳转到beijing</h3><p>服务器内部跳转，在浏览器是看不到任何变化的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir /app/website1/beijing         #创建跳转目录</span><br><span class="line">[root@Nginx-Server ~]# cat /app/website1/beijing/index.html </span><br><span class="line">bi --&gt; beijing</span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf         #修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ;  </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123;</span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 last ;   </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/bj/index.html     # 注意已经跳转，因为我们是没有bj这个目录的</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-rewrite-module-1.gif" title="测试访问"></center><h3 id="实现break跳转"><a href="#实现break跳转" class="headerlink" title="实现break跳转"></a>实现break跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 break ;          # break跳转</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/bj/           # 已经跳转</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><h3 id="实现redirect-302临时重定向"><a href="#实现redirect-302临时重定向" class="headerlink" title="实现redirect 302临时重定向"></a>实现redirect 302临时重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 redirect ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl  -I  192.168.8.140/bj/      # 查看响应头部信息，已经是302重定向</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 00:51:30 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 161</span><br><span class="line">Location: http://192.168.8.140/beijing/</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl   192.168.8.140/bj/     # 直接访问bj目录会提示302</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;302 Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@Nginx-Server ~]# curl -L   192.168.8.140/bj/      # 需要加上-L来跟踪重定向</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-rewrite-module-2.gif" title="测试访问"></center><h3 id="实现permanent-301永久重定向"><a href="#实现permanent-301永久重定向" class="headerlink" title="实现permanent 301永久重定向"></a>实现permanent 301永久重定向</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -I 192.168.8.140/bj/</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 01:01:23 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 185</span><br><span class="line">Location: http://192.168.8.140/beijing/</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -L 192.168.8.140/bj/</span><br><span class="line">bi --&gt; beijing</span><br></pre></td></tr></table></figure><h3 id="return实现禁止访问某个资源，并返回状态码"><a href="#return实现禁止访问某个资源，并返回状态码" class="headerlink" title="return实现禁止访问某个资源，并返回状态码"></a>return实现禁止访问某个资源，并返回状态码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    location /admin &#123;           # 定义当访问/admin目录时，返回信息&quot;access denied&quot;，且状态码为403</span><br><span class="line">        return 403 &quot;access denied&quot; ; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl 192.168.8.140/admin     # 已经看到定义的拒绝信息</span><br><span class="line">access denied[root@Nginx-Server ~]# </span><br><span class="line">[root@Nginx-Server ~]# curl -I  192.168.8.140/admin     # 状态码为403</span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 01:16:22 GMT</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">Content-Length: 13</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h3 id="return实现跳转到新的URL"><a href="#return实现跳转到新的URL" class="headerlink" title="return实现跳转到新的URL"></a>return实现跳转到新的URL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    location /admin &#123;</span><br><span class="line">        return 403 &quot;access denied&quot; ;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /return &#123;          # 当访问/return时，就跳转到http://www.ihaiyun.cc/</span><br><span class="line">        return http://www.ihaiyun.cc/ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -I 192.168.8.140/return     # 已经可以跳转</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Fri, 27 Oct 2017 01:22:09 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 161</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http://www.ihaiyun.cc/</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-rewrite-module-3.gif" title="测试访问"></center><h3 id="开启重写日志"><a href="#开启重写日志" class="headerlink" title="开启重写日志"></a>开启重写日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl  default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    location / &#123; </span><br><span class="line">    rewrite ^/bj/(.*)$ /beijing/$1 permanent ;</span><br><span class="line">    </span><br><span class="line">    &#125;   </span><br><span class="line">    location /admin &#123;</span><br><span class="line">        return 403 &quot;access denied&quot; ;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /return &#123;</span><br><span class="line">        return http://www.ihaiyun.cc/ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rewrite_log on ;            # 开启重写日志</span><br><span class="line">    error_log /var/log/nginx/return.log ;       # 定义error_log存放位置，因为rewrite_log默认发送到error_log中</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">    </span><br><span class="line">[root@CLIENT ~]# curl -L 192.168.8.140/bj/      # 访问测试</span><br><span class="line">bi --&gt; beijing</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# tail /var/log/nginx/return.log       # 查看日志</span><br><span class="line">2017/10/27 09:38:11 [error] 2536#0: *4 open() &quot;/app/website1/bj&quot; failed (2: No such file or directory), client: 192.168.8.128, server: www.a.com, request: &quot;GET /bj HTTP/1.1&quot;, host: &quot;192.168.8.140&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_rewrite_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_rewrite_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_referer_module</title>
      <link href="/2017/10/27/Nginx-ngx-http-referer-module/"/>
      <url>/2017/10/27/Nginx-ngx-http-referer-module/</url>
      <content type="html"><![CDATA[<h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><p>The ngx_http_referer_module module is used to block access to a site for requests with invalid values in the “Referer” header field. It should be kept in mind that fabricating a request with an appropriate “Referer” field value is quite easy, and so the intended purpose of this module is not to block such requests thoroughly but to block the mass flow of requests sent by regular browsers. It should also be taken into consideration that regular browsers may not send the “Referer” field even for valid requests.</p><p>该<code>ngx_http_referer_module</code>模块用于在<code>“Referer”</code>标题字段中阻止对具有无效值的请求的站点访问。应该记住，使用适当的<code>“Referer”</code>字段值制造请求是非常容易的，因此本模块的预期目的不是彻底阻止这些请求，而是阻止常规浏览器发送的请求的大量流量。还应该考虑到，即使有效的请求，常规浏览器也可能不会发送<code>“Referer”</code>字段。</p><h3 id="valid-referers-none-blocked-server-names-string-…"><a href="#valid-referers-none-blocked-server-names-string-…" class="headerlink" title="valid_referers none | blocked | server_names | string …;"></a>valid_referers none | blocked | server_names | string …;</h3><a id="more"></a><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:valid_referers none | blocked | server_names | string ...;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure></p><p>定义<code>referer</code>首部的合法可用值，不能匹配的将是非法值</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>none</code>：请求报文首部没有<code>referer</code>首部</li><li><code>blocked</code>：请求报文有<code>referer</code>首部，但无有效值</li><li><code>server_names</code>：参数，其可以有值作为主机名或主机名模式</li><li><code>arbitrary_string</code>：任意字符串，但可使用<code>*</code>作通配符</li><li><code>regular expression</code>：被指定的正则表达式模式匹配到的字符串,要使用<code>~</code>开头，例如：<code>~.*\.magedu\.com</code></li></ul><h3 id="理解什么是referer？"><a href="#理解什么是referer？" class="headerlink" title="理解什么是referer？"></a>理解什么是referer？</h3><p><code>HTTP Referer</code>是<code>header</code>的一部分，当浏览器向<code>web</code>服务器发送请求的时候，一般会带上<code>Referer</code>，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p><h3 id="模拟盗链现象"><a href="#模拟盗链现象" class="headerlink" title="模拟盗链现象"></a>模拟盗链现象</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 定义两台虚拟主机，wwww.a.com（默认）和www.b.com；分别定义了access_log和error_log。</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 创建配置文件，用来定义虚拟主机   </span><br><span class="line"></span><br><span class="line">server &#123;            # 第一台虚拟主机</span><br><span class="line">    listen   default_server ;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ;</span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ;</span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;            # 第二台虚拟主机</span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.b.com ;</span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    error_log /var/log/nginx/b.com.error.log  ; </span><br><span class="line">    access_log /var/log/nginx/b.com.access.log main ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="准备访问资源"><a href="#准备访问资源" class="headerlink" title="准备访问资源"></a>准备访问资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir -p  /app/website&#123;1,2&#125;</span><br><span class="line">[root@Nginx-Server app]# cd /app/</span><br><span class="line">[root@Nginx-Server app]# echo &quot;website1&quot; &gt; /app/website1/index.html </span><br><span class="line">[root@Nginx-Server app]# echo &quot;website2&quot; &gt; /app/website2/index.html </span><br><span class="line">[root@Nginx-Server app]# find /  -name &quot;*.jpg&quot;      # find几个图片</span><br><span class="line">/usr/share/backgrounds/morning.jpg</span><br><span class="line">/usr/share/backgrounds/night.jpg</span><br><span class="line">/usr/share/backgrounds/day.jpg</span><br><span class="line">/usr/share/backgrounds/default.jpg</span><br><span class="line">/usr/share/kde4/apps/ksplash/Themes/CentOS7/2560x1600/background.jpg</span><br><span class="line">/usr/share/wallpapers/CentOS7/contents/images/2560x1600.jpg</span><br><span class="line">[root@Nginx-Server app]# cp /usr/share/wallpapers/CentOS7/contents/images/2560x1600.jpg /app/website1/aa.jpg        # cp图片</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server app]# cd website2/</span><br><span class="line">[root@Nginx-Server website2]# vim dao.html      #编写盗链html文件，图片是指向www.a.com的</span><br><span class="line">&lt;img src=http://www.a.com/a.jpg&gt;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server app]# tree       # 目录结构，注意b站点中是没有图片文件</span><br><span class="line">.</span><br><span class="line">├── website1</span><br><span class="line">│   ├── aa.jpg</span><br><span class="line">│   ├── a.jpg</span><br><span class="line">│   └── index.html</span><br><span class="line">└── website2</span><br><span class="line">    ├── dao.html</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">2 directories, 5 files</span><br></pre></td></tr></table></figure><h4 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# nginx -t         # 检查配置文件，ok</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop        # 停止nginx服务</span><br><span class="line">[root@Nginx-Server ~]# nginx        # 启动nginx服务</span><br></pre></td></tr></table></figure><ol><li>测试<a href="http://www.a.com/a.jpg" target="_blank" rel="noopener">www.a.com/a.jpg</a></li><li>访问<a href="http://www.b.com/dao.html" target="_blank" rel="noopener">www.b.com/dao.html</a></li><li>查看图片来源</li></ol><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-referer-module-1.gif" title="测试访问"></center><h4 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# tail -1  /var/log/nginx/a.com.access.log         # 查看a的日志，从日志可以看出referer是http://www.b.com/dao.html，这肯定是有问题的。</span><br><span class="line">192.168.8.100 - - [27/Oct/2017:11:07:48 +0800] &quot;GET /a.jpg HTTP/1.1&quot; 304 0 &quot;http://www.b.com/dao.html&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="实现防盗链"><a href="#实现防盗链" class="headerlink" title="实现防盗链"></a>实现防盗链</h3><p>上面的实验我们已经实现了盗链，现在我们来阻止盗链，呵呵~~~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen   default_server ; </span><br><span class="line">    listen 80  ;</span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    error_log /var/log/nginx/a.com.error.log ; </span><br><span class="line">    access_log /var/log/nginx/a.com.access.log main ;</span><br><span class="line">    </span><br><span class="line">    valid_referers none blocked server_names</span><br><span class="line">               *.a.com a\.com.* www\.a\.com.*</span><br><span class="line">               ~\.google\.</span><br><span class="line">               ~\.baidu\.;</span><br><span class="line"></span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 403 &quot;禁止盗链！！！&quot; ;</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    location / &#123; </span><br><span class="line">         </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80  ;</span><br><span class="line">    listen 81 ;</span><br><span class="line">    server_name www.b.com ; </span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    error_log /var/log/nginx/b.com.error.log  ;   </span><br><span class="line">    access_log /var/log/nginx/b.com.access.log main ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx</span><br></pre></td></tr></table></figure><ol><li>在b站点已经无法查看图片</li><li>在a站点依旧可以查看</li></ol><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-referer-module-2.gif" title="测试访问"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://baike.baidu.com/item/HTTP_REFERER/5358396?fr=aladdin" target="_blank" rel="noopener">百度百科：HTTP_REFERER</a></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_referer_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_referer_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_ssl_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-ssl-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-ssl-module/</url>
      <content type="html"><![CDATA[<h3 id="Syntax-ssl-on-off"><a href="#Syntax-ssl-on-off" class="headerlink" title="Syntax:    ssl on | off;"></a>Syntax:    ssl on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl on | off;</span><br><span class="line">Default:</span><br><span class="line">ssl off;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>为指定虚拟机启用HTTPS protocol， 建议用listen指令代替</p><a id="more"></a><h3 id="ssl-certificate-file"><a href="#ssl-certificate-file" class="headerlink" title="ssl_certificate file;"></a>ssl_certificate file;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_certificate file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>当前虚拟主机使用PEM格式的证书文件</p><h3 id="ssl-certificate-key-file"><a href="#ssl-certificate-key-file" class="headerlink" title="ssl_certificate_key file;"></a>ssl_certificate_key file;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_certificate_key file;</span><br><span class="line">Default:—</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>当前虚拟主机上与其证书匹配的私钥文件</p><h3 id="ssl-protocols-SSLv2-…"><a href="#ssl-protocols-SSLv2-…" class="headerlink" title="ssl_protocols [SSLv2] …;"></a>ssl_protocols [SSLv2] …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];</span><br><span class="line">Default:</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>支持<code>ssl</code>协议版本，默认为后三个</p><h3 id="ssl-session-cache-off-none-…"><a href="#ssl-session-cache-off-none-…" class="headerlink" title="ssl_session_cache off | none …;"></a>ssl_session_cache off | none …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_session_cache off | none | [builtin[:size]] [shared:name:size];</span><br><span class="line">Default:</span><br><span class="line">ssl_session_cache none;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>设置存储会话参数的高速缓存的类型和大小。缓存可以是以下类型之一：</p><ul><li><code>off</code><ul><li>严格禁止使用会话缓存：<code>nginx</code>明确告诉客户端会话可能不被重用。</li></ul></li><li><code>none</code><ul><li>会话缓存的使用被轻轻地禁止：<code>nginx</code>告诉客户端会话可能被重用，但实际上并没有将会话参数存储在缓存中。</li></ul></li><li><code>builtin</code><ul><li>一个内置<code>OpenSSL</code>的缓存; 仅由一个工作进程使用。缓存大小在会话中指定。如果没有给出大小，则等于<code>20480</code>次会话。使用内置缓存可能会导致内存碎片。</li></ul></li><li><code>shared</code><ul><li>在所有工作进程之间共享缓存。缓存大小以字节为单位指定; 一兆字节可以存储约4000个会话。每个共享缓存应具有任意名称。具有相同名称的缓存可用于多个虚拟服务器。</li></ul></li><li>两种缓存类型可以同时使用，例如：<ul><li><code>ssl_session_cache builtin:1000 shared:SSL:10m;</code></li></ul></li><li>但只使用共享缓存而不使用内置缓存应该更有效率。<ul><li><code>builtin[:size]</code>：使用<code>OpenSSL</code>内建缓存，为每worker进程私有</li><li><code>[shared:name:size]</code>：在各<code>worker</code>之间使用一个共享的缓存73</li></ul></li></ul><h3 id="ssl-session-timeout-time"><a href="#ssl-session-timeout-time" class="headerlink" title="ssl_session_timeout time;"></a>ssl_session_timeout time;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:ssl_session_timeout time;</span><br><span class="line">Default:</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">Context:http, server</span><br></pre></td></tr></table></figure></p><p>客户端连接可以复用<code>ssl session cache</code>中缓存的<code>ssl</code>参数的有效时长，默认<code>5m</code></p><h3 id="实现SSL"><a href="#实现SSL" class="headerlink" title="实现SSL"></a>实现SSL</h3><h4 id="1-创建证书"><a href="#1-创建证书" class="headerlink" title="1. 创建证书"></a>1. 创建证书</h4><p><a href="http://blog.csdn.net/hai__yun/article/details/77921134" target="_blank" rel="noopener">关于创建证书可以查看我的另外一篇博客：http://blog.csdn.net/hai__yun/article/details/77921134</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cd /etc/pki/tls/certs/</span><br><span class="line">[root@Nginx-Server certs]# make nginx.crt</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl genrsa -aes128 2048 &gt; nginx.key</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...........................+++</span><br><span class="line">....+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase:</span><br><span class="line">Verifying - Enter pass phrase:</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl req -utf8 -new -key nginx.key -x509 -days 365 -out nginx.crt -set_serial 0</span><br><span class="line">Enter pass phrase for nginx.key:</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN  </span><br><span class="line">State or Province Name (full name) []:BJ</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:haiyun</span><br><span class="line">Organizational Unit Name (eg, section) []:opt</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.a.com</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure><h4 id="2-解密私钥"><a href="#2-解密私钥" class="headerlink" title="2. 解密私钥"></a>2. 解密私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# ls</span><br><span class="line">ca-bundle.crt        make-dummy-cert  nginx.crt  renew-dummy-cert</span><br><span class="line">ca-bundle.trust.crt  Makefile         nginx.key</span><br><span class="line">[root@Nginx-Server certs]# openssl rsa -in nginx.key -out nginx.key </span><br><span class="line">Enter pass phrase for nginx.key:</span><br><span class="line">writing RSA key</span><br><span class="line">[root@Nginx-Server certs]# ls</span><br><span class="line">ca-bundle.crt        make-dummy-cert  nginx.crt  renew-dummy-cert</span><br><span class="line">ca-bundle.trust.crt  Makefile         nginx.key</span><br></pre></td></tr></table></figure><h4 id="3-创建证书目录和拷贝证书"><a href="#3-创建证书目录和拷贝证书" class="headerlink" title="3. 创建证书目录和拷贝证书"></a>3. 创建证书目录和拷贝证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# mkdir /etc/nginx/ssl         # 创建存放证书目录</span><br><span class="line">[root@Nginx-Server certs]# cp nginx.* /etc/nginx/ssl/       </span><br><span class="line">[root@Nginx-Server certs]# ls /etc/nginx/ssl/</span><br><span class="line">nginx.crt  nginx.key</span><br></pre></td></tr></table></figure><h4 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl  default_server ; </span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    gzip on; </span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_min_length 64; </span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_types text/xml text/css application/javascript ;</span><br><span class="line">        </span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动服务，测试"><a href="#启动服务，测试" class="headerlink" title="启动服务，测试"></a>启动服务，测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nginx: configuration file /etc/nginx/nginx.conf test failed</span><br><span class="line">[root@Nginx-Server ~]# nginx -t </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@Nginx-Server ~]# ss -tnul             # 查看端口是否打开</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0        127.0.0.1:323                          *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:50190                        *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:68                           *:*                  </span><br><span class="line">udp   UNCONN     0      0              ::1:323                         :::*                  </span><br><span class="line">udp   UNCONN     0      0               :::31402                       :::*                  </span><br><span class="line">tcp   LISTEN     0      128              *:80                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:22                           *:*                  </span><br><span class="line">tcp   LISTEN     0      100      127.0.0.1:25                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:443                          *:*                  </span><br><span class="line">tcp   LISTEN     0      128             :::80                          :::*                  </span><br><span class="line">tcp   LISTEN     0      128             :::22                          :::*                  </span><br><span class="line">tcp   LISTEN     0      100            ::1:25                          :::*</span><br></pre></td></tr></table></figure><center><img src="https://houhaiyun.github.io/img/images/Nginx-ngx-http-ssl-module-1.gif" title="测试访问"></center><h3 id="实现多虚拟主机支持https"><a href="#实现多虚拟主机支持https" class="headerlink" title="实现多虚拟主机支持https"></a>实现多虚拟主机支持https</h3><h4 id="1-创建证书-1"><a href="#1-创建证书-1" class="headerlink" title="1. 创建证书"></a>1. 创建证书</h4><p>上面实验已经创建一个虚拟主机了，所以我们就直接用了。这次再创建一个就OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cd /etc/pki/tls/certs/</span><br><span class="line">[root@Nginx-Server certs]# make nginx2.crt</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl genrsa -aes128 2048 &gt; nginx2.key</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.....................+++</span><br><span class="line">........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase:</span><br><span class="line">Verifying - Enter pass phrase:</span><br><span class="line">umask 77 ; \</span><br><span class="line">/usr/bin/openssl req -utf8 -new -key nginx2.key -x509 -days 365 -out nginx2.crt -set_serial 0</span><br><span class="line">Enter pass phrase for nginx2.key:</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BJ</span><br><span class="line">Locality Name (eg, city) [Default City]:haidian</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:haiyun</span><br><span class="line">Organizational Unit Name (eg, section) []:cto</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:www.b.com</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure></p><h4 id="2-解密私钥-1"><a href="#2-解密私钥-1" class="headerlink" title="2. 解密私钥"></a>2. 解密私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# openssl rsa -in nginx2.key -out nginx2.key </span><br><span class="line">Enter pass phrase for nginx2.key:</span><br><span class="line">writing RSA key</span><br><span class="line">[root@Nginx-Server certs]# ls</span><br><span class="line">ca-bundle.crt        make-dummy-cert  nginx2.crt  nginx.crt  renew-dummy-cert</span><br><span class="line">ca-bundle.trust.crt  Makefile         nginx2.key  nginx.key</span><br></pre></td></tr></table></figure><h4 id="3-拷贝证书"><a href="#3-拷贝证书" class="headerlink" title="3. 拷贝证书"></a>3. 拷贝证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server certs]# cp nginx2.* /etc/nginx/ssl/</span><br><span class="line">[root@Nginx-Server certs]# ls /etc/nginx/ssl/</span><br><span class="line">nginx2.crt  nginx2.key  nginx.crt  nginx.key</span><br></pre></td></tr></table></figure><h4 id="4-创建访问目录"><a href="#4-创建访问目录" class="headerlink" title="4. 创建访问目录"></a>4. 创建访问目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cat /app/website2/index.html         # 注意此文件是需要创建</span><br><span class="line">Nginx-Server --&gt; website2</span><br></pre></td></tr></table></figure><h4 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5. 修改配置文件"></a>5. 修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl  default_server ; </span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl  ;</span><br><span class="line">    server_name www.b.com ;</span><br><span class="line">    root /app/website2 ;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx2.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx2.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-配置hosts文件"><a href="#6-配置hosts文件" class="headerlink" title="6. 配置hosts文件"></a>6. 配置hosts文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.140 www.a.com www.b.com</span><br></pre></td></tr></table></figure><h4 id="7-启动服务，测试"><a href="#7-启动服务，测试" class="headerlink" title="7. 启动服务，测试"></a>7. 启动服务，测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@Nginx-Server ~]# ss -tnul             # 端口已监听</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0        127.0.0.1:323                          *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:50190                        *:*                  </span><br><span class="line">udp   UNCONN     0      0                *:68                           *:*                  </span><br><span class="line">udp   UNCONN     0      0              ::1:323                         :::*                  </span><br><span class="line">udp   UNCONN     0      0               :::31402                       :::*                  </span><br><span class="line">tcp   LISTEN     0      128              *:80                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:22                           *:*                  </span><br><span class="line">tcp   LISTEN     0      100      127.0.0.1:25                           *:*                  </span><br><span class="line">tcp   LISTEN     0      128              *:443                          *:*                  </span><br><span class="line">tcp   LISTEN     0      128             :::80                          :::*                  </span><br><span class="line">tcp   LISTEN     0      128             :::22                          :::*                  </span><br><span class="line">tcp   LISTEN     0      100            ::1:25                          :::*      </span><br><span class="line">[root@Nginx-Server ~]# curl -k https://www.a.com/       # 可以访问，ok</span><br><span class="line">Nginx-Server --&gt; website1   </span><br><span class="line">[root@Nginx-Server ~]# curl -k https://www.b.com/       # 可以访问，ok</span><br><span class="line">Nginx-Server --&gt; website2</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_ssl_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_ssl_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_gzip_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-gzip-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-gzip-module/</url>
      <content type="html"><![CDATA[<h3 id="gzip-on-off"><a href="#gzip-on-off" class="headerlink" title="gzip on | off;"></a>gzip on | off;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip on | off;</span><br><span class="line">Default:</span><br><span class="line">gzip off;</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure></p><p><a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip" target="_blank" rel="noopener">帮助文档：http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip</a></p><a id="more"></a><ul><li><code>nginx</code>对于代理服务器请求的响应报文，在何种条件下启用压缩功能</li></ul><ul><li><code>off</code>：对被代理的请求不启用压缩</li></ul><ul><li><code>expired,no-cache</code>, <code>no-store</code>， <code>private</code>：对代理服务器请求的响应报文首部<code>Cache-Control</code>值任何一个，启用压缩功能</li></ul><h3 id="gzip-comp-level-level"><a href="#gzip-comp-level-level" class="headerlink" title="gzip_comp_level level;"></a>gzip_comp_level level;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip_comp_level level;</span><br><span class="line">Default:</span><br><span class="line">gzip_comp_level 1;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>指定压缩比，范围是1-9</p><h3 id="gzip-min-length-length"><a href="#gzip-min-length-length" class="headerlink" title="gzip_min_length length;"></a>gzip_min_length length;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip_min_length length;</span><br><span class="line">Default:</span><br><span class="line">gzip_min_length 20;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>指定小于多少字节就取消压缩，因为文件特别小的话，压缩完成后，也许比原文件大，呵呵。</p><h3 id="gzip-proxied-off-expired-…"><a href="#gzip-proxied-off-expired-…" class="headerlink" title="gzip_proxied off | expired …;"></a>gzip_proxied off | expired …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">句法：gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...;</span><br><span class="line">默认：</span><br><span class="line">gzip_proxied关闭</span><br><span class="line">语境：http，server，location</span><br></pre></td></tr></table></figure></p><p>根据请求和响应，启用或禁用代理请求的响应。请求被代理的事实由“Via”请求头字段的存在确定。该指令接受多个参数：</p><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ul><li><code>off</code><ul><li>禁用所有代理请求的压缩，忽略其他参数;</li></ul></li><li><code>expired</code><ul><li>如果响应头包含具有禁用缓存的值的<code>“Expires”</code>字段，则启用压缩;</li></ul></li><li><code>no-cache</code> <ul><li>如果响应头包含<code>“Cache-Control”</code>字段和<code>“ no-cache”</code>参数，则启用压缩。</li></ul></li><li><code>no-store</code><ul><li>如果响应头包含<code>“Cache-Control”</code>字段和<code>“ no-store”</code>参数，则启用压缩。</li></ul></li><li><code>private</code><ul><li>如果响应头包含<code>“Cache-Control”</code>字段和<code>“ private”</code>参数，则启用压缩。</li></ul></li><li><code>no_last_modified</code><ul><li>如果响应头不包含<code>“Last-Modified”</code>字段，则启用压缩;</li></ul></li><li><code>no_etag</code><ul><li>如果响应头不包含<code>“ETag”</code>字段，则启用压缩;</li></ul></li><li><code>auth</code><ul><li>如果请求头包含<code>“auth”</code>字段，则启用压缩;</li></ul></li><li><code>any</code><ul><li>为所有代理的请求启用压缩。</li></ul></li></ul><h3 id="gzip-types-mime-type-…"><a href="#gzip-types-mime-type-…" class="headerlink" title="gzip_types mime-type …;"></a>gzip_types mime-type …;</h3><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:gzip_types mime-type ...;</span><br><span class="line">Default:</span><br><span class="line">gzip_types text/html;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>Enables gzipping of responses for the specified MIME types in addition to “text/html”. The special value “*” matches any MIME type (0.8.29). Responses with the “text/html” type are always compressed.</p><h4 id="查看Nginx的MIME类型"><a href="#查看Nginx的MIME类型" class="headerlink" title="查看Nginx的MIME类型"></a>查看Nginx的MIME类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cat /etc/nginx/mime.types</span><br><span class="line"></span><br><span class="line">types &#123;</span><br><span class="line">    text/html                             html htm shtml;</span><br><span class="line">    text/css                              css;</span><br><span class="line">    text/xml                              xml;</span><br><span class="line">    image/gif                             gif;</span><br><span class="line">    image/jpeg                            jpeg jpg;</span><br><span class="line">    application/javascript                js;</span><br><span class="line">    application/atom+xml                  atom;</span><br><span class="line">    application/rss+xml                   rss;</span><br><span class="line"></span><br><span class="line">    text/mathml                           mml;</span><br><span class="line">    text/plain                            txt;</span><br><span class="line">    text/vnd.sun.j2me.app-descriptor      jad;</span><br><span class="line">    text/vnd.wap.wml                      wml;</span><br><span class="line">    text/x-component                      htc;</span><br><span class="line"></span><br><span class="line">    image/png                             png;</span><br><span class="line">    image/tiff                            tif tiff;</span><br><span class="line">    image/vnd.wap.wbmp                    wbmp;</span><br><span class="line">    image/x-icon                          ico;</span><br><span class="line">    image/x-jng                           jng;</span><br><span class="line">    image/x-ms-bmp                        bmp;</span><br><span class="line">    image/svg+xml                         svg svgz;</span><br><span class="line">    image/webp                            webp;</span><br><span class="line"></span><br><span class="line">    application/font-woff                 woff;</span><br><span class="line">    application/java-archive              jar war ear;</span><br><span class="line">    application/json                      json;</span><br><span class="line">    application/mac-binhex40              hqx;</span><br><span class="line">    application/msword                    doc;</span><br><span class="line">    application/pdf                       pdf;</span><br><span class="line">    application/postscript                ps eps ai;</span><br><span class="line">    application/rtf                       rtf;</span><br><span class="line">    application/vnd.apple.mpegurl         m3u8;</span><br><span class="line">    application/vnd.ms-excel              xls;</span><br><span class="line">    application/vnd.ms-fontobject         eot;</span><br><span class="line">    application/vnd.ms-powerpoint         ppt;</span><br><span class="line">    application/vnd.wap.wmlc              wmlc;</span><br><span class="line">    application/vnd.google-earth.kml+xml  kml;</span><br><span class="line">    application/vnd.google-earth.kmz      kmz;</span><br><span class="line">    application/x-7z-compressed           7z;</span><br><span class="line">    application/x-cocoa                   cco;</span><br><span class="line">    application/x-java-archive-diff       jardiff;</span><br><span class="line">    application/x-java-jnlp-file          jnlp;</span><br><span class="line">    application/x-makeself                run;</span><br><span class="line">    application/x-perl                    pl pm;</span><br><span class="line">    application/x-pilot                   prc pdb;</span><br><span class="line">    application/x-rar-compressed          rar;</span><br><span class="line">    application/x-redhat-package-manager  rpm;</span><br><span class="line">    application/x-sea                     sea;</span><br><span class="line">    application/x-shockwave-flash         swf;</span><br><span class="line">    application/x-stuffit                 sit;</span><br><span class="line">    application/x-tcl                     tcl tk;</span><br><span class="line">    application/x-x509-ca-cert            der pem crt;</span><br><span class="line">    application/x-xpinstall               xpi;</span><br><span class="line">    application/xhtml+xml                 xhtml;</span><br><span class="line">    application/xspf+xml                  xspf;</span><br><span class="line">    application/zip                       zip;</span><br><span class="line"></span><br><span class="line">    application/octet-stream              bin exe dll;</span><br><span class="line">    application/octet-stream              deb;</span><br><span class="line">    application/octet-stream              dmg;</span><br><span class="line">    application/octet-stream              iso img;</span><br><span class="line">    application/octet-stream              msi msp msm;</span><br><span class="line"></span><br><span class="line">    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx;</span><br><span class="line">    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          xlsx;</span><br><span class="line">    application/vnd.openxmlformats-officedocument.presentationml.presentation  pptx;</span><br><span class="line"></span><br><span class="line">    audio/midi                            mid midi kar;</span><br><span class="line">    audio/mpeg                            mp3;</span><br><span class="line">    audio/ogg                             ogg;</span><br><span class="line">    audio/x-m4a                           m4a;</span><br><span class="line">    audio/x-realaudio                     ra;</span><br><span class="line"></span><br><span class="line">    video/3gpp                            3gpp 3gp;</span><br><span class="line">    video/mp2t                            ts;</span><br><span class="line">    video/mp4                             mp4;</span><br><span class="line">    video/mpeg                            mpeg mpg;</span><br><span class="line">    video/quicktime                       mov;</span><br><span class="line">    video/webm                            webm;</span><br><span class="line">    video/x-flv                           flv;</span><br><span class="line">    video/x-m4v                           m4v;</span><br><span class="line">    video/x-mng                           mng;</span><br><span class="line">    video/x-ms-asf                        asx asf;</span><br><span class="line">    video/x-ms-wmv                        wmv;</span><br><span class="line">    video/x-msvideo                       avi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现Nginx压缩功能"><a href="#实现Nginx压缩功能" class="headerlink" title="实现Nginx压缩功能"></a>实现Nginx压缩功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@Nginx-Server ~]# mkdir /app/website1</span><br><span class="line">[root@Nginx-Server ~]# ll -h /var/log/messages </span><br><span class="line">-rw-------. 1 root root 568K Oct 26 19:11 /var/log/messages</span><br><span class="line">[root@Nginx-Server ~]# cp /var/log/messages /app/website1/gzip.html &amp;&amp; chmod a+r /app/website1/gzip.html</span><br><span class="line">[root@Nginx-Server ~]# ll -h /app/website1/gzip.html</span><br><span class="line">-rw-r--r-- 1 root root 568K Oct 26 19:16 /app/website1/gzip.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# curl -I 192.168.8.140/gzip.html      # 直接测试</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Thu, 26 Oct 2017 11:19:24 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 580711  </span><br><span class="line">Last-Modified: Thu, 26 Oct 2017 11:16:58 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f1c42a-8dc67&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# ll  /app/website1/gzip.html          # 可以看到，并没有压缩</span><br><span class="line">-rw-r--r-- 1 root root 580711 Oct 26 19:16 /app/website1/gzip.html</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# vim /etc/nginx/conf.d/vhost.conf         # 修改配置文件，启用压缩功能</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server ; </span><br><span class="line">    server_name www.a.com ; </span><br><span class="line">    root /app/website1 ;</span><br><span class="line">    gzip on; </span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_min_length 64; </span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_types text/xml text/css application/javascript;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@Nginx-Server ~]# nginx -s stop</span><br><span class="line">[root@Nginx-Server ~]# nginx </span><br><span class="line">[root@Nginx-Server ~]# curl -I --compressed 192.168.8.140/gzip.html         # 再次测试</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Thu, 26 Oct 2017 11:27:35 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Last-Modified: Thu, 26 Oct 2017 11:16:58 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: W/&quot;59f1c42a-8dc67&quot;</span><br><span class="line">Content-Encoding: gzip          # 已经压缩</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_gzip_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_gzip_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块ngx_http_stub_status_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-stub-status-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-stub-status-module/</url>
      <content type="html"><![CDATA[<h3 id="模块ngx-http-stub-status-module"><a href="#模块ngx-http-stub-status-module" class="headerlink" title="模块ngx_http_stub_status_module"></a>模块ngx_http_stub_status_module</h3><p>用于输出nginx的基本状态信息</p><a id="more"></a><h3 id="实现nginx的基本状态信息"><a href="#实现nginx的基本状态信息" class="headerlink" title="实现nginx的基本状态信息"></a>实现nginx的基本状态信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        auth_basic &quot;Admin&quot; ;</span><br><span class="line">        auth_basic_user_file /etc/nginx/.passwd ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    location /status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    allow 192.168.8.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140/status/</span><br><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 1 1 1</span><br></pre></td></tr></table></figure><h3 id="status信息"><a href="#status信息" class="headerlink" title="status信息"></a>status信息</h3><ul><li>Active connections:当前状态，活动状态的连接数</li><li>accepts：统计总值，已经接受的客户端请求的总数</li><li>handled：统计总值，已经处理完成的客户端请求的总数</li><li>requests：统计总值，客户端发来的总的请求数</li><li>Reading：当前状态，正在读取客户端请求报文首部的连接的连接数</li><li>Writing：当前状态，正在向客户端发送响应报文过程中的连接数</li><li>Waiting：当前状态，正在等待客户端发出请求的空闲连接数</li></ul>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块ngx_http_stub_status_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块ngx_http_stub_status_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_log_module</title>
      <link href="/2017/10/26/Nginx-ngx-http-log-module/"/>
      <url>/2017/10/26/Nginx-ngx-http-log-module/</url>
      <content type="html"><![CDATA[<h3 id="ngx-http-log-module模块"><a href="#ngx-http-log-module模块" class="headerlink" title="ngx_http_log_module模块"></a>ngx_http_log_module模块</h3><p>指定日志格式记录请求</p><h3 id="1、-log-format-name-string-…"><a href="#1、-log-format-name-string-…" class="headerlink" title="1、 log_format name string …;"></a>1、 log_format name string …;</h3><p>string可以使用nginx核心模块及其它模块内嵌的变量</p><a id="more"></a><h3 id="2、-access-log-path-format-buffer-size-gzip-level-flush-time-if-condition"><a href="#2、-access-log-path-format-buffer-size-gzip-level-flush-time-if-condition" class="headerlink" title="2、 access_log path [format [buffer=size] [gzip[=level]][flush=time] [if=condition]];"></a>2、 access_log path [format [buffer=size] [gzip[=level]][flush=time] [if=condition]];</h3><ul><li>access_log off;</li><li>访问日志文件路径，格式及相关的缓冲的配置<ul><li>buffer=size</li><li>flush=time</li></ul></li></ul><h3 id="实现自定义日志"><a href="#实现自定义日志" class="headerlink" title="实现自定义日志"></a>实现自定义日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 注意在http中添加</span><br><span class="line">http &#123;</span><br><span class="line"> log_format test &apos;$remote_addr-$remote_user [$time_local] &apos;</span><br><span class="line">                            &apos;&quot;$request&quot; $status $bytes_sent &apos;</span><br><span class="line">                            &apos;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$gzip_ratio&quot;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 定义日志</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    access_log /var/log/nginx/nginx-access.log test buffer=32k ;        # 定义日志的路径和缓冲的配置</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        auth_basic &quot;Admin&quot; ;</span><br><span class="line">        auth_basic_user_file /etc/nginx/.passwd ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# tail -5 /var/log/nginx/nginx-access.log       # 测试</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br><span class="line">192.168.8.136-- [25/Oct/2017:17:25:03 +0800] &quot;GET / HTTP/1.1&quot; 200 243 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h3 id="3、-open-log-file-cache-max-N-inactive-time"><a href="#3、-open-log-file-cache-max-N-inactive-time" class="headerlink" title="3、 open_log_file_cache max=N [inactive=time]"></a>3、 open_log_file_cache max=N [inactive=time]</h3><ul><li>[min_uses=N] [valid=time];</li><li>open_log_file_cache off;</li><li>缓存各日志文件相关的元数据信息</li><li>max：缓存的最大文件描述符数量</li><li>min_uses：在inactive指定的时长内访问大于等于此值方</li><li>可被当作活动项<ul><li>inactive：非活动时长</li><li>valid：验正缓存中各缓存项是否为活动项的时间间隔</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_log_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_log_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_auth_basic_module</title>
      <link href="/2017/10/25/Nginx-http-auth-basic-module/"/>
      <url>/2017/10/25/Nginx-http-auth-basic-module/</url>
      <content type="html"><![CDATA[<h3 id="ngx-http-auth-basic-module模块"><a href="#ngx-http-auth-basic-module模块" class="headerlink" title="ngx_http_auth_basic_module模块"></a>ngx_http_auth_basic_module模块</h3><p>实现基于用户的访问控制，使用basic机制进行用户认证</p><ol><li>auth_basic string | off;</li><li>auth_basic_user_file file;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /admin/ &#123;</span><br><span class="line">auth_basic &quot;Admin Area&quot;;</span><br><span class="line">auth_basic_user_file /etc/nginx/.ngxpasswd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h4 id="用户口令："><a href="#用户口令：" class="headerlink" title="用户口令："></a>用户口令：</h4><ol><li>明文文本：格式name:password:comment</li><li>加密文本：由htpasswd命令实现(httpd-tools所提供)</li></ol><h3 id="实现基于用户的访问控制"><a href="#实现基于用户的访问控制" class="headerlink" title="实现基于用户的访问控制"></a>实现基于用户的访问控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        auth_basic &quot;Admin&quot; ;         # 指定提示语</span><br><span class="line">        auth_basic_user_file /etc/nginx/.passwd ;       # 指定密码文件</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# htpasswd -c -m /etc/nginx/.passwd user1       # 创建用户和文件</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user user1</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140/admin/     # 访问测试，需要验证</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;401 Authorization Required&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;401 Authorization Required&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><center><img src="https://houhaiyun.github.io/img/images/Nginx-http-auth-basic-module-1.gif" title="测试访问"></center>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_auth_basic_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_auth_basic_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块 ngx_http_access_module</title>
      <link href="/2017/10/25/Nginx-http-access-module/"/>
      <url>/2017/10/25/Nginx-http-access-module/</url>
      <content type="html"><![CDATA[<h3 id="ngx-http-access-module模块"><a href="#ngx-http-access-module模块" class="headerlink" title="ngx_http_access_module模块"></a>ngx_http_access_module模块</h3><p>实现基于ip的访问控制功能</p><a id="more"></a><ol><li>allow address | CIDR | unix: | all;</li><li>deny address | CIDR | unix: | all;<ul><li>http, server, location, limit_except</li><li>自上而下检查，一旦匹配，将生效，条件严格的置前</li></ul></li></ol><h3 id="实现访问控制"><a href="#实现访问控制" class="headerlink" title="实现访问控制"></a>实现访问控制</h3><p>允许192.168.8.128访问/admin目录，其它全部拒绝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">            allow 192.168.8.128/32 ;</span><br><span class="line">            deny all ;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ifconfig eth1         # 128测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:13630 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:11400 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:8834196 (8.4 MiB)  TX bytes:968772 (946.0 KiB)</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.140/admin/</span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br><span class="line">    </span><br><span class="line">[root@centos6 ~]# ifconfig eth1     # 其它测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:290 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:233 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:32163 (31.4 KiB)  TX bytes:31517 (30.7 KiB)</span><br><span class="line">[root@centos6 ~]# curl 192.168.8.140/admin/     # 已经被拒绝</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> 模块 ngx_http_access_module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 ngx_http_access_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置文件2</title>
      <link href="/2017/10/25/Nginx-configure2/"/>
      <url>/2017/10/25/Nginx-configure2/</url>
      <content type="html"><![CDATA[<h3 id="http协议相关的配置结构"><a href="#http协议相关的配置结构" class="headerlink" title="http协议相关的配置结构"></a>http协议相关的配置结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    ... 各server的公共配置</span><br><span class="line">    server &#123; 每个server用于定义一个虚拟主机</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        server_name 虚拟主机名</span><br><span class="line">        root 主目录</span><br><span class="line">        alias 路径别名</span><br><span class="line">        location [OPERATOR] URL &#123; 指定URL的特性</span><br><span class="line">            ...</span><br><span class="line">            if CONDITION &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="核心模块：ngx-http-core-module"><a href="#核心模块：ngx-http-core-module" class="headerlink" title="核心模块：ngx_http_core_module"></a>核心模块：ngx_http_core_module</h3><h3 id="与套接字相关的配置："><a href="#与套接字相关的配置：" class="headerlink" title="与套接字相关的配置："></a>与套接字相关的配置：</h3><h4 id="1-虚拟主机"><a href="#1-虚拟主机" class="headerlink" title="1. 虚拟主机"></a>1. 虚拟主机</h4><h5 id="1-配置一个基于IP的虚拟主机"><a href="#1-配置一个基于IP的虚拟主机" class="headerlink" title="1. 配置一个基于IP的虚拟主机"></a>1. 配置一个基于IP的虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir /app/wesite&#123;1..3&#125;       # 创建虚拟主机目录</span><br><span class="line">[root@centos7 ~]# ls /app/</span><br><span class="line">wesite1  wesite2  wesite3</span><br><span class="line">[root@centos7 ~]# echo website1 &gt; /app/wesite1/index.html       # 创建虚拟主机测试网页</span><br><span class="line">[root@centos7 ~]# echo website2 &gt; /app/wesite2/index.html</span><br><span class="line">[root@centos7 ~]# echo website3 &gt; /app/wesite3/index.html</span><br><span class="line">[root@centos7 ~]# cd /app/</span><br><span class="line">[root@centos7 app]# tree            # 目录结构如下</span><br><span class="line">.</span><br><span class="line">├── wesite1</span><br><span class="line">│   └── index.html</span><br><span class="line">├── wesite2</span><br><span class="line">│   └── index.html</span><br><span class="line">└── wesite3</span><br><span class="line">    └── index.html</span><br><span class="line"></span><br><span class="line">3 directories, 3 files</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ifconfig ens34:0 192.168.8.141 up     # 配置虚拟IP</span><br><span class="line">[root@centos7 ~]# ifconfig ens34:1 192.168.8.142 up</span><br><span class="line">[root@centos7 ~]# ifconfig ens34:2 192.168.8.143 up</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# ifconfig          # 查看IP地址</span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 15474  bytes 1341411 (1.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 15674  bytes 9744197 (9.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.141  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">ens34:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.142  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">ens34:2: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.143  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 此配置文件是不存在的，需要手动创建。为什么，此配置文件能生效呢？因为此配置文件是include在/etc/nginx/nginx.conf文件中的</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.141:80 ;</span><br><span class="line">    server_name  _;  </span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.142:80 ;</span><br><span class="line">    server_name  _;  </span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.143:80 ;</span><br><span class="line">    server_name  _;  </span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl 192.168.8.141        # 测试访问，ok</span><br><span class="line">website1</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.142</span><br><span class="line">website2</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.143</span><br><span class="line">website3</span><br></pre></td></tr></table></figure><h5 id="2-配置一个基于域名的虚拟主机"><a href="#2-配置一个基于域名的虚拟主机" class="headerlink" title="2. 配置一个基于域名的虚拟主机"></a>2. 配置一个基于域名的虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# cat /etc/hosts            # 添加hosts文件</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.8.140 www.a.com  www.b.com www.c.com</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s  stop </span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl www.a.com        # 测试访问，ok</span><br><span class="line">website1</span><br><span class="line">[root@centos7 ~]# curl www.b.com </span><br><span class="line">website2</span><br><span class="line">[root@centos7 ~]# curl www.c.com </span><br><span class="line">website3</span><br></pre></td></tr></table></figure><h5 id="3-配置一个基于端口的虚拟主机"><a href="#3-配置一个基于端口的虚拟主机" class="headerlink" title="3. 配置一个基于端口的虚拟主机"></a>3. 配置一个基于端口的虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:81 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:82 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:83 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t              # 检查配置文件，ok</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140:81         # 测试访问，ok</span><br><span class="line">website1</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140:82</span><br><span class="line">website2</span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140:83</span><br><span class="line">website3</span><br></pre></td></tr></table></figure><h4 id="2-listen-PORT"><a href="#2-listen-PORT" class="headerlink" title="2.  listen PORT"></a>2.  listen PORT</h4><p> listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE<br>listen address[:port] [default_server] [ssl] [http2 | spdy]<br>[backlog=number] [rcvbuf=size] [sndbuf=size]</p><h5 id="1-default-server-设定为默认虚拟主机"><a href="#1-default-server-设定为默认虚拟主机" class="headerlink" title="1. default_server 设定为默认虚拟主机"></a>1. default_server 设定为默认虚拟主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 将上面搭建的虚拟主机的www.a.com设置为虚拟主机</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改nginx主配置文件</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;         # 主配置文件设置了默认虚拟机，所以我们要将此项删除掉</span><br><span class="line">        server_name  _;  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123; </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 default_server ;          # 将www.a.com设置为虚拟主机</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx         </span><br><span class="line">[root@centos7 ~]# curl 192.168.8.140        # 测试访问，192.168.8.140已经配置为，默认虚拟主机</span><br><span class="line">website1</span><br></pre></td></tr></table></figure><h5 id="2-ssl-限制仅能够通过ssl连接提供服务"><a href="#2-ssl-限制仅能够通过ssl连接提供服务" class="headerlink" title="2. ssl 限制仅能够通过ssl连接提供服务"></a>2. ssl 限制仅能够通过ssl连接提供服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl ;      # 使虚拟主机提供ssl加密</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.b.com;</span><br><span class="line">    root         /app/wesite2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       192.168.8.140:80 ;</span><br><span class="line">    server_name  www.c.com;</span><br><span class="line">    root         /app/wesite3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-backlog-number-超过并发连接数后，新请求进入后援队列的长度"><a href="#3-backlog-number-超过并发连接数后，新请求进入后援队列的长度" class="headerlink" title="3. backlog=number 超过并发连接数后，新请求进入后援队列的长度"></a>3. backlog=number 超过并发连接数后，新请求进入后援队列的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rcvbuf=size 接收缓冲区大小</span><br><span class="line">sndbuf=size 发送缓冲区大小</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>(1) 基于port；<ul><li>listen PORT; 指令监听在不同的端口</li></ul></li><li>(2) 基于ip的虚拟主机<ul><li>listen IP:PORT; IP 地址不同</li></ul></li><li>(3) 基于hostname<ul><li>server_name fqdn; 指令指向不同的主机名</li></ul></li></ul><h4 id="3-server-name-name"><a href="#3-server-name-name" class="headerlink" title="3.  server_name name"></a>3.  server_name name</h4><ul><li>虚拟主机的主机名称后可跟多个由空白字符分隔的字符串</li><li>支持*通配任意长度的任意字符<ul><li>server_name <em>.magedu.com <a href="http://www.magedu" target="_blank" rel="noopener">www.magedu</a>.</em></li></ul></li><li>支持~起始的字符做正则表达式模式匹配，性能原因慎用<ul><li>server_name ~^www\d+.magedu.com$</li><li>\d 表示 [0-9]</li></ul></li></ul><p><strong>匹配优先级机制从高到低：</strong></p><ul><li>(1) 首先是字符串精确匹配 如： <a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a></li><li>(2) 左侧<em>通配符 如： </em>.magedu.com</li><li>(3) 右侧<em>通配符 如： <a href="http://www.magedu" target="_blank" rel="noopener">www.magedu</a>.</em></li><li>(4) 正则表达式 如： ~^.*.magedu.com$</li><li>(5) default_server</li></ul><h4 id="4-tcp-nodelay-on-off"><a href="#4-tcp-nodelay-on-off" class="headerlink" title="4. tcp_nodelay on | off;"></a>4. tcp_nodelay on | off;</h4><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:sendfile on | off;</span><br><span class="line">Default:</span><br><span class="line">sendfile off;</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure></p><ul><li>在keepalived模式下的连接是否启用TCP_NODELAY选项</li><li>当为off时，延迟发送，合并多个请求后再发送</li><li>默认On时，不延迟发送</li><li>可用于： http, server, location</li><li>此项设置并不建议改为off，延迟发送会降低用户的体验</li></ul><h4 id="5-sendfile-on-off"><a href="#5-sendfile-on-off" class="headerlink" title="5. sendfile on | off;"></a>5. sendfile on | off;</h4><p>是否启用sendfile功能，在内核中封装报文直接发送，默认Off</p><h5 id="启动sendfile"><a href="#启动sendfile" class="headerlink" title="启动sendfile"></a>启动sendfile</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          #修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    sendfile on ;</span><br><span class="line">    root         /app/wesite1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-server-tokens-on-off-build-string"><a href="#6-server-tokens-on-off-build-string" class="headerlink" title="6. server_tokens on | off | build | string"></a>6. server_tokens on | off | build | string</h4><p><strong>官网帮助：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:server_tokens on | off | build | string;</span><br><span class="line">Default:</span><br><span class="line">server_tokens on;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure><p>是否在响应报文的Server首部显示nginx版本</p><h5 id="实现隐藏版本号"><a href="#实现隐藏版本号" class="headerlink" title="实现隐藏版本号"></a>实现隐藏版本号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# curl -I localhost         #我们默认访问是会显示版本号的</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 00:52:37 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 3700</span><br><span class="line">Last-Modified: Mon, 31 Oct 2016 12:37:02 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;58173aee-e74&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]#  vim /etc/nginx/nginx.conf        # 编辑配置文件，添加到http中隐藏其版本号。</span><br><span class="line">server_tokens off;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop </span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line">[root@centos7 ~]# curl -I localhost         # 重启后再次测试</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx           # 已经不再啊显示版本号</span><br><span class="line">Date: Wed, 25 Oct 2017 00:53:18 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 3700</span><br><span class="line">Last-Modified: Mon, 31 Oct 2016 12:37:02 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;58173aee-e74&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="定义路径相关的配置"><a href="#定义路径相关的配置" class="headerlink" title="定义路径相关的配置"></a>定义路径相关的配置</h3><h4 id="1-root"><a href="#1-root" class="headerlink" title="1. root"></a>1. root</h4><p>设置web资源的路径映射；用于指明请求的URL所对应的文档的目录路径，可用于http, server, location, if in location</p><h5 id="定义路径web资源的路径"><a href="#定义路径web资源的路径" class="headerlink" title="定义路径web资源的路径"></a>定义路径web资源的路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]#  vim /etc/nginx/nginx.conf        # 编辑配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    sendfile on ;</span><br><span class="line">    root         /app/wesite1;          #定义资源的路径为/app/website1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-location-uri-…"><a href="#2-location-uri-…" class="headerlink" title="2.  location [ = | ~ | ~* | ^~ ] uri { … }"></a>2.  location [ = | ~ | ~* | ^~ ] uri { … }</h4><ul><li><code>location @name { ... }</code></li><li>在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射；ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置</li></ul><h5 id="定义location"><a href="#定义location" class="headerlink" title="定义location"></a>定义location</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# mkdir -p /app/admin/admin         # 创建访问目录</span><br><span class="line">[root@centos7 ~]# echo &quot;admin--&gt; Path: /app/admin/admin&quot; &gt; /app/admin/admin/index.html      # 创建测试页面</span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 编辑配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        root /app/admin/ ; </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# curl www.a.com/admin/         # 访问的路径是/app/admin/admin</span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br></pre></td></tr></table></figure><p>由上面的实验可以看出，location中定义的路径是相对于location中的root中所定义的路径的</p><h4 id="3-：对URI做精确匹配；"><a href="#3-：对URI做精确匹配；" class="headerlink" title="3. =：对URI做精确匹配；"></a>3. =：对URI做精确匹配；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.magedu.com/" target="_blank" rel="noopener">http://www.magedu.com/</a> 匹配</li><li><a href="http://www.magedu.com/index.html" target="_blank" rel="noopener">http://www.magedu.com/index.html</a> 不匹配</li><li>^~：对URI的最左边部分做匹配检查，不区分字符大小写</li><li>~：对URI做正则表达式模式匹配，区分字符大小写</li><li>~*：对URI做正则表达式模式匹配，不区分字符大小写</li><li>不带符号：匹配起始于此uri的所有的uri</li><li>匹配优先级从高到低：</li><li>=, ^~, ～/～*, 不带符号</li></ul><h5 id="location定义和匹配"><a href="#location定义和匹配" class="headerlink" title="location定义和匹配"></a>location定义和匹配</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 ;</span><br><span class="line">    service_name www.ihaiyun.cc ; </span><br><span class="line">    location = / &#123;</span><br><span class="line">        [ configuration A ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        [ configuration B ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /documents/ &#123;</span><br><span class="line">        [ configuration C ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ^~ /images/ &#123;</span><br><span class="line">        [ configuration D ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">        [ configuration E ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一段关于location的定义，下面我们来匹配：</p><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc将会匹配那个呢？" target="_blank" rel="noopener">http://www.ihaiyun.cc将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration A</code>中的内容了。为什么呢？因为：利用排除法来解决此问题，首先我们访问的是/，就把后面的三项都排除了，最后就剩下A和B了。=比不带符号的优先级要高，所以就是A了。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/index.html将会匹配那个呢？" target="_blank" rel="noopener">http://www.ihaiyun.cc/index.html将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration B</code>中的内容了。为什么呢？因为：指定了路径。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/documents/index.html将会匹配那个呢？" target="_blank" rel="noopener">http://www.ihaiyun.cc/documents/index.html将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration C</code>中的内容了。为什么呢？因为：指定了路径。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/documents/images/test.jpg将会匹配那个呢？" target="_blank" rel="noopener">http://www.ihaiyun.cc/documents/images/test.jpg将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration D</code>中的内容了。为什么呢？因为：指定了路径。</li></ul><ul><li><strong>问：</strong> 假如我们访问：<a href="http://www.ihaiyun.cc/documents/test.jpg将会匹配那个呢？" target="_blank" rel="noopener">http://www.ihaiyun.cc/documents/test.jpg将会匹配那个呢？</a></li><li><strong>答：</strong> 当然访问的是<code>configuration E</code>中的内容了。为什么呢？因为：只有E能配置到此URL，且没有比E优先级高的location</li></ul><h4 id="4-alias-path"><a href="#4-alias-path" class="headerlink" title="4.  alias path;"></a>4.  alias path;</h4><p>路径别名，文档映射的另一种机制；仅能用于location上下文</p><h5 id="实现路径别名"><a href="#实现路径别名" class="headerlink" title="实现路径别名"></a>实现路径别名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 编辑配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# echo &quot;admin Path: --&gt; /app/admin&quot; &gt; /app/admin/index.html</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx</span><br><span class="line">[root@centos7 ~]# curl www.a.com/ad/         # 测试访问可以看到访问的是，/app/admin/</span><br><span class="line">admin Path: --&gt; /app/admin</span><br></pre></td></tr></table></figure><h5 id="alias和root的区别、"><a href="#alias和root的区别、" class="headerlink" title="alias和root的区别、"></a>alias和root的区别、</h5><ul><li>alias：定义了路径别名，别名可以随意定义，别名是不存在的，访问的真实路径为alias后面定义的路径</li><li>root：定义了路径的父路径，父路径和定义的路径组合成为一个完整的路径。</li></ul><p><strong>注意</strong> ： location中使用root指令和alias指令的意义不同</p><ul><li>(a) root，给定的路径对应于location中的/uri/左侧的/</li><li>(b) alias，给定的路径对应于location中的/uri/右侧的/</li></ul><h4 id="5-index-file-…"><a href="#5-index-file-…" class="headerlink" title="5. index file …;"></a>5. index file …;</h4><p>指定默认网页资源，注意： ngx_http_index_module模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 添加默认index.php资源</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    index index.html;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6-error-page-code-…-response-uri"><a href="#6-error-page-code-…-response-uri" class="headerlink" title="6. error_page code … [=[response]] uri;"></a>6. error_page code … [=[response]] uri;</h4><ul><li>模块： ngx_http_core_module</li><li>定义错误页， 以指定的响应状态码进行响应</li><li>可用位置： http, server, location, if in location</li><li>error_page 404 /404.html</li><li>error_page 404 =200 /404.html</li></ul><h5 id="定义错误页面，返回指定结果"><a href="#定义错误页面，返回指定结果" class="headerlink" title="定义错误页面，返回指定结果"></a>定义错误页面，返回指定结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    error_page 404 /404.html ;      # 定义访问指定的404错误页面</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">[root@centos7 ~]# echo &quot;页面跑丢了！&quot; &gt; /app/wesite1/404.html       # 创建404界面</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx         </span><br><span class="line">[root@centos7 ~]# curl www.a.com/asdf.txxt      # 测试访问asdf.txt是不存在的，已经是我们自定义的404页面</span><br><span class="line">页面跑丢了！</span><br><span class="line">[root@centos7 ~]# curl -I  www.a.com/asdf.txxt      # 查看状态码还是404</span><br><span class="line">HTTP/1.1 404 Not Found</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 06:11:03 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 19</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f02ad7-13&quot;</span><br></pre></td></tr></table></figure><h5 id="定义错误页面，指定为返回状态码为200-ok"><a href="#定义错误页面，指定为返回状态码为200-ok" class="headerlink" title="定义错误页面，指定为返回状态码为200 ok"></a>定义错误页面，指定为返回状态码为200 ok</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    error_page 404 =200 /404.html ;     # 定义状态码由404转换为200</span><br><span class="line">    location /ad &#123;</span><br><span class="line">        alias /app/admin/ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -t      </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# curl www.a.com/asdfkl.asdf        # 测试访问</span><br><span class="line">页面跑丢了！</span><br><span class="line">[root@centos7 ~]# curl -I  www.a.com/asdfkl.asdf        # 查看状态码已经是200，这么做的好处是可以防止浏览器页面劫持</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 06:19:07 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 19</span><br><span class="line">Last-Modified: Wed, 25 Oct 2017 06:10:31 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f02ad7-13&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h4 id="7-try-files-file-…-uri"><a href="#7-try-files-file-…-uri" class="headerlink" title="7. try_files file … uri;"></a>7. try_files file … uri;</h4><ul><li><code>try_files file ... =code;</code></li><li>按顺序检查文件是否存在，返回第一个找到的文件或文件夹（结尾加斜线表示为文件夹），如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123; try_files $uri /images/default.gif; &#125;</span><br><span class="line">location / &#123; try_files $uri $uri/index.html $uri.html =404; &#125;</span><br></pre></td></tr></table></figure><h5 id="实现目录下找不到文件，返回默认文件"><a href="#实现目录下找不到文件，返回默认文件" class="headerlink" title="实现目录下找不到文件，返回默认文件"></a>实现目录下找不到文件，返回默认文件</h5><p><strong>注：</strong> try_files的文件路径是相对于上面定义的root目录的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      # 修改配置文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    location /admin/ &#123;</span><br><span class="line">        try_files $uri /admin/default.html ;        # 指定如果找不到URI中的文件就返回default.html文件</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# mkdir /app/wesite1/admin      # 创建访问目录</span><br><span class="line">[root@centos7 ~]# cd /app/wesite1/admin/</span><br><span class="line">[root@centos7 admin]# ls</span><br><span class="line">default.html  index.html  test.html </span><br><span class="line">[root@centos7 admin]# cat default.html          # 创建三个test文件</span><br><span class="line">This is default file!</span><br><span class="line">[root@centos7 admin]# cat index.html </span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br><span class="line">[root@centos7 admin]# cat test.html </span><br><span class="line">this is a test file!</span><br><span class="line"></span><br><span class="line">[root@centos7 admin]# nginx -s stop</span><br><span class="line">[root@centos7 admin]# nginx </span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/         # 测试，此时就需要手动指定默认网页了</span><br><span class="line">This is default file!</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/index.html       </span><br><span class="line">admin--&gt; Path: /app/admin/admin</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/test.html</span><br><span class="line">this is a test file!</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/asdfjlk      # 随便输入一个文件，返回的是默认文件</span><br><span class="line">This is default file!</span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/s123kjsdfjk</span><br><span class="line">This is default file!</span><br></pre></td></tr></table></figure><h5 id="定义查找多个资源，如果找不到就返回404页面"><a href="#定义查找多个资源，如果找不到就返回404页面" class="headerlink" title="定义查找多个资源，如果找不到就返回404页面"></a>定义查找多个资源，如果找不到就返回404页面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    error_page 404 =200 /404.html ;         </span><br><span class="line">    </span><br><span class="line">    location /admin/ &#123;</span><br><span class="line">        try_files $uri $uri/index =404;     # 定义了如果第一个uri找不着，就找第二个uri，第二个uri也找不着的话，那么就返回404页面，且状态为成功</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 admin]# nginx -s stop</span><br><span class="line">[root@centos7 admin]# nginx </span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/index.html       # 页面可以找着是正常的</span><br><span class="line">admin--&gt; Path: /app/admin/admin </span><br><span class="line">[root@centos7 admin]# curl www.a.com/admin/asdfjklasd       # 访问不存在的资源，返回404</span><br><span class="line">页面跑丢了！</span><br><span class="line">[root@centos7 admin]# curl -I  www.a.com/admin/asdfjklasd       # 状态码是200，OK的</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 07:04:54 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 19</span><br><span class="line">Last-Modified: Wed, 25 Oct 2017 06:10:31 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59f02ad7-13&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h3 id="定义客户端请求的相关配置"><a href="#定义客户端请求的相关配置" class="headerlink" title="定义客户端请求的相关配置"></a>定义客户端请求的相关配置</h3><h4 id="8-keepalive-timeout-timeout-header-timeout"><a href="#8-keepalive-timeout-timeout-header-timeout" class="headerlink" title="8 keepalive_timeout timeout [header_timeout];"></a>8 keepalive_timeout timeout [header_timeout];</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive_timeout timeout [header_timeout];</span><br><span class="line">Default:</span><br><span class="line">keepalive_timeout 75s;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>设定保持连接超时时长， 0表示禁止长连接， 默认为75s</p><h5 id="测试超时时间"><a href="#测试超时时间" class="headerlink" title="测试超时时间"></a>测试超时时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf     # 查看主配置文件，默认就是支持keepalive的，65s</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# date &amp;&amp; telnet 192.168.8.140 80  ; date       # 通过telnet测试</span><br><span class="line">Wed Oct 25 15:15:50 CST 2017</span><br><span class="line">Trying 192.168.8.140...</span><br><span class="line">Connected to 192.168.8.140.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">HOST: www.a.com</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.10.2</span><br><span class="line">Date: Wed, 25 Oct 2017 07:16:11 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 9</span><br><span class="line">Last-Modified: Wed, 25 Oct 2017 02:11:13 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;59eff2c1-9&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">website1</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">Wed Oct 25 15:17:51 CST 2017</span><br></pre></td></tr></table></figure><h4 id="9-keepalive-requests-number"><a href="#9-keepalive-requests-number" class="headerlink" title="9.  keepalive_requests number;"></a>9.  keepalive_requests number;</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive_requests number;</span><br><span class="line">Default:</span><br><span class="line">keepalive_requests 100;</span><br><span class="line">Context:http, server, location</span><br><span class="line">This directive appeared in version 0.8.0.</span><br></pre></td></tr></table></figure></p><p>在一次长连接上所允许请求的资源的最大数量默认为100</p><h5 id="定义长连接上所允许请求的资源的最大数量默认为1000"><a href="#定义长连接上所允许请求的资源的最大数量默认为1000" class="headerlink" title="定义长连接上所允许请求的资源的最大数量默认为1000"></a>定义长连接上所允许请求的资源的最大数量默认为1000</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf          # 定义长连接最大资源数为1000个，只是为了测试哦</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin/ &#123;</span><br><span class="line">        try_files $uri $uri/index =404; </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-keepalive-disable-none-browser-…"><a href="#10-keepalive-disable-none-browser-…" class="headerlink" title="10. keepalive_disable none | browser …"></a>10. keepalive_disable none | browser …</h4><p><strong>官网帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:keepalive_disable none | browser ...;</span><br><span class="line">Default:</span><br><span class="line">keepalive_disable msie6;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure></p><p>对哪种浏览器禁用长连接</p><h4 id="11-send-timeout-time"><a href="#11-send-timeout-time" class="headerlink" title="11. send_timeout time;"></a>11. send_timeout time;</h4><p>向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非整个响应过程的传输时长    </p><h4 id="12-client-body-buffer-size-size"><a href="#12-client-body-buffer-size-size" class="headerlink" title="12. client_body_buffer_size size;"></a>12. client_body_buffer_size size;</h4><p>用于接收每个客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由client_body_temp_path指令所定义的位置</p><h4 id="13-client-body-temp-path-path-level1-level2-level3"><a href="#13-client-body-temp-path-path-level1-level2-level3" class="headerlink" title="13. client_body_temp_path path [level1 [level2[level3]]];"></a>13. client_body_temp_path path [level1 [level2[level3]]];</h4><ul><li>设定用于存储客户端请求报文的body部分的临时存储路径及子目录结构和数量</li><li>目录名为16进制的数字；</li><li>client_body_temp_path /var/tmp/client_body 1 2 2</li><li>1 1级目录占1位16进制，即2^4=16个目录 0-f</li><li>2 2级目录占2位16进制，即2^8=256个目录 00-ff</li><li>2 3级目录占2位16进制， 即2^8=256个目录 00-ff</li></ul><h3 id="对客户端进行限制的相关配置"><a href="#对客户端进行限制的相关配置" class="headerlink" title="对客户端进行限制的相关配置"></a>对客户端进行限制的相关配置</h3><h4 id="1-limit-rate-rate"><a href="#1-limit-rate-rate" class="headerlink" title="1. limit_rate rate;"></a>1. limit_rate rate;</h4><p>限制响应给客户端的传输速率，单位是bytes/second<br>默认值0表示无限制</p><h4 id="2-限制客户端除了GET之外的其它请求方法"><a href="#2-限制客户端除了GET之外的其它请求方法" class="headerlink" title="2. 限制客户端除了GET之外的其它请求方法"></a>2. 限制客户端除了GET之外的其它请求方法</h4><ul><li>limit_except method … { … }，仅用于location</li><li>限制客户端使用除了指定的请求方法之外的其它方法<br>method:GET, HEAD, POST, PUT, DELETE，MKCOL, COPY, MOVE, OPTIONS, PROPFIND,PROPPATCH, LOCK, UNLOCK, PATCH</li></ul><h5 id="实现限制主机使用除了GET之外的其它指令"><a href="#实现限制主机使用除了GET之外的其它指令" class="headerlink" title="实现限制主机使用除了GET之外的其它指令"></a>实现限制主机使用除了GET之外的其它指令</h5><p>实现允许192.168.8.128这台主机使用除了GET之外的其它指令，其它全部拒绝。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/conf.d/vhost.conf      #修改配置文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server ;</span><br><span class="line">    server_name  www.a.com ;</span><br><span class="line">    root        /app/wesite1;</span><br><span class="line">    keepalive_requests 1000 ;</span><br><span class="line">    error_page 404 =200 /404.html ; </span><br><span class="line">    keepalive_timeout   100 ;</span><br><span class="line">    location /admin &#123;</span><br><span class="line">        limit_except GET &#123;</span><br><span class="line">            allow 192.168.8.128/32 ;</span><br><span class="line">            deny all ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ifconfig eth1         # 128测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:13630 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:11400 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:8834196 (8.4 MiB)  TX bytes:968772 (946.0 KiB)</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl -XPUT 192.168.8.140/admin/       # 测试PUT，状态码为：405 其实允许的只是服务器端不支持此方法</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;405 Not Allowed&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;405 Not Allowed&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl -XPUT 192.168.8.140/admin/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# ifconfig eth1     # 136测试</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:23:DB:AF  </span><br><span class="line">          inet addr:192.168.8.136  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fe23:dbaf/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:290 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:233 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:32163 (31.4 KiB)  TX bytes:31517 (30.7 KiB)</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]# curl -XPUT 192.168.8.140/admin/       # 测试put，状态码为403，已经被拒绝</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="文件操作优化的配置"><a href="#文件操作优化的配置" class="headerlink" title="文件操作优化的配置"></a>文件操作优化的配置</h3><h4 id="1-aio-on-off-threads-pool"><a href="#1-aio-on-off-threads-pool" class="headerlink" title="1. aio on | off | threads[=pool];"></a>1. aio on | off | threads[=pool];</h4><p>是否启用aio功能；异步IO</p><h4 id="2-directio-size-off"><a href="#2-directio-size-off" class="headerlink" title="2. directio size | off;"></a>2. directio size | off;</h4><p>同步IO，</p><p>是否同步（直接）写磁盘，而非写缓存，在Linux主机启用O_DIRECT标记， 则文件大于等于给定大小时使用，例如directio 4m</p><h4 id="3-open-file-cache-off"><a href="#3-open-file-cache-off" class="headerlink" title="3. open_file_cache off;"></a>3. open_file_cache off;</h4><ul><li>open_file_cache max=N [inactive=time];</li><li>nginx可以缓存以下三种信息：</li><li>(1) 文件元数据：文件的描述符、文件大小和最近一次的修改时间</li><li>(2) 打开的目录结构</li><li>(3) 没有找到的或者没有权限访问的文件的相关信息</li><li>max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现管理inactive=time：缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项， 将被删除</li></ul><h4 id="4-open-file-cache-errors-on-off"><a href="#4-open-file-cache-errors-on-off" class="headerlink" title="4. open_file_cache_errors on | off;"></a>4. open_file_cache_errors on | off;</h4><ul><li>是否缓存查找时发生错误的文件一类的信息</li><li>默认值为off</li></ul><h4 id="5-open-file-cache-min-uses-number"><a href="#5-open-file-cache-min-uses-number" class="headerlink" title="5. open_file_cache_min_uses number;"></a>5. open_file_cache_min_uses number;</h4><ul><li>open_file_cache指令的inactive参数指定的时长内，至少被命中此处指定的次数方可被归类为活动项</li><li>默认值为1</li></ul><h4 id="6-open-file-cache-valid-time"><a href="#6-open-file-cache-valid-time" class="headerlink" title="6. open_file_cache_valid time;"></a>6. open_file_cache_valid time;</h4><p>缓存项有效性的检查频率<br>默认值为60s</p>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx配置文件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置文件</title>
      <link href="/2017/10/25/Nginx-configure/"/>
      <url>/2017/10/25/Nginx-configure/</url>
      <content type="html"><![CDATA[<h3 id="配置文件组成部分"><a href="#配置文件组成部分" class="headerlink" title="配置文件组成部分"></a>配置文件组成部分</h3><ul><li>主配置文件： nginx.conf<ul><li>子配置文件 include conf.d/*.conf</li></ul></li><li>fastcgi， uwsgi， scgi等协议相关的配置文件</li><li>mime.types：支持的mime类型</li></ul><a id="more"></a><h4 id="主配置文件的配置指令"><a href="#主配置文件的配置指令" class="headerlink" title="主配置文件的配置指令"></a>主配置文件的配置指令</h4><p><code>directive value [value2 ...];</code>     (directive：指令)</p><ul><li>注意：</li></ul><ol><li>指令必须以分号结尾</li><li>支持使用配置变量<ul><li>自建变量：由Nginx模块引入，可直接引用</li><li>自定义变量：由用户使用set命令定义<ul><li><code>set variable_name value;</code></li></ul></li><li>引用变量：<code>$variable_name</code></li></ul></li></ol><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">main block：主配置段，即全局配置段，对http,mail都有效</span><br><span class="line">    event &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; 事件驱动相关的配置</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; http/https 协议相关配置段</span><br><span class="line"></span><br><span class="line">mail &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; mail 协议相关配置段</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; stream 服务器相关配置段</span><br></pre></td></tr></table></figure><h4 id="http协议相关的配置结构"><a href="#http协议相关的配置结构" class="headerlink" title="http协议相关的配置结构"></a>http协议相关的配置结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    ... 各server的公共配置</span><br><span class="line">    server &#123; 每个server用于定义一个虚拟主机</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        server_name 虚拟主机名</span><br><span class="line">        root 主目录</span><br><span class="line">        alias 路径别名</span><br><span class="line">        location [OPERATOR] URL &#123; 指定URL的特性</span><br><span class="line">            ...</span><br><span class="line">            if CONDITION &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx全局配置分类："><a href="#Nginx全局配置分类：" class="headerlink" title="Nginx全局配置分类："></a>Nginx全局配置分类：</h3><p><strong>Main全局配置段常见的配置指令分类：</strong></p><ul><li>正常运行必备的配置</li><li>优化性能相关的配置</li><li>用于调试及定位问题相关的配置</li><li>事件驱动相关的配置</li><li>帮助文档<ul><li><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></li></ul></li></ul><h3 id="Nginx全局配置main：正常运行必备的配置"><a href="#Nginx全局配置main：正常运行必备的配置" class="headerlink" title="Nginx全局配置main：正常运行必备的配置"></a>Nginx全局配置main：正常运行必备的配置</h3><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html" target="_blank" rel="noopener">帮助文档：http://nginx.org/en/docs/http/ngx_http_core_module.html</a></p><h4 id="1-user"><a href="#1-user" class="headerlink" title="1. user"></a>1. user</h4><p><a href="http://nginx.org/en/docs/ngx_core_module.html#user" target="_blank" rel="noopener">官网帮助：http://nginx.org/en/docs/ngx_core_module.html#user</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">官网帮助：如下</span><br><span class="line">Syntax:user user [group];</span><br><span class="line">Default:</span><br><span class="line">user nobody nobody;</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>指定worker进程的运行身份，如组不指定，默认和用户名同名</p><h4 id="2-pid-PATH-TO-PID-FILE"><a href="#2-pid-PATH-TO-PID-FILE" class="headerlink" title="2. pid /PATH/TO/PID_FILE"></a>2. pid /PATH/TO/PID_FILE</h4><p>指定存储nginx主进程PID的文件路径</p><p>yum安装默认的PID文件路径为：<code>pid /run/nginx.pid;</code></p><h5 id="查看PID文件"><a href="#查看PID文件" class="headerlink" title="查看PID文件"></a>查看PID文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# ss -tnul      # 端口已经打开</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              </span><br><span class="line">udp   UNCONN     0      0          127.0.0.1:323                            *:*                  </span><br><span class="line">tcp   LISTEN     0      128                *:80                             *:*                  </span><br><span class="line">tcp   LISTEN     0      128               :::80                            :::*                  </span><br><span class="line">tcp   LISTEN     0      128               :::22                            :::*                  </span><br><span class="line">[root@centos7 ~]# cat  /run/nginx.pid </span><br><span class="line">11278</span><br><span class="line">[root@centos7 ~]# ps -ef | grep nginx       # 主进程的PID为11278</span><br><span class="line">root      11253   1431  0 22:43 pts/0    00:00:00 vim /etc/nginx/nginx.conf</span><br><span class="line">root      11278      1  0 22:45 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx     11279  11278  0 22:45 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11280  11278  0 22:45 ?        00:00:00 nginx: worker process</span><br><span class="line">root      11292  11257  0 22:46 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-include-file-mask"><a href="#3-include-file-mask" class="headerlink" title="3. include file | mask"></a>3. include file | mask</h4><p><a href="http://nginx.org/en/docs/ngx_core_module.html#include" target="_blank" rel="noopener">官网帮助：http://nginx.org/en/docs/ngx_core_module.html#include</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:include file | mask;</span><br><span class="line">Default:—</span><br><span class="line">Context:any</span><br></pre></td></tr></table></figure></p><p>指明包含进来的其它配置文件片断</p><h5 id="指定绝对路径"><a href="#指定绝对路径" class="headerlink" title="指定绝对路径"></a>指定绝对路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">include /usr/share/nginx/modules/*.conf;        # 此处就是一个绝对路径</span><br></pre></td></tr></table></figure><h5 id="指定相对路径"><a href="#指定相对路径" class="headerlink" title="指定相对路径"></a>指定相对路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf</span><br><span class="line">include vhost/a.conf;           # 此处就是一个绝对路径，这个相对路径是不存在的</span><br><span class="line">[root@centos7 ~]# nginx -t      # 检查配置文件，提示我们配置文件不存在，需要创建，由此我们知道了，nginx是以/etc/nginx/这个目录下作为相对路径的开始</span><br><span class="line">nginx: [emerg] open() &quot;/etc/nginx/vhost/a.conf&quot; failed (2: No such file or directory) in /etc/nginx/nginx.conf:12</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test failed</span><br></pre></td></tr></table></figure><h5 id="相对路径的路径"><a href="#相对路径的路径" class="headerlink" title="相对路径的路径"></a>相对路径的路径</h5><p>yum安装的相对路径的路径为：<code>/etc/nginx/</code></p><h4 id="4-load-module-file"><a href="#4-load-module-file" class="headerlink" title="4. load_module file"></a>4. load_module file</h4><ul><li>模块加载配置文件： <code>/usr/share/nginx/modules/*.conf</code></li><li>指明要装载的动态模块路径: <code>/usr/lib64/nginx/modules</code></li></ul><h5 id="查看-usr-share-nginx-modules下的配置文件"><a href="#查看-usr-share-nginx-modules下的配置文件" class="headerlink" title="查看/usr/share/nginx/modules下的配置文件"></a>查看/usr/share/nginx/modules下的配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 nginx]# ls /usr/share/nginx/modules       # 查看/usr/share/nginx/modules下的配置文件</span><br><span class="line">mod-http-geoip.conf         mod-http-perl.conf         mod-mail.conf</span><br><span class="line">mod-http-image-filter.conf  mod-http-xslt-filter.conf  mod-stream.conf</span><br><span class="line"></span><br><span class="line">[root@centos7 nginx]# cat /usr/share/nginx/modules/mod-mail.conf        # 随便查看一个配置文件，加载了一个模块</span><br><span class="line">load_module &quot;/usr/lib64/nginx/modules/ngx_mail_module.so&quot;;</span><br></pre></td></tr></table></figure><h3 id="Nginx全局配置main：性能优化相关的配置："><a href="#Nginx全局配置main：性能优化相关的配置：" class="headerlink" title="Nginx全局配置main：性能优化相关的配置："></a>Nginx全局配置main：性能优化相关的配置：</h3><h4 id="1-worker-processes-number-auto"><a href="#1-worker-processes-number-auto" class="headerlink" title="1.  worker_processes number | auto"></a>1.  worker_processes number | auto</h4><p><a href="http://nginx.org/en/docs/ngx_core_module.html#worker_processes" target="_blank" rel="noopener">官网帮助：http://nginx.org/en/docs/ngx_core_module.html#worker_processes</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[link](http://note.youdao.com/)</span><br><span class="line">Syntax:worker_processes number | auto;</span><br><span class="line">Default:</span><br><span class="line">worker_processes 1;</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>worker进程的数量；通常应该为当前主机的cpu的物理核心数</p><h5 id="查看当前主机CPU的物理核心数"><a href="#查看当前主机CPU的物理核心数" class="headerlink" title="查看当前主机CPU的物理核心数"></a>查看当前主机CPU的物理核心数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# lscpu | grep &quot;^CPU(s)&quot;</span><br><span class="line">CPU(s):                2</span><br></pre></td></tr></table></figure><h5 id="配置worker-processes-number"><a href="#配置worker-processes-number" class="headerlink" title="配置worker_processes number"></a>配置worker_processes number</h5><ul><li>官网对<code>worker_processes</code> 给出的解释如下：<ul><li><code>最优值取决于许多因素，包括（但不限于）CPU内核数，存储数据的硬盘驱动器数量以及加载模式。当有疑问时，将其设置为可用CPU内核的数量将是一个好的开始（值“ auto”将尝试自动检测它）。</code></li><li>worker进程的数量；通常应该为当前主机的cpu的物理核心数</li></ul></li></ul><p><strong>注意</strong>：下面的实验仅用于实验，具体还得根据情况而定哦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# !lscpu        # 查看当前主机CPU的物理核心数</span><br><span class="line">lscpu | grep &quot;^CPU(s)&quot;</span><br><span class="line">CPU(s):                2</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 我们故意将值调大，用于测试哦</span><br><span class="line">worker_processes 4;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# nginx -s stop         </span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# !ps       # 查看进程开启数量已经开启4个进程</span><br><span class="line">ps -ef | grep nginx</span><br><span class="line">root      11253   1431  0 22:43 pts/0    00:00:00 vim /etc/nginx/nginx.conf</span><br><span class="line">root      11412      1  0 23:24 ?        00:00:00 nginx: master process nginx</span><br><span class="line">nginx     11413  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11414  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11415  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx     11416  11412  0 23:24 ?        00:00:00 nginx: worker process</span><br><span class="line">root      11418  11257  0 23:24 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="2-worker-cpu-affinity-cpumask-…"><a href="#2-worker-cpu-affinity-cpumask-…" class="headerlink" title="2. worker_cpu_affinity cpumask …"></a>2. worker_cpu_affinity cpumask …</h4><p>官网帮助：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_cpu_affinity cpumask ...;</span><br><span class="line">worker_cpu_affinity auto [cpumask];</span><br><span class="line">Default:—</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>将工作流程绑定到一组CPU。每个CPU组由允许的CPU的位掩码表示。应为每个工作进程定义一个单独的集合。默认情况下，工作进程没有绑定到任何特定的CPU。</p><h4 id="CPU-MASK"><a href="#CPU-MASK" class="headerlink" title="CPU MASK"></a>CPU MASK</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CPU MASK： </span><br><span class="line">00000001： 0号CPU</span><br><span class="line">00000010： 1号CPU</span><br><span class="line">00000100： 2号CPU</span><br><span class="line">10000000： 8号CPU</span><br><span class="line">那么n号CPU就是，n后面跟n-1个0</span><br></pre></td></tr></table></figure><h4 id="将workeri进程绑定CPU"><a href="#将workeri进程绑定CPU" class="headerlink" title="将workeri进程绑定CPU"></a>将workeri进程绑定CPU</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">worker_cpu_affinity auto [cpumask] 提高缓存命中率</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000;        # 将进程绑定到0号，1号，2号，3号CPU上面</span><br><span class="line">worker_cpu_affinity 0101 1010;          # 将进程绑定到0号和2号 2号和4号CPU上面；</span><br></pre></td></tr></table></figure><h4 id="3-worker-priority-number"><a href="#3-worker-priority-number" class="headerlink" title="3. worker_priority number"></a>3. worker_priority number</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_priority number;</span><br><span class="line">Default:</span><br><span class="line">worker_priority 0;</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>指定worker进程的nice值，设定worker进程优先级： [-20,20]；数越小代表者优先级越高。</p><h5 id="修改worker-priority"><a href="#修改worker-priority" class="headerlink" title="修改worker_priority"></a>修改worker_priority</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">worker_priority -10;</span><br></pre></td></tr></table></figure><h4 id="4-worker-rlimit-nofile-number"><a href="#4-worker-rlimit-nofile-number" class="headerlink" title="4. worker_rlimit_nofile number"></a>4. worker_rlimit_nofile number</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_rlimit_nofile number;</span><br><span class="line">Default:—</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure></p><p>worker进程所能够打开的文件数量上限,如65535</p><p>变化对打开文件的最大数量的限制（rlimit_nofile）工作流程。用来增加限制而无需重新启动的主要过程。</p><h5 id="修改worker-rlimit-nofile-number"><a href="#修改worker-rlimit-nofile-number" class="headerlink" title="修改worker_rlimit_nofile number"></a>修改worker_rlimit_nofile number</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure><h3 id="Nginx事件驱动相关的配置"><a href="#Nginx事件驱动相关的配置" class="headerlink" title="Nginx事件驱动相关的配置"></a>Nginx事件驱动相关的配置</h3><h4 id="1-worker-connections-number"><a href="#1-worker-connections-number" class="headerlink" title="1. worker_connections number"></a>1. worker_connections number</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:worker_connections number;</span><br><span class="line">Default:</span><br><span class="line">worker_connections 512;</span><br><span class="line">Context:events</span><br></pre></td></tr></table></figure></p><p>每个worker进程所能够打开的最大并发连接数数量，如10240</p><p>总最大并发数： worker_processes * worker_connections</p><h5 id="将worker-connections-number调大"><a href="#将worker-connections-number调大" class="headerlink" title="将worker_connections number调大"></a>将worker_connections number调大</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件，将值调为102400</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-use-method"><a href="#2-use-method" class="headerlink" title="2. use method"></a>2. use method</h4><p>指明并发连接请求的处理方法,默认自动选择最优方法<br><code>use epoll;</code></p><h5 id="将并发连接请求的处理方法调为epoll"><a href="#将并发连接请求的处理方法调为epoll" class="headerlink" title="将并发连接请求的处理方法调为epoll"></a>将并发连接请求的处理方法调为epoll</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-accept-mutex-on-off-互斥"><a href="#3-accept-mutex-on-off-互斥" class="headerlink" title="3. accept_mutex on | off 互斥"></a>3. accept_mutex on | off 互斥</h4><p><strong>官网帮助：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:accept_mutex on | off;</span><br><span class="line">Default:</span><br><span class="line">accept_mutex off;</span><br><span class="line">Context:events</span><br></pre></td></tr></table></figure></p><p>处理新的连接请求的方法； on指由各个worker轮流处理新请求，Off指每个新请求的到达都会通知(唤醒)所有的worker进程，但只有一个进程可获得连接，造成“惊群”，影响性能，默认on</p><h5 id="启用accept-mutex"><a href="#启用accept-mutex" class="headerlink" title="启用accept_mutex"></a>启用accept_mutex</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240;</span><br><span class="line">    use epoll;</span><br><span class="line">    accept_mutex on ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx：调试和定位问题"><a href="#Nginx：调试和定位问题" class="headerlink" title="Nginx：调试和定位问题"></a>Nginx：调试和定位问题</h3><h4 id="1-daemon-on-off"><a href="#1-daemon-on-off" class="headerlink" title="1. daemon on|off"></a>1. daemon on|off</h4><p>是否以守护进程方式运行nignx，默认是守护进程方式</p><h4 id="修改为非守护进程运行nginx"><a href="#修改为非守护进程运行nginx" class="headerlink" title="修改为非守护进程运行nginx"></a>修改为非守护进程运行nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">daemon off ;</span><br><span class="line">[root@centos7 ~]# nginx -s stop</span><br><span class="line">[root@centos7 ~]# nginx         # 启动nginx就在前台运行了</span><br><span class="line"></span><br><span class="line">^C[root@centos7 ~]#             # Ctrl+C就停止了</span><br></pre></td></tr></table></figure><h4 id="2-master-process-on-off"><a href="#2-master-process-on-off" class="headerlink" title="2. master_process on|off"></a>2. master_process on|off</h4><p>是否以master/worker模型运行nginx；默认为on，off 将不启动worker</p><h5 id="修改nginx不以master-worker模型启动"><a href="#修改nginx不以master-worker模型启动" class="headerlink" title="修改nginx不以master/worker模型启动"></a>修改nginx不以master/worker模型启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">master_process off ;</span><br><span class="line">[root@centos7 ~]# nginx             # 只启动了master进程</span><br><span class="line">[root@centos7 ~]# ps -ef | grep nginx</span><br><span class="line">root       2117   2077  0 08:47 pts/0    00:00:00 vim /etc/nginx/nginx.conf</span><br><span class="line">root       2390      1  0 09:42 ?        00:00:00 nginx</span><br><span class="line">root       2392   2120  0 09:43 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-error-log-file-level"><a href="#3-error-log-file-level" class="headerlink" title="3. error_log file [level]"></a>3. error_log file [level]</h4><p>错误日志文件及其级别；出于调试需要， 可设定为debug；但debug仅在编译时使用了“–with-debug”选项时才有效<br>方式： file /path/logfile;</p><ul><li><p>stderr:发送到标准错误</p><ul><li>syslog:server-address[,parameter=values]:发送到syslog</li></ul></li><li><p>memory:size 内存</p><ul><li>level:debug|info|notice|warn|error|crit|alter|emerg</li></ul></li></ul><h5 id="将日志级别调为debug"><a href="#将日志级别调为debug" class="headerlink" title="将日志级别调为debug"></a>将日志级别调为debug</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# vim /etc/nginx/nginx.conf         # 修改配置文件</span><br><span class="line">error_log /var/log/nginx/error.log debug ;</span><br><span class="line">[root@centos7 ~]# nginx -s stop </span><br><span class="line">[root@centos7 ~]# nginx </span><br><span class="line">[root@centos7 ~]# tail /var/log/nginx/error.log </span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246F24010, unused: 1</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246F25020, unused: 3068</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 close http connection: 13</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 event timer del: 13: 1508896505040</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 reusable connection: 0</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246E759D0</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: *2002 free: 00007F5246EB3040, unused: 128</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: timer delta: 1</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: worker cycle</span><br><span class="line">2017/10/25 09:55:00 [debug] 2398#0: epoll timer: -1</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Nginx </category>
          
          <category> Nginx配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx配置文件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LVS调度算法</title>
      <link href="/2017/10/21/Linux-LVS-suanfa/"/>
      <url>/2017/10/21/Linux-LVS-suanfa/</url>
      <content type="html"><![CDATA[<h3 id="LVS的调度算法分为静态与动态两类："><a href="#LVS的调度算法分为静态与动态两类：" class="headerlink" title="LVS的调度算法分为静态与动态两类："></a>LVS的调度算法分为静态与动态两类：</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-suanfa-1.jpg" title="LVS调度算法"></center><a id="more"></a><h4 id="1-静态算法（4种）：只根据算法进行调度-而不考虑后端服务器的实际连接情况和负载情况"><a href="#1-静态算法（4种）：只根据算法进行调度-而不考虑后端服务器的实际连接情况和负载情况" class="headerlink" title="1.静态算法（4种）：只根据算法进行调度 而不考虑后端服务器的实际连接情况和负载情况"></a>1.静态算法（4种）：只根据算法进行调度 而不考虑后端服务器的实际连接情况和负载情况</h4><blockquote><p>①.RR：轮叫调度（Round Robin）<br>　 调度器通过”轮叫”调度算法将外部请求按顺序轮流分配到集群中的真实服务器上，它均等地对待每一台服务器，而不管服务器上实际的连接数和系统负载｡</p><p>②.WRR：加权轮叫（Weight RR）<br>　 调度器通过“加权轮叫”调度算法根据真实服务器的不同处理能力来调度访问请求。这样可以保证处理能力强的服务器处理更多的访问流量。调度器可以自动问询真实服务器的负载情况,并动态地调整其权值。</p><p>③.DH：目标地址散列调度（Destination Hash ）<br>　 根据请求的目标IP地址，作为散列键(HashKey)从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。</p><p>④.SH：源地址 hash（Source Hash）<br>　 源地址散列”调度算法根据请求的源IP地址，作为散列键(HashKey)从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空｡</p></blockquote><h4 id="2-动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求"><a href="#2-动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求" class="headerlink" title="2.动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求"></a>2.动态算法（6种）：前端的调度器会根据后端真实服务器的实际连接情况来分配请求</h4><blockquote><p>①.LC：最少链接（Least Connections）<br>　 调度器通过”最少连接”调度算法动态地将网络请求调度到已建立的链接数最少的服务器上。如果集群系统的真实服务器具有相近的系统性能，采用”最小连接”调度算法可以较好地均衡负载。</p><p>②.WLC：加权最少连接(默认采用的就是这种)（Weighted Least Connections）<br>　 在集群系统中的服务器性能差异较大的情况下，调度器采用“加权最少链接”调度算法优化负载均衡性能，具有较高权值的服务器将承受较大比例的活动连接负载｡调度器可以自动问询真实服务器的负载情况,并动态地调整其权值。</p><p>③.SED：最短延迟调度（Shortest Expected Delay ）<br>　 在WLC基础上改进，Overhead = （ACTIVE+1）*256/加权，不再考虑非活动状态，把当前处于活动状态的数目+1来实现，数目最小的，接受下次请求，+1的目的是为了考虑加权的时候，非活动连接过多缺陷：当权限过大的时候，会倒置空闲服务器一直处于无连接状态。</p><p>④.NQ永不排队/最少队列调度（Never Queue Scheduling NQ）<br>　 无需队列。如果有台 realserver的连接数＝0就直接分配过去，不需要再进行sed运算，保证不会有一个主机很空间。在SED基础上无论+几，第二次一定给下一个，保证不会有一个主机不会很空闲着，不考虑非活动连接，才用NQ，SED要考虑活动状态连接，对于DNS的UDP不需要考虑非活动连接，而httpd的处于保持状态的服务就需要考虑非活动连接给服务器的压力。</p><p>⑤.LBLC：基于局部性的最少链接（locality-Based Least Connections）<br>　 基于局部性的最少链接”调度算法是针对目标IP地址的负载均衡，目前主要用于Cache集群系统｡该算法根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器;若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则用“最少链接”的原则选出一个可用的服务器，将请求发送到该服务器｡</p><p>⑥. LBLCR：带复制的基于局部性最少连接（Locality-Based Least Connections with Replication）<br>　 带复制的基于局部性最少链接”调度算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统｡它与LBLC算法的不同之处是它要维护从一个目标IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射｡该算法根据请求的目标IP地址找出该目标IP地址对应的服务器组，按”最小连接”原则从服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按“最小连接”原则从这个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器｡同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p></blockquote><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.178linux.com/13570" target="_blank" rel="noopener">本文来自：Linux运维部落-LVS原理详解</a></p>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> LVS调度算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS调度算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LVS负载均衡技术</title>
      <link href="/2017/10/21/Linux-LVS/"/>
      <url>/2017/10/21/Linux-LVS/</url>
      <content type="html"><![CDATA[<h3 id="LVS-集群的通用结构"><a href="#LVS-集群的通用结构" class="headerlink" title="LVS 集群的通用结构"></a>LVS 集群的通用结构</h3><p><code>LVS</code>集群采用 <code>IP</code> 负载均衡技术，属于 <code>IP</code> 层的交换（<code>L4</code>） , 具有很好的吞吐率。调度器分析客户端到服务器的 <code>IP</code> 报头信息， 将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器， <code>LVS</code> 集群系统的通用结构如图所示， 主要包含四大部分：</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-1.jpg" title="LVS 集群的通用结构"></center><p><strong>负载调度器</strong>（<code>load balancer</code>），它是整个集群对外面的前端机，负责将客户的请求发送到一组服务器上执行，而客户认为服务是来自一个 <code>IP</code> 地址上的。当客户请求到达时，调度器只根据负载情况从服务器池中选出一个服务器，将该请求转发到选出的服务器，并记录这个调度；当这个请求的其他报文到达，也会被转发到前面选出的服务器。因为所有的操作都是在操作系统核心空间中将完成的，它的调度开销很小，所以具有很高的吞吐率</p><p><strong>服务器池</strong>（<code>server pool</code>），是一组真正执行客户请求的服务器，执行的任务有<code>WEB</code>、 <code>MAIL</code>、 <code>FTP</code> 和 <code>DNS</code> 等。服务器池的结点数目是可变的， 当整个系统收到的负载超过目前所有结点的处理能力时，可以在服务器池中增加服务器来满足不断增长的请求负载。对大多数网络服务来说，结点与结点间不存在很强的相关性，所以整个系统的性能可以随着服务器池的结点数目增加而线性增长</p><p><strong>后端存储</strong>（<code>backend storage</code>），它为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相同的内容，提供相同的服务。</p><p><strong><code>Graphic Monitor</code></strong> 是为系统管理员提供整个集群系统的监视器，它可以监视系统中每个结点的状况。</p><h3 id="IP-负载均衡技术"><a href="#IP-负载均衡技术" class="headerlink" title="IP 负载均衡技术"></a>IP 负载均衡技术</h3><p>在已有的 <code>IP</code> 负载均衡技术中有三种（据说还有第四种<code>lvs-fullnat</code>，本文中不会涉及），一是通过网络地址转换实现虚拟服务器的 <code>VS/NAT</code> 技术（<code>Virtual Server via Network Address Translation</code>）， 二是通过直接路由的 <code>VS/DR</code> 技术（<code>Virtual Server via Direct Routing</code>），三是通过 <code>IP</code> 隧道实现虚拟服务器的 <code>VS/TUN</code> 技术（<code>Virtual Server via IP Tunneling</code>）。</p><h3 id="通过NAT实现虚拟服务器（VS-NAT）"><a href="#通过NAT实现虚拟服务器（VS-NAT）" class="headerlink" title="通过NAT实现虚拟服务器（VS/NAT）"></a>通过NAT实现虚拟服务器（VS/NAT）</h3><p><code>VS/NAT</code> 的体系结构如下图所示， 在一组服务器前有一个调度器，它们是通过 Switch 相连接的。这些服务器提供相同的网络服务、相同的内容，即不管请求被发送到哪一台服务器，执行结果是一样的。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-2.jpg" title="VS/NAT 的体系结构"></center><h4 id="通过如下的VS-NAT配置为例，来了解报文的结构："><a href="#通过如下的VS-NAT配置为例，来了解报文的结构：" class="headerlink" title="通过如下的VS/NAT配置为例，来了解报文的结构："></a>通过如下的VS/NAT配置为例，来了解报文的结构：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-3.jpg" title="报文的结构"></center><h3 id="通过直接路由实现虚拟服务器（VS-DR）"><a href="#通过直接路由实现虚拟服务器（VS-DR）" class="headerlink" title="通过直接路由实现虚拟服务器（VS/DR）"></a>通过直接路由实现虚拟服务器（VS/DR）</h3><p>在 <code>VS/NAT</code> 的集群系统中，请求和响应的数据报文都需要通过负载调度器，当真实服务器的数目在 10 台和 20 台之间时，负载调度器将成为整个集群系统的新瓶颈。大多数 <code>Internet</code> 服务都有这样的特点：请求报文较短而响应报文往往含大量的数据。如果能将请求和响应分开处理，即在负载调度器中只负责调度请求而响应直接返回给客户，将极大地提高整个集群系统的吞吐量。 <code>VS/DR</code> 的体系结构如下图所示：调度器和服务器组都必须在物理上有一个网卡通过不分断的局域相连，如通过交换机或者高速的 HUB 相连。 <code>VIP</code> 地址为调度器和服务器组共享，调度器配置的 <code>VIP</code> 地址是对外可见的，用于接收虚拟服务的请求报文；所有的服务器把 <code>VIP</code> 地址配置在各自的 <code>Non-ARP</code> 网络设备上，它对外面是不可见的，只是用于处理目标地址为 <code>VIP</code> 的网络请求。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-4.jpg" title="通过直接路由实现虚拟服务器（VS/DR）"></center><h4 id="通过如下的VS-DR配置为例，来了解报文的结构："><a href="#通过如下的VS-DR配置为例，来了解报文的结构：" class="headerlink" title="通过如下的VS/DR配置为例，来了解报文的结构："></a>通过如下的VS/DR配置为例，来了解报文的结构：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-5.jpg" title="VS/DR配置"></center><h3 id="通过-IP-隧道实现虚拟服务器（VS-TUN）"><a href="#通过-IP-隧道实现虚拟服务器（VS-TUN）" class="headerlink" title="通过 IP 隧道实现虚拟服务器（VS/TUN）"></a>通过 IP 隧道实现虚拟服务器（VS/TUN）</h3><p>跟 <code>VS/DR</code> 方法相同， <code>VS/TUN</code> 多数 <code>Internet</code> 服务的非对称特点，负载调度器中只负责调度请求，而服务器直接将响应返回给客户，可以极大地提高整个集群系统的吞吐量。 <code>IP</code> 隧道（<code>IP tunneling</code>）是将一个 <code>IP</code> 报文封装在另一个 <code>IP</code>报文的技术，这可以使得目标为一个 IP 地址的数据报文能被封装和转发到另一个<code>IP</code> 地址。我们利用 <code>IP</code> 隧道技术将请求报文封装转发给后端服务器，响应报文能从后端服务器直接返回给客户。但在这里，后端服务器有一组而非一个，所以我们不可能静态地建立一一对应的隧道，而是动态地选择一台服务器，将请求报文封装和转发给选出的服务器。这样，我们可以利用 <code>IP</code> 隧道的原理将一组服务器上的网络服务组成在一个 <code>IP</code> 地址上的虚拟网络服务。 <code>VS/TUN</code> 的体系结构如图 3.3 所示，各个服务器将 <code>VIP</code> 地址配置在自己的 <code>IP</code> 隧道设备上。 <code>VS/TUN</code> 的体系结构如图 1.7 所示</p><center><img src="https://houhaiyun.github.io/img/images/Linux-LVS-6.jpg" title="通过 IP 隧道实现虚拟服务器（VS/TUN）"></center><h3 id="三种IP负载均衡技术比较"><a href="#三种IP负载均衡技术比较" class="headerlink" title="三种IP负载均衡技术比较"></a>三种IP负载均衡技术比较</h3><p>三种 IP 负载均衡技术的优缺点归纳在下表中：</p><table><thead><tr><th></th><th>VS/NAT</th><th>VS/DR</th><th>VS/TUN</th></tr></thead><tbody><tr><td>Server</td><td>any</td><td>Non-arp device</td><td>Tunneling</td></tr><tr><td>server network</td><td>private</td><td>LAN</td><td>LAN/WAN</td></tr><tr><td>server number</td><td>low (10~20)</td><td>High (100)</td><td>High (100)</td></tr><tr><td>server gateway</td><td>load balancer</td><td>Own router</td><td>own route</td></tr></tbody></table><p><code>VS/NAT</code> 的<strong>优点</strong>是服务器可以运行任何支持 <code>TCP/IP</code> 的操作系统，它只需要一个 <code>IP</code> 地址配置在调度器上，服务器组可以用私有的 <code>IP</code> 地址。<strong>缺点</strong>是它的伸缩能力有限，当服务器结点数目升到 20 时，调度器本身有可能成为系统的新瓶颈，因为在 <code>VS/NAT</code> 中请求和响应报文都需要通过负载调度器。</p><p><code>VS/DR</code> <strong>优点</strong>是负载调度器可以处理大量的请求， 因为调度器只处理客户到服务器端的连接，响应数据可以直接从独立的网络路由返回给客户， 这可以极大地提高 <code>LVS</code> 集群系统的伸缩性。 <strong>缺点</strong>是要求负载调度器与实际服务器都有块网卡连在同一物理网段上，服务器网络设备（或者设备别名）不作 <code>ARP</code> 响，或者能将报文重定向（<code>Redirec</code>）到本地的 <code>Socket</code> 端口上。</p><p><code>VS/TUN</code> 的<strong>优点</strong>是负载调度器可以处理大量的请求，它甚至可以调度百台以上的服务器（同等规模的服务器），而它不会成为系统的瓶颈，因为负载调度器只请求调度到不同的后端服务器，后端服务器将应答的数据直接返回给用户。<strong>缺点</strong>是 <code>VS/TUN</code> 技术有 <code>IP</code> 隧道的开销并且对服务器有要求，即所有的服务器必须支持“<code>IP Tunneling</code>”或者“<code>IP Encapsulation</code>”协议。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://www.linuxvirtualserver.org/" target="_blank" rel="noopener">本文多数内容来自：LVS 官方站点</a></p>]]></content>
      
      <categories>
          
          <category> 负载均衡 </category>
          
          <category> LVS负载均衡技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS负载均衡技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SNAT与DNAT</title>
      <link href="/2017/10/21/Linux-iptables-SNAT/"/>
      <url>/2017/10/21/Linux-iptables-SNAT/</url>
      <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-iptables-SNAT-1.jpg" title="拓扑图"></center><a id="more"></a><h4 id="局域网主机"><a href="#局域网主机" class="headerlink" title="局域网主机"></a>局域网主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@LAN-host ~]# ifconfig eth1            # 查看IP</span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:DE:D2:8C  </span><br><span class="line">          inet addr:192.168.8.128  Bcast:192.168.8.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fede:d28c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:154351 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9823 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:220149822 (209.9 MiB)  TX bytes:959486 (936.9 KiB)</span><br><span class="line">[root@LAN-host ~]# ip route             # 查看路由，配置SNAT、DNAT都需要将忘光指向192.168.8.140</span><br><span class="line">192.168.8.0/24 dev eth1  proto kernel  scope link  src 192.168.8.128 </span><br><span class="line">169.254.0.0/16 dev eth1  scope link  metric 1003 </span><br><span class="line">default via 192.168.8.140 dev eth1</span><br></pre></td></tr></table></figure><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@Firewalld ~]# ifconfig        # 查看IP</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.251.146  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        inet6 fe80::250:56ff:fe34:70b8  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:34:70:b8  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 106496  bytes 8353964 (7.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 493  bytes 42866 (41.8 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.140  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::250:56ff:fe37:a834  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:37:a8:34  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4622  bytes 397342 (388.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2833  bytes 324367 (316.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 68  bytes 5876 (5.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 68  bytes 5876 (5.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# echo 1 &gt; /proc/sys/net/ipv4/ip_forward          # 开启防火墙的路由功能</span><br><span class="line">[root@Firewalld ~]# cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="互联网主机"><a href="#互联网主机" class="headerlink" title="互联网主机"></a>互联网主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@WAN-host ~]# ifconfig ens33           # 查看IP</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.252.112  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        inet6 fe80::20c:29ff:feba:242e  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:ba:24:2e  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 301840  bytes 27336566 (26.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3790  bytes 497705 (486.0 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">[root@WAN-host ~]# ping 192.168.8.128 -c 1          # 在互联网主机是无法ping通局域网主机的</span><br><span class="line">PING 192.168.8.128 (192.168.8.128) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">--- 192.168.8.128 ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, 100% packet loss, time 0ms</span><br></pre></td></tr></table></figure><h3 id="SNAT策略"><a href="#SNAT策略" class="headerlink" title="SNAT策略"></a>SNAT策略</h3><h4 id="SNAT工作原理"><a href="#SNAT工作原理" class="headerlink" title="SNAT工作原理"></a>SNAT工作原理</h4><p><code>SNAT</code>：<strong>将请求报文的源地址替换为防火墙所定义的源地址。</strong></p><center><img src="https://houhaiyun.github.io/img/images/Linux-iptables-SNAT-2.jpg" title="SNAT工作原理"></center><h4 id="配置SNAT"><a href="#配置SNAT" class="headerlink" title="配置SNAT"></a>配置SNAT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 访问互联网80端口时，将源IP转换为防火墙的IP</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A POSTROUTING -s 192.168.8.0/24 -j SNAT --to-source 172.18.251.146</span><br><span class="line">        # 定义规则：将192.168.8.0网段访问外部IP时，转换为172.18.251.146</span><br><span class="line">[root@Firewalld ~]# iptables -vnL POSTROUTING -t nat </span><br><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    1    84 SNAT       all  --  *      *       192.168.8.0/24       0.0.0.0/0            to:172.18.251.146</span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# ping -c 2 172.18.252.112         # 在内网主机ping互联网主机，是可以ping通的</span><br><span class="line">PING 172.18.252.112 (172.18.252.112) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.252.112: icmp_seq=1 ttl=63 time=0.596 ms</span><br><span class="line">64 bytes from 172.18.252.112: icmp_seq=2 ttl=63 time=1.31 ms</span><br><span class="line"></span><br><span class="line">--- 172.18.252.112 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1005ms</span><br><span class="line">rtt min/avg/max/mdev = 0.596/0.955/1.314/0.359 ms</span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# tcpdump -i ens33 icmp -nn        # 通过tcpdump抓包查看，可以看到是172.18.251.146去ping172.18.252.112的</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on ens33, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">22:45:17.891996 IP 172.18.251.146 &gt; 172.18.252.112: ICMP echo request, id 20754, seq 1, length 64</span><br><span class="line">22:45:17.892047 IP 172.18.252.112 &gt; 172.18.251.146: ICMP echo reply, id 20754, seq 1, length 64</span><br><span class="line">22:45:18.894542 IP 172.18.251.146 &gt; 172.18.252.112: ICMP echo request, id 20754, seq 2, length 64</span><br><span class="line">22:45:18.894586 IP 172.18.252.112 &gt; 172.18.251.146: ICMP echo reply, id 20754, seq 2, length 64</span><br><span class="line">^C</span><br><span class="line">4 packets captured</span><br><span class="line">4 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# curl 172.18.252.112</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# tail -1 /var/log/httpd/access_log       # 查看http服务访问日志，可以看到是172.18.251.146去访问172.18.252.112的 </span><br><span class="line">172.18.251.146 - - [20/Oct/2017:22:47:14 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;</span><br></pre></td></tr></table></figure><h3 id="拨号SNAT策略"><a href="#拨号SNAT策略" class="headerlink" title="拨号SNAT策略"></a>拨号SNAT策略</h3><p><strong>拨号SNAT策略主要是为了解决通过拨号上网IP地址不固定的状况。拨号SNAT的效率没有固定IP SNAT策略效率高。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 访问互联网80端口时，将源IP转换为防火墙的IP</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A POSTROUTING -s 192.168.8.0/24 -j MASQUERADE      # 修改后面为MASQUERADE策略，解决了拨号上网IP不固定的情况</span><br><span class="line">[root@Firewalld ~]# iptables -vnL POSTROUTING -t nat        # 查看nat表</span><br><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 MASQUERADE  all  --  *      *       192.168.8.0/24       0.0.0.0/0        </span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# curl 172.18.252.112      # 在局域网主机访问测试</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# tail -1 /var/log/httpd/access_log            # 查看日志</span><br><span class="line">172.18.251.146 - - [20/Oct/2017:23:04:32 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2&quot;</span><br></pre></td></tr></table></figure><h3 id="DNAT策略"><a href="#DNAT策略" class="headerlink" title="DNAT策略"></a>DNAT策略</h3><h4 id="DNAT工作原理"><a href="#DNAT工作原理" class="headerlink" title="DNAT工作原理"></a>DNAT工作原理</h4><p><code>DNAT</code>：<strong>将请求报文的目标地址替换为防火墙所定义的目标地址。</strong></p><center><img src="https://houhaiyun.github.io/img/images/Linux-iptables-SNAT-3.jpg" title="DNAT工作原理"></center><h4 id="配置DNAT"><a href="#配置DNAT" class="headerlink" title="配置DNAT"></a>配置DNAT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 将访问防火墙的80端口转发到局域网的80端口</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A PREROUTING -s 0/0 -d 0/0 -p tcp --dport 80 -j DNAT --to-destination 192.168.8.128          # 将外网访问防火墙的80端口转发给内网</span><br><span class="line">[root@Firewalld ~]# iptables -vnL -t nat </span><br><span class="line">Chain PREROUTING (policy ACCEPT 1 packets, 207 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    1    60 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:192.168.8.128</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 1 packets, 207 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 1 packets, 60 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# curl 172.18.251.146      # 在互联主机测试访问防火墙的80端口</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line"></span><br><span class="line">[root@LAN-host ~]# tail -1 /var/log/httpd/access_log        # 查看日志</span><br><span class="line">172.18.252.112 - - [20/Oct/2017:13:26:35 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure><h3 id="转发REDIRECT"><a href="#转发REDIRECT" class="headerlink" title="转发REDIRECT"></a>转发REDIRECT</h3><p><strong>将访问本地端口请求，转发到本地的其它端口。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 将访问本地1234端口转发到本地的80端口</span><br><span class="line"></span><br><span class="line">[root@Firewalld ~]# iptables -t nat -A PREROUTING -d 0/0 -p tcp --dport 1234 -j REDIRECT --to-port 80       # 基于上面实验的基础，配置端口转发，当访问本地1234端口时就转发到本地的80端口</span><br><span class="line">[root@Firewalld ~]# iptables -vnL -t nat </span><br><span class="line">Chain PREROUTING (policy ACCEPT 105 packets, 19073 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    8   480 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:192.168.8.128</span><br><span class="line">    1    60 REDIRECT   tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:1234 redir ports 80</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 102 packets, 18181 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 4 packets, 304 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 4 packets, 304 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination  </span><br><span class="line"></span><br><span class="line">[root@WAN-host ~]# curl 172.18.251.146:1234         # 可以访问</span><br><span class="line">www.ihaiyun.cc</span><br><span class="line">[root@LAN_host ~]# tail -1 /var/log/httpd/access_log        # 查看访问日志</span><br><span class="line">172.18.252.112 - - [21/Oct/2017:21:36:19 +0800] &quot;GET / HTTP/1.1&quot; 200 15 &quot;-&quot; &quot;curl/7.29.0&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Iptables </category>
          
          <category> SNAT与DNAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SNAT与DNAT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IP地址</title>
      <link href="/2017/09/01/Linux-IP-Address/"/>
      <url>/2017/09/01/Linux-IP-Address/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），缩写为IP地址（英语：IP Address），是分配给网络上使用网际协议（英语：Internet Protocol, IP）的设备的数字标签。常见的IP地址分为IPv4与IPv6两大类。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-IP-Address-1.jpg" title="IP地址"></center><a id="more"></a><p>IP地址是在计算机网络中被用来唯一标识一台设备的一组数字，各个节点（设备）之间使用IP协议进行通信。IP地址的层次是按网络结构进行划分，一个IP地址是由网络号和主机号两部分组成。</p><h3 id="IP地址组成"><a href="#IP地址组成" class="headerlink" title="IP地址组成"></a>IP地址组成</h3><p><strong>IP地址有两部分组成：</strong></p><p><strong>网络号码字段（net-id）：</strong></p><ul><li>用于区分不同网络。网络号码字段的前几位称为类别字段（又称为类别比特），用来区分IP地址的类型。</li></ul><p><strong>主机ID（host-id）：</strong></p><ul><li>用于区分一个网络内的不同主机</li></ul><p>IP地址的网络号码字段用来标识一个网络，主机号码字段用来标识网络中网络设备的一个连接。如果有多台网络设备，无论它们分别处于任何物理位置，只要它们具有相同的网络号，那他们就处在同一网络中。也就是说，在公共网络内的多台网络设备是否处于相同网络与它们所处的物理位置无关。</p><h3 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h3><p>IP地址由32位二进制数值组成，但为了便于用户识别和记忆，采用了“点分十进制表示法”。采用了这种表示法的IP地址由4个由点分隔的十进制整数来表示，每个十进制整数对应一个字节。例如，A主机的IP地址使用二进制的表示形式为00001010 00000001 00000001 00000010，采用点分十进制表示法表示为10.1.1.2。</p><p>IP地址是唯一的。目前IP技术可能使用的IP地址最多可有4,294,967,296个（即232）。骤看可能觉得很难会用尽，但由于早期编码和分配上的问题，使很多区域的编码实际上被空出或不能使用。加上互联网的普及，使大部分家庭都至少有一部电脑，连同公司的电脑，以及连接网络的各种设备都消耗了大量IPv4地址资源。</p><p>随着互联网的快速成长，IPv4的42亿个地址的分配最终于2011年2月3日用尽。相应的科研组织已研究出128位的 IPv6，其IP地址数量最高可达3.402823669 × 1038个，届时每个人家居中的每件电器，每件对象，甚至地球上每一粒沙子都可以拥有自己的IP地址。</p><h4 id="地址分类"><a href="#地址分类" class="headerlink" title="地址分类"></a>地址分类</h4><p>地址可分为A、B、C、D、E五大类，其中E类属于特殊保留地址。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-IP-Address-2.jpg" title="地址分类"></center><p>通过网络号码字段的前几个比特就可以判断IP地址属于哪一类，这是区分各类地址最简单的方法。</p><h4 id="地址范围"><a href="#地址范围" class="headerlink" title="地址范围"></a>地址范围</h4><p>在A类、B类、C类IP地址中，如果主机号是全1，那么这个地址为直接广播地址，它是用来使路由器将一个分组以广播形式发送给特定网络上的所有主机。32位全为1的IP地址“255.255.255.255”为受限广播地址（”limited broadcast” destination address），用来将一个分组以广播方式发送给本网络中的所有主机，路由器则阻挡该分组通过，将其广播功能限制在本网内部。</p><table><thead><tr><th>网络类型</th><th>地址范围</th><th>用户可用的IP网络范围</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>0.0.0.0～127.255.255.255</td><td>1.0.0.0～126.0.0.0</td><td>全0的主机号码表示该IP地址就是网络的地址，用于网络路由；全1的主机号码表示广播地址，即对该网络上所有的主机进行广播；IP地址0.0.0.0仅在采用DHCP方式的系统启动时允许本主机利用它进行临时的通信，并且永远不是有效目的地址；网络号码为0的IP地址表示当前网络的主机，可以让机器引用自己的网络而不必知道其网络号；所有形如127.X.Y.Z的地址都保留作环回测试，发送到这个地址的分组不会输出到线路上，它们被内部处理并当作输入分组。</td></tr><tr><td>B</td><td>128.0.0.0～191.255.255.255</td><td>128.1.0.0～191.254.0.0</td><td>全0的主机号码表示该IP地址就是网络的地址，用于网络路由；全1的主机号码表示广播地址，即对该网络上所有的主机进行广播。</td></tr><tr><td>C</td><td>192.0.0.0～223.255.255.255</td><td>192.0.1.0～223.255.254.0</td><td>全0的主机号码表示该IP地址就是网络的地址，用于网络路由；全1的主机号码表示广播地址，即对该网络上所有的主机进行广播。</td></tr><tr><td>D</td><td>224.0.0.0～239.255.255.255</td><td>无</td><td>D类地址是一种组播地址。</td></tr><tr><td>E</td><td>240.0.0.0～255.255.255.255</td><td>无</td><td>保留。255.255.255.255用于局域网广播地址。</td></tr></tbody></table><h4 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h4><table><thead><tr><th>IP地址网络号</th><th>IP地址子网号</th><th>IP地址主机号</th><th>能否作为源端地址</th><th>能否作为目的端地址</th><th>描述</th></tr></thead><tbody><tr><td>全0</td><td>-</td><td>全0</td><td>可以</td><td>不可以</td><td>用于网络上的主机</td></tr><tr><td>全0</td><td>-</td><td>主机号</td><td>可以</td><td>不可以</td><td>用于网络上的特定主机</td></tr><tr><td>127</td><td>-</td><td>任何值</td><td>可以</td><td>可以</td><td>用于环回地址</td></tr><tr><td>全1</td><td>-</td><td>全1</td><td>不可以</td><td>可以</td><td>用于受限的广播（永远不被转发）</td></tr><tr><td>net-id</td><td>-</td><td>全1</td><td>不可以</td><td>可以</td><td>用于向以net-id为目的的网络广播</td></tr><tr><td>net-id</td><td>subnet-id</td><td>全1</td><td>不可以</td><td>可以</td><td>用于向以net-id，subnet-id为目的的子网广播</td></tr><tr><td>net-id</td><td>全1</td><td>全1</td><td>不可以</td><td>可以</td><td>用于向以net-id为目的的所有子网广播</td></tr></tbody></table><h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p>为了解决IP地址短缺的问题，提出了私有地址的概念。私有地址是指内部网络或主机地址，这些地址只能用于某个内部网络，不能用于公共网络。RFC1918描述了为私有网络预留的3个IP地址段。</p><p>IP地址分配组织规定将下列的IP地址保留用作私有地址，如下</p><table><thead><tr><th>网络类型</th><th>地址范围</th></tr></thead><tbody><tr><td>A</td><td>10.0.0.0～10.255.255.255</td></tr><tr><td>B</td><td>172.16.0.0～172.31.255.255</td></tr><tr><td>C</td><td>192.168.0.0～192.168.255.255</td></tr></tbody></table><h3 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h3><p>从IPv4到IPv6最显著的变化就是网络地址的长度，有128位长；IPv6地址的表达形式，一般采用32个十六进制数。</p><p>本文中大多数IP地址指的是IPv4地址，不对IPv6做过多讲解。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">维基百科：IP地址</a><br><a href="http://support.huawei.com/enterprise/docinforeader!loadDocument1.action?contentId=DOC0000645520&amp;partNo=10092" target="_blank" rel="noopener">华为：IP地址</a></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
          <category> IP地址 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>脚本实例一：创建脚本的脚本</title>
      <link href="/2017/08/25/Linux-shell-script1/"/>
      <url>/2017/08/25/Linux-shell-script1/</url>
      <content type="html"><![CDATA[<h3 id="脚本实例一：创建脚本的脚本"><a href="#脚本实例一：创建脚本的脚本" class="headerlink" title="脚本实例一：创建脚本的脚本"></a>脚本实例一：创建脚本的脚本</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">read -p "please input scrpit name: " NAME# 输入脚本名</span><br><span class="line">[ -f $NAME ] &amp;&amp;  &#123; echo "$NAME" is already exists &amp;&amp; exit 100 ; &#125;# 判断文件是否存在，如果存在就退出</span><br><span class="line">touch $NAME &amp;&gt; /dev/null            # 创建文件</span><br><span class="line">chmod +x $NAME &amp;&gt; /dev/null # 添加执行权限</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 向脚本输入一下描述内容</span><br><span class="line">cat &gt; $NAME &lt;&lt; END</span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>——————————————————————————————————————————————</span><br><span class="line"><span class="meta">#</span> File name: $NAME</span><br><span class="line"><span class="meta">#</span> Revision: 2.0</span><br><span class="line"><span class="meta">#</span> Date: `date '+%F %T'`</span><br><span class="line"><span class="meta">#</span> Author: houhaiyun</span><br><span class="line"><span class="meta">#</span> Email: houhaiyun18@163.com</span><br><span class="line"><span class="meta">#</span> Website: http://www.ihaiyun.cc/</span><br><span class="line"><span class="meta">#</span> Copyright: @2017 haiyun</span><br><span class="line"><span class="meta">#</span> License: LGPL v3</span><br><span class="line"><span class="meta">#</span> Description:  </span><br><span class="line"><span class="meta">#</span>——————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">vim + $NAME # 编辑完成直接打开脚本文件且定位到最后一行，方便编辑</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> END———————————————————————————————————————————</span><br></pre></td></tr></table></figure><h3 id="脚本功能："><a href="#脚本功能：" class="headerlink" title="脚本功能："></a>脚本功能：</h3><p>使用此脚本创建的脚本自动添加执行权限，并添加描述信息，最后直接打开脚本文件，直接编辑。是不是很方便呢？</p><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-shell-script1-1.gif" title="脚本执行"></center>]]></content>
      
      <categories>
          
          <category> Shell脚本 </category>
          
          <category> 脚本实例一 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本实例一 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell 变量简介</title>
      <link href="/2017/08/20/Linux-Shell-bianliang/"/>
      <url>/2017/08/20/Linux-Shell-bianliang/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-Shell-bianliang.jpg" title="Bash"></center><a id="more"></a><h3 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h3><p>在程序设计中，变数（英语：<code>variable，scalar</code>）是指一个包含部分已知或未知数值或资讯（即一个值）之储存位址，以及相对应之符号名称（识别字）。通常使用变数名称参照储存值；将名称和内容分开能让被使用的名称独立于所表示的精确讯息之外。电脑源代码中的识别字能在执行期间绑扎一个值，且该变数的值可能在程式执行期间改变。 程序设计中的变数不一定能直接对应到数学中所谓的变数之概念。在程序设计中，变数的值不一定要为方程或数学公式之一部分。程序设计中的变数可使用在一段可重复的程序：在一处赋值，然后使用于另一处，接着在一次赋值，且以相同方式再使用一次（见迭代）。程序设计中的变数通常会给定一个较长的名称，以描述其用途；数学中的变数通常较为简洁，只给定一、两个字母，以方便抄写及操作。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>强类型：变量不经过强制转换，它永远是这个数据类型，不允许隐式的类型转换。一般定义变量时必须指定类型、参与运算必须符合类型要求；调用未声明变量会产生错误 <ul><li>如：<code>java</code>，<code>c#</code></li></ul></li><li>弱类型：语言的运行时会隐式做数据类型转换。无须指定类型，默认均为字符型；参与运算会自动进行隐式类型转换；变量无须事先定义可直接调用 <ul><li>如：<code>bash</code>不支持浮点数，<code>php</code></li></ul></li></ul><h3 id="shell变量命名规则"><a href="#shell变量命名规则" class="headerlink" title="shell变量命名规则"></a>shell变量命名规则</h3><ol><li>不能使程序中的保留字：例如<code>if</code>, <code>for</code></li><li>只能使用数字、字母及下划线，且不能以数字开头</li><li>见名知义</li><li>统一命名规则：驼峰命名法 </li></ol><h3 id="shell变量种类"><a href="#shell变量种类" class="headerlink" title="shell变量种类"></a>shell变量种类</h3><p><strong>根据变量的生效范围等标准：</strong></p><ul><li>本地变量：生效范围为当前<code>shell</code>进程；对当前<code>shell</code>之外的其它<code>shell</code>进程，包括当前<code>shell</code>的子<code>shell</code>进程均无效 </li><li>环境变量：生效范围为当前<code>shell</code>进程及其子进程 </li><li>局部变量：生效范围为当前<code>shell</code>进程中某代码片断(通常指函数) </li><li>位置变量： <code>$1</code>, <code>$2</code>, …来表示，用于让脚本在脚本代码中调用通过命令行传递给它的参数 </li><li>特殊变量： <code>$?</code>, <code>$0</code>, <code>$*</code>, <code>$@</code>, <code>$#</code>,<code>$$</code> </li></ul><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">维基百科：变量</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell变量 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>硬盘结构</title>
      <link href="/2017/08/02/Linux-Disk-jiegou/"/>
      <url>/2017/08/02/Linux-Disk-jiegou/</url>
      <content type="html"><![CDATA[<h3 id="硬盘盘结构"><a href="#硬盘盘结构" class="headerlink" title="硬盘盘结构"></a>硬盘盘结构</h3><p>硬盘的物理结构一般由磁头与碟片、电动机、主控芯片与排线等部件组成；当主电动机带动碟片旋转时，副电动机带动一组（<strong>磁头</strong>）到相对应的碟片上并确定读取正面还是反面的碟面，磁头悬浮在碟面上画出一个与碟片同心的圆形轨道（<strong>磁轨</strong>或称<strong>柱面</strong>），这时由磁头的磁感线圈感应碟面上的磁性与使用硬盘厂商指定的读取时间或数据间隔定位<strong>扇区</strong>，从而得到该扇区的数据内容；</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-Disk-jiegou-1.jpg" title="硬盘结构"></center><ul><li>磁道</li></ul><p>当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道（Track）。</p><ul><li>柱面</li></ul><p>在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面（Cylinder）。</p><ul><li>扇区</li></ul><p>磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector）。硬盘的第一个扇区，叫做引导扇区。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98#.E7.89.A9.E7.90.86.E7.BB.93.E6.9E.84" target="_blank" rel="noopener">维基百科：硬盘</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 磁盘管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>硬盘</title>
      <link href="/2017/08/01/Linux-Disk/"/>
      <url>/2017/08/01/Linux-Disk/</url>
      <content type="html"><![CDATA[<h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><p>机械硬盘（<code>HDD</code>）：<code>Hard Disk Drive</code>，即是传统普通硬盘，主要由：盘片，磁头，盘片转轴及控制电机，磁头控制器，数据转换器，接口，缓存等几个部分组成。机械硬盘中所有的盘片都装在一个旋转轴上，每张盘片之间是平行的，在每个盘片的存储面上有一个磁头，磁头与盘片之间的距离比头发丝的直径还小，所有的磁头联在一个磁头控制器上，由磁头控制器负责各个磁头的运动。磁头可沿盘片的半径方向运动，加上盘片每分钟几千转的高速旋转，磁头就可以定位在盘片的指定位置上进行数据的读写操作。数据通过磁头由电磁流来改变极性方式被电磁流写到磁盘上，也可以通过相反方式读取。硬盘为精密设备，进入硬盘的空气必须过滤。</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-Disk-1.jpg" title="机械硬盘"></center><h4 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h4><p>硬盘按数据接口不同，大致分为<code>ATA</code>（<code>IDE</code>）和<code>SATA</code>以及<code>SCSI</code>和<code>SAS</code>。接口速度不是实际硬盘数据传输的速度，目前非基于闪存技术的硬盘数据实际传输速度一般不会超过300MB/s。</p><p><code>ATA</code>，全称<code>Advanced Technology Attachment</code>，是用传统的<code>40-pin</code>并口数据线连接主板与硬盘的，接口速度最大为133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐渐被<code>SATA</code>所取代。</p><p><code>SATA</code>，全称<code>Serial ATA</code>，也就是使用串口的<code>ATA</code>接口，因抗干扰性强，且对数据线的长度要求比<code>ATA</code>低很多，支持热插拔等功能，<code>SATA-II</code>的接口速度为<code>300MiB/s</code>，而新的<code>SATA-III</code>标准可达到<code>600MiB/s</code>的传输速度。<code>SATA</code>的数据线也比<code>ATA</code>的细得多，有利于机箱内的空气流通，整理线材也比较方便。</p><p><code>SCSI</code>，全称是<code>Small Computer System Interface</code>（小型机系统接口），经历多代的发展，从早期的<code>SCSI-II</code>，到目前的<code>Ultra320 SCSI</code>以及<code>Fiber-Channel</code>（光纤通道），接口型式也多种多样。<code>SCSI</code>硬盘广为工作站级个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速<code>15000rpm</code>的高转速，且资料传输时<code>CPU</code>占用率较低，但是单价也比相同容量的<code>ATA</code>及<code>SATA</code>硬盘更加昂贵。</p><p><code>SAS</code>（<code>Serial Attached SCSI</code>）是新一代的<code>SCSI</code>技术，和<code>SATA</code>硬盘相同，都是采取序列式技术以获得更高的传输速度，可达到<code>6Gb/s</code>。此外也透过缩小连接线改善系统内部空间等。此外，由于<code>SAS</code>硬盘可以与<code>SATA</code>硬盘共享同样的背板，因此在同一个<code>SAS</code>存储系统中，可以用<code>SATA</code>硬盘来取代部分昂贵的<code>SAS</code>硬盘，节省整体的存储成本。但<code>SATA</code>存储系统并不能连接<code>SAS</code>硬盘。</p><p><code>FC</code>（<code>Fibre Channel</code>，光纤通道接口），拥有此接口的硬盘在使用光纤联接时具有热插拔性、高速带宽（<code>4Gb/s</code>或<code>10Gb/s</code>）、远程连接等特点；内部传输速率也比普通硬盘更高。限制于其高昂的售价，通常用于高端服务器领域。</p><h5 id="RPM转速"><a href="#RPM转速" class="headerlink" title="RPM转速"></a>RPM转速</h5><p>主要用于表征机械转子的转速，硬盘转速也可用此表示。</p><p><code>RPM =round per minute</code> 每分钟多少转</p><h4 id="电源接口"><a href="#电源接口" class="headerlink" title="电源接口"></a>电源接口</h4><p><code>3.5</code>寸的台式机硬盘，与<code>ATA</code>配合使用的是“<code>D形4针电源接口</code>”（俗称“<code>大4pin</code>”），由<code>Molex</code>公司设计并持有专利；而<code>SATA</code>接口也有相应的<code>SATA</code>电源线。</p><p><code>2.5</code>寸的笔记本电脑用硬盘，可直接由数据口供电，不需要额外的电源接口。在插上外接的便携式硬盘盒之后，由计算机外部的<code>USB</code>接口提供电力来源，而单个<code>USB</code>接口供电约为<code>4~5V 500mA</code>，若移动硬盘盒用电需求较高，有时需要接上两个<code>USB</code>接口才能使用，否则，需要外接电源供电。但如今多数新型硬盘盒（使用<code>2.5寸</code>或以下硬盘）已可方便地使用单个<code>USB</code>口供电。</p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><p>固态硬盘（<code>SSD</code>）： <code>Solid State Drive</code>，用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元（<code>FLASH</code>芯片、 <code>DRAM</code>芯片）组成。固态硬盘在接口的规范和定义、功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上也与普通硬盘一致。</p><p>本文中只对固态硬盘简单了解。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Disk-2.jpg" title="固态硬盘"></center>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 硬盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux Shell</title>
      <link href="/2017/07/07/Linux-Shell/"/>
      <url>/2017/07/07/Linux-Shell/</url>
      <content type="html"><![CDATA[<p><center><img src="https://houhaiyun.github.io/img/images/Linux-Shell.jpg" title="Linux Shell"></center><br><a id="more"></a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>计算机理解了被称为二进制语言的零语言。在计算的早期，使用二进制语言提供了指令，这对我们所有人来说都是难以阅读和写入的。因此，在操作系统中有一个称为<code>shell</code>的特殊程序。<code>shell</code>接受人类可读命令并将其转换为内核可以读取和处理的内容。</p><h3 id="什么是shell？"><a href="#什么是shell？" class="headerlink" title="什么是shell？"></a>什么是shell？</h3><ul><li><code>shell</code>是一个用户程序，也是为用户交互提供的环境。</li><li>它是一个命令语言解释器，执行从标准输入设备（如键盘或文件）读取的命令。</li><li>当您登录或打开控制台（终端）时，<code>shell</code>将启动。</li><li>快速而脏的方式来执行实用程序。</li><li><code>shell</code>不是系统内核的一部分，而是使用系统内核执行程序，创建文件等。</li></ul><h3 id="Linux提供的shell"><a href="#Linux提供的shell" class="headerlink" title="Linux提供的shell"></a>Linux提供的shell</h3><ul><li><code>BASH</code>（<code>Bourne-Again SHELL</code>） - <code>Linux</code>中最常见的<code>shell</code>。它是开源的，CentOS默认使用 。</li><li><code>CSH</code>（<code>C SHELL</code>） - <code>C shell</code>的语法和用法与<code>C</code>编程语言非常相似。</li><li><code>KSH</code>（<code>Korn shell</code>中） -创建者戴维·科恩在<code>AT＆T</code>贝尔实验室。<code>Korn Shell</code>是<code>POSIX Shell</code>标准规范的基础。</li><li><code>TCSH</code> - 它是<code>Berkeley UNIX C shell</code>（<code>CSH</code>）的增强但完全兼容的版本。</li></ul><p>请注意，每个<code>shell</code>执行相同的作业，但每个<code>shell</code>都会了解不同的命令语法，并提供不同的内置函数。在<code>Windows</code>下，<code>shell</code>名称是<code>cmd.exe</code>，它也用于相同的目的，但它远远不如我们的<code>Linux Shells</code>那么强大！</p><h4 id="显示当前shell"><a href="#显示当前shell" class="headerlink" title="显示当前shell"></a>显示当前shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# echo $SHELL#此命令可以显示当前使用的shell，当前使用的为BASH</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h4 id="查看当前系统支持的所有shell"><a href="#查看当前系统支持的所有shell" class="headerlink" title="查看当前系统支持的所有shell"></a>查看当前系统支持的所有shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# cat /etc/shells </span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://bash.cyberciti.biz/guide/What_is_Linux_Shell" target="_blank" rel="noopener">维基百科：What is Linux Shell</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Linux Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GUI和CLI</title>
      <link href="/2017/07/06/Linux-GUI-CLI/"/>
      <url>/2017/07/06/Linux-GUI-CLI/</url>
      <content type="html"><![CDATA[<h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>图形用户界面（<code>Graphical User Interface</code>，简称<code>GUI</code>）是指采用图形方式显示的计算机操作用户界面。与早期计算机使用的命令行界面相比，图形界面对于用户来说在视觉上更易于接受。</p><a id="more"></a><center><img src="https://houhaiyun.github.io/img/images/Linux-GUI-CLI-1.jpg" title="GUI"></center><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>命令行界面（英语：<code>command-line interface</code>，缩写：<code>CLI</code>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（<code>character user interface</code>, <code>CUI</code>）。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-GUI-CLI-2.jpg" title="CLI"></center><p><strong>一般我们是使用<code>CLI</code>的，比较酷。。。</strong></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> GUI和CLI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUI和CLI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>终端 Terminal</title>
      <link href="/2017/07/05/Linux-Terminal/"/>
      <url>/2017/07/05/Linux-Terminal/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-Terminal.png" title="终端"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>终端（<code>Terminal</code>）也称终端设备，是计算机网络中处于网络最外围的设备，主要用于用户信息的输入以及处理结果的输出等。</p><p>Linux系统的终端主要包括设备终端、物理终端、虚拟终端、图形终端、串行终端和伪终端</p><p><strong>查看当前的终端设备：#tty</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]# tty#这就是一个伪终端</span><br><span class="line">/dev/pts/1</span><br><span class="line">[root@centos6 ~]#</span><br></pre></td></tr></table></figure><h4 id="1-设备终端"><a href="#1-设备终端" class="headerlink" title="1.设备终端"></a>1.设备终端</h4><p>键盘鼠标显示器</p><h4 id="2-物理终端"><a href="#2-物理终端" class="headerlink" title="2.物理终端"></a>2.物理终端</h4><p>在Unix系统中，计算机显示器通常被称为控制台终端。Console与虚拟终端相关联，内核将信息送到控制台上（/dev/console），通过与console相关联的虚拟终端将信息显示到屏幕上。</p><h4 id="3-虚拟终端"><a href="#3-虚拟终端" class="headerlink" title="3.虚拟终端"></a>3.虚拟终端</h4><p>虚拟终端，ctrl+alt+f[1-6]切换的就是虚拟终端</p><h4 id="4-图形终端（-dev-tty7）StartlX，xwindows"><a href="#4-图形终端（-dev-tty7）StartlX，xwindows" class="headerlink" title="4.图形终端（/dev/tty7）StartlX，xwindows"></a>4.图形终端（/dev/tty7）StartlX，xwindows</h4><p>Centos 6：Ctrl+Alt+F7</p><p>Centos 7：在哪个终端启动，即位于那个虚拟终端</p><h4 id="5-串行终端（-dev-ttyS-）"><a href="#5-串行终端（-dev-ttyS-）" class="headerlink" title="5.串行终端（/dev/ttyS#）"></a>5.串行终端（/dev/ttyS#）</h4><p>通过串口线连接的终端</p><h4 id="6-伪终端（pty：pseudo-tty，-dev-pts-）"><a href="#6-伪终端（pty：pseudo-tty，-dev-pts-）" class="headerlink" title="6.伪终端（pty：pseudo-tty，/dev/pts/#）"></a>6.伪终端（pty：pseudo-tty，/dev/pts/#）</h4><p>pty,SSH远程连接</p><h3 id="wall命令"><a href="#wall命令" class="headerlink" title="wall命令"></a>wall命令</h3><p><code>wall</code>命令用于向系统当前所有打开的终端上输出信息。通过<code>wall</code>命令可将信息发送给每位同意接收公众信息的终端机用户，若不给予其信息内容，则<code>wall</code>命令会从标准输入设备读取数据，然后再把所得到的数据传送给所有终端机用户。</p><p><strong>语法</strong></p><p><code>wall 参数（消息：指定广播消息）</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">    [root@centos6 ~]# wall houhaiyum.com</span><br><span class="line">    [root@centos6 ~]# </span><br><span class="line">    Broadcast message from root@centos6.magedu.com (pts/5) (Fri Jul 14 22:28:19 2017):</span><br><span class="line">    </span><br><span class="line">    houhaiyun.com</span><br></pre></td></tr></table></figure><h3 id="mesg命令"><a href="#mesg命令" class="headerlink" title="mesg命令"></a>mesg命令</h3><p> mesg命令用于设置当前终端的写权限，即是否让其他用户向本终端发信息。将mesg设置y时，其他用户可利用write命令将信息直接显示在您的屏幕上。</p><p><strong>语法</strong></p><p><code>mesg 参数</code></p><p>y/n：y表示运行向当前终端写信息，n表示禁止向当前终端写信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">    [root@centos6 ~]# mesg y    #允许系统用户将信息直接显示在你的屏幕上。</span><br><span class="line">    [root@centos6 ~]# mesg n    #不允许系统用户将信息直接显示在你的屏幕上。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Terminal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos6.9 安装详解</title>
      <link href="/2017/07/04/Linux-Centos6-9-Install/"/>
      <url>/2017/07/04/Linux-Centos6-9-Install/</url>
      <content type="html"><![CDATA[<p><code>CentOS</code>（<code>Community Enterprise Operating System</code>，中文意思是：社区企业操作系统）是<code>Linux</code>发行版之一，它是来自于<code>Red Hat Enterprise Linux</code>依照开放源代码规定释出的源代码所编译而成。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-1.png" title="Centos"></center><a id="more"></a><h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-2.jpg" title="虚拟机配置"></center><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="开启虚拟机后我们看到如下安装界面："><a href="#开启虚拟机后我们看到如下安装界面：" class="headerlink" title="开启虚拟机后我们看到如下安装界面："></a>开启虚拟机后我们看到如下安装界面：</h4><ol><li><p>安装或更新系统</p></li><li><p>安装显示卡驱动</p></li><li><p>系统修复</p></li><li><p>从硬盘启动</p></li><li><p>内存测试</p></li></ol><p>我们直接回车即可，即使你不动，默认也会在自动倒数结束后，开始安装。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-3.jpg" title="开始安装"></center><h4 id="进入下一个界面测试安装媒体"><a href="#进入下一个界面测试安装媒体" class="headerlink" title="进入下一个界面测试安装媒体"></a>进入下一个界面测试安装媒体</h4><p>测试你的安装媒体是否损坏，按OK测试你的安装媒体（你所选的ISO文件），我们这里直接按SKIP跳过。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-4.jpg" title="测试安装媒体"></center><h4 id="第一个界面"><a href="#第一个界面" class="headerlink" title="第一个界面"></a>第一个界面</h4><p>选右下角的“NEXT”，下一步。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-5.jpg" title="第一个界面"></center><h4 id="然后就到了选语言，这里我们选英文。如图："><a href="#然后就到了选语言，这里我们选英文。如图：" class="headerlink" title="然后就到了选语言，这里我们选英文。如图："></a>然后就到了选语言，这里我们选英文。如图：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-6.jpg" title="选语言"></center><h4 id="选择键盘"><a href="#选择键盘" class="headerlink" title="选择键盘"></a>选择键盘</h4><p>这个不要选错了，默认就可以。如图：</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-7.jpg" title="选择键盘"></center><h4 id="这里选择安装的存储设备"><a href="#这里选择安装的存储设备" class="headerlink" title="这里选择安装的存储设备"></a>这里选择安装的存储设备</h4><p>我想大家都是安装到本地硬盘吧，那就是上面这个了啦，第二个选线的意思是指定专用的存储设备（例如存储区域网络SAN），如图。选择：基本存储设备后，点击下一步。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-8.jpg" title="安装的存储设备"></center><h4 id="弹出警告"><a href="#弹出警告" class="headerlink" title="弹出警告"></a>弹出警告</h4><p>会删除检测到的这个硬盘（204800MB）的所有数据，如果是多硬盘安装或升级安装的话，要小心注意了，全新安装的话，直接点击：是，如图。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-9.jpg" title="弹出警告"></center><h4 id="这里是选择时区"><a href="#这里是选择时区" class="headerlink" title="这里是选择时区"></a>这里是选择时区</h4><p>我们选择：亚洲/中国/上海，如图。下一步。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-10.jpg" title="选择时区"></center><h4 id="这里是设置根账户（root）的密码"><a href="#这里是设置根账户（root）的密码" class="headerlink" title="这里是设置根账户（root）的密码"></a>这里是设置根账户（root）的密码</h4><p>如图，如果你的密码过于简单，则会有另一个提示，我可以选择：无论如何都使用，如图：</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-11.jpg" title="设置根账户（root）的密码"></center><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-12.jpg" title="设置根账户（root）的密码"></center><h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-13.jpg" title="设置主机名"></center><h4 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-14.jpg" title="设置网络"></center><h4 id="下面我们就到了分区：此处我们选择“创建自定义布局”"><a href="#下面我们就到了分区：此处我们选择“创建自定义布局”" class="headerlink" title="下面我们就到了分区：此处我们选择“创建自定义布局”"></a>下面我们就到了分区：此处我们选择“创建自定义布局”</h4><ul><li>使用所有空间</li><li>替换现有的Linux系统</li><li>缩小当前系统</li><li>使用自由空间</li><li>创建自定义布局</li></ul><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-15.jpg" title="分区"></center><h4 id="自定义分区："><a href="#自定义分区：" class="headerlink" title="自定义分区："></a>自定义分区：</h4><table><thead><tr><th>挂载点</th><th>大小</th><th>分区名称</th></tr></thead><tbody><tr><td>/</td><td>50G</td><td>/dev/sdba1</td></tr><tr><td>/boot</td><td>1G</td><td>/dev/sda2</td></tr><tr><td>/app</td><td>50G</td><td>/dev/sda3</td></tr><tr><td>swap</td><td>4G</td><td>/dev/sda4</td></tr></tbody></table><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-16.jpg" title="分区"></center><h4 id="创建-boot分区"><a href="#创建-boot分区" class="headerlink" title="创建/boot分区"></a>创建/boot分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-17.jpg" title="创建/boot分区"></center><h4 id="创建-分区"><a href="#创建-分区" class="headerlink" title="创建/分区"></a>创建/分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-18.jpg" title="创建/分区"></center><h4 id="创建-app分区"><a href="#创建-app分区" class="headerlink" title="创建/app分区"></a>创建/app分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-19.jpg" title="创建/app分区"></center><h4 id="创建交换分区"><a href="#创建交换分区" class="headerlink" title="创建交换分区"></a>创建交换分区</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-20.jpg" title="创建交换分区"></center><h4 id="分区图"><a href="#分区图" class="headerlink" title="分区图"></a>分区图</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-21.jpg" title="分区图"></center><h4 id="是否格式化"><a href="#是否格式化" class="headerlink" title="是否格式化"></a>是否格式化</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-22.jpg" title="是否格式化"></center><h4 id="点击下一步，将修改写入磁盘"><a href="#点击下一步，将修改写入磁盘" class="headerlink" title="点击下一步，将修改写入磁盘"></a>点击下一步，将修改写入磁盘</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-23.jpg" title="点击下一步，将修改写入磁盘。"></center><h4 id="然后，到了选择安装Centos组件的时候"><a href="#然后，到了选择安装Centos组件的时候" class="headerlink" title="然后，到了选择安装Centos组件的时候"></a>然后，到了选择安装Centos组件的时候</h4><p>这一步是选择机子是做什么用的，如图，分别是：</p><ol><li>桌面系统的安装</li><li>最小化桌面系统的安装</li><li>最小化安装</li><li>基本服务器的安装</li><li>数据库服务器的安装</li><li>WEB网页服务器的安装</li><li>虚拟主机的安装</li><li>软件开发工作站的安装</li></ol><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-24.jpg" title="选择安装Centos组件"></center><p>选择一种，系统会自动给你安装上一些需要的软件，当然也可以选择底下的：现在自定义，来选择要安装的组件。</p><h4 id="下一步后，就开始安装了。"><a href="#下一步后，就开始安装了。" class="headerlink" title="下一步后，就开始安装了。"></a>下一步后，就开始安装了。</h4><p>安装过程则根据你选择的组件内容所用的时间而不同……如图。</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-25.jpg" title="安装过程则根据你选择的组件内容所用的时间而不同"></center><h4 id="安装完成后就可以重启系统了，按一下“reboot”。如图："><a href="#安装完成后就可以重启系统了，按一下“reboot”。如图：" class="headerlink" title="安装完成后就可以重启系统了，按一下“reboot”。如图："></a>安装完成后就可以重启系统了，按一下“reboot”。如图：</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-26.jpg" title="完成后就可以重启系统了，按一下“reboot”"></center><h4 id="重启完成后，进入欢迎界面，点击“Forward”"><a href="#重启完成后，进入欢迎界面，点击“Forward”" class="headerlink" title="重启完成后，进入欢迎界面，点击“Forward”"></a>重启完成后，进入欢迎界面，点击“Forward”</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-27.jpg" title="重启完成后，进入欢迎界面，点击“Forward”"></center><h4 id="是否同意，点击“Forward”"><a href="#是否同意，点击“Forward”" class="headerlink" title="是否同意，点击“Forward”"></a>是否同意，点击“Forward”</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-28.jpg" title="是否同意，点击“Forward”"></center><h4 id="创建一个普通用户haiyun-也可以不创建"><a href="#创建一个普通用户haiyun-也可以不创建" class="headerlink" title="创建一个普通用户haiyun,也可以不创建"></a>创建一个普通用户haiyun,也可以不创建</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-29.jpg" title="创建一个普通用户haiyun,也可以不创建"></center><h4 id="设置时间，如果时间不对可以重新调整"><a href="#设置时间，如果时间不对可以重新调整" class="headerlink" title="设置时间，如果时间不对可以重新调整"></a>设置时间，如果时间不对可以重新调整</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-30.jpg" title="设置时间，如果时间不对可以重新调整"></center><h4 id="是否开启kdump"><a href="#是否开启kdump" class="headerlink" title="是否开启kdump"></a>是否开启kdump</h4><p>kdump是在系统崩溃、死锁或者死机的时候用来转储内存运行参数的一个工具和服务，此处就就不开启了。也可开启，根据需求自行选择</p><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-31.jpg" title="是否开启kdump"></center><h4 id="点击确认，需要重启"><a href="#点击确认，需要重启" class="headerlink" title="点击确认，需要重启"></a>点击确认，需要重启</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-32.jpg" title="点击确认，需要重启"></center><h4 id="重启完成，如下图可以愉快的登陆系统了。"><a href="#重启完成，如下图可以愉快的登陆系统了。" class="headerlink" title="重启完成，如下图可以愉快的登陆系统了。"></a>重启完成，如下图可以愉快的登陆系统了。</h4><center><img src="https://houhaiyun.github.io/img/images/Linux-Centos6-9-Install-33.jpg" title="重启完成"></center>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Centos6.9 安装详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos6.9 安装详解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用户空间和内核空间</title>
      <link href="/2017/07/03/Linux-User-space/"/>
      <url>/2017/07/03/Linux-User-space/</url>
      <content type="html"><![CDATA[<h3 id="用户空间：-User-space"><a href="#用户空间：-User-space" class="headerlink" title="用户空间： User space"></a>用户空间： User space</h3><ul><li>用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响</li><li>只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（<code>system call</code>），才能向内核发出指令 </li></ul><a id="more"></a><h3 id="内核空间：-Kernel-space"><a href="#内核空间：-Kernel-space" class="headerlink" title="内核空间： Kernel space"></a>内核空间： Kernel space</h3><ul><li>是 <code>Linux</code> 内核的运行空间</li></ul><ul><li>可以执行任意命令，调用系统的一切资源 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = "www.ihaiyun.cc" # 用户空间</span><br><span class="line">x = x + 2</span><br><span class="line">file.write(str) # 切换到内核空间</span><br><span class="line">y = x + 4 # 切换回用户空间</span><br></pre></td></tr></table></figure><p>上面代码中，第一行和第二行都是简单的赋值运算，在 <code>User space</code> 执行。第三行需要写入文件，就要切换到 <code>Kernel space</code>，因为用户不能直接写文件，必须通过内核安排。第四行又是赋值运算，就切换回 <code>User space</code>。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>内核空间可以访问所有的<code>CPU</code>指令和所有的内存空间、<code>I/O</code>空间。</li><li>用户空间只能访问有限的资源，若需要特殊权限，可以通过系统调用获取相应的资源。</li><li>用户空间允许页面中断，而内核空间则不允许。</li><li><code>x86 CPU</code>中用户空间是<code>0-3G</code>的地址范围，内核空间是<code>3G-4G</code>的地址范围。<code>x86_64 CPU</code>用户空间地址范围为<code>0x0000000000000000</code> – <code>0x00007fffffffffff</code>，内核地址空间为<code>0xffff880000000000</code>~最大地址。</li><li>内核空间和用户空间是针对线性地址空间的。</li><li>所有内核进（线）程共用一个地址空间，而用户进程都有各自的地址空间。</li></ul><center><img src="https://houhaiyun.github.io/img/images/Linux-User-space-1.png" title="用户空间和内核空间"></center><h3 id="单处程序时间统计使用time"><a href="#单处程序时间统计使用time" class="headerlink" title="单处程序时间统计使用time"></a>单处程序时间统计使用time</h3><p>如果想查看单个程序的耗时，一般使用<code>time</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@blog ~]# time ifconfig </span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.252.210  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        inet6 fe80::20c:29ff:fef8:15f5  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f8:15:f5  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 16981  bytes 1356968 (1.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 93  bytes 23042 (22.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens34: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.8.135  netmask 255.255.255.0  broadcast 192.168.8.255</span><br><span class="line">        inet6 fe80::20c:29ff:fef8:15ff  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f8:15:ff  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 11279  bytes 1036041 (1011.7 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 59808  bytes 130371849 (124.3 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        ether 52:54:00:d7:0c:d1  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real0m0.003s</span><br><span class="line">user0m0.001s</span><br><span class="line">sys0m0.002s</span><br></pre></td></tr></table></figure><p>程序名之前加上<code>time</code>命令，会在程序执行完毕以后，默认显示三行统计。</p><ul><li><code>real</code>：程序从开始运行到结束的全部时间，这是用户能感知到的时间，包括 CPU 切换去执行其他任务的时间。</li><li><code>user</code>：程序在 User space 执行的时间</li><li><code>sys</code>：程序在 Kernel space 执行的时间</li></ul><p><code>user</code>和<code>sys</code>之和，一般情况下，应该小于<code>real</code>。</p><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://www.ait24.com/1256.html" target="_blank" rel="noopener">爱T网：linux中的内核空间Kernel space用户空间User space</a></p><p><a href="http://ilinuxkernel.com/?p=528" target="_blank" rel="noopener">Linux内核空间与用户空间</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 用户空间和内核空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户空间和内核空间 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 发行版时间线</title>
      <link href="/2017/07/03/Linux-time/"/>
      <url>/2017/07/03/Linux-time/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-time-1.png" title="Linux 发行版时间线"></center><a id="more"></a><p><strong>时间线请参见：</strong> <a href="https://en.wikipedia.org/wiki/File:Linux_Distribution_Timeline.svg" target="_blank" rel="noopener">Wikipedia</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Linux发行版时间线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux发行版时间线 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见开源协议</title>
      <link href="/2017/07/02/Linux-open-source/"/>
      <url>/2017/07/02/Linux-open-source/</url>
      <content type="html"><![CDATA[<center><img src="https://houhaiyun.github.io/img/images/Linux-open-source-2.jpeg" title="Public License"></center><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>现今存在的开源协议很多，而经过<code>Open Source Initiative</code>组织通过批准的开源协议目前有 <a href="http://www.opensource.org/licenses/alphabetical" target="_blank" rel="noopener">80种</a>。我们在常见的开源协议如<code>BSD</code>, <code>Apache</code>, <code>GPL</code>, <code>LGPL</code>, <code>MIT</code>等都是<code>OSI</code>批准的协议。如果要开源自己的代码，最好也是选择这些被批准的开源协议。</p><p>这里我们来看几种最常用的开源协议及它们的适用范围，供那些准备开源或者使用开源产品的开发人员/厂家参考。</p><h3 id="BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）"><a href="#BSD开源协议（original-BSD-license、FreeBSD-license、Original-BSD-license）" class="headerlink" title="BSD开源协议（original BSD license、FreeBSD license、Original BSD license）"></a>BSD开源协议（original BSD license、FreeBSD license、Original BSD license）</h3><p><code>BSD</code>开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p><p>但“为所欲为”的前提当你发布使用了<code>BSD</code>协议的代码，或则以<code>BSD</code>协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ul><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ul><p><code>BSD</code> 代码鼓励代码共享，但需要尊重代码作者的著作权。<code>BSD</code>由于允许使用者修改和重新发布代码，也允许使用或在<code>BSD</code>代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选<code>BSD</code>协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h3 id="Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）"><a href="#Apache-Licence-2-0（Apache-License-Version-2-0、Apache-License-Version-1-1、Apache-License-Version-1-0）" class="headerlink" title="Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）"></a>Apache Licence 2.0（Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0）</h3><p><code>Apache Licence</code>是著名的非盈利开源组织<code>Apache</code>采用的协议。该协议和<code>BSD</code>类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和<code>BSD</code>类似：</p><ul><li>需要给代码的用户一份<code>Apache Licence</code></li><li>如果你修改了代码，需要再被修改的文件中说明。</li><li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个<code>Notice</code>文件，则在<code>Notice</code>文件中需要带有<code>Apache Licence</code>。你可以在<code>Notice</code>中增加自己的许可，但不可以表现为对<code>Apache Licence</code>构成更改。</li></ul><p><code>Apache Licence</code>也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h3 id="GPL（GNU-General-Public-License）通用性公开许可证"><a href="#GPL（GNU-General-Public-License）通用性公开许可证" class="headerlink" title="GPL（GNU General Public License）通用性公开许可证"></a>GPL（GNU General Public License）通用性公开许可证</h3><p>我们很熟悉的<code>Linux</code>就是采用了<code>GPL</code>。<code>GPL</code>协议和<code>BSD</code>, <code>Apache Licence</code>等鼓励代码重用的许可很不一样。<code>GPL</code>的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种<code>linux</code>，包括商业公司的<code>linux</code>和<code>linux</code>上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p><p><code>GPL</code>规定：只要这种修改文本在整体上或者其某个部分来源于遵循<code>GPL</code>的程序，该修改文本的 整体就必须按照GPL流通，不仅该修改文本的源码必须向社会公开，而且对于这种修改文本的流通不准许附加修改者自己作出的限制。因此，一项遵循<code>GPL</code>流通 的程序不能同非自由的软件合并。<code>GPL</code>所表达的这种流通规则称为<code>copyleft</code>，表示与<code>copyright</code>(版权)的概念“相左”。</p><h4 id="GPL协议最主要的几个原则："><a href="#GPL协议最主要的几个原则：" class="headerlink" title="GPL协议最主要的几个原则："></a>GPL协议最主要的几个原则：</h4><ul><li>确保软件自始至终都以开放源代码形式发布，保护开发成果不被窃取用作商业发售。任何一套软 件，只要其中使用了受 <code>GPL</code> 协议保护的第三方软件的源程序，并向非开发人员发布时，软件本身也就自动成为受 <code>GPL</code> 保护并且约束的实体。也就是说，此时它必须开放源代码。</li><li><code>GPL</code> 大致就是一个左侧版权（<code>Copyleft</code>，或译为“反版权”、“版权属左”、“版权所无”、“版责”等）的体现。你可以去掉所有原作的版权 信息，只要你保持开源，并且随源代码、二进制版附上 <code>GPL</code> 的许可证就行，让后人可以很明确地得知此软件的授权信息。GPL 精髓就是，只要使软件在完整开源 的情况下，尽可能使使用者得到自由发挥的空间，使软件得到更快更好的发展。</li><li>无论软件以何种形式发布，都必须同时附上源代码。例如在 <code>Web</code> 上提供下载，就必须在二进制版本（如果有的话）下载的同一个页面，清楚地提供源代码下载的链接。如果以光盘形式发布，就必须同时附上源文件的光盘。</li><li>开发或维护遵循 <code>GPL</code> 协议开发的软件的公司或个人，可以对使用者收取一定的服务费用。但还是一句老话——必须无偿提供软件的完整源代码，不得将源代码与服务做捆绑或任何变相捆绑销售。</li></ul><p><code>GPL</code> 只是规定用户在获取你的程序的时候必须可以获得源代码，但并没有规定必须免费，因此理论上说，你仍然可以收取费用。如果你的确需要发布你的程序，但又不想开源，规避 <code>GPL</code> 的方法是通过 <code>LPC</code> 或者 <code>RPC</code> 间接调用库里的接口。只要库和你的程序不运行在同一进程下，就不需要开源。</p><p>另外，你需要区分 <code>GPL</code> 和 <code>LGPL</code>。<code>LGPL</code> 的要求比 <code>GPL</code> 低，你可以动态链接一个 <code>LGPL</code> 的库而不需要开源你自己的程序，而 <code>GPL</code> 是不行的。</p><h4 id="LGPL（GNU-Lesser-General-Public-License）宽松公共许可证"><a href="#LGPL（GNU-Lesser-General-Public-License）宽松公共许可证" class="headerlink" title="LGPL（GNU Lesser General Public License）宽松公共许可证"></a>LGPL（GNU Lesser General Public License）宽松公共许可证</h4><p><code>LGPL</code>是<code>GPL</code>的一个为主要为类库使用设计的开源协议。和<code>GPL</code>要求任何使用/修改/衍生之<code>GPL</code>类库的的软件必须采用<code>GPL</code>协议不同。<code>LGPL</code>允许商业软件通过类库引用(<code>link</code>)方式使用<code>LGPL</code>类库而不需要开源商业软件的代码。这使得采用<code>LGPL</code>协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改<code>LGPL</code>协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此<code>LGPL</code>协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以<code>LGPL</code>协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p><code>GPL</code>/<code>LGPL</code>都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h4 id="AGPL-协议（Affero-General-Public-License）"><a href="#AGPL-协议（Affero-General-Public-License）" class="headerlink" title="AGPL 协议（Affero General Public License）"></a>AGPL 协议（Affero General Public License）</h4><p><code>GPL（2.x ~ 3.x）</code> 协议还有一个非常大的“漏洞”，就是软件“发布” 才必须开源。也就是说，我的软件不发布，即使使用 <code>GPL (2.x ~ 3.x)</code>也可以不用开源。随着以Google为代表的软件作为服务的互联网公司的兴起，它们的“不分发软件，为客户提供网络服务”的商业模式就不受GPL协议的约束</p><p>AGPL则增加了对此做法的约束：</p><pre><code>AGPL = GPL + 一条限制</code></pre><p>一条限制：如果使用<code>AGPL</code>许可的软件与用户通过网络进行交互，也需要提供源代码给用户，所有的修改也要给用户。</p><h3 id="MIT（MIT）"><a href="#MIT（MIT）" class="headerlink" title="MIT（MIT）"></a>MIT（MIT）</h3><p><code>MIT</code>是和<code>BSD</code>一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p><ul><li>被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软体及软体的副本。</li><li>被授权人可根据程式的需要修改授权条款为适当的内容。</li><li>在软件和软件的所有副本中都必须包含版权声明和许可声明</li></ul><h3 id="Zlib-Libpng协议"><a href="#Zlib-Libpng协议" class="headerlink" title="Zlib/Libpng协议"></a><code>Zlib</code>/<code>Libpng</code>协议</h3><p>基于该软件的原样使用，作者不负责使用该软件照成的任何损失。</p><p>该软件修改后的版本将受到以下限制：</p><ul><li>不能歪曲原软件的著作权</li><li>修改后的软件不能歪曲为原版软件</li><li>不能删除源码中的协议许可内容</li></ul><p>如果发布二进制代码可以不用附上源代码。</p><h3 id="MPL-The-Mozilla-Public-License-Mozilla公共许可证"><a href="#MPL-The-Mozilla-Public-License-Mozilla公共许可证" class="headerlink" title="MPL(The Mozilla Public License)Mozilla公共许可证"></a>MPL(The Mozilla Public License)Mozilla公共许可证</h3><p><code>MPL</code>是<code>The Mozilla Public License</code>的简写，是1998年初<code>Netscape</code>的<code>Mozilla</code>小组为其开源软件项目设计的软件许可证。<code>MPL</code>许可证出现的最重要原因就是，<code>Netscape</code>公司认为<code>GPL</code>许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。同著名的<code>GPL</code>许可证和<code>BSD</code>许可证相比，<code>MPL</code>在许多权利与义务的约定方面与它们相同（因为都是符合<code>OSIA</code>认定的开源软件许可证）。但是，相比而言<code>MPL</code>还有以下几个显著的不同之处:</p><ul><li><code>MPL</code>虽然要求对于经<code>MPL</code>许可证发布的源代码的修改也要以<code>MPL</code>许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在<code>MPL</code> 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着<code>MPL</code>允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以<code>MPL</code>许可证的形式对外许可外，源代码库中的源代码就可以不用<code>MPL</code>许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个豁口。</li><li><code>MPL</code>许可证第三条第7款中允许被许可人将经过<code>MPL</code>许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</li><li>对软件专利的态度，<code>MPL</code>许可证不像<code>GPL</code>许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</li><li>对源代码的定义而在<code>MPL</code>（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘<code>Script</code>’），或者不是与初始源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。”<ul><li><code>MPL</code>许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li></ul></li></ul><h4 id="MPL与其他协议的兼容性"><a href="#MPL与其他协议的兼容性" class="headerlink" title="MPL与其他协议的兼容性"></a>MPL与其他协议的兼容性</h4><p>不像那些较严格的<code>Copyleft</code>许可证，使用<code>MPL</code>授权的源代码可以在一个复杂的软件中与任何其他的许可协议相结合，只要仍满足<code>MPL</code>许可协议中3.3节的规定即可。这意味着在一份给定的源文件里面，必须全部的源代码都以MPL授权，否则就所有源代码均以其他方式授权。</p><p><code>MPL</code>第二版与<code>Apache</code>许可证以及<code>GPL</code>第二版或更新、<code>LGPL2.1</code>版或更新，及<code>AGPL</code>第三版或更新兼容。而1.1版因为有“一些复杂的限制”造成与<code>GPL</code>的不兼容（从而阻止升级到<code>MPL 2.0</code>）。</p><h3 id="GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择"><a href="#GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择" class="headerlink" title="GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择"></a>GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择</h3><center><img src="https://houhaiyun.github.io/img/images/Linux-open-source-1.jpg" title="GPL、BSD、MIT、Mozilla、Apache和LGPL之中做选择"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="http://ewen0930.github.io/2016/11/open-source-licenses/" target="_blank" rel="noopener">本文转自：Hello EWEN</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 常见开源协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常见开源协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 历史?</title>
      <link href="/2017/07/02/Linux-history/"/>
      <url>/2017/07/02/Linux-history/</url>
      <content type="html"><![CDATA[<h3 id="Linux之前的UNIX历史："><a href="#Linux之前的UNIX历史：" class="headerlink" title="Linux之前的UNIX历史："></a><code>Linux</code>之前的<code>UNIX</code>历史：</h3><ul><li>1969年以前伟大的梦想-贝尔实验室 （<code>Bell Labs</code>）通用电气（<code>General Electric</code>）和麻省理工学院（<code>MIT</code>）的<code>Multics</code>系统。</li></ul><ul><li>1969年<code>Ken Thompson</code>使用汇编语言<code>B</code>语言<code>File Server System</code>。<a id="more"></a></li></ul><ul><li>1973年<code>UNIX</code>正式诞生，<code>Ritchie</code>等人以<code>C</code>语言写出第一个正式内核。</li></ul><ul><li>1977年重要的<code>UNIX</code>分支-<code>BSD</code>诞生。</li></ul><pre><code>伯克利大学的Bill Joy在取得了UNIX的内核源码后，修改成为自己的版本，并重新命名为Berkeley Software Distribution(BSD)。BSD是UNIX很重要的一个分支，Bill Joy也是Sun这家公司的创办者。</code></pre><ul><li>1979年重要的<code>System V</code>架构与版权声明。</li></ul><pre><code>由于当时UNIX的高度可移植性与强大的性能，也没有版权纠纷，所以很多商业公司开始了UNIX操作系统的开发。例如：AT&amp;A自家的System V、IBM的AIX等。不过因为AT&amp;T由于商业的考略，于是想将UNIX的版权收回去。因此，AT&amp;T在1979年发行的第七版UNIX中，特别提到了“不可对学生提供源码”的严格限制。</code></pre><ul><li><strong>1984年</strong>：</li></ul><pre><code>X86架构的Minix操作系统诞生。关于1979的版权声明中，影响最大的当然就是学校里的教授了。于是荷兰阿姆斯特丹自由大学计算机科学系Andrew S. Tanenbaum开始编写内核程序，到了1986年终于完成，并于次年出版Minix相关书籍，同时雨新闻组（BBS及News）相结合。    - Richard Stallman发起GNU项目和自由软件基金会。    创建开源的UNIX实用工具版本    创建通用公共许可证（GPL）    开源软件许可实施原则</code></pre><ul><li>1991年：<code>Linus Torvalds</code>发布<code>Linux</code>创建开放源码，类<code>Unix</code>的内核，在<code>GPL</code>下发布。</li></ul><h3 id="老照片哦"><a href="#老照片哦" class="headerlink" title="老照片哦(^_^)"></a>老照片哦(^_^)</h3><h4 id="Ken-Thompson-和Dennis-Ritchie"><a href="#Ken-Thompson-和Dennis-Ritchie" class="headerlink" title="Ken Thompson 和Dennis Ritchie"></a><center>Ken Thompson 和Dennis Ritchie</center></h4><center><img src="https://houhaiyun.github.io/img/images/Linux-history-1.jpg" title="Ken Thompson 和Dennis Ritchie"></center><h4 id="Richard-Matthew-Stallman"><a href="#Richard-Matthew-Stallman" class="headerlink" title="Richard Matthew Stallman"></a><center>Richard Matthew Stallman</center></h4><center><img src="https://houhaiyun.github.io/img/images/Linux-history-2.jpg" title="Richard Matthew Stallman"></center><h4 id="Linus-Torvalds-1991"><a href="#Linus-Torvalds-1991" class="headerlink" title="Linus Torvalds, 1991"></a><center>Linus Torvalds, 1991</center></h4><center><img src="https://houhaiyun.github.io/img/images/Linux-history-3.jpg" title="Linus Torvalds, 1991"></center><h4 id="Linus-Torvalds给Minix新闻组的历史消息"><a href="#Linus-Torvalds给Minix新闻组的历史消息" class="headerlink" title="Linus Torvalds给Minix新闻组的历史消息"></a><center>Linus Torvalds给Minix新闻组的历史消息</center></h4><p><code>Linus Torvalds</code> 在芬兰赫尔辛基开始了 <code>Linux</code> 内核开发，他是为他的硬件-<code>Intel 30386 CPU</code>编写的程序。他也使用<code>Minix</code>和<code>GNU C</code>编译器。下面是<code>Linus Torvalds</code>给<code>Minix</code>新闻组的历史消息：</p><center><img src="https://houhaiyun.github.io/img/images/Linux-history-4.jpg" title="Linus Torvalds给Minix新闻组的历史消息"></center><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p><a href="https://linux.cn/article-6469-1.html" target="_blank" rel="noopener">老照片：Linux的24 年历史，一步一个脚印</a></p><p><a href="http://linux.vbird.org/" target="_blank" rel="noopener">鸟哥<code>linux</code>私房菜</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> Linux历史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux历史 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么Linux？</title>
      <link href="/2017/07/01/Linux/"/>
      <url>/2017/07/01/Linux/</url>
      <content type="html"><![CDATA[<h3 id="什么是linux？"><a href="#什么是linux？" class="headerlink" title="什么是linux？"></a>什么是linux？</h3><p><code>Linux</code>是一种自由和开放源代码的类<code>UNIX</code>操作系统。目前运用领域最广泛、使用人数最多的操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为<code>Linux</code>操作系统。<code>Linux</code>也是自由软件和开放源代码软件发展中最著名的例子。只要遵循<code>GNU</code>通用公共许可证，任何个人和机构都可以自由地使用<code>Linux</code>的所有底层源代码，也可以自由地修改和再发布。大多数<code>Linux</code>系统还包括像提供<code>GUI</code>的<code>X Window</code>之类的程序。除了一部分专家之外，大多数人都是直接使用<code>Linux</code>发行版，而不是自己选择每一样组件或自行设置。<br><a id="more"></a></p><p><code>Linux</code>严格来说是单指操作系统的内核，因操作系统中包含了许多用户图形接口和其他实用工具。如今<code>Linux</code>常用来指基于<code>Linux</code>的完整操作系统，内核则改以<code>Linux</code>内核称之。由于这些支持用户空间的系统工具和库主要由理查德·斯托曼于1983年发起的<code>GNU</code>计划提供，自由软件基金会提议将其组合系统命名为<code>GNU/Linux</code>，但<code>Linux</code>不属于<code>GNU</code>计划，这个名称并没有得到社区的一致认同。</p><h3 id="linux吉祥物TUX"><a href="#linux吉祥物TUX" class="headerlink" title="linux吉祥物TUX"></a><code>linux</code>吉祥物<code>TUX</code></h3><p><code>Tux</code>是<code>Linux</code>官方的吉祥物，于1996年由<code>Larry Ewing</code>创造</p><center><img src="https://houhaiyun.github.io/img/images/Linux-logo.png" title="Linux 吉祥物"></center><h4 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h4><p><a href="https://zh.wikipedia.org/wiki/" target="_blank" rel="noopener">维基百科：Linux</a></p>]]></content>
      
      <categories>
          
          <category> Linux基础 </category>
          
          <category> 什么Linux？ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 什么Linux？ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>冯.诺依曼体系结构</title>
      <link href="/2017/07/01/Linux-fengnuoyiman/"/>
      <url>/2017/07/01/Linux-fengnuoyiman/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>冯·诺伊曼结构</strong>（英语：<code>von Neumann architecture</code>），也称<strong>冯·诺伊曼模型</strong>（<code>Von Neumann model</code>）或<strong>普林斯顿结构</strong>（<code>Princeton architecture</code>），是一种将程序指令存储器和数据存储器合并在一起的电脑设计概念结构。<br><a id="more"></a></p><h3 id="冯诺依曼体系结构提出"><a href="#冯诺依曼体系结构提出" class="headerlink" title="冯诺依曼体系结构提出"></a>冯诺依曼体系结构提出</h3><p>1946年数学家冯·诺依曼于提出：计算机硬件由运算器、控制器、存储器、输入设备、输出设备组成。</p><center><img src="https://houhaiyun.github.io/img/images/fengnuoyiman-jiegou-1.jpg" title="冯.诺依曼体系结构"></center><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>以运算单元为中心</li><li>采用存储程序原理</li><li>存储器是按地址访问、线性编址的空间</li><li>控制流由指令流产生</li><li>指令由操作码和地址码组成</li><li>数据以二进制编码</li></ol><h3 id="冯·诺伊曼瓶颈"><a href="#冯·诺伊曼瓶颈" class="headerlink" title="冯·诺伊曼瓶颈"></a>冯·诺伊曼瓶颈</h3><p>将CPU与内存分开并非十全十美，反而会导致所谓的冯·诺伊曼瓶颈（von Neumann bottleneck）：在CPU与内存之间的流量（数据传输率）与内存的容量相比起来相当小，在现代电脑中，流量与CPU的工作效率相比之下非常小，在某些情况下（当CPU需要在巨大的数据上运行一些简单指令时），数据流量就成了整体效率非常严重的限制。CPU将会在数据输入或输出内存时闲置。由于CPU速度远大于内存读写速率，因此瓶颈问题越来越严重。</p><h3 id="冯诺依曼"><a href="#冯诺依曼" class="headerlink" title="冯诺依曼"></a>冯诺依曼</h3><center><img src="https://houhaiyun.github.io/img/images/fengnuoyiman-jiegou-2.jpg" title="冯.诺依曼"></center><h4 id="致谢："><a href="#致谢：" class="headerlink" title="致谢："></a>致谢：</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84#.E7.90.86.E8.AB.96" target="_blank" rel="noopener">维基百科：冯·诺伊曼结构</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> 冯.诺依曼体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冯.诺依曼体系结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ABI和API</title>
      <link href="/2017/07/01/Linux-ABI-API/"/>
      <url>/2017/07/01/Linux-ABI-API/</url>
      <content type="html"><![CDATA[<h3 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h3><p>应用二进制接口（英语：<code>application binary interface</code>，缩写为 <code>ABI</code>）描述了应用程序（或者其他类型）和操作系统之间或其他应用程序的低级接口。允许编译好的目标代码在使用兼容<code>ABI</code>的系统中无需改动就能运行。<br><a id="more"></a></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>应用程序接口（英语：<code>Application Programming Interface</code>，简称：<code>API</code>），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。</p><p>API定义了源代码和库之间的接口，因此同样的源代码可以在支持这个API的任何系统中编译。</p><center><img src="https://houhaiyun.github.io/img/images/ABI-API.gif" title="ABI and API"></center><h4 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">维基百科：应用二进制接口</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">维基百科：应用程序接口</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
          <category> ABI和API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABI和API </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
